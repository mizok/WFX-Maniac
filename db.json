{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/font/Roboto.ttf","path":"font/Roboto.ttf","modified":1,"renderable":0},{"_id":"source/assets/images/logo-s.png","path":"assets/images/logo-s.png","modified":1,"renderable":0},{"_id":"source/assets/images/logo-x16.png","path":"assets/images/logo-x16.png","modified":1,"renderable":0},{"_id":"source/assets/images/logo-x32.png","path":"assets/images/logo-x32.png","modified":1,"renderable":0},{"_id":"source/assets/images/logo.png","path":"assets/images/logo.png","modified":1,"renderable":0},{"_id":"source/assets/images/logo.svg","path":"assets/images/logo.svg","modified":1,"renderable":0},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","path":"js/schedule.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_data/css/variables.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1606323705829},{"_id":"source/_data/languages.yml","hash":"7bfe2d25966665ec5d112126422df3baf0456d0d","modified":1606323705830},{"_id":"source/_posts/ES5_ES6學習筆記-ep1.md","hash":"2686d985e812c84750e16970647d23937975286a","modified":1606323705830},{"_id":"source/_posts/ES5_ES6學習筆記-ep2.md","hash":"3ea3d29e2f1ebf51efeda71ed45337a242d127b1","modified":1606323705837},{"_id":"source/_posts/ES5_ES6學習筆記-ep3.md","hash":"499d0333d34f28949ce4fbd79b2fa7034a03142f","modified":1606323705839},{"_id":"source/_posts/ES6學習筆記-Proxy 用途_介紹_使用情境.md","hash":"e1c0b2bca169f8597970aaccff0e005d8088ac2f","modified":1606323705841},{"_id":"source/_posts/Proxy 的功用_實用的點.md","hash":"8861c0435415484c8780de98fa6875f06dac0353","modified":1606323705843},{"_id":"source/_posts/TYPESCRIPT學習筆記-ep1.md","hash":"777608d1ffc30a2132c3c232a51e07260ac4f24d","modified":1606323705845},{"_id":"source/_posts/TYPESCRIPT學習筆記-ep2.5.md","hash":"3cc77618fa430df59c733a06c4e494294657b59f","modified":1606323705847},{"_id":"source/_posts/TYPESCRIPT學習筆記-ep2.md","hash":"9d72b87e626957c6895d44a592227974d2050612","modified":1606323705848},{"_id":"source/_posts/TYPESCRIPT學習筆記-ep3.md","hash":"b7109f9ef259f992aec6dc65b850aaf239307a22","modified":1606323705850},{"_id":"source/_posts/高見龍為自己學 git 學習筆記-ep2.md","hash":"91e6f6885895b56d5c81d43bd54e5eab7cf311d5","modified":1606323705854},{"_id":"source/_posts/高見龍為自己學 git 學習筆記-ep1.md","hash":"53456d894dc12a8e9e940eec7815e6cb5f7889e1","modified":1606323705852},{"_id":"source/_posts/高見龍為自己學 git 學習筆記-ep3.md","hash":"b5b26339bb413ecd640a233aac085bd5d2a35674","modified":1606323705855},{"_id":"source/categories/index.md","hash":"f13ff7f72abc343e95e44d18fb67e70e5754471c","modified":1606323705878},{"_id":"source/js/ripple-logo.js","hash":"56a622f77bce4af40248356864bf58151475d2f3","modified":1606750364649},{"_id":"source/js/silk-wave.js","hash":"3e9db66ca7aaa376044be0f4f5797eea5634fef2","modified":1606754680556},{"_id":"source/tags/index.md","hash":"d7661bebbfddf81890cd69ac4ac22493e05cdf00","modified":1606323705884},{"_id":"source/_data/css/mixins.styl","hash":"6c410b2ffa55a03918e3a8bcb9bdbb13db2cb043","modified":1606323705825},{"_id":"source/_data/css/styles.styl","hash":"af578467f29be7cc298370a41334ba15e3ab4069","modified":1606323705829},{"_id":"source/_data/template/head.njk","hash":"db36d661845c660216c8e143c18c3a9c36c872de","modified":1606755585226},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1604835201565},{"_id":"source/font/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1606675598159},{"_id":"source/assets/images/logo-x16.png","hash":"11b339774b77bc6cf837d02b314ece9e636f0996","modified":1606323705862},{"_id":"source/assets/images/logo-x32.png","hash":"3fbe1420ad48bbf2fd8e8263a1f061cd1defd401","modified":1606323705863},{"_id":"source/.DS_Store","hash":"0778f66dd72ae29cc9bf8adf52e06e220dc326f9","modified":1606675431916},{"_id":"source/assets/images/logo.svg","hash":"c4f96fe23214f2226a394b5c2128b89fd8653757","modified":1606323705877},{"_id":"source/js/tool/canvas-fx-base.js","hash":"e7058c084d2cc57fd865b6abf51230220ce167b9","modified":1606753360105},{"_id":"source/_data/css/styl-plugin/grid-post-layout/main.styl","hash":"72d7b726cdce319ba443ef803f36f4aaa57ca649","modified":1606323705826},{"_id":"source/_data/css/styl-plugin/grid-post-layout/variables.styl","hash":"c29d25243a62a3d2b0416b180bb854fe4256899c","modified":1606592878870},{"_id":"source/_data/css/styl-plugin/grid-post-layout/mixins.styl","hash":"fefb46001b2b6327c4ec02486f9a0b6986b00e0d","modified":1606802144512},{"_id":"source/assets/images/logo.png","hash":"9a88d28b1d0eab65904ed057c89d3f9cfbfae7f8","modified":1606323705864},{"_id":"source/font/Roboto.ttf","hash":"4e63a47d2e8f26886bb414b9eb54b024742d20f2","modified":1322543554000},{"_id":"source/assets/images/logo-s.png","hash":"c7844876b6d3b61c7c9e954b74d62727adbe38c4","modified":1606323705857},{"_id":"node_modules/hexo-theme-next/LICENSE.md","hash":"63ea7df5a8dc1b23cc92ca9de3ed16d53367f360","modified":499162500000},{"_id":"node_modules/hexo-theme-next/README.md","hash":"f373cc6b97311ecfdcc1d2cb279faf6560de1cc6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/_vendors.yml","hash":"744133cdb17c7a91649c343d6e1a05d3d30854b9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/package.json","hash":"665141f1090e6769d2c5edc9ea8f381a5fda142f","modified":1604752910650},{"_id":"node_modules/hexo-theme-next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/LICENSE.txt","hash":"8ef5fc1147c196680b06e1accab80c8d236ab951","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/ar.yml","hash":"7a62243ec54196e3d1bea7364f05aded490bc234","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/de.yml","hash":"dc448f724c7d436233e9567711a09e0d56e60e3b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/en.yml","hash":"48a76170d70ef7c1fac96720bc5064b43061708d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/es.yml","hash":"c3506dfaa771e827ae6adb322477c6e835cd0f09","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/fa.yml","hash":"649823297167b902455c0aec8ddebb462df71c7d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/fr.yml","hash":"8ddfe98e7847ee8f1eaba9119f9fbdc42d7ec120","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/id.yml","hash":"ac018805190bc4bdc06091f5a6444e612fc700b0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/it.yml","hash":"82a93c32b3fcf6517441cdc73f75bc6173beb392","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/ja.yml","hash":"fec1e1c15ad2df7ed1249173cc719ccba6d3b842","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/ko.yml","hash":"8342df2f4190ba4ee004b70d1d6ccd341033dbe7","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/nl.yml","hash":"0d3b56613197cb190900311507535db41daec7d4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/pt-BR.yml","hash":"47daeaa23c4db073e77761c9a6f62d3932af06ec","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/pt.yml","hash":"e0e2675261e2e80f7ce7d19c945c08217b068d81","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/ru.yml","hash":"fdf5c623890db24cb56ab5ffe0c49db3542477c8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/tr.yml","hash":"54de3d8d85e3c7b14b163c3d322411b7301a09b3","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/uk.yml","hash":"1c9a0b8d8160c77cc62064207d57f460f365cae9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/vi.yml","hash":"1f9657b58e11db21f93eb895c90123b8f91751a7","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/zh-CN.yml","hash":"6f7c742316c96d5b71da50fddfb060ff7ec1ea99","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/zh-HK.yml","hash":"149fccd0afdbc8db76e372cbc73d7b5f07bb7515","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/zh-TW.yml","hash":"d534f321ee0c235e1ebfea383eb1892bbd7d7e95","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_layout.njk","hash":"bf7e6ca826b6c3f85e14da61d56d7b836d2414c4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/archive.njk","hash":"08885f48d5878c92c910f8c41e3209eb07b9b80e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/category.njk","hash":"434fc2b27120ebae91522002eb40e16f2158bd4f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/index.njk","hash":"d8fa14549fa061e7bdba4ec1472cb45ecea96382","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/page.njk","hash":"4f8f377e4f5511e27de1c2e4a1c13374b6a5d9bd","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/post.njk","hash":"6abeb85fb3e4c382ed4bb6049b12a807e6226e67","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/tag.njk","hash":"09075c80b53b06826e7eb9ce838bca9dc363fac1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/renderer.js","hash":"c53dbede2ad5f68d7349bc5ed8ac7157d723e987","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/ru/README.md","hash":"6da6d8e75eab558630b7c6a2e5a80dc981362f47","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"0e204dde6d21f100cba6ca7751de71848490759e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"8ee5ca39ac4a372a5c0f16e344bbe578af4aeae4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/README.md","hash":"b5adf2afa918e2eb1000d63e0d8928a524829a35","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_macro/post-collapse.njk","hash":"1a30d751871dabfa80940042ddb1f77d07d830b9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_macro/post.njk","hash":"0a6e47fc04d211c416e00119011f7614d98c31cf","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_macro/sidebar.njk","hash":"c0a843a3019f0bb8f2e734dc173028ead732b3c0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/comments.njk","hash":"334e8d8117a46c8c097788811322a62627952219","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/footer.njk","hash":"44060deff92a8fe331548dafeb27e5c188a8a6c2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/languages.njk","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/pagination.njk","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/widgets.njk","hash":"24eb5b683310810f93c1d7f68f8f70f1a29fd217","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_scripts/index.njk","hash":"48cbbca0e4f97b8c25f2a5c408071603cd257a65","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_scripts/noscript.njk","hash":"4f250d0bf80be06dd2c95c1d4c2ba2624b59cf2a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_scripts/pjax.njk","hash":"28a3bcb1ce50924a5a48b0f3756ac3a8736867f1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_scripts/vendors.njk","hash":"bada07da2a47ed6de6081796367b19dd9e906cfb","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/baidu-push.njk","hash":"8627c8c8b031ecee16c522433b66fa4d6979b8ea","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/index.njk","hash":"4ca039707745c6a22615741b7411ff2cb0763e6d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/nprogress.njk","hash":"271139c3896a6d294f46f767cb21b2e848050841","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/quicklink.njk","hash":"294b7f6a4fa566e369d8be0ce7b28f35b6c14563","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/rating.njk","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/index.js","hash":"89091bc943cd8b8c63b8af3d26fb0a027048e9ba","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/locals.js","hash":"fa1e558f058f93455acdd553ab1be30b26f137e4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/minify.js","hash":"be0574c64a38210e449c99d38a760452015060a3","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/post.js","hash":"bac5646993153f9f6a630c9f0052bb17fa760a9c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/engine.js","hash":"248c1b9c858dcd4632e96eb4c31a17402220f188","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/font.js","hash":"9cf01a3cf62d9b5a1a0db8145088774bf94045c8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-config.js","hash":"cff5f7f4d4c68499cfbf9890d4656156bd0ea1db","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-url.js","hash":"577c510374cf9bcfa8d3a1027e42411a9324805e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-vendors.js","hash":"afdd6a188a74c188f0dd154fac70efd4080ca262","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/group-pictures.js","hash":"9836e3212f889e94ada4c354c7b83f7d7caa9aa7","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/index.js","hash":"17f9451ce1f10f78437f52218757d38d4e1591b0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/link-grid.js","hash":"9e2c58d1a4d1dd84fa86144e5b4576b2fd10a37f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/mermaid.js","hash":"464effc08e757ce8e1bb094707d06ad829af9d62","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/note.js","hash":"05be417a17385a31e1a021e1a54b15046cfd8408","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/pdf.js","hash":"27129fc4014d723ba93ac77b11342da2ee445d96","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/tabs.js","hash":"2bf00d56b3b289a7dd27e9b5820430a2457a19f3","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_colors.styl","hash":"b37f9847d2f95632e911df670b51921a7d748068","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_mixins.styl","hash":"b9c3d3087a917c94cf34ffd6621528d377af8fc9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","hash":"766d406beffa0c2cdbd64518262286baaeb8ec3b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/algolia-search.js","hash":"a6f78c4cfffa976e4b8043e3486ce99aaba02bda","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","hash":"e45e1fbb7c6d645e9c410759486216e570d02bef","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/local-search.js","hash":"9f4fe7bbe0f16be72d26ccb8b22bd33767f83cff","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","hash":"da67f3eed604dcdc4e89280c9db69fe1f62818e9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","hash":"ababd67895ce49049271601c6928fce56a1c6bbb","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","hash":"bc4217f9779b81c0f56de985c46d73c21d3992d5","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head-unique.njk","hash":"37bdf020591feb0cf72327c9efd755bf78a0afd6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head.njk","hash":"e8a73353f1343d2354b1612bf9dbb3b41085a8ed","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/brand.njk","hash":"c082a16163d1fb5d7cf858fb7522fca9d18f1ba6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/index.njk","hash":"53895b3af95667edc5bf5d7356f8a2b4fe091447","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu-item.njk","hash":"61eec1fb84711369b9dabd1d2cae64858844c2eb","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu.njk","hash":"c9390824b57f23b7c8a5c23a9834514123673766","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/sub-menu.njk","hash":"75a158a5b54a3a76ee6590f5e0e2dd4a9f0be869","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/breadcrumb.njk","hash":"edb3bb6d644b7407673c5ef3a426a244e98fcf89","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/page-header.njk","hash":"789915339a6234d6dd7c710cc1f8e728d9b81d35","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/schedule.njk","hash":"9d650333160ad1977fe42d9770869ff1660a95fe","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-copyright.njk","hash":"133942922e34abae9e4de7ea5591d77c0caa4b37","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-followme.njk","hash":"154df0bb323c332d8c25343f258ee865e5553423","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-footer.njk","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-meta.njk","hash":"fbdb5cdbd80970f201f5c75369eaa00aea369235","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-related.njk","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-reward.njk","hash":"a9bb52d0537d27cfe670d80e716da6780786ab8a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/algolia-search.njk","hash":"c2ccaac9caeea1a43dc31f4f8368f8f548aab0af","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/index.njk","hash":"b7a66a465e897c27624f0c441375c95c4cb7a5aa","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/localsearch.njk","hash":"90156f42d6e6e326ed38482d6623a0aac0352016","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/sidebar/site-overview.njk","hash":"c419158e19805e2db614a5f5651e3e534e4a5e4e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.njk","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/google-analytics.njk","hash":"ad197fd728dd7ac90f910fdf80ce848eab3ff187","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/growingio.njk","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/index.njk","hash":"d87df68dff14cfb4d91a77230cd1ac795c2a22d5","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/chatra.njk","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/tidio.njk","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/changyan.njk","hash":"5c2cd9b6f02bcb6248d3f18638a58e329fe8c0d1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqus.njk","hash":"cc1450d62d76e59968bdd25836694b8339207384","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqusjs.njk","hash":"54eab4840443262432ec7c47e56e9859ace2a902","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/gitalk.njk","hash":"ec0474e23ca122b34858ffb0bb8c99f241749c61","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/livere.njk","hash":"6252b0353c6a36d03c68ebec1073293442221bd1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/valine.njk","hash":"72d7abe567fab181725d120cb27eb6a6379611ea","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/index.njk","hash":"b0efe26601037e621b5cb16f0fe2f347ee27acdb","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/katex.njk","hash":"b6746dfad32cc8a46ff8f4194a7a16ca41744803","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/mathjax.njk","hash":"a8239f99b316e6c060bad8173be3a25c67138697","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/algolia-search.njk","hash":"97035261aa85c7d39c6ce1211cdefc6248c0446d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/localsearch.njk","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/swiftype.njk","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/cnzz-analytics.njk","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/firestore.njk","hash":"8635b13aa1092c22252af4743fa194272f089b59","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/index.njk","hash":"8b956fb56284e8fa4a4731b1efd1f25e1b2b4a78","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/lean-analytics.njk","hash":"811a3ad58c0a15550100bdc199bef8add1ad526c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/mermaid.njk","hash":"007da98b913a62946c03a87f8fa25b3db856caa1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/pdf.njk","hash":"67d80a57f6b2cf23d56276ca8f30f25e3e8707e9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/config.js","hash":"545ebbd9f5aeb9f7a8e23737664c1f7d701275e1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/injects.js","hash":"7b0ea8d28ced63977dc6539920eb044b1098adcb","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/utils.js","hash":"e227174a8ebab8d5b6e8e26faf4fd66c43f045ca","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/vendors.js","hash":"f76c7e13fc4304f86260068c9d83d3477b64ee4b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/changyan.js","hash":"199fa9a70914d0019cf0e47f55491183d53d1533","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqus.js","hash":"a9b18b7447cd5a56cb692c574463a27356eb7fa6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqusjs.js","hash":"7b8ce8e9a71cf083f5337fb7c9586be8f7c316e8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/gitalk.js","hash":"387e59cd396c62fe095b388c8ff8d4191cfbdeb9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/livere.js","hash":"1198cb63375a53400431c2e65e3361416cdf8eb6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/valine.js","hash":"c67984fc868d4799b3aa6d3b3cd060e5260b3a98","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Mist.styl","hash":"77dddb398fb1beefc2b824bec7b094030fdc3df9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"c65536a128b9bc9dbe2fbb1b235a3cded2891002","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_variables/base.styl","hash":"efbeee48d208a3960b4e352fab3feb2b2dab7ef8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","hash":"d7a6c12bb534810eb748d0ba28aff67cccf0bb3f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d4809783ded05625675b1b4bbd9e99d7f5f7d7f9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"92915560810c0311dada43ed629b8fc4ff0fc7a4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/components.styl","hash":"1c75a837faae9aa2d0a5f30d2078aa8d2ccc2552","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/reading-progress.styl","hash":"ee8fb8348aa76a9b346927ba4cae5666d8d777f7","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/mobile.styl","hash":"28368ac06d04ccf0bbf3dc9e0dfcf341c200b28c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/outline.styl","hash":"0c9f72ad98807521cbdcee7b5bbe2e884311db39","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"ea96e86b6bcb160351c18a7edc4a561918a820cb","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/pagination.styl","hash":"a472fb1afc6486266b85f773501a290e0a80c370","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"e1c85ab2831fd7d4bb84aea1850a0160be0023e8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/toggles.styl","hash":"572a41499391677d84b16d8dbd6a996a3d5ce041","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"7ad04d5a02a7618ebb09c1d5a435d46c4df2c620","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"06786e1ed8774f8f08cbfc711296cf189aaf1b8c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"f6d165dae928c12bde3f271d299a93b334116433","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_layout.styl","hash":"5604ac1e161099a4d3e5657d53507268866dc717","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_posts-expand.styl","hash":"faadd1616a18d626f145e9fbdbfb770deab35b2c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_header.styl","hash":"06080fd963c904d96c00eff098a284e337953013","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"82a29572dd90451f75358a2ee2522b87304a0bb8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"c706733f5196776fe2657a9bebe0a727cf8fe8e5","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"6eee86c8f0175d6c09e434053516cd8556f78d44","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sidebar.styl","hash":"a57dca7008b1f4721359a2a3b420ed2eec02b0a1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_header.styl","hash":"be5c46b983df08b9dbac1b4749b1a101b54b6b50","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"031765bd4564d97ba694c1b73615ed631f1c64aa","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"c435cfd858bf82726fff2c85d384e2207bea0370","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"78f0b6edc296a9ed5144da9f9752c0b96bebfaa5","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"19fc5ca0784f5d2befddb9d8bc463b916c5c2518","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-body.styl","hash":"5d61dedb3bec1021d52894f9b379e4d0953f6a35","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"8998a07acf0dbd10811835c8dfc91d92e680bcae","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-followme.styl","hash":"76d0dfb3a8b873a6180604ac6daecf38b6a963a2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-footer.styl","hash":"8a2e724df3d5cd14765eb951f0a9e1dba399fd35","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-header.styl","hash":"d6ecc5dfd15c588782ba5e1df9f915b305622aef","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"cf6540e12c2de5befcfb7e92d915e3b75fd53dfa","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"27001ad06f69ff035639210ab2f614861b21a4f4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post.styl","hash":"b3fa752f72ca1413289b76c56fbd33a00e3d25d7","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/footer/footer.styl","hash":"f11dca93e334b68a29e792f7abe682993fab7568","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"48ee817d05ddc788423d7f10e9823e23fda81d04","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/search.styl","hash":"2896840ab8ac8ab2a7f76d18df893f290ac31625","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/related-posts.styl","hash":"2c534d2b2dbc932ad65d335a720a7ba9612bac04","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/third-party.styl","hash":"5d8fc91cdb7ee313eb367dcec7d5b2429f98242f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/bookmark.styl","hash":"8cb89864e8245a356d08ef0fee3133810f646fea","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/github-banner.styl","hash":"254e781e7b25e31a1a589c8b38dc608802f1cc6e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/header.styl","hash":"f1778d2c56974b96dae429456d5c55be325c4946","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/menu.styl","hash":"6d8afd8e23c40bb2b2a2edbe4eb0d2671cd81188","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-meta.styl","hash":"a83a1236564b81eab9a23dba9a634a6de90d4726","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-nav.styl","hash":"9c8abc55c9d94d384a245013951aba5ecca2f4fe","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"66782e68f1c74a7d0aecef20e2ca16bbe6b52592","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"9950c3188a28e1c63b5498b7bdcd14b12ace3e28","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"ab715dbf2b98bfeb5e7b7c43e92e5c02496cc2ea","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"f7ff85fe6c4efb8ff036fab2c3277b7d8bed69a8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"521b36ea7bb3a843029cbfbb6b5e76e91c40a19f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"432e73bc4f99322af6af1852e0ea6e674919c31a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar.styl","hash":"3378f4d1640033ebde25798f602fddf88f3dcadd","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"469855a72d2c2b63a21df8fbcb8cc41d32cb9bde","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"83ee4993710fc8daa1c8dbfccd5d5091fd244c30","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"920f21dc03b28f006aef7e9d0fd444c2cd283efc","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/site-state.styl","hash":"497fc002d7415d9bed8cad26ba74ac66045397b7","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"15a5e273a8137550c93c8d2a60f9fcf86e04a89e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/label.styl","hash":"f09bc97e3681d73c38d7d3c5c271486c2c6537e2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"acfdec45e56cdd6a5ea61e0154f8a6d1bc068214","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/note.styl","hash":"29bef220307d86b1eafbb3714381df32d48b5a60","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"3c029a003e9bf747e1b9cc7c0c127f6028374876","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/tabs.styl","hash":"dcf426c2a4836386c0c27235de3f9a95c5de67cc","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/tags.styl","hash":"cef4e779473daa3761709958243c6b8a57bbd814","modified":499162500000},{"_id":"node_modules/hexo-theme-next/_config.yml","hash":"94efd456f88f80e75be35eedd914bd4379e75dba","modified":499162500000},{"_id":"public/js/ripple-logo.js","hash":"56a622f77bce4af40248356864bf58151475d2f3","modified":1606802191365},{"_id":"public/js/silk-wave.js","hash":"3e9db66ca7aaa376044be0f4f5797eea5634fef2","modified":1606802191365},{"_id":"public/js/tool/canvas-fx-base.js","hash":"e7058c084d2cc57fd865b6abf51230220ce167b9","modified":1606802191365},{"_id":"public/search.xml","hash":"5e2fd5a3d66938af70ff09db7bc7780e70bbdb11","modified":1606802191365},{"_id":"public/categories/index.html","hash":"ad1417212b5c60915db74a26e923150861ebd5f4","modified":1606802191365},{"_id":"public/tags/index.html","hash":"9c81325c1fcb0010d0b2f56339a1e4134d998764","modified":1606802191365},{"_id":"public/2020/11/26/ES5_ES6學習筆記-ep3/index.html","hash":"d1c8910071b2982a82ce2a8f383a5121940d39ec","modified":1606802191365},{"_id":"public/archives/page/2/index.html","hash":"1f38111fe9dcb625967d63ac7526a25d04b27e47","modified":1606802191365},{"_id":"public/archives/2020/page/2/index.html","hash":"733d74c791d8fbc07ad895e6e29857ff9ddebd5a","modified":1606802191365},{"_id":"public/archives/2020/11/page/2/index.html","hash":"cd4924e5ed9529b4820316821d6689423c247911","modified":1606802191365},{"_id":"public/categories/心得/page/2/index.html","hash":"8d93dbc1dafc85002eb7e9b31b4bc9e05016849f","modified":1606802191365},{"_id":"public/tags/js/index.html","hash":"ffdd8c8bc2ce55bfa20a9848bca13ee9766d6bd4","modified":1606802191365},{"_id":"public/tags/ts/index.html","hash":"48132dc2c38e4a24b5ded0a03045724ff2c9e1b9","modified":1606802191365},{"_id":"public/tags/git/index.html","hash":"da69d93b6c4821ce7e47ed84145e3b3095338f0f","modified":1606802191365},{"_id":"public/2020/11/26/高見龍為自己學 git 學習筆記-ep3/index.html","hash":"4645cb46b520823a0765e0c042cfb24a59232514","modified":1606802191365},{"_id":"public/2020/11/26/高見龍為自己學 git 學習筆記-ep2/index.html","hash":"4707a39832e9957e30d209d3152e1186c6f05daf","modified":1606802191365},{"_id":"public/2020/11/26/高見龍為自己學 git 學習筆記-ep1/index.html","hash":"bfe1c7cefda5dc659ff6416b16e6ca969b8ce6a0","modified":1606802191365},{"_id":"public/2020/11/26/TYPESCRIPT學習筆記-ep3/index.html","hash":"a0a04fce0b4a9413bd19072d513918acf93d0946","modified":1606802191365},{"_id":"public/2020/11/26/TYPESCRIPT學習筆記-ep2/index.html","hash":"cda1e517c49b3560937ce81059008beeea3db89f","modified":1606802191365},{"_id":"public/2020/11/26/TYPESCRIPT學習筆記-ep2.5/index.html","hash":"addc2e4a4fae39be0595e2ccd3e2973d963f9a9a","modified":1606802191365},{"_id":"public/2020/11/26/TYPESCRIPT學習筆記-ep1/index.html","hash":"1c3a390e156cb3a0f3d922a81d97621c8a14df42","modified":1606802191365},{"_id":"public/2020/11/26/Proxy 的功用_實用的點/index.html","hash":"7d86bc6e50a393bf4c3f3538a3187ec06f91366f","modified":1606802191365},{"_id":"public/2020/11/26/ES6學習筆記-Proxy 用途_介紹_使用情境/index.html","hash":"28ddc4e8ba03b8778c7d1755ab26fbd3f404bde1","modified":1606802191365},{"_id":"public/2020/11/26/ES5_ES6學習筆記-ep2/index.html","hash":"4b19afe52e0e7b40c7e79a36036dd2f028c36c9d","modified":1606802191365},{"_id":"public/2020/11/26/ES5_ES6學習筆記-ep1/index.html","hash":"009ab4af6c2ef972fccea27728b06114cb4ca959","modified":1606802191365},{"_id":"public/archives/index.html","hash":"18946da2dadacf608e7b536fef8e332d715a2b1c","modified":1606802191365},{"_id":"public/archives/2020/index.html","hash":"d4ce3dec36ec5ad5544dcf7971e8fe4597212e45","modified":1606802191365},{"_id":"public/archives/2020/11/index.html","hash":"2c8e45bfa47be91c871a2843a72f7a243fde5223","modified":1606802191365},{"_id":"public/categories/心得/index.html","hash":"17e57e9eb2acc5623a933cd68c4813a89ea2e797","modified":1606802191365},{"_id":"public/index.html","hash":"f5e2df7c57f93acebcea8dbe6e0f7ca3e3c17dc2","modified":1606802191365},{"_id":"public/page/2/index.html","hash":"ff91c80c208e7d85f286cb36e04d99f2cdd36bb8","modified":1606802191365},{"_id":"public/assets/images/logo-x16.png","hash":"11b339774b77bc6cf837d02b314ece9e636f0996","modified":1606802191365},{"_id":"public/assets/images/logo-x32.png","hash":"3fbe1420ad48bbf2fd8e8263a1f061cd1defd401","modified":1606802191365},{"_id":"public/assets/images/logo.png","hash":"9a88d28b1d0eab65904ed057c89d3f9cfbfae7f8","modified":1606802191365},{"_id":"public/assets/images/logo.svg","hash":"c4f96fe23214f2226a394b5c2128b89fd8653757","modified":1606802191365},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1606802191365},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1606802191365},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1606802191365},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1606802191365},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1606802191365},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1606802191365},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1606802191365},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1606802191365},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1606802191365},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1606802191365},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1606802191365},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1606802191365},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1606802191365},{"_id":"public/assets/images/logo-s.png","hash":"c7844876b6d3b61c7c9e954b74d62727adbe38c4","modified":1606802191365},{"_id":"public/font/Roboto.ttf","hash":"4e63a47d2e8f26886bb414b9eb54b024742d20f2","modified":1606802191365},{"_id":"public/js/algolia-search.js","hash":"a6f78c4cfffa976e4b8043e3486ce99aaba02bda","modified":1606802191365},{"_id":"public/js/bookmark.js","hash":"e45e1fbb7c6d645e9c410759486216e570d02bef","modified":1606802191365},{"_id":"public/js/local-search.js","hash":"9f4fe7bbe0f16be72d26ccb8b22bd33767f83cff","modified":1606802191365},{"_id":"public/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1606802191365},{"_id":"public/js/next-boot.js","hash":"da67f3eed604dcdc4e89280c9db69fe1f62818e9","modified":1606802191365},{"_id":"public/js/schedule.js","hash":"ababd67895ce49049271601c6928fce56a1c6bbb","modified":1606802191365},{"_id":"public/js/utils.js","hash":"bc4217f9779b81c0f56de985c46d73c21d3992d5","modified":1606802191365},{"_id":"public/js/schemes/muse.js","hash":"d7a6c12bb534810eb748d0ba28aff67cccf0bb3f","modified":1606802191365},{"_id":"public/css/main.css","hash":"87d0926504eb4276aa3a7ef3b08eec530fee19c7","modified":1606802191365}],"Category":[{"name":"心得","_id":"cki5kjebp0004xdvdbkth2foy"}],"Data":[{"_id":"css/variables","data":""},{"_id":"languages","data":{"zh-TW":{"title":{"archive":"時間線","category":"分類","tag":"標籤","schedule":"時間表"},"menu":{"home":"首頁","archives":"時間線","categories":"分類","tags":"標籤","about":"關於","search":"搜尋","schedule":"時間表","sitemap":"網站地圖","commonweal":"公益 404"},"sidebar":{"overview":"本站概要","toc":"文章目錄"},"post":{"posted":"發表於","edited":"更新於","created":"創建時間","modified":"修改時間","edit":"編輯","in":"分類於","read_more":"閱讀全文","untitled":"未命名","sticky":"置頂文","views":"閱讀次數","related_posts":"相關文章","copyright":{"author":"作者","link":"文章連結","post_author":"Written by","post_link":"This article originally appeared on","license_title":"版權聲明","license_content":"本網誌所有文章除特別聲明外，均採用 %s 許可協議。轉載請註明出處！"}},"footer":{"powered":"","total_views":"總瀏覽次數","total_visitors":"訪客總數"},"counter":{"tag_cloud":{"zero":"目前還沒有任何標籤","one":"目前共有 1 個標籤","other":"目前共有 %d 個標籤"},"categories":{"zero":"目前還沒有任何分類","one":"目前共有 1 個分類","other":"目前共有 %d 個分類"},"archive_posts":{"zero":"目前還沒有任何文章。","one":"目前共有 1 篇文章。","other":"目前共有 %d 篇文章。"}},"state":{"posts":"文章","tags":"標籤","categories":"分類"},"search":{"placeholder":"搜尋...","empty":"We didn't find any results for the search: %s","hits_time":"%s results found in %s ms","hits":"%s results found"},"cheers":{"um":"嗯..","ok":"還不錯","nice":"好","good":"很好","great":"非常好","excellent":"棒棒Der"},"keep_on":"繼續努力。","symbol":{"comma":"，","period":"。","colon":"："},"reward":{"donate":"捐贈","wechatpay":"微信支付","alipay":"支付寶","paypal":"貝寶","bitcoin":"比特幣"},"follow_me":{"welcome":"歡迎關注我的其它站點"},"accessibility":{"nav_toggle":"切換導航欄","prev_page":"上一頁","next_page":"下一頁"},"symbols_count_time":{"count":"文章字數","count_total":"總字數","time":"所需閱讀時間","time_total":"所需總閱讀時間","time_minutes":"分鐘"}}}},{"_id":"css/mixins","data":""},{"_id":"css/styles","data":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n"},{"_id":"template/head","data":"<script src=\"//js/tool/canvas-fx-base.js\"></script>\n\n<script src=\"//js/ripple-logo.js\"></script>\n<script src=\"//js/silk-wave.js\"></script>\n\n<style>\n  @font-face {\n  font-family: \"Roboto\";\n  src: url(//font/Roboto.ttf) format(\"truetype\");\n}\n</style>"},{"_id":"css/styl-plugin/grid-post-layout/main","data":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n"},{"_id":"css/styl-plugin/grid-post-layout/mixins","data":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n"},{"_id":"css/styl-plugin/grid-post-layout/variables","data":""}],"Page":[{"title":"categories","date":"2020-11-11T16:14:07.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-11-12 00:14:07\ntype: \"categories\"\n---\n","updated":"2020-11-25T17:01:45.878Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cki5kjebi0000xdvd4d1ccnal","content":"","site":{"data":{"css/variables":"","languages":{"zh-TW":{"title":{"archive":"時間線","category":"分類","tag":"標籤","schedule":"時間表"},"menu":{"home":"首頁","archives":"時間線","categories":"分類","tags":"標籤","about":"關於","search":"搜尋","schedule":"時間表","sitemap":"網站地圖","commonweal":"公益 404"},"sidebar":{"overview":"本站概要","toc":"文章目錄"},"post":{"posted":"發表於","edited":"更新於","created":"創建時間","modified":"修改時間","edit":"編輯","in":"分類於","read_more":"閱讀全文","untitled":"未命名","sticky":"置頂文","views":"閱讀次數","related_posts":"相關文章","copyright":{"author":"作者","link":"文章連結","post_author":"Written by","post_link":"This article originally appeared on","license_title":"版權聲明","license_content":"本網誌所有文章除特別聲明外，均採用 %s 許可協議。轉載請註明出處！"}},"footer":{"powered":"","total_views":"總瀏覽次數","total_visitors":"訪客總數"},"counter":{"tag_cloud":{"zero":"目前還沒有任何標籤","one":"目前共有 1 個標籤","other":"目前共有 %d 個標籤"},"categories":{"zero":"目前還沒有任何分類","one":"目前共有 1 個分類","other":"目前共有 %d 個分類"},"archive_posts":{"zero":"目前還沒有任何文章。","one":"目前共有 1 篇文章。","other":"目前共有 %d 篇文章。"}},"state":{"posts":"文章","tags":"標籤","categories":"分類"},"search":{"placeholder":"搜尋...","empty":"We didn't find any results for the search: %s","hits_time":"%s results found in %s ms","hits":"%s results found"},"cheers":{"um":"嗯..","ok":"還不錯","nice":"好","good":"很好","great":"非常好","excellent":"棒棒Der"},"keep_on":"繼續努力。","symbol":{"comma":"，","period":"。","colon":"："},"reward":{"donate":"捐贈","wechatpay":"微信支付","alipay":"支付寶","paypal":"貝寶","bitcoin":"比特幣"},"follow_me":{"welcome":"歡迎關注我的其它站點"},"accessibility":{"nav_toggle":"切換導航欄","prev_page":"上一頁","next_page":"下一頁"},"symbols_count_time":{"count":"文章字數","count_total":"總字數","time":"所需閱讀時間","time_total":"所需總閱讀時間","time_minutes":"分鐘"}}},"css/mixins":"","css/styles":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","template/head":"<script src=\"//js/tool/canvas-fx-base.js\"></script>\n\n<script src=\"//js/ripple-logo.js\"></script>\n<script src=\"//js/silk-wave.js\"></script>\n\n<style>\n  @font-face {\n  font-family: \"Roboto\";\n  src: url(//font/Roboto.ttf) format(\"truetype\");\n}\n</style>","css/styl-plugin/grid-post-layout/main":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","css/styl-plugin/grid-post-layout/mixins":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n","css/styl-plugin/grid-post-layout/variables":""}},"excerpt":"","more":""},{"_content":"const RIPPLE_LOGO_DEFAULT = {\n  title: 'title', // 標題\n  points: 3, // 總波紋數量\n  maxBorder: 4, // 波紋最大線寬\n  lineColor: 'white', // 波紋顏色\n  fillColor: 'rgba(255,255,255,.25)', // 波紋有填充時的顏色\n  fadeInSpan: 500, // 波紋淡入時的耗時\n  lifeSpan: 5000, // 波紋淡入到淡出至0的總耗時\n  maxSize: 750, // 波紋最大尺寸\n  minRate: 0.5, // 波紋最小尺寸倍率（取最大尺寸浮點百分比）\n  randomFill: true, // 是否隨機填充\n  radiusMetaRate: 10, // 波紋半徑擴張速度\n  speedMetaRate: 0.5, // 波紋中心點位移速度\n  globalAlpha: 0.35 // 波紋透明度\n}\n\nclass RippleLogo extends CanvasFxBase {\n  constructor(\n    ele, config\n  ) {\n    super(ele, config, RIPPLE_LOGO_DEFAULT);\n    this.pool = [];\n    this.init();\n  }\n  init() {\n    super.init();\n\n    window.addEventListener('resize', super.debounce(() => {\n      this.drawAll();\n    }, 500));\n\n    for (let i = 0; i < this.points; i++) {\n      const isFill = i % 2 === 0 && this.randomFill;\n      const newPulse = this.createPulse(isFill, this.radiusMetaRate, this.speedMetaRate);\n      this.pool.push(newPulse);\n    }\n    this.drawAll();\n  }\n  drawAll() {\n    this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n    this.pool.forEach((ele) => {\n      ele.draw();\n    });\n    cancelAnimationFrame(this.loop);\n    this.loop = window.requestAnimationFrame(() => {\n      this.pulseMeta();\n      this.drawAll();\n    });\n    this.ctx.save();\n    this.ctx.globalAlpha = 1;\n    this.drawTitle();\n    this.ctx.restore();\n  }\n  drawTitle() {\n    this.ctx.textAlign = 'center';\n    this.ctx.font = `${this.canvasWidth / 7.2}px Roboto`;\n    this.ctx.textBaseline = 'middle';\n    this.ctx.fillStyle = \"grey\";\n    this.ctx.fillText(this.title, this.canvasWidth / 2, this.canvasHeight / 2);\n  }\n  pulseMeta() {\n    this.pool.forEach((ele, i) => {\n      ele.radius += .5;\n      ele.center.x += ele.speedX;\n      ele.center.y += ele.speedY;\n      if (ele.life <= this.fadeInSpan / 16) {\n        ele.opacity += this.globalAlpha / (this.fadeInSpan / 16);\n        ele.life += 1;\n      }\n      else {\n        if (ele.opacity < 0) {\n          const isFill = i % 2 === 0 && this.randomFill;\n          const newPulse = this.createPulse(isFill, this.radiusMetaRate, this.speedMetaRate);\n          this.pool[i] = newPulse;\n        }\n        else {\n          ele.opacity -= this.globalAlpha * 16 / (this.lifeSpan);\n        }\n      }\n    });\n  }\n  createPulse(isFill, radiusMetaRate, speedMetaRate) {\n    const $this = this;\n    const pulse = {\n      center: {\n        x: $this.canvasWidth * Math.random(),\n        y: $this.canvasHeight * Math.random()\n      },\n      speedX: (Math.random() > 0.5 ? 1 : -1) * Math.random() * speedMetaRate,\n      speedY: (Math.random() > 0.5 ? 1 : -1) * Math.random() * speedMetaRate,\n      radiusMeta: (Math.random() > 0.5 ? 1 : -1) * radiusMetaRate * Math.random(),\n      borderWidth: $this.maxBorder * Math.random(),\n      lifeSpan: $this.lifeSpan,\n      life: 0,\n      opacity: 0,\n      radius: $this.maxSize * (Math.random() > $this.minRate ? Math.random() : $this.minRate) / 2,\n      draw() {\n        $this.ctx.beginPath();\n        $this.ctx.lineWidth = this.borderWidth;\n        $this.ctx.strokeStyle = $this.lineColor;\n        $this.ctx.fillStyle = $this.fillColor;\n        $this.ctx.globalAlpha = this.opacity;\n        $this.ctx.arc(this.center.x, this.center.y, this.radius, 0, Math.PI * 2, true);\n        if (isFill) {\n          $this.ctx.fill();\n        }\n        else {\n          $this.ctx.stroke();\n        }\n        $this.ctx.closePath();\n      }\n    };\n    return pulse;\n  }\n}\n\n\n","source":"js/ripple-logo.js","raw":"const RIPPLE_LOGO_DEFAULT = {\n  title: 'title', // 標題\n  points: 3, // 總波紋數量\n  maxBorder: 4, // 波紋最大線寬\n  lineColor: 'white', // 波紋顏色\n  fillColor: 'rgba(255,255,255,.25)', // 波紋有填充時的顏色\n  fadeInSpan: 500, // 波紋淡入時的耗時\n  lifeSpan: 5000, // 波紋淡入到淡出至0的總耗時\n  maxSize: 750, // 波紋最大尺寸\n  minRate: 0.5, // 波紋最小尺寸倍率（取最大尺寸浮點百分比）\n  randomFill: true, // 是否隨機填充\n  radiusMetaRate: 10, // 波紋半徑擴張速度\n  speedMetaRate: 0.5, // 波紋中心點位移速度\n  globalAlpha: 0.35 // 波紋透明度\n}\n\nclass RippleLogo extends CanvasFxBase {\n  constructor(\n    ele, config\n  ) {\n    super(ele, config, RIPPLE_LOGO_DEFAULT);\n    this.pool = [];\n    this.init();\n  }\n  init() {\n    super.init();\n\n    window.addEventListener('resize', super.debounce(() => {\n      this.drawAll();\n    }, 500));\n\n    for (let i = 0; i < this.points; i++) {\n      const isFill = i % 2 === 0 && this.randomFill;\n      const newPulse = this.createPulse(isFill, this.radiusMetaRate, this.speedMetaRate);\n      this.pool.push(newPulse);\n    }\n    this.drawAll();\n  }\n  drawAll() {\n    this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n    this.pool.forEach((ele) => {\n      ele.draw();\n    });\n    cancelAnimationFrame(this.loop);\n    this.loop = window.requestAnimationFrame(() => {\n      this.pulseMeta();\n      this.drawAll();\n    });\n    this.ctx.save();\n    this.ctx.globalAlpha = 1;\n    this.drawTitle();\n    this.ctx.restore();\n  }\n  drawTitle() {\n    this.ctx.textAlign = 'center';\n    this.ctx.font = `${this.canvasWidth / 7.2}px Roboto`;\n    this.ctx.textBaseline = 'middle';\n    this.ctx.fillStyle = \"grey\";\n    this.ctx.fillText(this.title, this.canvasWidth / 2, this.canvasHeight / 2);\n  }\n  pulseMeta() {\n    this.pool.forEach((ele, i) => {\n      ele.radius += .5;\n      ele.center.x += ele.speedX;\n      ele.center.y += ele.speedY;\n      if (ele.life <= this.fadeInSpan / 16) {\n        ele.opacity += this.globalAlpha / (this.fadeInSpan / 16);\n        ele.life += 1;\n      }\n      else {\n        if (ele.opacity < 0) {\n          const isFill = i % 2 === 0 && this.randomFill;\n          const newPulse = this.createPulse(isFill, this.radiusMetaRate, this.speedMetaRate);\n          this.pool[i] = newPulse;\n        }\n        else {\n          ele.opacity -= this.globalAlpha * 16 / (this.lifeSpan);\n        }\n      }\n    });\n  }\n  createPulse(isFill, radiusMetaRate, speedMetaRate) {\n    const $this = this;\n    const pulse = {\n      center: {\n        x: $this.canvasWidth * Math.random(),\n        y: $this.canvasHeight * Math.random()\n      },\n      speedX: (Math.random() > 0.5 ? 1 : -1) * Math.random() * speedMetaRate,\n      speedY: (Math.random() > 0.5 ? 1 : -1) * Math.random() * speedMetaRate,\n      radiusMeta: (Math.random() > 0.5 ? 1 : -1) * radiusMetaRate * Math.random(),\n      borderWidth: $this.maxBorder * Math.random(),\n      lifeSpan: $this.lifeSpan,\n      life: 0,\n      opacity: 0,\n      radius: $this.maxSize * (Math.random() > $this.minRate ? Math.random() : $this.minRate) / 2,\n      draw() {\n        $this.ctx.beginPath();\n        $this.ctx.lineWidth = this.borderWidth;\n        $this.ctx.strokeStyle = $this.lineColor;\n        $this.ctx.fillStyle = $this.fillColor;\n        $this.ctx.globalAlpha = this.opacity;\n        $this.ctx.arc(this.center.x, this.center.y, this.radius, 0, Math.PI * 2, true);\n        if (isFill) {\n          $this.ctx.fill();\n        }\n        else {\n          $this.ctx.stroke();\n        }\n        $this.ctx.closePath();\n      }\n    };\n    return pulse;\n  }\n}\n\n\n","date":"2020-11-30T15:32:44.649Z","updated":"2020-11-30T15:32:44.649Z","path":"js/ripple-logo.js","layout":"false","title":"","comments":1,"_id":"cki5kjebn0002xdvd8grm99l0","content":"const RIPPLE_LOGO_DEFAULT = {\n  title: 'title', // 標題\n  points: 3, // 總波紋數量\n  maxBorder: 4, // 波紋最大線寬\n  lineColor: 'white', // 波紋顏色\n  fillColor: 'rgba(255,255,255,.25)', // 波紋有填充時的顏色\n  fadeInSpan: 500, // 波紋淡入時的耗時\n  lifeSpan: 5000, // 波紋淡入到淡出至0的總耗時\n  maxSize: 750, // 波紋最大尺寸\n  minRate: 0.5, // 波紋最小尺寸倍率（取最大尺寸浮點百分比）\n  randomFill: true, // 是否隨機填充\n  radiusMetaRate: 10, // 波紋半徑擴張速度\n  speedMetaRate: 0.5, // 波紋中心點位移速度\n  globalAlpha: 0.35 // 波紋透明度\n}\n\nclass RippleLogo extends CanvasFxBase {\n  constructor(\n    ele, config\n  ) {\n    super(ele, config, RIPPLE_LOGO_DEFAULT);\n    this.pool = [];\n    this.init();\n  }\n  init() {\n    super.init();\n\n    window.addEventListener('resize', super.debounce(() => {\n      this.drawAll();\n    }, 500));\n\n    for (let i = 0; i < this.points; i++) {\n      const isFill = i % 2 === 0 && this.randomFill;\n      const newPulse = this.createPulse(isFill, this.radiusMetaRate, this.speedMetaRate);\n      this.pool.push(newPulse);\n    }\n    this.drawAll();\n  }\n  drawAll() {\n    this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n    this.pool.forEach((ele) => {\n      ele.draw();\n    });\n    cancelAnimationFrame(this.loop);\n    this.loop = window.requestAnimationFrame(() => {\n      this.pulseMeta();\n      this.drawAll();\n    });\n    this.ctx.save();\n    this.ctx.globalAlpha = 1;\n    this.drawTitle();\n    this.ctx.restore();\n  }\n  drawTitle() {\n    this.ctx.textAlign = 'center';\n    this.ctx.font = `${this.canvasWidth / 7.2}px Roboto`;\n    this.ctx.textBaseline = 'middle';\n    this.ctx.fillStyle = \"grey\";\n    this.ctx.fillText(this.title, this.canvasWidth / 2, this.canvasHeight / 2);\n  }\n  pulseMeta() {\n    this.pool.forEach((ele, i) => {\n      ele.radius += .5;\n      ele.center.x += ele.speedX;\n      ele.center.y += ele.speedY;\n      if (ele.life <= this.fadeInSpan / 16) {\n        ele.opacity += this.globalAlpha / (this.fadeInSpan / 16);\n        ele.life += 1;\n      }\n      else {\n        if (ele.opacity < 0) {\n          const isFill = i % 2 === 0 && this.randomFill;\n          const newPulse = this.createPulse(isFill, this.radiusMetaRate, this.speedMetaRate);\n          this.pool[i] = newPulse;\n        }\n        else {\n          ele.opacity -= this.globalAlpha * 16 / (this.lifeSpan);\n        }\n      }\n    });\n  }\n  createPulse(isFill, radiusMetaRate, speedMetaRate) {\n    const $this = this;\n    const pulse = {\n      center: {\n        x: $this.canvasWidth * Math.random(),\n        y: $this.canvasHeight * Math.random()\n      },\n      speedX: (Math.random() > 0.5 ? 1 : -1) * Math.random() * speedMetaRate,\n      speedY: (Math.random() > 0.5 ? 1 : -1) * Math.random() * speedMetaRate,\n      radiusMeta: (Math.random() > 0.5 ? 1 : -1) * radiusMetaRate * Math.random(),\n      borderWidth: $this.maxBorder * Math.random(),\n      lifeSpan: $this.lifeSpan,\n      life: 0,\n      opacity: 0,\n      radius: $this.maxSize * (Math.random() > $this.minRate ? Math.random() : $this.minRate) / 2,\n      draw() {\n        $this.ctx.beginPath();\n        $this.ctx.lineWidth = this.borderWidth;\n        $this.ctx.strokeStyle = $this.lineColor;\n        $this.ctx.fillStyle = $this.fillColor;\n        $this.ctx.globalAlpha = this.opacity;\n        $this.ctx.arc(this.center.x, this.center.y, this.radius, 0, Math.PI * 2, true);\n        if (isFill) {\n          $this.ctx.fill();\n        }\n        else {\n          $this.ctx.stroke();\n        }\n        $this.ctx.closePath();\n      }\n    };\n    return pulse;\n  }\n}\n\n\n","site":{"data":{"css/variables":"","languages":{"zh-TW":{"title":{"archive":"時間線","category":"分類","tag":"標籤","schedule":"時間表"},"menu":{"home":"首頁","archives":"時間線","categories":"分類","tags":"標籤","about":"關於","search":"搜尋","schedule":"時間表","sitemap":"網站地圖","commonweal":"公益 404"},"sidebar":{"overview":"本站概要","toc":"文章目錄"},"post":{"posted":"發表於","edited":"更新於","created":"創建時間","modified":"修改時間","edit":"編輯","in":"分類於","read_more":"閱讀全文","untitled":"未命名","sticky":"置頂文","views":"閱讀次數","related_posts":"相關文章","copyright":{"author":"作者","link":"文章連結","post_author":"Written by","post_link":"This article originally appeared on","license_title":"版權聲明","license_content":"本網誌所有文章除特別聲明外，均採用 %s 許可協議。轉載請註明出處！"}},"footer":{"powered":"","total_views":"總瀏覽次數","total_visitors":"訪客總數"},"counter":{"tag_cloud":{"zero":"目前還沒有任何標籤","one":"目前共有 1 個標籤","other":"目前共有 %d 個標籤"},"categories":{"zero":"目前還沒有任何分類","one":"目前共有 1 個分類","other":"目前共有 %d 個分類"},"archive_posts":{"zero":"目前還沒有任何文章。","one":"目前共有 1 篇文章。","other":"目前共有 %d 篇文章。"}},"state":{"posts":"文章","tags":"標籤","categories":"分類"},"search":{"placeholder":"搜尋...","empty":"We didn't find any results for the search: %s","hits_time":"%s results found in %s ms","hits":"%s results found"},"cheers":{"um":"嗯..","ok":"還不錯","nice":"好","good":"很好","great":"非常好","excellent":"棒棒Der"},"keep_on":"繼續努力。","symbol":{"comma":"，","period":"。","colon":"："},"reward":{"donate":"捐贈","wechatpay":"微信支付","alipay":"支付寶","paypal":"貝寶","bitcoin":"比特幣"},"follow_me":{"welcome":"歡迎關注我的其它站點"},"accessibility":{"nav_toggle":"切換導航欄","prev_page":"上一頁","next_page":"下一頁"},"symbols_count_time":{"count":"文章字數","count_total":"總字數","time":"所需閱讀時間","time_total":"所需總閱讀時間","time_minutes":"分鐘"}}},"css/mixins":"","css/styles":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","template/head":"<script src=\"//js/tool/canvas-fx-base.js\"></script>\n\n<script src=\"//js/ripple-logo.js\"></script>\n<script src=\"//js/silk-wave.js\"></script>\n\n<style>\n  @font-face {\n  font-family: \"Roboto\";\n  src: url(//font/Roboto.ttf) format(\"truetype\");\n}\n</style>","css/styl-plugin/grid-post-layout/main":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","css/styl-plugin/grid-post-layout/mixins":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n","css/styl-plugin/grid-post-layout/variables":""}},"excerpt":"","more":"const RIPPLE_LOGO_DEFAULT = {\n  title: 'title', // 標題\n  points: 3, // 總波紋數量\n  maxBorder: 4, // 波紋最大線寬\n  lineColor: 'white', // 波紋顏色\n  fillColor: 'rgba(255,255,255,.25)', // 波紋有填充時的顏色\n  fadeInSpan: 500, // 波紋淡入時的耗時\n  lifeSpan: 5000, // 波紋淡入到淡出至0的總耗時\n  maxSize: 750, // 波紋最大尺寸\n  minRate: 0.5, // 波紋最小尺寸倍率（取最大尺寸浮點百分比）\n  randomFill: true, // 是否隨機填充\n  radiusMetaRate: 10, // 波紋半徑擴張速度\n  speedMetaRate: 0.5, // 波紋中心點位移速度\n  globalAlpha: 0.35 // 波紋透明度\n}\n\nclass RippleLogo extends CanvasFxBase {\n  constructor(\n    ele, config\n  ) {\n    super(ele, config, RIPPLE_LOGO_DEFAULT);\n    this.pool = [];\n    this.init();\n  }\n  init() {\n    super.init();\n\n    window.addEventListener('resize', super.debounce(() => {\n      this.drawAll();\n    }, 500));\n\n    for (let i = 0; i < this.points; i++) {\n      const isFill = i % 2 === 0 && this.randomFill;\n      const newPulse = this.createPulse(isFill, this.radiusMetaRate, this.speedMetaRate);\n      this.pool.push(newPulse);\n    }\n    this.drawAll();\n  }\n  drawAll() {\n    this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n    this.pool.forEach((ele) => {\n      ele.draw();\n    });\n    cancelAnimationFrame(this.loop);\n    this.loop = window.requestAnimationFrame(() => {\n      this.pulseMeta();\n      this.drawAll();\n    });\n    this.ctx.save();\n    this.ctx.globalAlpha = 1;\n    this.drawTitle();\n    this.ctx.restore();\n  }\n  drawTitle() {\n    this.ctx.textAlign = 'center';\n    this.ctx.font = `${this.canvasWidth / 7.2}px Roboto`;\n    this.ctx.textBaseline = 'middle';\n    this.ctx.fillStyle = \"grey\";\n    this.ctx.fillText(this.title, this.canvasWidth / 2, this.canvasHeight / 2);\n  }\n  pulseMeta() {\n    this.pool.forEach((ele, i) => {\n      ele.radius += .5;\n      ele.center.x += ele.speedX;\n      ele.center.y += ele.speedY;\n      if (ele.life <= this.fadeInSpan / 16) {\n        ele.opacity += this.globalAlpha / (this.fadeInSpan / 16);\n        ele.life += 1;\n      }\n      else {\n        if (ele.opacity < 0) {\n          const isFill = i % 2 === 0 && this.randomFill;\n          const newPulse = this.createPulse(isFill, this.radiusMetaRate, this.speedMetaRate);\n          this.pool[i] = newPulse;\n        }\n        else {\n          ele.opacity -= this.globalAlpha * 16 / (this.lifeSpan);\n        }\n      }\n    });\n  }\n  createPulse(isFill, radiusMetaRate, speedMetaRate) {\n    const $this = this;\n    const pulse = {\n      center: {\n        x: $this.canvasWidth * Math.random(),\n        y: $this.canvasHeight * Math.random()\n      },\n      speedX: (Math.random() > 0.5 ? 1 : -1) * Math.random() * speedMetaRate,\n      speedY: (Math.random() > 0.5 ? 1 : -1) * Math.random() * speedMetaRate,\n      radiusMeta: (Math.random() > 0.5 ? 1 : -1) * radiusMetaRate * Math.random(),\n      borderWidth: $this.maxBorder * Math.random(),\n      lifeSpan: $this.lifeSpan,\n      life: 0,\n      opacity: 0,\n      radius: $this.maxSize * (Math.random() > $this.minRate ? Math.random() : $this.minRate) / 2,\n      draw() {\n        $this.ctx.beginPath();\n        $this.ctx.lineWidth = this.borderWidth;\n        $this.ctx.strokeStyle = $this.lineColor;\n        $this.ctx.fillStyle = $this.fillColor;\n        $this.ctx.globalAlpha = this.opacity;\n        $this.ctx.arc(this.center.x, this.center.y, this.radius, 0, Math.PI * 2, true);\n        if (isFill) {\n          $this.ctx.fill();\n        }\n        else {\n          $this.ctx.stroke();\n        }\n        $this.ctx.closePath();\n      }\n    };\n    return pulse;\n  }\n}\n\n\n"},{"_content":"const SILK_WAVE_DEFAULT = {\n  range: 100,\n  strokeWeight: 2,\n  strokeColor: 'white',\n  lineNumber: 10,\n  vertexGap: 20,\n  frequency: 0.005,\n  verticalNoiseParameter: 0.025,\n  horizontalNoiseParameter: 0.001,\n  globalAlpha: 0.15\n\n}\n\nclass SilkWave extends CanvasFxBase {\n  constructor(ele, config) {\n    super(ele, config, SILK_WAVE_DEFAULT);\n    this.init();\n  }\n  init() {\n    super.init();\n    requestAnimationFrame(() => {\n      this.drawAll();\n    })\n  }\n  drawAll() {\n    this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n\n    for (let i = 0; i < this.range; i++) {\n      let thisLineAlpha = super.linearInterpolation(i, 0, this.range, 0, 1); //定義單一線條顏色\n      this.ctx.strokeStyle = `rgba(255,255,255,${thisLineAlpha})`;\n      this.ctx.globalAlpha = this.globalAlpha;\n      //把水平座標分割成複數段落\n      for (let x = -(this.vertexGap / 2); x < this.space.width + (this.vertexGap / 2) + 1; x += this.vertexGap) {\n        let randomNoise = this.perlinNoise(x * this.horizontalNoiseParameter, i * this.verticalNoiseParameter, this.frameCount * this.frequency);\n        let y = super.linearInterpolation(randomNoise, 0, 1, 0, this.space.height);\n        if (x === -(this.vertexGap / 2)) {\n          this.ctx.beginPath();\n          this.ctx.moveTo(x, y);\n        }\n        else if (x < this.space.width + (this.vertexGap / 2) + 1) {\n          this.ctx.lineTo(x, y, x, y + 100)\n        }\n      }\n      this.ctx.stroke();\n    }\n    requestAnimationFrame(() => {\n      this.drawAll();\n    })\n  }\n}","source":"js/silk-wave.js","raw":"const SILK_WAVE_DEFAULT = {\n  range: 100,\n  strokeWeight: 2,\n  strokeColor: 'white',\n  lineNumber: 10,\n  vertexGap: 20,\n  frequency: 0.005,\n  verticalNoiseParameter: 0.025,\n  horizontalNoiseParameter: 0.001,\n  globalAlpha: 0.15\n\n}\n\nclass SilkWave extends CanvasFxBase {\n  constructor(ele, config) {\n    super(ele, config, SILK_WAVE_DEFAULT);\n    this.init();\n  }\n  init() {\n    super.init();\n    requestAnimationFrame(() => {\n      this.drawAll();\n    })\n  }\n  drawAll() {\n    this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n\n    for (let i = 0; i < this.range; i++) {\n      let thisLineAlpha = super.linearInterpolation(i, 0, this.range, 0, 1); //定義單一線條顏色\n      this.ctx.strokeStyle = `rgba(255,255,255,${thisLineAlpha})`;\n      this.ctx.globalAlpha = this.globalAlpha;\n      //把水平座標分割成複數段落\n      for (let x = -(this.vertexGap / 2); x < this.space.width + (this.vertexGap / 2) + 1; x += this.vertexGap) {\n        let randomNoise = this.perlinNoise(x * this.horizontalNoiseParameter, i * this.verticalNoiseParameter, this.frameCount * this.frequency);\n        let y = super.linearInterpolation(randomNoise, 0, 1, 0, this.space.height);\n        if (x === -(this.vertexGap / 2)) {\n          this.ctx.beginPath();\n          this.ctx.moveTo(x, y);\n        }\n        else if (x < this.space.width + (this.vertexGap / 2) + 1) {\n          this.ctx.lineTo(x, y, x, y + 100)\n        }\n      }\n      this.ctx.stroke();\n    }\n    requestAnimationFrame(() => {\n      this.drawAll();\n    })\n  }\n}","date":"2020-11-30T16:44:40.556Z","updated":"2020-11-30T16:44:40.556Z","path":"js/silk-wave.js","layout":"false","title":"","comments":1,"_id":"cki5kjebr0006xdvd68wbhm84","content":"const SILK_WAVE_DEFAULT = {\n  range: 100,\n  strokeWeight: 2,\n  strokeColor: 'white',\n  lineNumber: 10,\n  vertexGap: 20,\n  frequency: 0.005,\n  verticalNoiseParameter: 0.025,\n  horizontalNoiseParameter: 0.001,\n  globalAlpha: 0.15\n\n}\n\nclass SilkWave extends CanvasFxBase {\n  constructor(ele, config) {\n    super(ele, config, SILK_WAVE_DEFAULT);\n    this.init();\n  }\n  init() {\n    super.init();\n    requestAnimationFrame(() => {\n      this.drawAll();\n    })\n  }\n  drawAll() {\n    this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n\n    for (let i = 0; i < this.range; i++) {\n      let thisLineAlpha = super.linearInterpolation(i, 0, this.range, 0, 1); //定義單一線條顏色\n      this.ctx.strokeStyle = `rgba(255,255,255,${thisLineAlpha})`;\n      this.ctx.globalAlpha = this.globalAlpha;\n      //把水平座標分割成複數段落\n      for (let x = -(this.vertexGap / 2); x < this.space.width + (this.vertexGap / 2) + 1; x += this.vertexGap) {\n        let randomNoise = this.perlinNoise(x * this.horizontalNoiseParameter, i * this.verticalNoiseParameter, this.frameCount * this.frequency);\n        let y = super.linearInterpolation(randomNoise, 0, 1, 0, this.space.height);\n        if (x === -(this.vertexGap / 2)) {\n          this.ctx.beginPath();\n          this.ctx.moveTo(x, y);\n        }\n        else if (x < this.space.width + (this.vertexGap / 2) + 1) {\n          this.ctx.lineTo(x, y, x, y + 100)\n        }\n      }\n      this.ctx.stroke();\n    }\n    requestAnimationFrame(() => {\n      this.drawAll();\n    })\n  }\n}","site":{"data":{"css/variables":"","languages":{"zh-TW":{"title":{"archive":"時間線","category":"分類","tag":"標籤","schedule":"時間表"},"menu":{"home":"首頁","archives":"時間線","categories":"分類","tags":"標籤","about":"關於","search":"搜尋","schedule":"時間表","sitemap":"網站地圖","commonweal":"公益 404"},"sidebar":{"overview":"本站概要","toc":"文章目錄"},"post":{"posted":"發表於","edited":"更新於","created":"創建時間","modified":"修改時間","edit":"編輯","in":"分類於","read_more":"閱讀全文","untitled":"未命名","sticky":"置頂文","views":"閱讀次數","related_posts":"相關文章","copyright":{"author":"作者","link":"文章連結","post_author":"Written by","post_link":"This article originally appeared on","license_title":"版權聲明","license_content":"本網誌所有文章除特別聲明外，均採用 %s 許可協議。轉載請註明出處！"}},"footer":{"powered":"","total_views":"總瀏覽次數","total_visitors":"訪客總數"},"counter":{"tag_cloud":{"zero":"目前還沒有任何標籤","one":"目前共有 1 個標籤","other":"目前共有 %d 個標籤"},"categories":{"zero":"目前還沒有任何分類","one":"目前共有 1 個分類","other":"目前共有 %d 個分類"},"archive_posts":{"zero":"目前還沒有任何文章。","one":"目前共有 1 篇文章。","other":"目前共有 %d 篇文章。"}},"state":{"posts":"文章","tags":"標籤","categories":"分類"},"search":{"placeholder":"搜尋...","empty":"We didn't find any results for the search: %s","hits_time":"%s results found in %s ms","hits":"%s results found"},"cheers":{"um":"嗯..","ok":"還不錯","nice":"好","good":"很好","great":"非常好","excellent":"棒棒Der"},"keep_on":"繼續努力。","symbol":{"comma":"，","period":"。","colon":"："},"reward":{"donate":"捐贈","wechatpay":"微信支付","alipay":"支付寶","paypal":"貝寶","bitcoin":"比特幣"},"follow_me":{"welcome":"歡迎關注我的其它站點"},"accessibility":{"nav_toggle":"切換導航欄","prev_page":"上一頁","next_page":"下一頁"},"symbols_count_time":{"count":"文章字數","count_total":"總字數","time":"所需閱讀時間","time_total":"所需總閱讀時間","time_minutes":"分鐘"}}},"css/mixins":"","css/styles":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","template/head":"<script src=\"//js/tool/canvas-fx-base.js\"></script>\n\n<script src=\"//js/ripple-logo.js\"></script>\n<script src=\"//js/silk-wave.js\"></script>\n\n<style>\n  @font-face {\n  font-family: \"Roboto\";\n  src: url(//font/Roboto.ttf) format(\"truetype\");\n}\n</style>","css/styl-plugin/grid-post-layout/main":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","css/styl-plugin/grid-post-layout/mixins":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n","css/styl-plugin/grid-post-layout/variables":""}},"excerpt":"","more":"const SILK_WAVE_DEFAULT = {\n  range: 100,\n  strokeWeight: 2,\n  strokeColor: 'white',\n  lineNumber: 10,\n  vertexGap: 20,\n  frequency: 0.005,\n  verticalNoiseParameter: 0.025,\n  horizontalNoiseParameter: 0.001,\n  globalAlpha: 0.15\n\n}\n\nclass SilkWave extends CanvasFxBase {\n  constructor(ele, config) {\n    super(ele, config, SILK_WAVE_DEFAULT);\n    this.init();\n  }\n  init() {\n    super.init();\n    requestAnimationFrame(() => {\n      this.drawAll();\n    })\n  }\n  drawAll() {\n    this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n\n    for (let i = 0; i < this.range; i++) {\n      let thisLineAlpha = super.linearInterpolation(i, 0, this.range, 0, 1); //定義單一線條顏色\n      this.ctx.strokeStyle = `rgba(255,255,255,${thisLineAlpha})`;\n      this.ctx.globalAlpha = this.globalAlpha;\n      //把水平座標分割成複數段落\n      for (let x = -(this.vertexGap / 2); x < this.space.width + (this.vertexGap / 2) + 1; x += this.vertexGap) {\n        let randomNoise = this.perlinNoise(x * this.horizontalNoiseParameter, i * this.verticalNoiseParameter, this.frameCount * this.frequency);\n        let y = super.linearInterpolation(randomNoise, 0, 1, 0, this.space.height);\n        if (x === -(this.vertexGap / 2)) {\n          this.ctx.beginPath();\n          this.ctx.moveTo(x, y);\n        }\n        else if (x < this.space.width + (this.vertexGap / 2) + 1) {\n          this.ctx.lineTo(x, y, x, y + 100)\n        }\n      }\n      this.ctx.stroke();\n    }\n    requestAnimationFrame(() => {\n      this.drawAll();\n    })\n  }\n}"},{"title":"tags","date":"2020-11-11T16:14:19.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-11-12 00:14:19\ntype: \"tags\"\n---\n","updated":"2020-11-25T17:01:45.884Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cki5kjebs0008xdvd8i1a1ncy","content":"","site":{"data":{"css/variables":"","languages":{"zh-TW":{"title":{"archive":"時間線","category":"分類","tag":"標籤","schedule":"時間表"},"menu":{"home":"首頁","archives":"時間線","categories":"分類","tags":"標籤","about":"關於","search":"搜尋","schedule":"時間表","sitemap":"網站地圖","commonweal":"公益 404"},"sidebar":{"overview":"本站概要","toc":"文章目錄"},"post":{"posted":"發表於","edited":"更新於","created":"創建時間","modified":"修改時間","edit":"編輯","in":"分類於","read_more":"閱讀全文","untitled":"未命名","sticky":"置頂文","views":"閱讀次數","related_posts":"相關文章","copyright":{"author":"作者","link":"文章連結","post_author":"Written by","post_link":"This article originally appeared on","license_title":"版權聲明","license_content":"本網誌所有文章除特別聲明外，均採用 %s 許可協議。轉載請註明出處！"}},"footer":{"powered":"","total_views":"總瀏覽次數","total_visitors":"訪客總數"},"counter":{"tag_cloud":{"zero":"目前還沒有任何標籤","one":"目前共有 1 個標籤","other":"目前共有 %d 個標籤"},"categories":{"zero":"目前還沒有任何分類","one":"目前共有 1 個分類","other":"目前共有 %d 個分類"},"archive_posts":{"zero":"目前還沒有任何文章。","one":"目前共有 1 篇文章。","other":"目前共有 %d 篇文章。"}},"state":{"posts":"文章","tags":"標籤","categories":"分類"},"search":{"placeholder":"搜尋...","empty":"We didn't find any results for the search: %s","hits_time":"%s results found in %s ms","hits":"%s results found"},"cheers":{"um":"嗯..","ok":"還不錯","nice":"好","good":"很好","great":"非常好","excellent":"棒棒Der"},"keep_on":"繼續努力。","symbol":{"comma":"，","period":"。","colon":"："},"reward":{"donate":"捐贈","wechatpay":"微信支付","alipay":"支付寶","paypal":"貝寶","bitcoin":"比特幣"},"follow_me":{"welcome":"歡迎關注我的其它站點"},"accessibility":{"nav_toggle":"切換導航欄","prev_page":"上一頁","next_page":"下一頁"},"symbols_count_time":{"count":"文章字數","count_total":"總字數","time":"所需閱讀時間","time_total":"所需總閱讀時間","time_minutes":"分鐘"}}},"css/mixins":"","css/styles":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","template/head":"<script src=\"//js/tool/canvas-fx-base.js\"></script>\n\n<script src=\"//js/ripple-logo.js\"></script>\n<script src=\"//js/silk-wave.js\"></script>\n\n<style>\n  @font-face {\n  font-family: \"Roboto\";\n  src: url(//font/Roboto.ttf) format(\"truetype\");\n}\n</style>","css/styl-plugin/grid-post-layout/main":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","css/styl-plugin/grid-post-layout/mixins":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n","css/styl-plugin/grid-post-layout/variables":""}},"excerpt":"","more":""},{"_content":"class CanvasFxBase {\n  constructor(\n    ele, config, defaultConfig\n  ) {\n    config = Object.assign(defaultConfig, config);\n    this.ele = ele;\n    Object.assign(this, config);\n    this.frameCount = 0;\n    this.ctx = null;\n  }\n  init() {\n    if (this.ele.tagName !== 'CANVAS') {\n      const space = document.createElement('canvas');\n      this.ele.appendChild(space);\n      this.space = this.ele.querySelectorAll('canvas')[0];\n      this.canvasWidth = this.ele.getBoundingClientRect().width;\n      this.canvasHeight = this.ele.getBoundingClientRect().height;\n    }\n    else {\n      this.space = this.ele;\n      this.canvasWidth = this.ele.parentElement.getBoundingClientRect().width;\n      this.canvasHeight = this.ele.parentElement.getBoundingClientRect().height;\n    }\n\n    this.ctx = this.space.getContext('2d');\n    this.size();\n    const $this = this;\n    window.addEventListener('resize', $this.debounce(() => {\n      $this.size();\n    }, 500));\n    this.countframe();\n\n  }\n  countframe() {\n    let instance = this;\n    instance.frameCount += 1;\n    requestAnimationFrame(() => {\n      instance.countframe();\n    })\n  }\n  size() {\n    if (this.ele.tagName !== 'CANVAS') {\n      this.canvasWidth = this.ele.getBoundingClientRect().width;\n      this.canvasHeight = this.ele.getBoundingClientRect().height;\n      this.space.width = this.canvasWidth;\n      this.space.height = this.canvasHeight;\n    }\n    else {\n      this.canvasWidth = this.space.parentElement.getBoundingClientRect().width;\n      this.canvasHeight = this.space.parentElement.getBoundingClientRect().height;\n      this.space.width = this.canvasWidth;\n      this.space.height = this.canvasHeight;\n    }\n\n  }\n  debounce(func, delay) {\n    let timer = null;\n    const $this = this;\n    return () => {\n      const context = $this;\n      const args = arguments;\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        func.apply(context, args);\n      }, delay);\n    };\n  }\n  perlinNoise(x, y, z) {\n    const getNoiseFloat = (x, y, z) => {\n      var p = new Array(512)\n      var permutation = [151, 160, 137, 91, 90, 15,\n        131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23,\n        190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33,\n        88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166,\n        77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244,\n        102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,\n        135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123,\n        5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,\n        223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9,\n        129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228,\n        251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107,\n        49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,\n        138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180\n      ];\n      for (var i = 0; i < 256; i++)\n        p[256 + i] = p[i] = permutation[i];\n\n      var X = Math.floor(x) & 255,                  // FIND UNIT CUBE THAT\n        Y = Math.floor(y) & 255,                  // CONTAINS POINT.\n        Z = Math.floor(z) & 255;\n      x -= Math.floor(x);                                // FIND RELATIVE X,Y,Z\n      y -= Math.floor(y);                                // OF POINT IN CUBE.\n      z -= Math.floor(z);\n      var u = fade(x),                                // COMPUTE FADE CURVES\n        v = fade(y),                                // FOR EACH OF X,Y,Z.\n        w = fade(z);\n      var A = p[X] + Y, AA = p[A] + Z, AB = p[A + 1] + Z,      // HASH COORDINATES OF\n        B = p[X + 1] + Y, BA = p[B] + Z, BB = p[B + 1] + Z;      // THE 8 CUBE CORNERS,\n\n      return scale(lerp(w, lerp(v, lerp(u, grad(p[AA], x, y, z),  // AND ADD\n        grad(p[BA], x - 1, y, z)), // BLENDED\n        lerp(u, grad(p[AB], x, y - 1, z),  // RESULTS\n          grad(p[BB], x - 1, y - 1, z))),// FROM  8\n        lerp(v, lerp(u, grad(p[AA + 1], x, y, z - 1),  // CORNERS\n          grad(p[BA + 1], x - 1, y, z - 1)), // OF CUBE\n          lerp(u, grad(p[AB + 1], x, y - 1, z - 1),\n            grad(p[BB + 1], x - 1, y - 1, z - 1)))));\n    }\n    const fade = (t) => { return t * t * t * (t * (t * 6 - 15) + 10); }\n    const lerp = (t, a, b) => { return a + t * (b - a); }\n    const grad = (hash, x, y, z) => {\n      var h = hash & 15;                      // CONVERT LO 4 BITS OF HASH CODE\n      var u = h < 8 ? x : y,                 // INTO 12 GRADIENT DIRECTIONS.\n        v = h < 4 ? y : h == 12 || h == 14 ? x : z;\n      return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);\n    }\n    const scale = (n) => { return (1 + n) / 2; }\n    return getNoiseFloat(x, y, z);\n  }\n  linearInterpolation(x, min, max, virtualMin, virtualMax) {\n    return ((x - min) / (max - min)) * (virtualMax - virtualMin);\n  }\n}","source":"js/tool/canvas-fx-base.js","raw":"class CanvasFxBase {\n  constructor(\n    ele, config, defaultConfig\n  ) {\n    config = Object.assign(defaultConfig, config);\n    this.ele = ele;\n    Object.assign(this, config);\n    this.frameCount = 0;\n    this.ctx = null;\n  }\n  init() {\n    if (this.ele.tagName !== 'CANVAS') {\n      const space = document.createElement('canvas');\n      this.ele.appendChild(space);\n      this.space = this.ele.querySelectorAll('canvas')[0];\n      this.canvasWidth = this.ele.getBoundingClientRect().width;\n      this.canvasHeight = this.ele.getBoundingClientRect().height;\n    }\n    else {\n      this.space = this.ele;\n      this.canvasWidth = this.ele.parentElement.getBoundingClientRect().width;\n      this.canvasHeight = this.ele.parentElement.getBoundingClientRect().height;\n    }\n\n    this.ctx = this.space.getContext('2d');\n    this.size();\n    const $this = this;\n    window.addEventListener('resize', $this.debounce(() => {\n      $this.size();\n    }, 500));\n    this.countframe();\n\n  }\n  countframe() {\n    let instance = this;\n    instance.frameCount += 1;\n    requestAnimationFrame(() => {\n      instance.countframe();\n    })\n  }\n  size() {\n    if (this.ele.tagName !== 'CANVAS') {\n      this.canvasWidth = this.ele.getBoundingClientRect().width;\n      this.canvasHeight = this.ele.getBoundingClientRect().height;\n      this.space.width = this.canvasWidth;\n      this.space.height = this.canvasHeight;\n    }\n    else {\n      this.canvasWidth = this.space.parentElement.getBoundingClientRect().width;\n      this.canvasHeight = this.space.parentElement.getBoundingClientRect().height;\n      this.space.width = this.canvasWidth;\n      this.space.height = this.canvasHeight;\n    }\n\n  }\n  debounce(func, delay) {\n    let timer = null;\n    const $this = this;\n    return () => {\n      const context = $this;\n      const args = arguments;\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        func.apply(context, args);\n      }, delay);\n    };\n  }\n  perlinNoise(x, y, z) {\n    const getNoiseFloat = (x, y, z) => {\n      var p = new Array(512)\n      var permutation = [151, 160, 137, 91, 90, 15,\n        131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23,\n        190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33,\n        88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166,\n        77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244,\n        102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,\n        135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123,\n        5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,\n        223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9,\n        129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228,\n        251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107,\n        49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,\n        138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180\n      ];\n      for (var i = 0; i < 256; i++)\n        p[256 + i] = p[i] = permutation[i];\n\n      var X = Math.floor(x) & 255,                  // FIND UNIT CUBE THAT\n        Y = Math.floor(y) & 255,                  // CONTAINS POINT.\n        Z = Math.floor(z) & 255;\n      x -= Math.floor(x);                                // FIND RELATIVE X,Y,Z\n      y -= Math.floor(y);                                // OF POINT IN CUBE.\n      z -= Math.floor(z);\n      var u = fade(x),                                // COMPUTE FADE CURVES\n        v = fade(y),                                // FOR EACH OF X,Y,Z.\n        w = fade(z);\n      var A = p[X] + Y, AA = p[A] + Z, AB = p[A + 1] + Z,      // HASH COORDINATES OF\n        B = p[X + 1] + Y, BA = p[B] + Z, BB = p[B + 1] + Z;      // THE 8 CUBE CORNERS,\n\n      return scale(lerp(w, lerp(v, lerp(u, grad(p[AA], x, y, z),  // AND ADD\n        grad(p[BA], x - 1, y, z)), // BLENDED\n        lerp(u, grad(p[AB], x, y - 1, z),  // RESULTS\n          grad(p[BB], x - 1, y - 1, z))),// FROM  8\n        lerp(v, lerp(u, grad(p[AA + 1], x, y, z - 1),  // CORNERS\n          grad(p[BA + 1], x - 1, y, z - 1)), // OF CUBE\n          lerp(u, grad(p[AB + 1], x, y - 1, z - 1),\n            grad(p[BB + 1], x - 1, y - 1, z - 1)))));\n    }\n    const fade = (t) => { return t * t * t * (t * (t * 6 - 15) + 10); }\n    const lerp = (t, a, b) => { return a + t * (b - a); }\n    const grad = (hash, x, y, z) => {\n      var h = hash & 15;                      // CONVERT LO 4 BITS OF HASH CODE\n      var u = h < 8 ? x : y,                 // INTO 12 GRADIENT DIRECTIONS.\n        v = h < 4 ? y : h == 12 || h == 14 ? x : z;\n      return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);\n    }\n    const scale = (n) => { return (1 + n) / 2; }\n    return getNoiseFloat(x, y, z);\n  }\n  linearInterpolation(x, min, max, virtualMin, virtualMax) {\n    return ((x - min) / (max - min)) * (virtualMax - virtualMin);\n  }\n}","date":"2020-11-30T16:22:40.105Z","updated":"2020-11-30T16:22:40.105Z","path":"js/tool/canvas-fx-base.js","layout":"false","title":"","comments":1,"_id":"cki5kjebt000axdvd73owdrbi","content":"class CanvasFxBase {\n  constructor(\n    ele, config, defaultConfig\n  ) {\n    config = Object.assign(defaultConfig, config);\n    this.ele = ele;\n    Object.assign(this, config);\n    this.frameCount = 0;\n    this.ctx = null;\n  }\n  init() {\n    if (this.ele.tagName !== 'CANVAS') {\n      const space = document.createElement('canvas');\n      this.ele.appendChild(space);\n      this.space = this.ele.querySelectorAll('canvas')[0];\n      this.canvasWidth = this.ele.getBoundingClientRect().width;\n      this.canvasHeight = this.ele.getBoundingClientRect().height;\n    }\n    else {\n      this.space = this.ele;\n      this.canvasWidth = this.ele.parentElement.getBoundingClientRect().width;\n      this.canvasHeight = this.ele.parentElement.getBoundingClientRect().height;\n    }\n\n    this.ctx = this.space.getContext('2d');\n    this.size();\n    const $this = this;\n    window.addEventListener('resize', $this.debounce(() => {\n      $this.size();\n    }, 500));\n    this.countframe();\n\n  }\n  countframe() {\n    let instance = this;\n    instance.frameCount += 1;\n    requestAnimationFrame(() => {\n      instance.countframe();\n    })\n  }\n  size() {\n    if (this.ele.tagName !== 'CANVAS') {\n      this.canvasWidth = this.ele.getBoundingClientRect().width;\n      this.canvasHeight = this.ele.getBoundingClientRect().height;\n      this.space.width = this.canvasWidth;\n      this.space.height = this.canvasHeight;\n    }\n    else {\n      this.canvasWidth = this.space.parentElement.getBoundingClientRect().width;\n      this.canvasHeight = this.space.parentElement.getBoundingClientRect().height;\n      this.space.width = this.canvasWidth;\n      this.space.height = this.canvasHeight;\n    }\n\n  }\n  debounce(func, delay) {\n    let timer = null;\n    const $this = this;\n    return () => {\n      const context = $this;\n      const args = arguments;\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        func.apply(context, args);\n      }, delay);\n    };\n  }\n  perlinNoise(x, y, z) {\n    const getNoiseFloat = (x, y, z) => {\n      var p = new Array(512)\n      var permutation = [151, 160, 137, 91, 90, 15,\n        131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23,\n        190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33,\n        88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166,\n        77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244,\n        102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,\n        135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123,\n        5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,\n        223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9,\n        129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228,\n        251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107,\n        49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,\n        138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180\n      ];\n      for (var i = 0; i < 256; i++)\n        p[256 + i] = p[i] = permutation[i];\n\n      var X = Math.floor(x) & 255,                  // FIND UNIT CUBE THAT\n        Y = Math.floor(y) & 255,                  // CONTAINS POINT.\n        Z = Math.floor(z) & 255;\n      x -= Math.floor(x);                                // FIND RELATIVE X,Y,Z\n      y -= Math.floor(y);                                // OF POINT IN CUBE.\n      z -= Math.floor(z);\n      var u = fade(x),                                // COMPUTE FADE CURVES\n        v = fade(y),                                // FOR EACH OF X,Y,Z.\n        w = fade(z);\n      var A = p[X] + Y, AA = p[A] + Z, AB = p[A + 1] + Z,      // HASH COORDINATES OF\n        B = p[X + 1] + Y, BA = p[B] + Z, BB = p[B + 1] + Z;      // THE 8 CUBE CORNERS,\n\n      return scale(lerp(w, lerp(v, lerp(u, grad(p[AA], x, y, z),  // AND ADD\n        grad(p[BA], x - 1, y, z)), // BLENDED\n        lerp(u, grad(p[AB], x, y - 1, z),  // RESULTS\n          grad(p[BB], x - 1, y - 1, z))),// FROM  8\n        lerp(v, lerp(u, grad(p[AA + 1], x, y, z - 1),  // CORNERS\n          grad(p[BA + 1], x - 1, y, z - 1)), // OF CUBE\n          lerp(u, grad(p[AB + 1], x, y - 1, z - 1),\n            grad(p[BB + 1], x - 1, y - 1, z - 1)))));\n    }\n    const fade = (t) => { return t * t * t * (t * (t * 6 - 15) + 10); }\n    const lerp = (t, a, b) => { return a + t * (b - a); }\n    const grad = (hash, x, y, z) => {\n      var h = hash & 15;                      // CONVERT LO 4 BITS OF HASH CODE\n      var u = h < 8 ? x : y,                 // INTO 12 GRADIENT DIRECTIONS.\n        v = h < 4 ? y : h == 12 || h == 14 ? x : z;\n      return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);\n    }\n    const scale = (n) => { return (1 + n) / 2; }\n    return getNoiseFloat(x, y, z);\n  }\n  linearInterpolation(x, min, max, virtualMin, virtualMax) {\n    return ((x - min) / (max - min)) * (virtualMax - virtualMin);\n  }\n}","site":{"data":{"css/variables":"","languages":{"zh-TW":{"title":{"archive":"時間線","category":"分類","tag":"標籤","schedule":"時間表"},"menu":{"home":"首頁","archives":"時間線","categories":"分類","tags":"標籤","about":"關於","search":"搜尋","schedule":"時間表","sitemap":"網站地圖","commonweal":"公益 404"},"sidebar":{"overview":"本站概要","toc":"文章目錄"},"post":{"posted":"發表於","edited":"更新於","created":"創建時間","modified":"修改時間","edit":"編輯","in":"分類於","read_more":"閱讀全文","untitled":"未命名","sticky":"置頂文","views":"閱讀次數","related_posts":"相關文章","copyright":{"author":"作者","link":"文章連結","post_author":"Written by","post_link":"This article originally appeared on","license_title":"版權聲明","license_content":"本網誌所有文章除特別聲明外，均採用 %s 許可協議。轉載請註明出處！"}},"footer":{"powered":"","total_views":"總瀏覽次數","total_visitors":"訪客總數"},"counter":{"tag_cloud":{"zero":"目前還沒有任何標籤","one":"目前共有 1 個標籤","other":"目前共有 %d 個標籤"},"categories":{"zero":"目前還沒有任何分類","one":"目前共有 1 個分類","other":"目前共有 %d 個分類"},"archive_posts":{"zero":"目前還沒有任何文章。","one":"目前共有 1 篇文章。","other":"目前共有 %d 篇文章。"}},"state":{"posts":"文章","tags":"標籤","categories":"分類"},"search":{"placeholder":"搜尋...","empty":"We didn't find any results for the search: %s","hits_time":"%s results found in %s ms","hits":"%s results found"},"cheers":{"um":"嗯..","ok":"還不錯","nice":"好","good":"很好","great":"非常好","excellent":"棒棒Der"},"keep_on":"繼續努力。","symbol":{"comma":"，","period":"。","colon":"："},"reward":{"donate":"捐贈","wechatpay":"微信支付","alipay":"支付寶","paypal":"貝寶","bitcoin":"比特幣"},"follow_me":{"welcome":"歡迎關注我的其它站點"},"accessibility":{"nav_toggle":"切換導航欄","prev_page":"上一頁","next_page":"下一頁"},"symbols_count_time":{"count":"文章字數","count_total":"總字數","time":"所需閱讀時間","time_total":"所需總閱讀時間","time_minutes":"分鐘"}}},"css/mixins":"","css/styles":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","template/head":"<script src=\"//js/tool/canvas-fx-base.js\"></script>\n\n<script src=\"//js/ripple-logo.js\"></script>\n<script src=\"//js/silk-wave.js\"></script>\n\n<style>\n  @font-face {\n  font-family: \"Roboto\";\n  src: url(//font/Roboto.ttf) format(\"truetype\");\n}\n</style>","css/styl-plugin/grid-post-layout/main":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","css/styl-plugin/grid-post-layout/mixins":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n","css/styl-plugin/grid-post-layout/variables":""}},"excerpt":"","more":"class CanvasFxBase {\n  constructor(\n    ele, config, defaultConfig\n  ) {\n    config = Object.assign(defaultConfig, config);\n    this.ele = ele;\n    Object.assign(this, config);\n    this.frameCount = 0;\n    this.ctx = null;\n  }\n  init() {\n    if (this.ele.tagName !== 'CANVAS') {\n      const space = document.createElement('canvas');\n      this.ele.appendChild(space);\n      this.space = this.ele.querySelectorAll('canvas')[0];\n      this.canvasWidth = this.ele.getBoundingClientRect().width;\n      this.canvasHeight = this.ele.getBoundingClientRect().height;\n    }\n    else {\n      this.space = this.ele;\n      this.canvasWidth = this.ele.parentElement.getBoundingClientRect().width;\n      this.canvasHeight = this.ele.parentElement.getBoundingClientRect().height;\n    }\n\n    this.ctx = this.space.getContext('2d');\n    this.size();\n    const $this = this;\n    window.addEventListener('resize', $this.debounce(() => {\n      $this.size();\n    }, 500));\n    this.countframe();\n\n  }\n  countframe() {\n    let instance = this;\n    instance.frameCount += 1;\n    requestAnimationFrame(() => {\n      instance.countframe();\n    })\n  }\n  size() {\n    if (this.ele.tagName !== 'CANVAS') {\n      this.canvasWidth = this.ele.getBoundingClientRect().width;\n      this.canvasHeight = this.ele.getBoundingClientRect().height;\n      this.space.width = this.canvasWidth;\n      this.space.height = this.canvasHeight;\n    }\n    else {\n      this.canvasWidth = this.space.parentElement.getBoundingClientRect().width;\n      this.canvasHeight = this.space.parentElement.getBoundingClientRect().height;\n      this.space.width = this.canvasWidth;\n      this.space.height = this.canvasHeight;\n    }\n\n  }\n  debounce(func, delay) {\n    let timer = null;\n    const $this = this;\n    return () => {\n      const context = $this;\n      const args = arguments;\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        func.apply(context, args);\n      }, delay);\n    };\n  }\n  perlinNoise(x, y, z) {\n    const getNoiseFloat = (x, y, z) => {\n      var p = new Array(512)\n      var permutation = [151, 160, 137, 91, 90, 15,\n        131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23,\n        190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33,\n        88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166,\n        77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244,\n        102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,\n        135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123,\n        5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,\n        223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9,\n        129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228,\n        251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107,\n        49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,\n        138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180\n      ];\n      for (var i = 0; i < 256; i++)\n        p[256 + i] = p[i] = permutation[i];\n\n      var X = Math.floor(x) & 255,                  // FIND UNIT CUBE THAT\n        Y = Math.floor(y) & 255,                  // CONTAINS POINT.\n        Z = Math.floor(z) & 255;\n      x -= Math.floor(x);                                // FIND RELATIVE X,Y,Z\n      y -= Math.floor(y);                                // OF POINT IN CUBE.\n      z -= Math.floor(z);\n      var u = fade(x),                                // COMPUTE FADE CURVES\n        v = fade(y),                                // FOR EACH OF X,Y,Z.\n        w = fade(z);\n      var A = p[X] + Y, AA = p[A] + Z, AB = p[A + 1] + Z,      // HASH COORDINATES OF\n        B = p[X + 1] + Y, BA = p[B] + Z, BB = p[B + 1] + Z;      // THE 8 CUBE CORNERS,\n\n      return scale(lerp(w, lerp(v, lerp(u, grad(p[AA], x, y, z),  // AND ADD\n        grad(p[BA], x - 1, y, z)), // BLENDED\n        lerp(u, grad(p[AB], x, y - 1, z),  // RESULTS\n          grad(p[BB], x - 1, y - 1, z))),// FROM  8\n        lerp(v, lerp(u, grad(p[AA + 1], x, y, z - 1),  // CORNERS\n          grad(p[BA + 1], x - 1, y, z - 1)), // OF CUBE\n          lerp(u, grad(p[AB + 1], x, y - 1, z - 1),\n            grad(p[BB + 1], x - 1, y - 1, z - 1)))));\n    }\n    const fade = (t) => { return t * t * t * (t * (t * 6 - 15) + 10); }\n    const lerp = (t, a, b) => { return a + t * (b - a); }\n    const grad = (hash, x, y, z) => {\n      var h = hash & 15;                      // CONVERT LO 4 BITS OF HASH CODE\n      var u = h < 8 ? x : y,                 // INTO 12 GRADIENT DIRECTIONS.\n        v = h < 4 ? y : h == 12 || h == 14 ? x : z;\n      return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);\n    }\n    const scale = (n) => { return (1 + n) / 2; }\n    return getNoiseFloat(x, y, z);\n  }\n  linearInterpolation(x, min, max, virtualMin, virtualMax) {\n    return ((x - min) / (max - min)) * (virtualMax - virtualMin);\n  }\n}"}],"Post":[{"title":"ES5/ES6學習筆記-ep1","_content":"\n\n\n## 搞清楚並且用最簡單的方法解釋js的apply/call/bind\n\n- 先解釋apply/call\n> apply/call 最簡單的解釋其實就是“把一個參數丟進去指定的函數裡面當this”\n```javascript=\n//假設有一個變數叫做qq, 初始值為'wow'\nvar qq = 'wow';\nfunction poop(a,b){\n    console.log(this,a,b);\n}\npoop.apply(qq);//wow undefine undefine\n// 這邊其實就是把qq丟進去poop()裡面當作this, 用call 的話亦然\n```\n- apply和call的差別\n> 雖然差別都是丟變數進去函數當this用，但是這兩個的差異在於支援參數不同\n```javascript=\n//apply的第一個參數傳入之後會變成函數中的this，但是第二個參數（必須要是array）傳入之後會變成函數原始支援的參數群\ntheFunction.apply(valueForThis, arrayOfArgs)\n//apply的第一個參數傳入之後會變成函數中的this，但是第二個以後的參數就是函數原始的所有參數群\ntheFunction.call(valueForThis, arg1, arg2, ...)\n```\n```javascript=\n //以上面的poop()來看\n poop().apply(qq,[1,2])//'wow' 1 2\n poop().call(qq,1,2)//'wow' 1 2\n```\n- 解釋bind\n\n> bind的用途跟apply/call 有點不同，他是會return 一個把指定變數綁進去當this的函數\n```javascript=\nfunction aa(a,b){\n    console.log(this,a,b)\n}\naa(11,22);//window 11 22 aa函數在沒被綁之前的this 都是window\nvar ccc=[1,2,3];\nvar gg = aa.bind(ccc);// 把ccc綁給aa之後重新包裝成一個gg, aa其實沒有被變動\ngg(44,44)//[1,2,3] 44 44 從這邊開始this被綁死了\n\n```\n- bind 的進階用法\n> 固定上層scope 的this，這個其實就是ES6 arrow function內部的做法\n```javascript=\nvar a = {\n    gg:'wow',\n    ff:function(){\n        setTimeout(function(){\n            console.log(this.gg)\n        }.bind(this))\n    }\n}\n\na.ff(); //wow\n```\n\n\n## 變數提升與let:\n\n- 變數提升最基本的案例:\n```javascript=\nconsole.log(a)\n//在\"var a = 10\" 之前去呼叫a, 其實會輸出undefine 而不是 ReferenceError: a is not defined.\n//那是因為var 其實是先把a 在最開頭做一個宣告a為變數，然後最後才賦予值。\nvar a = 10\n\n```\n\n- 函數中變數提升的狀況:\n    - 這個狀況:\n    ```javascript=\n        function test(v){\n           console.log(v)\n           var v = 3\n        }\n        test(10)\n    ```\n    - 其實等於這個狀況\n    ```javascript=\n        function test(v=10){\n          var v;// 引入的參數其實也會在開頭被先宣告，而且宣告的優先權會比函數內部的變數宣告來得高\n          var v;\n          v = 10\n          console.log(v)\n          v = 3\n        }\n        test(10)\n    ```\n\n- let/const 與暫時性死區（Temporal Dead Zone）\n    - 雖然let 可以用來避免用var產生的hoisting狀況，但是這並不代表let沒有hoisting行為\n    - 在「提升之後」以及「賦值之前」這段「期間」，如果你存取它就會拋出ReferenceError錯誤，而這段期間就稱做是 TDZ，它是一個為了解釋 let 與 const 的 hoisting 行為所提出的一個名詞。\n    ```javascript=\n        let x = 'outer value';\n\n        (function() {\n          // 在函數的起始處會產生x的 TDZ起始點 x\n          console.log(x) // TDZ期間存取，產生ReferenceError錯誤\n          let x = 'inner value' // 對x的宣告語句，這裡結束 TDZ for x\n        })()\n    ```\n    \n## let與if的搭配\n\n- 單行的if宣告不能在判斷boolean 之後let宣告\n\n```javascript=\n// 第一种写法，报错\nif (true) let x = 1;\n\n// 第二种写法，不报错\nif (true) {\n  let x = 1;\n}\n```\n\n- 應該避免在塊級作用域內聲明函數。如果確實需要，也應該寫成函數表達式，而不是函數聲明語句。\n\n```javascript=\n// 塊級作用域內部的函數聲明語句，建議不要使用\n{\n  let a = 'secret';\n  function f() {\n    return a;\n  }\n}\n// 塊級作用域內部，優先使用函數表達式\n{\n  let a = 'secret';\n  let f = function () {\n    return a;\n  };\n}\n```\n\n## const的重要意義 -- 固定傳址\n> 大家都知道const 宣告的值就是不變的常數，但是實際上const最重要的應用點其實是在於固定變數儲存位置的地址\n\n```javascript=\nconst a = [];\na.push('Hello'); // 可執行\na.length = 0;    // 可執行\na = ['Dave'];    // 錯誤，可以藉由這樣的方式避免a被換址\n\n```\n> 如果真的想將對象凍結，應該使用Object.freeze方法。\n```javascript=\nconst foo = Object.freeze({});\n\n// 常規模式時，下面一行不起作用；\n// 嚴格模式時，該行會報錯\nfoo.prop = 123;\n```\n\n\n\n\n","source":"_posts/ES5_ES6學習筆記-ep1.md","raw":"---\ntitle: ES5/ES6學習筆記-ep1\ncategories: \n- 心得\ntags:\n- js\n---\n\n\n\n## 搞清楚並且用最簡單的方法解釋js的apply/call/bind\n\n- 先解釋apply/call\n> apply/call 最簡單的解釋其實就是“把一個參數丟進去指定的函數裡面當this”\n```javascript=\n//假設有一個變數叫做qq, 初始值為'wow'\nvar qq = 'wow';\nfunction poop(a,b){\n    console.log(this,a,b);\n}\npoop.apply(qq);//wow undefine undefine\n// 這邊其實就是把qq丟進去poop()裡面當作this, 用call 的話亦然\n```\n- apply和call的差別\n> 雖然差別都是丟變數進去函數當this用，但是這兩個的差異在於支援參數不同\n```javascript=\n//apply的第一個參數傳入之後會變成函數中的this，但是第二個參數（必須要是array）傳入之後會變成函數原始支援的參數群\ntheFunction.apply(valueForThis, arrayOfArgs)\n//apply的第一個參數傳入之後會變成函數中的this，但是第二個以後的參數就是函數原始的所有參數群\ntheFunction.call(valueForThis, arg1, arg2, ...)\n```\n```javascript=\n //以上面的poop()來看\n poop().apply(qq,[1,2])//'wow' 1 2\n poop().call(qq,1,2)//'wow' 1 2\n```\n- 解釋bind\n\n> bind的用途跟apply/call 有點不同，他是會return 一個把指定變數綁進去當this的函數\n```javascript=\nfunction aa(a,b){\n    console.log(this,a,b)\n}\naa(11,22);//window 11 22 aa函數在沒被綁之前的this 都是window\nvar ccc=[1,2,3];\nvar gg = aa.bind(ccc);// 把ccc綁給aa之後重新包裝成一個gg, aa其實沒有被變動\ngg(44,44)//[1,2,3] 44 44 從這邊開始this被綁死了\n\n```\n- bind 的進階用法\n> 固定上層scope 的this，這個其實就是ES6 arrow function內部的做法\n```javascript=\nvar a = {\n    gg:'wow',\n    ff:function(){\n        setTimeout(function(){\n            console.log(this.gg)\n        }.bind(this))\n    }\n}\n\na.ff(); //wow\n```\n\n\n## 變數提升與let:\n\n- 變數提升最基本的案例:\n```javascript=\nconsole.log(a)\n//在\"var a = 10\" 之前去呼叫a, 其實會輸出undefine 而不是 ReferenceError: a is not defined.\n//那是因為var 其實是先把a 在最開頭做一個宣告a為變數，然後最後才賦予值。\nvar a = 10\n\n```\n\n- 函數中變數提升的狀況:\n    - 這個狀況:\n    ```javascript=\n        function test(v){\n           console.log(v)\n           var v = 3\n        }\n        test(10)\n    ```\n    - 其實等於這個狀況\n    ```javascript=\n        function test(v=10){\n          var v;// 引入的參數其實也會在開頭被先宣告，而且宣告的優先權會比函數內部的變數宣告來得高\n          var v;\n          v = 10\n          console.log(v)\n          v = 3\n        }\n        test(10)\n    ```\n\n- let/const 與暫時性死區（Temporal Dead Zone）\n    - 雖然let 可以用來避免用var產生的hoisting狀況，但是這並不代表let沒有hoisting行為\n    - 在「提升之後」以及「賦值之前」這段「期間」，如果你存取它就會拋出ReferenceError錯誤，而這段期間就稱做是 TDZ，它是一個為了解釋 let 與 const 的 hoisting 行為所提出的一個名詞。\n    ```javascript=\n        let x = 'outer value';\n\n        (function() {\n          // 在函數的起始處會產生x的 TDZ起始點 x\n          console.log(x) // TDZ期間存取，產生ReferenceError錯誤\n          let x = 'inner value' // 對x的宣告語句，這裡結束 TDZ for x\n        })()\n    ```\n    \n## let與if的搭配\n\n- 單行的if宣告不能在判斷boolean 之後let宣告\n\n```javascript=\n// 第一种写法，报错\nif (true) let x = 1;\n\n// 第二种写法，不报错\nif (true) {\n  let x = 1;\n}\n```\n\n- 應該避免在塊級作用域內聲明函數。如果確實需要，也應該寫成函數表達式，而不是函數聲明語句。\n\n```javascript=\n// 塊級作用域內部的函數聲明語句，建議不要使用\n{\n  let a = 'secret';\n  function f() {\n    return a;\n  }\n}\n// 塊級作用域內部，優先使用函數表達式\n{\n  let a = 'secret';\n  let f = function () {\n    return a;\n  };\n}\n```\n\n## const的重要意義 -- 固定傳址\n> 大家都知道const 宣告的值就是不變的常數，但是實際上const最重要的應用點其實是在於固定變數儲存位置的地址\n\n```javascript=\nconst a = [];\na.push('Hello'); // 可執行\na.length = 0;    // 可執行\na = ['Dave'];    // 錯誤，可以藉由這樣的方式避免a被換址\n\n```\n> 如果真的想將對象凍結，應該使用Object.freeze方法。\n```javascript=\nconst foo = Object.freeze({});\n\n// 常規模式時，下面一行不起作用；\n// 嚴格模式時，該行會報錯\nfoo.prop = 123;\n```\n\n\n\n\n","slug":"ES5_ES6學習筆記-ep1","published":1,"date":"2020-11-25T17:01:45.830Z","updated":"2020-11-25T17:01:45.830Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki5kjebk0001xdvdapzdgkdh","content":"<h2 id=\"搞清楚並且用最簡單的方法解釋js的apply-call-bind\"><a href=\"#搞清楚並且用最簡單的方法解釋js的apply-call-bind\" class=\"headerlink\" title=\"搞清楚並且用最簡單的方法解釋js的apply/call/bind\"></a>搞清楚並且用最簡單的方法解釋js的apply/call/bind</h2><ul>\n<li>先解釋apply/call<blockquote>\n<p>apply/call 最簡單的解釋其實就是“把一個參數丟進去指定的函數裡面當this”</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//假設有一個變數叫做qq, 初始值為&#x27;wow&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> qq = <span class=\"string\">&#x27;wow&#x27;</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">poop</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>,a,b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">poop.apply(qq);<span class=\"comment\">//wow undefine undefine</span></span><br><span class=\"line\"><span class=\"comment\">// 這邊其實就是把qq丟進去poop()裡面當作this, 用call 的話亦然</span></span><br></pre></td></tr></table></figure></li>\n<li>apply和call的差別<blockquote>\n<p>雖然差別都是丟變數進去函數當this用，但是這兩個的差異在於支援參數不同</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//apply的第一個參數傳入之後會變成函數中的this，但是第二個參數（必須要是array）傳入之後會變成函數原始支援的參數群</span></span><br><span class=\"line\">theFunction.apply(valueForThis, arrayOfArgs)</span><br><span class=\"line\"><span class=\"comment\">//apply的第一個參數傳入之後會變成函數中的this，但是第二個以後的參數就是函數原始的所有參數群</span></span><br><span class=\"line\">theFunction.call(valueForThis, arg1, arg2, ...)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//以上面的poop()來看</span></span><br><span class=\"line\">poop().apply(qq,[<span class=\"number\">1</span>,<span class=\"number\">2</span>])<span class=\"comment\">//&#x27;wow&#x27; 1 2</span></span><br><span class=\"line\">poop().call(qq,<span class=\"number\">1</span>,<span class=\"number\">2</span>)<span class=\"comment\">//&#x27;wow&#x27; 1 2</span></span><br></pre></td></tr></table></figure></li>\n<li>解釋bind</li>\n</ul>\n<blockquote>\n<p>bind的用途跟apply/call 有點不同，他是會return 一個把指定變數綁進去當this的函數</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">aa</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>,a,b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">aa(<span class=\"number\">11</span>,<span class=\"number\">22</span>);<span class=\"comment\">//window 11 22 aa函數在沒被綁之前的this 都是window</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ccc=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> gg = aa.bind(ccc);<span class=\"comment\">// 把ccc綁給aa之後重新包裝成一個gg, aa其實沒有被變動</span></span><br><span class=\"line\">gg(<span class=\"number\">44</span>,<span class=\"number\">44</span>)<span class=\"comment\">//[1,2,3] 44 44 從這邊開始this被綁死了</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>bind 的進階用法<blockquote>\n<p>固定上層scope 的this，這個其實就是ES6 arrow function內部的做法</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    gg:<span class=\"string\">&#x27;wow&#x27;</span>,</span><br><span class=\"line\">    ff:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.gg)</span><br><span class=\"line\">        &#125;.bind(<span class=\"built_in\">this</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">a.ff(); <span class=\"comment\">//wow</span></span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<h2 id=\"變數提升與let\"><a href=\"#變數提升與let\" class=\"headerlink\" title=\"變數提升與let:\"></a>變數提升與let:</h2><ul>\n<li><p>變數提升最基本的案例:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\"><span class=\"comment\">//在&quot;var a = 10&quot; 之前去呼叫a, 其實會輸出undefine 而不是 ReferenceError: a is not defined.</span></span><br><span class=\"line\"><span class=\"comment\">//那是因為var 其實是先把a 在最開頭做一個宣告a為變數，然後最後才賦予值。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">10</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>函數中變數提升的狀況:</p>\n<ul>\n<li>這個狀況:<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">v</span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(v)</span><br><span class=\"line\">   <span class=\"keyword\">var</span> v = <span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(<span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure></li>\n<li>其實等於這個狀況<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">v=<span class=\"number\">10</span></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> v;<span class=\"comment\">// 引入的參數其實也會在開頭被先宣告，而且宣告的優先權會比函數內部的變數宣告來得高</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> v;</span><br><span class=\"line\">  v = <span class=\"number\">10</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(v)</span><br><span class=\"line\">  v = <span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(<span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>let/const 與暫時性死區（Temporal Dead Zone）</p>\n<ul>\n<li>雖然let 可以用來避免用var產生的hoisting狀況，但是這並不代表let沒有hoisting行為</li>\n<li>在「提升之後」以及「賦值之前」這段「期間」，如果你存取它就會拋出ReferenceError錯誤，而這段期間就稱做是 TDZ，它是一個為了解釋 let 與 const 的 hoisting 行為所提出的一個名詞。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"string\">&#x27;outer value&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 在函數的起始處會產生x的 TDZ起始點 x</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x) <span class=\"comment\">// TDZ期間存取，產生ReferenceError錯誤</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> x = <span class=\"string\">&#x27;inner value&#x27;</span> <span class=\"comment\">// 對x的宣告語句，這裡結束 TDZ for x</span></span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"let與if的搭配\"><a href=\"#let與if的搭配\" class=\"headerlink\" title=\"let與if的搭配\"></a>let與if的搭配</h2><ul>\n<li>單行的if宣告不能在判斷boolean 之後let宣告</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一种写法，报错</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) <span class=\"keyword\">let</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第二种写法，不报错</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>應該避免在塊級作用域內聲明函數。如果確實需要，也應該寫成函數表達式，而不是函數聲明語句。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 塊級作用域內部的函數聲明語句，建議不要使用</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"string\">&#x27;secret&#x27;</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 塊級作用域內部，優先使用函數表達式</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"string\">&#x27;secret&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> f = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"const的重要意義-–-固定傳址\"><a href=\"#const的重要意義-–-固定傳址\" class=\"headerlink\" title=\"const的重要意義 – 固定傳址\"></a>const的重要意義 – 固定傳址</h2><blockquote>\n<p>大家都知道const 宣告的值就是不變的常數，但是實際上const最重要的應用點其實是在於固定變數儲存位置的地址</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = [];</span><br><span class=\"line\">a.push(<span class=\"string\">&#x27;Hello&#x27;</span>); <span class=\"comment\">// 可執行</span></span><br><span class=\"line\">a.length = <span class=\"number\">0</span>;    <span class=\"comment\">// 可執行</span></span><br><span class=\"line\">a = [<span class=\"string\">&#x27;Dave&#x27;</span>];    <span class=\"comment\">// 錯誤，可以藉由這樣的方式避免a被換址</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果真的想將對象凍結，應該使用Object.freeze方法。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"built_in\">Object</span>.freeze(&#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 常規模式時，下面一行不起作用；</span></span><br><span class=\"line\"><span class=\"comment\">// 嚴格模式時，該行會報錯</span></span><br><span class=\"line\">foo.prop = <span class=\"number\">123</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n\n","site":{"data":{"css/variables":"","languages":{"zh-TW":{"title":{"archive":"時間線","category":"分類","tag":"標籤","schedule":"時間表"},"menu":{"home":"首頁","archives":"時間線","categories":"分類","tags":"標籤","about":"關於","search":"搜尋","schedule":"時間表","sitemap":"網站地圖","commonweal":"公益 404"},"sidebar":{"overview":"本站概要","toc":"文章目錄"},"post":{"posted":"發表於","edited":"更新於","created":"創建時間","modified":"修改時間","edit":"編輯","in":"分類於","read_more":"閱讀全文","untitled":"未命名","sticky":"置頂文","views":"閱讀次數","related_posts":"相關文章","copyright":{"author":"作者","link":"文章連結","post_author":"Written by","post_link":"This article originally appeared on","license_title":"版權聲明","license_content":"本網誌所有文章除特別聲明外，均採用 %s 許可協議。轉載請註明出處！"}},"footer":{"powered":"","total_views":"總瀏覽次數","total_visitors":"訪客總數"},"counter":{"tag_cloud":{"zero":"目前還沒有任何標籤","one":"目前共有 1 個標籤","other":"目前共有 %d 個標籤"},"categories":{"zero":"目前還沒有任何分類","one":"目前共有 1 個分類","other":"目前共有 %d 個分類"},"archive_posts":{"zero":"目前還沒有任何文章。","one":"目前共有 1 篇文章。","other":"目前共有 %d 篇文章。"}},"state":{"posts":"文章","tags":"標籤","categories":"分類"},"search":{"placeholder":"搜尋...","empty":"We didn't find any results for the search: %s","hits_time":"%s results found in %s ms","hits":"%s results found"},"cheers":{"um":"嗯..","ok":"還不錯","nice":"好","good":"很好","great":"非常好","excellent":"棒棒Der"},"keep_on":"繼續努力。","symbol":{"comma":"，","period":"。","colon":"："},"reward":{"donate":"捐贈","wechatpay":"微信支付","alipay":"支付寶","paypal":"貝寶","bitcoin":"比特幣"},"follow_me":{"welcome":"歡迎關注我的其它站點"},"accessibility":{"nav_toggle":"切換導航欄","prev_page":"上一頁","next_page":"下一頁"},"symbols_count_time":{"count":"文章字數","count_total":"總字數","time":"所需閱讀時間","time_total":"所需總閱讀時間","time_minutes":"分鐘"}}},"css/mixins":"","css/styles":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","template/head":"<script src=\"//js/tool/canvas-fx-base.js\"></script>\n\n<script src=\"//js/ripple-logo.js\"></script>\n<script src=\"//js/silk-wave.js\"></script>\n\n<style>\n  @font-face {\n  font-family: \"Roboto\";\n  src: url(//font/Roboto.ttf) format(\"truetype\");\n}\n</style>","css/styl-plugin/grid-post-layout/main":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","css/styl-plugin/grid-post-layout/mixins":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n","css/styl-plugin/grid-post-layout/variables":""}},"excerpt":"","more":"<h2 id=\"搞清楚並且用最簡單的方法解釋js的apply-call-bind\"><a href=\"#搞清楚並且用最簡單的方法解釋js的apply-call-bind\" class=\"headerlink\" title=\"搞清楚並且用最簡單的方法解釋js的apply/call/bind\"></a>搞清楚並且用最簡單的方法解釋js的apply/call/bind</h2><ul>\n<li>先解釋apply/call<blockquote>\n<p>apply/call 最簡單的解釋其實就是“把一個參數丟進去指定的函數裡面當this”</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//假設有一個變數叫做qq, 初始值為&#x27;wow&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> qq = <span class=\"string\">&#x27;wow&#x27;</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">poop</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>,a,b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">poop.apply(qq);<span class=\"comment\">//wow undefine undefine</span></span><br><span class=\"line\"><span class=\"comment\">// 這邊其實就是把qq丟進去poop()裡面當作this, 用call 的話亦然</span></span><br></pre></td></tr></table></figure></li>\n<li>apply和call的差別<blockquote>\n<p>雖然差別都是丟變數進去函數當this用，但是這兩個的差異在於支援參數不同</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//apply的第一個參數傳入之後會變成函數中的this，但是第二個參數（必須要是array）傳入之後會變成函數原始支援的參數群</span></span><br><span class=\"line\">theFunction.apply(valueForThis, arrayOfArgs)</span><br><span class=\"line\"><span class=\"comment\">//apply的第一個參數傳入之後會變成函數中的this，但是第二個以後的參數就是函數原始的所有參數群</span></span><br><span class=\"line\">theFunction.call(valueForThis, arg1, arg2, ...)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//以上面的poop()來看</span></span><br><span class=\"line\">poop().apply(qq,[<span class=\"number\">1</span>,<span class=\"number\">2</span>])<span class=\"comment\">//&#x27;wow&#x27; 1 2</span></span><br><span class=\"line\">poop().call(qq,<span class=\"number\">1</span>,<span class=\"number\">2</span>)<span class=\"comment\">//&#x27;wow&#x27; 1 2</span></span><br></pre></td></tr></table></figure></li>\n<li>解釋bind</li>\n</ul>\n<blockquote>\n<p>bind的用途跟apply/call 有點不同，他是會return 一個把指定變數綁進去當this的函數</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">aa</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>,a,b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">aa(<span class=\"number\">11</span>,<span class=\"number\">22</span>);<span class=\"comment\">//window 11 22 aa函數在沒被綁之前的this 都是window</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ccc=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> gg = aa.bind(ccc);<span class=\"comment\">// 把ccc綁給aa之後重新包裝成一個gg, aa其實沒有被變動</span></span><br><span class=\"line\">gg(<span class=\"number\">44</span>,<span class=\"number\">44</span>)<span class=\"comment\">//[1,2,3] 44 44 從這邊開始this被綁死了</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>bind 的進階用法<blockquote>\n<p>固定上層scope 的this，這個其實就是ES6 arrow function內部的做法</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    gg:<span class=\"string\">&#x27;wow&#x27;</span>,</span><br><span class=\"line\">    ff:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.gg)</span><br><span class=\"line\">        &#125;.bind(<span class=\"built_in\">this</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">a.ff(); <span class=\"comment\">//wow</span></span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<h2 id=\"變數提升與let\"><a href=\"#變數提升與let\" class=\"headerlink\" title=\"變數提升與let:\"></a>變數提升與let:</h2><ul>\n<li><p>變數提升最基本的案例:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\"><span class=\"comment\">//在&quot;var a = 10&quot; 之前去呼叫a, 其實會輸出undefine 而不是 ReferenceError: a is not defined.</span></span><br><span class=\"line\"><span class=\"comment\">//那是因為var 其實是先把a 在最開頭做一個宣告a為變數，然後最後才賦予值。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">10</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>函數中變數提升的狀況:</p>\n<ul>\n<li>這個狀況:<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">v</span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(v)</span><br><span class=\"line\">   <span class=\"keyword\">var</span> v = <span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(<span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure></li>\n<li>其實等於這個狀況<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">v=<span class=\"number\">10</span></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> v;<span class=\"comment\">// 引入的參數其實也會在開頭被先宣告，而且宣告的優先權會比函數內部的變數宣告來得高</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> v;</span><br><span class=\"line\">  v = <span class=\"number\">10</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(v)</span><br><span class=\"line\">  v = <span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(<span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>let/const 與暫時性死區（Temporal Dead Zone）</p>\n<ul>\n<li>雖然let 可以用來避免用var產生的hoisting狀況，但是這並不代表let沒有hoisting行為</li>\n<li>在「提升之後」以及「賦值之前」這段「期間」，如果你存取它就會拋出ReferenceError錯誤，而這段期間就稱做是 TDZ，它是一個為了解釋 let 與 const 的 hoisting 行為所提出的一個名詞。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"string\">&#x27;outer value&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 在函數的起始處會產生x的 TDZ起始點 x</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x) <span class=\"comment\">// TDZ期間存取，產生ReferenceError錯誤</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> x = <span class=\"string\">&#x27;inner value&#x27;</span> <span class=\"comment\">// 對x的宣告語句，這裡結束 TDZ for x</span></span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"let與if的搭配\"><a href=\"#let與if的搭配\" class=\"headerlink\" title=\"let與if的搭配\"></a>let與if的搭配</h2><ul>\n<li>單行的if宣告不能在判斷boolean 之後let宣告</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一种写法，报错</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) <span class=\"keyword\">let</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第二种写法，不报错</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>應該避免在塊級作用域內聲明函數。如果確實需要，也應該寫成函數表達式，而不是函數聲明語句。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 塊級作用域內部的函數聲明語句，建議不要使用</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"string\">&#x27;secret&#x27;</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 塊級作用域內部，優先使用函數表達式</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"string\">&#x27;secret&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> f = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"const的重要意義-–-固定傳址\"><a href=\"#const的重要意義-–-固定傳址\" class=\"headerlink\" title=\"const的重要意義 – 固定傳址\"></a>const的重要意義 – 固定傳址</h2><blockquote>\n<p>大家都知道const 宣告的值就是不變的常數，但是實際上const最重要的應用點其實是在於固定變數儲存位置的地址</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = [];</span><br><span class=\"line\">a.push(<span class=\"string\">&#x27;Hello&#x27;</span>); <span class=\"comment\">// 可執行</span></span><br><span class=\"line\">a.length = <span class=\"number\">0</span>;    <span class=\"comment\">// 可執行</span></span><br><span class=\"line\">a = [<span class=\"string\">&#x27;Dave&#x27;</span>];    <span class=\"comment\">// 錯誤，可以藉由這樣的方式避免a被換址</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果真的想將對象凍結，應該使用Object.freeze方法。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"built_in\">Object</span>.freeze(&#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 常規模式時，下面一行不起作用；</span></span><br><span class=\"line\"><span class=\"comment\">// 嚴格模式時，該行會報錯</span></span><br><span class=\"line\">foo.prop = <span class=\"number\">123</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n\n"},{"title":"ES5/ES6學習筆記-ep2","_content":"\n\n\n\n## ES6解構賦值重點整理\n1. 模式匹配：\n> 只要等号两边的模式相同，左边的变量就会被赋予对应的值。\n\n> - 這個\n    let [a, b, c] = [1, 2, 3];\n\n> - 等同於這個\n    let a = 1;\n    let b = 2;\n    let c = 3;\n    \n> - 這個\n    let [foo, [[bar], baz]] = [1, [[2], 3]];\n\n> - 等同於這個\n    let foo = 1;\n    let bar = 2;\n    let baz = 3;\n\n> - 如果解構不成功，變量的值就等於undefined。\n    let [foo] = [];\n    let [bar，foo] = [1];\n    以上兩種情況都屬於解構失敗，foo的值都會等於undefined。\n    \n> - 解構賦值的等號右邊必須要是一個可以迭代的東西，如果不是的話會報錯\n    let [qoo]=null //報錯\n    \n> - 支援預設值，但也只有遇上對應的子項為 undefined才會採用預設值\n    let [foo = true] = [];\n    foo // true\n    let [x, y = 'b'] = ['a']; // x='a', y='b'\n    let [x, y = 'b'] = ['a', undefined]; // x='a', y='b'\n    let [x = 1] = [null];x // null 因為子項不等於undefined\n\n> - 字串也可以做模式匹配\n    const [a, b, c, d, e] = 'hello';\n    會變成\n    const a= 'h',\n    const b= 'e'\n    ...\n\n2. 對象匹配\n    - Basic\n    ```javascript=\n    let { bar, foo } = { foo: 'aaa', bar: 'bbb' };\n    foo // \"aaa\"\n    bar // \"bbb\"\n\n    let { baz } = { foo: 'aaa', bar: 'bbb' };\n    baz // undefined\n    ```\n    - 如果變數的名稱與複製目標的屬性名稱不一樣的話可以這樣做\n    ```javascript=\n    let { foo: baz } = { foo: 'aaa', bar: 'bbb' };\n    baz // \"aaa\"\n\n    let obj = { first: 'hello', last: 'world' };\n    let { first: f, last: l } = obj;\n    f // 'hello'\n    l // 'world'\n    ```\n    - 對象匹配也可以有預設值，而採用預設值的標準跟模式匹配一樣:undefined\n    ```javascript=\n    var {x = 3} = {};\n    x // 3\n\n    var {x, y = 5} = {x: 1};\n    x // 1\n    y // 5\n\n    //這個比較需要記憶\n    var {x: y = 3} = {};\n    y // 3\n\n    //這個比較需要記憶\n    var {x: y = 3} = {x: 5};\n    y // 5\n\n    var { message: msg = 'Something went wrong' } = {};\n    msg // \"Something went wrong\"\n    ```\n    - 注意不要把大括號寫在行首\n    ```javascript=\n    {x} = {x: 1};//報錯\n    //應該改寫成\n    let {x} = {x: 1};\n    //或\n    let x;//這行不寫的話x 會變全域\n    ({x} = {x: 1};)//這種方式盡量不要用\n    ```\n    - 函數參數的解構\n    ```javascript=\n    function add([x, y]){\n      return x + y;\n    }\n\n    add([1, 2]); // 3\n    ```\n    \n    - 函数参数的解构也可以使用默认值。\n    ```javascript=\n    function move({x = 0, y = 0} = {}) {\n      return [x, y];\n    }\n\n    move({x: 3, y: 8}); // [3, 8]\n    move({x: 3}); // [3, 0]\n    move({}); // [0, 0]\n    move(); // [0, 0]\n    ```\n    - 注意下列兩者的不同\n    ```javascript=\n    //函數參數本身附帶預設值\n    function move({x = 0, y = 0} = {}) {\n      return [x, y];\n    }\n    // 傳進來的物件會取代掉{}\n    move({x: 3, y: 8}); // [3, 8]\n    move({x: 3}); // [3, 0]\n    move({}); // [0, 0]\n    move(); // [0, 0]\n    ```\n    \n    ```javascript=\n    function move({x, y} = { x: 0, y: 0 }) {\n      return [x, y];\n    }\n    // 傳進來的物件會取代掉{ x: 0, y: 0 }\n    move({x: 3, y: 8}); // [3, 8]\n    move({x: 3}); // [3, undefined]\n    move({}); // [undefined, undefined]\n    move(); // [0, 0]\n    ```\n3. 解構賦值的用途\n    - 交換變數值\n    ```javascript=\n    let x = 1;\n    let y = 2;\n\n    [x, y] = [y, x];\n    ```\n    - 從物件/陣列 快速宣告多個值\n    ```javascript=\n    function example() {\n      return [1, 2, 3];\n    }\n    let [a, b, c] = example();\n\n    // 返回一个对象\n\n    function example() {\n      return {\n        foo: 1,\n        bar: 2\n      };\n    }\n    let { foo, bar } = example();\n    ```\n    \n    - 快速指定函數預設參數值\n    ```javascript=\n    $.ajax = function (url, {\n      async = true,\n      beforeSend = function () {},\n      cache = true,\n      complete = function () {},\n      crossDomain = false,\n      global = true,\n      // ... more config\n    } = {}) {\n      // ... do stuff\n    };\n    ```\n4. generator function(生成器函數)是什麼？\n\n    - 在ES6中定義一個生成器函數很簡單，在函數後跟上「*」即可：\n\n    ```\n    function* foo1() { };\n    function *foo2() { };\n    function * foo3() { };\n\n    foo1.toString(); // \"function* foo1() { }\"\n    foo2.toString(); // \"function* foo2() { }\"\n    foo3.toString(); // \"function* foo3() { }\"\n\n    ```\n    - 调用生成器函数会产生一个生成器（generator）。生成器拥有的最重要的方法是 next()，用来迭代：\n    ```javascript=\n    function* fibs() {\n      let a = 0;\n      let b = 1;\n      while (true) {\n        yield a;//碰到yield就會return 一個值\n        [a, b] = [b, a + b];\n      }\n    }\n    ```\n\n","source":"_posts/ES5_ES6學習筆記-ep2.md","raw":"---\ntitle: ES5/ES6學習筆記-ep2\ncategories: \n- 心得\ntags:\n- js\n---\n\n\n\n\n## ES6解構賦值重點整理\n1. 模式匹配：\n> 只要等号两边的模式相同，左边的变量就会被赋予对应的值。\n\n> - 這個\n    let [a, b, c] = [1, 2, 3];\n\n> - 等同於這個\n    let a = 1;\n    let b = 2;\n    let c = 3;\n    \n> - 這個\n    let [foo, [[bar], baz]] = [1, [[2], 3]];\n\n> - 等同於這個\n    let foo = 1;\n    let bar = 2;\n    let baz = 3;\n\n> - 如果解構不成功，變量的值就等於undefined。\n    let [foo] = [];\n    let [bar，foo] = [1];\n    以上兩種情況都屬於解構失敗，foo的值都會等於undefined。\n    \n> - 解構賦值的等號右邊必須要是一個可以迭代的東西，如果不是的話會報錯\n    let [qoo]=null //報錯\n    \n> - 支援預設值，但也只有遇上對應的子項為 undefined才會採用預設值\n    let [foo = true] = [];\n    foo // true\n    let [x, y = 'b'] = ['a']; // x='a', y='b'\n    let [x, y = 'b'] = ['a', undefined]; // x='a', y='b'\n    let [x = 1] = [null];x // null 因為子項不等於undefined\n\n> - 字串也可以做模式匹配\n    const [a, b, c, d, e] = 'hello';\n    會變成\n    const a= 'h',\n    const b= 'e'\n    ...\n\n2. 對象匹配\n    - Basic\n    ```javascript=\n    let { bar, foo } = { foo: 'aaa', bar: 'bbb' };\n    foo // \"aaa\"\n    bar // \"bbb\"\n\n    let { baz } = { foo: 'aaa', bar: 'bbb' };\n    baz // undefined\n    ```\n    - 如果變數的名稱與複製目標的屬性名稱不一樣的話可以這樣做\n    ```javascript=\n    let { foo: baz } = { foo: 'aaa', bar: 'bbb' };\n    baz // \"aaa\"\n\n    let obj = { first: 'hello', last: 'world' };\n    let { first: f, last: l } = obj;\n    f // 'hello'\n    l // 'world'\n    ```\n    - 對象匹配也可以有預設值，而採用預設值的標準跟模式匹配一樣:undefined\n    ```javascript=\n    var {x = 3} = {};\n    x // 3\n\n    var {x, y = 5} = {x: 1};\n    x // 1\n    y // 5\n\n    //這個比較需要記憶\n    var {x: y = 3} = {};\n    y // 3\n\n    //這個比較需要記憶\n    var {x: y = 3} = {x: 5};\n    y // 5\n\n    var { message: msg = 'Something went wrong' } = {};\n    msg // \"Something went wrong\"\n    ```\n    - 注意不要把大括號寫在行首\n    ```javascript=\n    {x} = {x: 1};//報錯\n    //應該改寫成\n    let {x} = {x: 1};\n    //或\n    let x;//這行不寫的話x 會變全域\n    ({x} = {x: 1};)//這種方式盡量不要用\n    ```\n    - 函數參數的解構\n    ```javascript=\n    function add([x, y]){\n      return x + y;\n    }\n\n    add([1, 2]); // 3\n    ```\n    \n    - 函数参数的解构也可以使用默认值。\n    ```javascript=\n    function move({x = 0, y = 0} = {}) {\n      return [x, y];\n    }\n\n    move({x: 3, y: 8}); // [3, 8]\n    move({x: 3}); // [3, 0]\n    move({}); // [0, 0]\n    move(); // [0, 0]\n    ```\n    - 注意下列兩者的不同\n    ```javascript=\n    //函數參數本身附帶預設值\n    function move({x = 0, y = 0} = {}) {\n      return [x, y];\n    }\n    // 傳進來的物件會取代掉{}\n    move({x: 3, y: 8}); // [3, 8]\n    move({x: 3}); // [3, 0]\n    move({}); // [0, 0]\n    move(); // [0, 0]\n    ```\n    \n    ```javascript=\n    function move({x, y} = { x: 0, y: 0 }) {\n      return [x, y];\n    }\n    // 傳進來的物件會取代掉{ x: 0, y: 0 }\n    move({x: 3, y: 8}); // [3, 8]\n    move({x: 3}); // [3, undefined]\n    move({}); // [undefined, undefined]\n    move(); // [0, 0]\n    ```\n3. 解構賦值的用途\n    - 交換變數值\n    ```javascript=\n    let x = 1;\n    let y = 2;\n\n    [x, y] = [y, x];\n    ```\n    - 從物件/陣列 快速宣告多個值\n    ```javascript=\n    function example() {\n      return [1, 2, 3];\n    }\n    let [a, b, c] = example();\n\n    // 返回一个对象\n\n    function example() {\n      return {\n        foo: 1,\n        bar: 2\n      };\n    }\n    let { foo, bar } = example();\n    ```\n    \n    - 快速指定函數預設參數值\n    ```javascript=\n    $.ajax = function (url, {\n      async = true,\n      beforeSend = function () {},\n      cache = true,\n      complete = function () {},\n      crossDomain = false,\n      global = true,\n      // ... more config\n    } = {}) {\n      // ... do stuff\n    };\n    ```\n4. generator function(生成器函數)是什麼？\n\n    - 在ES6中定義一個生成器函數很簡單，在函數後跟上「*」即可：\n\n    ```\n    function* foo1() { };\n    function *foo2() { };\n    function * foo3() { };\n\n    foo1.toString(); // \"function* foo1() { }\"\n    foo2.toString(); // \"function* foo2() { }\"\n    foo3.toString(); // \"function* foo3() { }\"\n\n    ```\n    - 调用生成器函数会产生一个生成器（generator）。生成器拥有的最重要的方法是 next()，用来迭代：\n    ```javascript=\n    function* fibs() {\n      let a = 0;\n      let b = 1;\n      while (true) {\n        yield a;//碰到yield就會return 一個值\n        [a, b] = [b, a + b];\n      }\n    }\n    ```\n\n","slug":"ES5_ES6學習筆記-ep2","published":1,"date":"2020-11-25T17:01:45.831Z","updated":"2020-11-25T17:01:45.837Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki5kjebo0003xdvdar7xh90c","content":"<h2 id=\"ES6解構賦值重點整理\"><a href=\"#ES6解構賦值重點整理\" class=\"headerlink\" title=\"ES6解構賦值重點整理\"></a>ES6解構賦值重點整理</h2><ol>\n<li>模式匹配：<blockquote>\n<p>只要等号两边的模式相同，左边的变量就会被赋予对应的值。</p>\n</blockquote>\n</li>\n</ol>\n<blockquote>\n<ul>\n<li>這個<br>  let [a, b, c] = [1, 2, 3];</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>等同於這個<br>  let a = 1;<br>  let b = 2;<br>  let c = 3;</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>這個<br>  let [foo, [[bar], baz]] = [1, [[2], 3]];</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>等同於這個<br>  let foo = 1;<br>  let bar = 2;<br>  let baz = 3;</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>如果解構不成功，變量的值就等於undefined。<br>  let [foo] = [];<br>  let [bar，foo] = [1];<br>  以上兩種情況都屬於解構失敗，foo的值都會等於undefined。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>解構賦值的等號右邊必須要是一個可以迭代的東西，如果不是的話會報錯<br>  let [qoo]=null //報錯</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>支援預設值，但也只有遇上對應的子項為 undefined才會採用預設值<br>  let [foo = true] = [];<br>  foo // true<br>  let [x, y = ‘b’] = [‘a’]; // x=’a’, y=’b’<br>  let [x, y = ‘b’] = [‘a’, undefined]; // x=’a’, y=’b’<br>  let [x = 1] = [null];x // null 因為子項不等於undefined</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>字串也可以做模式匹配<br>  const [a, b, c, d, e] = ‘hello’;<br>  會變成<br>  const a= ‘h’,<br>  const b= ‘e’<br>  …</li>\n</ul>\n</blockquote>\n<ol start=\"2\">\n<li><p>對象匹配</p>\n<ul>\n<li><p>Basic</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; bar, foo &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">&#x27;aaa&#x27;</span>, <span class=\"attr\">bar</span>: <span class=\"string\">&#x27;bbb&#x27;</span> &#125;;</span><br><span class=\"line\">foo <span class=\"comment\">// &quot;aaa&quot;</span></span><br><span class=\"line\">bar <span class=\"comment\">// &quot;bbb&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; baz &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">&#x27;aaa&#x27;</span>, <span class=\"attr\">bar</span>: <span class=\"string\">&#x27;bbb&#x27;</span> &#125;;</span><br><span class=\"line\">baz <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure></li>\n<li><p>如果變數的名稱與複製目標的屬性名稱不一樣的話可以這樣做</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">foo</span>: baz &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">&#x27;aaa&#x27;</span>, <span class=\"attr\">bar</span>: <span class=\"string\">&#x27;bbb&#x27;</span> &#125;;</span><br><span class=\"line\">baz <span class=\"comment\">// &quot;aaa&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">first</span>: <span class=\"string\">&#x27;hello&#x27;</span>, <span class=\"attr\">last</span>: <span class=\"string\">&#x27;world&#x27;</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">first</span>: f, <span class=\"attr\">last</span>: l &#125; = obj;</span><br><span class=\"line\">f <span class=\"comment\">// &#x27;hello&#x27;</span></span><br><span class=\"line\">l <span class=\"comment\">// &#x27;world&#x27;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>對象匹配也可以有預設值，而採用預設值的標準跟模式匹配一樣:undefined</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> &#123;x = <span class=\"number\">3</span>&#125; = &#123;&#125;;</span><br><span class=\"line\">x <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;x, y = <span class=\"number\">5</span>&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\">y <span class=\"comment\">// 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//這個比較需要記憶</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;<span class=\"attr\">x</span>: y = <span class=\"number\">3</span>&#125; = &#123;&#125;;</span><br><span class=\"line\">y <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//這個比較需要記憶</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;<span class=\"attr\">x</span>: y = <span class=\"number\">3</span>&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">y <span class=\"comment\">// 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; <span class=\"attr\">message</span>: msg = <span class=\"string\">&#x27;Something went wrong&#x27;</span> &#125; = &#123;&#125;;</span><br><span class=\"line\">msg <span class=\"comment\">// &quot;Something went wrong&quot;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>注意不要把大括號寫在行首</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;x&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;;<span class=\"comment\">//報錯</span></span><br><span class=\"line\"><span class=\"comment\">//應該改寫成</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;x&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">//或</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> x;<span class=\"comment\">//這行不寫的話x 會變全域</span></span><br><span class=\"line\">(&#123;x&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;;)<span class=\"comment\">//這種方式盡量不要用</span></span><br></pre></td></tr></table></figure></li>\n<li><p>函數參數的解構</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">[x, y]</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add([<span class=\"number\">1</span>, <span class=\"number\">2</span>]); <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>函数参数的解构也可以使用默认值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">move</span>(<span class=\"params\">&#123;x = <span class=\"number\">0</span>, y = <span class=\"number\">0</span>&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [x, y];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">move(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">8</span>&#125;); <span class=\"comment\">// [3, 8]</span></span><br><span class=\"line\">move(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>&#125;); <span class=\"comment\">// [3, 0]</span></span><br><span class=\"line\">move(&#123;&#125;); <span class=\"comment\">// [0, 0]</span></span><br><span class=\"line\">move(); <span class=\"comment\">// [0, 0]</span></span><br></pre></td></tr></table></figure></li>\n<li><p>注意下列兩者的不同</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函數參數本身附帶預設值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">move</span>(<span class=\"params\">&#123;x = <span class=\"number\">0</span>, y = <span class=\"number\">0</span>&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [x, y];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 傳進來的物件會取代掉&#123;&#125;</span></span><br><span class=\"line\">move(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">8</span>&#125;); <span class=\"comment\">// [3, 8]</span></span><br><span class=\"line\">move(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>&#125;); <span class=\"comment\">// [3, 0]</span></span><br><span class=\"line\">move(&#123;&#125;); <span class=\"comment\">// [0, 0]</span></span><br><span class=\"line\">move(); <span class=\"comment\">// [0, 0]</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">move</span>(<span class=\"params\">&#123;x, y&#125; = &#123; x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span> &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [x, y];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 傳進來的物件會取代掉&#123; x: 0, y: 0 &#125;</span></span><br><span class=\"line\">move(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">8</span>&#125;); <span class=\"comment\">// [3, 8]</span></span><br><span class=\"line\">move(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>&#125;); <span class=\"comment\">// [3, undefined]</span></span><br><span class=\"line\">move(&#123;&#125;); <span class=\"comment\">// [undefined, undefined]</span></span><br><span class=\"line\">move(); <span class=\"comment\">// [0, 0]</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>解構賦值的用途</p>\n<ul>\n<li><p>交換變數值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> y = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">[x, y] = [y, x];</span><br></pre></td></tr></table></figure></li>\n<li><p>從物件/陣列 快速宣告多個值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c] = example();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回一个对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    foo: <span class=\"number\">1</span>,</span><br><span class=\"line\">    bar: <span class=\"number\">2</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; foo, bar &#125; = example();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>快速指定函數預設參數值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">url, &#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  <span class=\"keyword\">async</span> = <span class=\"literal\">true</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  beforeSend = <span class=\"keyword\">function</span> () &#123;&#125;,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  cache = <span class=\"literal\">true</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  complete = <span class=\"keyword\">function</span> () &#123;&#125;,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  crossDomain = <span class=\"literal\">false</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  <span class=\"built_in\">global</span> = <span class=\"literal\">true</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  <span class=\"regexp\">//</span> ... more config</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ... do stuff</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>generator function(生成器函數)是什麼？</p>\n<ul>\n<li><p>在ES6中定義一個生成器函數很簡單，在函數後跟上「*」即可：</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">foo1</span>(<span class=\"params\"></span>) </span>&#123; &#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">foo2</span>(<span class=\"params\"></span>) </span>&#123; &#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> * <span class=\"title\">foo3</span>(<span class=\"params\"></span>) </span>&#123; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">foo1.toString(); <span class=\"comment\">// &quot;function* foo1() &#123; &#125;&quot;</span></span><br><span class=\"line\">foo2.toString(); <span class=\"comment\">// &quot;function* foo2() &#123; &#125;&quot;</span></span><br><span class=\"line\">foo3.toString(); <span class=\"comment\">// &quot;function* foo3() &#123; &#125;&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><p>调用生成器函数会产生一个生成器（generator）。生成器拥有的最重要的方法是 next()，用来迭代：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">fibs</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> a;<span class=\"comment\">//碰到yield就會return 一個值</span></span><br><span class=\"line\">    [a, b] = [b, a + b];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{"css/variables":"","languages":{"zh-TW":{"title":{"archive":"時間線","category":"分類","tag":"標籤","schedule":"時間表"},"menu":{"home":"首頁","archives":"時間線","categories":"分類","tags":"標籤","about":"關於","search":"搜尋","schedule":"時間表","sitemap":"網站地圖","commonweal":"公益 404"},"sidebar":{"overview":"本站概要","toc":"文章目錄"},"post":{"posted":"發表於","edited":"更新於","created":"創建時間","modified":"修改時間","edit":"編輯","in":"分類於","read_more":"閱讀全文","untitled":"未命名","sticky":"置頂文","views":"閱讀次數","related_posts":"相關文章","copyright":{"author":"作者","link":"文章連結","post_author":"Written by","post_link":"This article originally appeared on","license_title":"版權聲明","license_content":"本網誌所有文章除特別聲明外，均採用 %s 許可協議。轉載請註明出處！"}},"footer":{"powered":"","total_views":"總瀏覽次數","total_visitors":"訪客總數"},"counter":{"tag_cloud":{"zero":"目前還沒有任何標籤","one":"目前共有 1 個標籤","other":"目前共有 %d 個標籤"},"categories":{"zero":"目前還沒有任何分類","one":"目前共有 1 個分類","other":"目前共有 %d 個分類"},"archive_posts":{"zero":"目前還沒有任何文章。","one":"目前共有 1 篇文章。","other":"目前共有 %d 篇文章。"}},"state":{"posts":"文章","tags":"標籤","categories":"分類"},"search":{"placeholder":"搜尋...","empty":"We didn't find any results for the search: %s","hits_time":"%s results found in %s ms","hits":"%s results found"},"cheers":{"um":"嗯..","ok":"還不錯","nice":"好","good":"很好","great":"非常好","excellent":"棒棒Der"},"keep_on":"繼續努力。","symbol":{"comma":"，","period":"。","colon":"："},"reward":{"donate":"捐贈","wechatpay":"微信支付","alipay":"支付寶","paypal":"貝寶","bitcoin":"比特幣"},"follow_me":{"welcome":"歡迎關注我的其它站點"},"accessibility":{"nav_toggle":"切換導航欄","prev_page":"上一頁","next_page":"下一頁"},"symbols_count_time":{"count":"文章字數","count_total":"總字數","time":"所需閱讀時間","time_total":"所需總閱讀時間","time_minutes":"分鐘"}}},"css/mixins":"","css/styles":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","template/head":"<script src=\"//js/tool/canvas-fx-base.js\"></script>\n\n<script src=\"//js/ripple-logo.js\"></script>\n<script src=\"//js/silk-wave.js\"></script>\n\n<style>\n  @font-face {\n  font-family: \"Roboto\";\n  src: url(//font/Roboto.ttf) format(\"truetype\");\n}\n</style>","css/styl-plugin/grid-post-layout/main":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","css/styl-plugin/grid-post-layout/mixins":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n","css/styl-plugin/grid-post-layout/variables":""}},"excerpt":"","more":"<h2 id=\"ES6解構賦值重點整理\"><a href=\"#ES6解構賦值重點整理\" class=\"headerlink\" title=\"ES6解構賦值重點整理\"></a>ES6解構賦值重點整理</h2><ol>\n<li>模式匹配：<blockquote>\n<p>只要等号两边的模式相同，左边的变量就会被赋予对应的值。</p>\n</blockquote>\n</li>\n</ol>\n<blockquote>\n<ul>\n<li>這個<br>  let [a, b, c] = [1, 2, 3];</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>等同於這個<br>  let a = 1;<br>  let b = 2;<br>  let c = 3;</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>這個<br>  let [foo, [[bar], baz]] = [1, [[2], 3]];</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>等同於這個<br>  let foo = 1;<br>  let bar = 2;<br>  let baz = 3;</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>如果解構不成功，變量的值就等於undefined。<br>  let [foo] = [];<br>  let [bar，foo] = [1];<br>  以上兩種情況都屬於解構失敗，foo的值都會等於undefined。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>解構賦值的等號右邊必須要是一個可以迭代的東西，如果不是的話會報錯<br>  let [qoo]=null //報錯</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>支援預設值，但也只有遇上對應的子項為 undefined才會採用預設值<br>  let [foo = true] = [];<br>  foo // true<br>  let [x, y = ‘b’] = [‘a’]; // x=’a’, y=’b’<br>  let [x, y = ‘b’] = [‘a’, undefined]; // x=’a’, y=’b’<br>  let [x = 1] = [null];x // null 因為子項不等於undefined</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>字串也可以做模式匹配<br>  const [a, b, c, d, e] = ‘hello’;<br>  會變成<br>  const a= ‘h’,<br>  const b= ‘e’<br>  …</li>\n</ul>\n</blockquote>\n<ol start=\"2\">\n<li><p>對象匹配</p>\n<ul>\n<li><p>Basic</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; bar, foo &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">&#x27;aaa&#x27;</span>, <span class=\"attr\">bar</span>: <span class=\"string\">&#x27;bbb&#x27;</span> &#125;;</span><br><span class=\"line\">foo <span class=\"comment\">// &quot;aaa&quot;</span></span><br><span class=\"line\">bar <span class=\"comment\">// &quot;bbb&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; baz &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">&#x27;aaa&#x27;</span>, <span class=\"attr\">bar</span>: <span class=\"string\">&#x27;bbb&#x27;</span> &#125;;</span><br><span class=\"line\">baz <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure></li>\n<li><p>如果變數的名稱與複製目標的屬性名稱不一樣的話可以這樣做</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">foo</span>: baz &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">&#x27;aaa&#x27;</span>, <span class=\"attr\">bar</span>: <span class=\"string\">&#x27;bbb&#x27;</span> &#125;;</span><br><span class=\"line\">baz <span class=\"comment\">// &quot;aaa&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">first</span>: <span class=\"string\">&#x27;hello&#x27;</span>, <span class=\"attr\">last</span>: <span class=\"string\">&#x27;world&#x27;</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">first</span>: f, <span class=\"attr\">last</span>: l &#125; = obj;</span><br><span class=\"line\">f <span class=\"comment\">// &#x27;hello&#x27;</span></span><br><span class=\"line\">l <span class=\"comment\">// &#x27;world&#x27;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>對象匹配也可以有預設值，而採用預設值的標準跟模式匹配一樣:undefined</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> &#123;x = <span class=\"number\">3</span>&#125; = &#123;&#125;;</span><br><span class=\"line\">x <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;x, y = <span class=\"number\">5</span>&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\">y <span class=\"comment\">// 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//這個比較需要記憶</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;<span class=\"attr\">x</span>: y = <span class=\"number\">3</span>&#125; = &#123;&#125;;</span><br><span class=\"line\">y <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//這個比較需要記憶</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;<span class=\"attr\">x</span>: y = <span class=\"number\">3</span>&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">y <span class=\"comment\">// 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; <span class=\"attr\">message</span>: msg = <span class=\"string\">&#x27;Something went wrong&#x27;</span> &#125; = &#123;&#125;;</span><br><span class=\"line\">msg <span class=\"comment\">// &quot;Something went wrong&quot;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>注意不要把大括號寫在行首</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;x&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;;<span class=\"comment\">//報錯</span></span><br><span class=\"line\"><span class=\"comment\">//應該改寫成</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;x&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">//或</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> x;<span class=\"comment\">//這行不寫的話x 會變全域</span></span><br><span class=\"line\">(&#123;x&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;;)<span class=\"comment\">//這種方式盡量不要用</span></span><br></pre></td></tr></table></figure></li>\n<li><p>函數參數的解構</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">[x, y]</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add([<span class=\"number\">1</span>, <span class=\"number\">2</span>]); <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>函数参数的解构也可以使用默认值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">move</span>(<span class=\"params\">&#123;x = <span class=\"number\">0</span>, y = <span class=\"number\">0</span>&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [x, y];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">move(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">8</span>&#125;); <span class=\"comment\">// [3, 8]</span></span><br><span class=\"line\">move(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>&#125;); <span class=\"comment\">// [3, 0]</span></span><br><span class=\"line\">move(&#123;&#125;); <span class=\"comment\">// [0, 0]</span></span><br><span class=\"line\">move(); <span class=\"comment\">// [0, 0]</span></span><br></pre></td></tr></table></figure></li>\n<li><p>注意下列兩者的不同</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函數參數本身附帶預設值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">move</span>(<span class=\"params\">&#123;x = <span class=\"number\">0</span>, y = <span class=\"number\">0</span>&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [x, y];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 傳進來的物件會取代掉&#123;&#125;</span></span><br><span class=\"line\">move(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">8</span>&#125;); <span class=\"comment\">// [3, 8]</span></span><br><span class=\"line\">move(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>&#125;); <span class=\"comment\">// [3, 0]</span></span><br><span class=\"line\">move(&#123;&#125;); <span class=\"comment\">// [0, 0]</span></span><br><span class=\"line\">move(); <span class=\"comment\">// [0, 0]</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">move</span>(<span class=\"params\">&#123;x, y&#125; = &#123; x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span> &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [x, y];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 傳進來的物件會取代掉&#123; x: 0, y: 0 &#125;</span></span><br><span class=\"line\">move(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">8</span>&#125;); <span class=\"comment\">// [3, 8]</span></span><br><span class=\"line\">move(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>&#125;); <span class=\"comment\">// [3, undefined]</span></span><br><span class=\"line\">move(&#123;&#125;); <span class=\"comment\">// [undefined, undefined]</span></span><br><span class=\"line\">move(); <span class=\"comment\">// [0, 0]</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>解構賦值的用途</p>\n<ul>\n<li><p>交換變數值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> y = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">[x, y] = [y, x];</span><br></pre></td></tr></table></figure></li>\n<li><p>從物件/陣列 快速宣告多個值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c] = example();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回一个对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    foo: <span class=\"number\">1</span>,</span><br><span class=\"line\">    bar: <span class=\"number\">2</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; foo, bar &#125; = example();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>快速指定函數預設參數值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">url, &#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  <span class=\"keyword\">async</span> = <span class=\"literal\">true</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  beforeSend = <span class=\"keyword\">function</span> () &#123;&#125;,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  cache = <span class=\"literal\">true</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  complete = <span class=\"keyword\">function</span> () &#123;&#125;,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  crossDomain = <span class=\"literal\">false</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  <span class=\"built_in\">global</span> = <span class=\"literal\">true</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  <span class=\"regexp\">//</span> ... more config</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ... do stuff</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>generator function(生成器函數)是什麼？</p>\n<ul>\n<li><p>在ES6中定義一個生成器函數很簡單，在函數後跟上「*」即可：</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">foo1</span>(<span class=\"params\"></span>) </span>&#123; &#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">foo2</span>(<span class=\"params\"></span>) </span>&#123; &#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> * <span class=\"title\">foo3</span>(<span class=\"params\"></span>) </span>&#123; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">foo1.toString(); <span class=\"comment\">// &quot;function* foo1() &#123; &#125;&quot;</span></span><br><span class=\"line\">foo2.toString(); <span class=\"comment\">// &quot;function* foo2() &#123; &#125;&quot;</span></span><br><span class=\"line\">foo3.toString(); <span class=\"comment\">// &quot;function* foo3() &#123; &#125;&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><p>调用生成器函数会产生一个生成器（generator）。生成器拥有的最重要的方法是 next()，用来迭代：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">fibs</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> a;<span class=\"comment\">//碰到yield就會return 一個值</span></span><br><span class=\"line\">    [a, b] = [b, a + b];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ol>\n"},{"title":"ES5/ES6學習筆記-ep3","_content":"\n\n\n## ES6 Promise 重點整理\n1. Promise 是什麼\n - 用來處理callback chain 的一種新JS語法\n - 本身是一個class, 但是他也有自己的靜態方法\n - 建立出來的實例物件具有三種狀態：pending/fulfilled/rejected\n - 狀態只可能是從pending 變成 fulfilled/rejected\n2. promise.prototype.then()\n - then()可以傳入兩個函數作為參數，第一個函數會在promise物件被fulfilled之後馬上發動，第二個函數則會在promise物件被reject的時候馬上發動\n - 會回傳一個新的promise物件\n - **重要** ： 當then與then串接的時候，後面的then 的 **參數function** 會得到前面的then 的 **參數function** return出來的值作為參數\n3. promise.prototype.catch()\n - catch()可以傳入一個函數作為參數，並且這個函數會接收到promise throw出來的error\n - 也會回傳一個新的promise物件\n4. promise.all()\n - 也會回傳新的promise\n - 必須要傳入一個陣列，這個陣列本身的內容物都是promise\n - 當這些內容物promise都被fullfill之後，all()本身回傳的promise就會被fullfill\n - 在all() 回傳得到的promise後面去使用then(), 該 then()的參數function會拿到all()的所有內容promise 在resolve 時使用的參數 所組成的陣列。\n5. promise.race()\n - 也會回傳新的promise\n - 必須要傳入一個陣列，這個陣列本身的內容物都是promise\n - 當這些內容物promise有其中一個被fullfill之後，race()本身回傳的promise就會被fullfill\n - 在race() 回傳得到的promise後面去使用then(), 該 then()的參數function會拿到race()的最快達成fullfilled 的內容promise 在resolve 時使用的參數。\n\n\n","source":"_posts/ES5_ES6學習筆記-ep3.md","raw":"---\ntitle: ES5/ES6學習筆記-ep3\ncategories: \n- 心得\ntags:\n- js\n---\n\n\n\n## ES6 Promise 重點整理\n1. Promise 是什麼\n - 用來處理callback chain 的一種新JS語法\n - 本身是一個class, 但是他也有自己的靜態方法\n - 建立出來的實例物件具有三種狀態：pending/fulfilled/rejected\n - 狀態只可能是從pending 變成 fulfilled/rejected\n2. promise.prototype.then()\n - then()可以傳入兩個函數作為參數，第一個函數會在promise物件被fulfilled之後馬上發動，第二個函數則會在promise物件被reject的時候馬上發動\n - 會回傳一個新的promise物件\n - **重要** ： 當then與then串接的時候，後面的then 的 **參數function** 會得到前面的then 的 **參數function** return出來的值作為參數\n3. promise.prototype.catch()\n - catch()可以傳入一個函數作為參數，並且這個函數會接收到promise throw出來的error\n - 也會回傳一個新的promise物件\n4. promise.all()\n - 也會回傳新的promise\n - 必須要傳入一個陣列，這個陣列本身的內容物都是promise\n - 當這些內容物promise都被fullfill之後，all()本身回傳的promise就會被fullfill\n - 在all() 回傳得到的promise後面去使用then(), 該 then()的參數function會拿到all()的所有內容promise 在resolve 時使用的參數 所組成的陣列。\n5. promise.race()\n - 也會回傳新的promise\n - 必須要傳入一個陣列，這個陣列本身的內容物都是promise\n - 當這些內容物promise有其中一個被fullfill之後，race()本身回傳的promise就會被fullfill\n - 在race() 回傳得到的promise後面去使用then(), 該 then()的參數function會拿到race()的最快達成fullfilled 的內容promise 在resolve 時使用的參數。\n\n\n","slug":"ES5_ES6學習筆記-ep3","published":1,"date":"2020-11-25T17:01:45.838Z","updated":"2020-11-25T17:01:45.839Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki5kjebr0007xdvdei1mg8dc","content":"<h2 id=\"ES6-Promise-重點整理\"><a href=\"#ES6-Promise-重點整理\" class=\"headerlink\" title=\"ES6 Promise 重點整理\"></a>ES6 Promise 重點整理</h2><ol>\n<li>Promise 是什麼</li>\n</ol>\n<ul>\n<li>用來處理callback chain 的一種新JS語法</li>\n<li>本身是一個class, 但是他也有自己的靜態方法</li>\n<li>建立出來的實例物件具有三種狀態：pending/fulfilled/rejected</li>\n<li>狀態只可能是從pending 變成 fulfilled/rejected</li>\n</ul>\n<ol start=\"2\">\n<li>promise.prototype.then()</li>\n</ol>\n<ul>\n<li>then()可以傳入兩個函數作為參數，第一個函數會在promise物件被fulfilled之後馬上發動，第二個函數則會在promise物件被reject的時候馬上發動</li>\n<li>會回傳一個新的promise物件</li>\n<li><strong>重要</strong> ： 當then與then串接的時候，後面的then 的 <strong>參數function</strong> 會得到前面的then 的 <strong>參數function</strong> return出來的值作為參數</li>\n</ul>\n<ol start=\"3\">\n<li>promise.prototype.catch()</li>\n</ol>\n<ul>\n<li>catch()可以傳入一個函數作為參數，並且這個函數會接收到promise throw出來的error</li>\n<li>也會回傳一個新的promise物件</li>\n</ul>\n<ol start=\"4\">\n<li>promise.all()</li>\n</ol>\n<ul>\n<li>也會回傳新的promise</li>\n<li>必須要傳入一個陣列，這個陣列本身的內容物都是promise</li>\n<li>當這些內容物promise都被fullfill之後，all()本身回傳的promise就會被fullfill</li>\n<li>在all() 回傳得到的promise後面去使用then(), 該 then()的參數function會拿到all()的所有內容promise 在resolve 時使用的參數 所組成的陣列。</li>\n</ul>\n<ol start=\"5\">\n<li>promise.race()</li>\n</ol>\n<ul>\n<li>也會回傳新的promise</li>\n<li>必須要傳入一個陣列，這個陣列本身的內容物都是promise</li>\n<li>當這些內容物promise有其中一個被fullfill之後，race()本身回傳的promise就會被fullfill</li>\n<li>在race() 回傳得到的promise後面去使用then(), 該 then()的參數function會拿到race()的最快達成fullfilled 的內容promise 在resolve 時使用的參數。</li>\n</ul>\n","site":{"data":{"css/variables":"","languages":{"zh-TW":{"title":{"archive":"時間線","category":"分類","tag":"標籤","schedule":"時間表"},"menu":{"home":"首頁","archives":"時間線","categories":"分類","tags":"標籤","about":"關於","search":"搜尋","schedule":"時間表","sitemap":"網站地圖","commonweal":"公益 404"},"sidebar":{"overview":"本站概要","toc":"文章目錄"},"post":{"posted":"發表於","edited":"更新於","created":"創建時間","modified":"修改時間","edit":"編輯","in":"分類於","read_more":"閱讀全文","untitled":"未命名","sticky":"置頂文","views":"閱讀次數","related_posts":"相關文章","copyright":{"author":"作者","link":"文章連結","post_author":"Written by","post_link":"This article originally appeared on","license_title":"版權聲明","license_content":"本網誌所有文章除特別聲明外，均採用 %s 許可協議。轉載請註明出處！"}},"footer":{"powered":"","total_views":"總瀏覽次數","total_visitors":"訪客總數"},"counter":{"tag_cloud":{"zero":"目前還沒有任何標籤","one":"目前共有 1 個標籤","other":"目前共有 %d 個標籤"},"categories":{"zero":"目前還沒有任何分類","one":"目前共有 1 個分類","other":"目前共有 %d 個分類"},"archive_posts":{"zero":"目前還沒有任何文章。","one":"目前共有 1 篇文章。","other":"目前共有 %d 篇文章。"}},"state":{"posts":"文章","tags":"標籤","categories":"分類"},"search":{"placeholder":"搜尋...","empty":"We didn't find any results for the search: %s","hits_time":"%s results found in %s ms","hits":"%s results found"},"cheers":{"um":"嗯..","ok":"還不錯","nice":"好","good":"很好","great":"非常好","excellent":"棒棒Der"},"keep_on":"繼續努力。","symbol":{"comma":"，","period":"。","colon":"："},"reward":{"donate":"捐贈","wechatpay":"微信支付","alipay":"支付寶","paypal":"貝寶","bitcoin":"比特幣"},"follow_me":{"welcome":"歡迎關注我的其它站點"},"accessibility":{"nav_toggle":"切換導航欄","prev_page":"上一頁","next_page":"下一頁"},"symbols_count_time":{"count":"文章字數","count_total":"總字數","time":"所需閱讀時間","time_total":"所需總閱讀時間","time_minutes":"分鐘"}}},"css/mixins":"","css/styles":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","template/head":"<script src=\"//js/tool/canvas-fx-base.js\"></script>\n\n<script src=\"//js/ripple-logo.js\"></script>\n<script src=\"//js/silk-wave.js\"></script>\n\n<style>\n  @font-face {\n  font-family: \"Roboto\";\n  src: url(//font/Roboto.ttf) format(\"truetype\");\n}\n</style>","css/styl-plugin/grid-post-layout/main":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","css/styl-plugin/grid-post-layout/mixins":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n","css/styl-plugin/grid-post-layout/variables":""}},"excerpt":"","more":"<h2 id=\"ES6-Promise-重點整理\"><a href=\"#ES6-Promise-重點整理\" class=\"headerlink\" title=\"ES6 Promise 重點整理\"></a>ES6 Promise 重點整理</h2><ol>\n<li>Promise 是什麼</li>\n</ol>\n<ul>\n<li>用來處理callback chain 的一種新JS語法</li>\n<li>本身是一個class, 但是他也有自己的靜態方法</li>\n<li>建立出來的實例物件具有三種狀態：pending/fulfilled/rejected</li>\n<li>狀態只可能是從pending 變成 fulfilled/rejected</li>\n</ul>\n<ol start=\"2\">\n<li>promise.prototype.then()</li>\n</ol>\n<ul>\n<li>then()可以傳入兩個函數作為參數，第一個函數會在promise物件被fulfilled之後馬上發動，第二個函數則會在promise物件被reject的時候馬上發動</li>\n<li>會回傳一個新的promise物件</li>\n<li><strong>重要</strong> ： 當then與then串接的時候，後面的then 的 <strong>參數function</strong> 會得到前面的then 的 <strong>參數function</strong> return出來的值作為參數</li>\n</ul>\n<ol start=\"3\">\n<li>promise.prototype.catch()</li>\n</ol>\n<ul>\n<li>catch()可以傳入一個函數作為參數，並且這個函數會接收到promise throw出來的error</li>\n<li>也會回傳一個新的promise物件</li>\n</ul>\n<ol start=\"4\">\n<li>promise.all()</li>\n</ol>\n<ul>\n<li>也會回傳新的promise</li>\n<li>必須要傳入一個陣列，這個陣列本身的內容物都是promise</li>\n<li>當這些內容物promise都被fullfill之後，all()本身回傳的promise就會被fullfill</li>\n<li>在all() 回傳得到的promise後面去使用then(), 該 then()的參數function會拿到all()的所有內容promise 在resolve 時使用的參數 所組成的陣列。</li>\n</ul>\n<ol start=\"5\">\n<li>promise.race()</li>\n</ol>\n<ul>\n<li>也會回傳新的promise</li>\n<li>必須要傳入一個陣列，這個陣列本身的內容物都是promise</li>\n<li>當這些內容物promise有其中一個被fullfill之後，race()本身回傳的promise就會被fullfill</li>\n<li>在race() 回傳得到的promise後面去使用then(), 該 then()的參數function會拿到race()的最快達成fullfilled 的內容promise 在resolve 時使用的參數。</li>\n</ul>\n"},{"title":"ES6學習筆記-Proxy 用途/介紹/使用情境","_content":"\n\n\n## 什麼是Proxy\n\n> 字面上的意思就是\"代理\" [color=red]\n\n- Q1: 所以說是要代理些什麼東西啊?\n- A1: 所謂的代理, 就是在要去代理一個物件內部 的 <屬性的存取>。過程中Proxy的作用方式，\n有點像是去形成一個攔截屏障，所有要存取目標物件的程序都需要去通過這層屏障才能完成存取，所以說這層屏障的用途就在於偵測屬性的被存取\n\n**這邊是一個利用Proxy去為一個空物件撰寫getter/setter的範例**\n\n````javascript\nvar obj = new Proxy({}, {\n  get: function (target, propKey, receiver) {\n    console.log(`getting ${propKey}!`);\n    return Reflect.get(target, propKey, receiver);\n  },\n  set: function (target, propKey, value, receiver) {\n    console.log(`setting ${propKey}!`);\n    return Reflect.set(target, propKey, value, receiver);\n  }\n});\n````\n\n\n## Proxy 的基本語法\n\n````javascript\nlet p = new Proxy(target, handler);\n````\n\n- 其中 **target** 是一個目標的物件（雖然說是物件，但是它實際上也可以是array/function，甚至是另外一個proxy）\n- **handler** 也是一個物件，但是他裡面的屬性  是proxy攔截(trap)到屬性存取行為時可以使用的函數。\n- 基本上，我們在定義handler的時候並不是直接給一個有很多自訂名稱的方法的物件。\n- handler裡面可以定義的方法有下面幾種(共13種)：\n\n    - **get(target, propKey, receiver)**：攔截對象屬性的讀取，比如proxy.foo和proxy['foo']。\n    - **set(target, propKey, value, receiver)**：攔截對象屬性的設置，比如proxy.foo = v或proxy['foo'] = v，返回一個Boolean。\n    - **has(target, propKey)**：攔截propKey in proxy的操作，返回一個Boolean。\n    - **deleteProperty(target, propKey)**：攔截delete proxy[propKey]的操作，返回一個Boolean。\n    - **ownKeys(target)**：攔截Object.getOwnPropertyNames(proxy)、Object.getOwnPropertySymbols(proxy)、Object.keys(proxy)、for...in循環，返回一個數組。該方法返回目標對象所有自身的屬性的屬性名，而Object.keys()的返回結果僅包括目標對象自身的可遍歷屬性。\n    - **getOwnPropertyDescriptor(target, propKey)**：攔截Object.getOwnPropertyDescriptor(proxy, propKey)，返回屬性的描述對象。\n    - **defineProperty(target, propKey, propDesc)**：攔截Object.defineProperty(proxy, propKey, propDesc）、Object.defineProperties(proxy, propDescs)，返回一個Boolean。\n    - **preventExtensions(target)**：攔截Object.preventExtensions(proxy)，返回一個Boolean。\n    - **getPrototypeOf(target)**：攔截Object.getPrototypeOf(proxy)，返回一個對象。\n    - **isExtensible(target)**：攔截Object.isExtensible(proxy)，返回一個Boolean。\n    - **setPrototypeOf(target, proto)**：攔截Object.setPrototypeOf(proxy, proto)，返回一個Boolean。如果目標對像是函數，那麼還有兩種額外操作可以攔截。\n    - **apply(target, object, args)**：攔截Proxy 實例作為函數調用的操作，比如proxy(...args)、proxy.call(object, ...args)、proxy.apply(.. .)。\n    - **construct(target, args)**：攔截 Proxy 實例作為構造函數調用的操作，比如new proxy(...args)。\n\n> MDN上面有更完整的說明 [color=red]\n> https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy#Handler_functions\n\n\n## 先來看個 Proxy 的基本演練\n\n> source code from MDN [color=red]\n\n````javascript\nlet handler = {\n    get: function(target, name) {\n        return name in target ?\n            target[name] :\n            37;\n    },\n    set: function(target, name, value) {\n    if (name === 'age') {\n      if (!Number.isInteger(value)) {\n        throw new TypeError('The age is not an integer');\n      }\n      if (value > 200) {\n        throw new RangeError('The age seems invalid');\n      }\n    }\n\n    // The default behavior to store the value\n    target[name] = value;\n\n    // Indicate success\n    return true;\n  }\n};\n\nlet p = new Proxy({}, handler);\n````\n\n這樣寫的話，當我們去執行console.log(p.abc),也就是去取用p的屬性值，就會觸發get function\n而如果我們去執行p.abc = \"123\", 就會觸發set function，這就是最基本的handler.get和handler.set的運用\n\n## 下週繼續: 常用的handler方法與他們的使用範例\n\n### 1. handler.apply\n\n基本上大家都知道apply就跟call 是類似的東西, 他們是被用來執行一個函數, 並且可以塞特定的變數(或array)進去函式作為 this 使用;\n而當一個函式被帶入proxy建構式而建立起proxy物件的時候, 因為函式本身也是一種物件([見ＭＤＮ解說](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions), 所以這樣就會變成只要該函式被以任何一種形式(一般/call/apply)呼叫的時候就會觸發代理的apply\n\n基本的型態是這樣(如下)\n\n```javascript=\n\napply: function(target, thisArg, argumentsList)\n\n```\n\n這邊target 是被代理的函式, thisArg 則是當這個被代理的函數是被call或者apply所呼叫時填入的this , argumentsList則是這個函數在被呼叫時的參數群\n\n### 2. handler.new\n\n這應該也是蠻好理解的, 簡單來說就是當一個能被作為建構子使用的函數, 被以proxy代理, 這樣的話, 他在被new 產生實例的時候, 就會觸發construct;\n\n\n基本的型態是這樣(如下)\n\n```javascript=\n\ncontruct: function(target, args)\n\n```\n\n### 3. handler.defineProperty\n\n這個就有點意思了,  handler.defineProperty 是proxy 用來代理 object.defineProperty的對應handler形式, 那什麼是object.defineProperty呢?\n簡單來講, object.defineProperty就是去賦值給一個物件的prop, 或者是產生並賦值一個prop。\n這聽起來似乎很像是set 或是 object['prop']=xxx 這樣的操作, 而的確object['prop']=xxx的背後就是用object.defineProperty做成的。\n\n他正確的形式是像這樣寫的\n\n```javascript=\nObject.defineProperty(obj, prop, descriptor) \n\n```\n\n這邊的obj就是 想要去賦值prop的物件,prop就是想要去改變的property, 而descriptor則是一個物件, 裡面預設包含：\n\n```javascript=\n{\n  enumerable: false,\n  configurable: false,\n  writable: false,\n  value: 'value',\n  get:()=>{}\n  set:()=>{}\n}\n```\n\n我們平常使用obj['prop']=value, 其實等同於是：\n\n```javascript=\nObject.defineProperty(obj, prop, {\nenumerable: true,\n  configurable: true,\n  writable: true,\n  value: 'value'\n})\n```\n\n這邊enumerable的用途是決定是否放行Object.keys() 或 for...in loop 去遍歷到這個屬性\nconfigurable代表的是這次操作之後能不能再重新用Object.defineProperty去改寫這個prop的descriptor\n而writable則是決定這個prop可不可以被覆寫\nget/set 基本上就是一般理解的get/set 函數。\n\n之後有機會的話再來寫一篇心得探討Object.defineProperty的用途\n\n那讓我們回歸到正題。\n\n我們這邊講到的是用proxy 去代理物件時，利用handler 中的 defineProperty trap 去偵測defineProperty行為, 這應該就不難理解了\n基本上只要是透過Object.defineProperty所做出來的操作, 全部都會觸發這個trap\n\n所以,\n\n```javascript=\nobj['prop']=value //會觸發\n\nObject.defineProperty(obj, prop, {\nenumerable: true,\n  configurable: true, \n  writable: true,\n  value: 'value'\n})  //會觸發\n\nlet a  = Object.prop //當然也會觸發\n\n```\n\nhandler.defineProperty 的基本形式如下\n\n```javascript=\ndefineProperty: function(target, property, descriptor)\n```\n\n唯一一個比較需要注意的點是, handler.defineProperty 必須要return 一個 boolean值（用來確定prop是否被正確define）, 不然會報錯\n\n\n### 4. handler.set\n\nset 基本上就跟一般認知的set 是一樣的東西, 簡單來說就是去設定物件prop的值, 和handler.defineProperty的差別在於, 用set 沒有辦法trap到利用Object.defineProperty 所做的操作\n\n基本的set 形式為：\n\n\n```javascript=\nset: function(target, property, value, receiver) {}\n```\n\n這邊的target 就是被代理的物件\nproperty則是想要被set 值的prop\nvalue 是想要給予prop的值\nreceiver 這個比較 特別, 這個預設都是指向proxy 實例自己, 但是在某些狀況底下也可以是別的東西（這個後面再討論）\n\n\n### 4. handler.get\n\n跟handler.get 同理\n\nget 的形式是\n\n```javascript=\nget: function(target, property, receiver) {}\n```\n\n和.set一樣, 最後必須要return true\n\n\n\n## 什麼是Reflect 和 receiver?\n\n### Reflect \n\nReflect 實際上和Proxy 是互相獨立的feature，但是 Reflect 常常跟著 Proxy一起被使用\nReflect本身是一種 built-in Object (跟Math一樣), 裡面的method就跟proxy的預設 handler集一樣（名稱一樣, 但是各個函數內容稍微有點差異）\n\n#### 什麼時候會用到Reflect\n\n> 平常沒有用到proxy的時候(讓對物件的操作可以變成用refect的method來處理, 優點在於統一整體code的一致性)\n```javascript=\n'_secretDrink' in FooBar;\ndelete FooBar._secretDrink;\n```\n有了 Reflect 我們可以這樣做：\n\n```javascript=\nReflect.has(FooBar, '_secretDrink');\nReflect.deleteProperty(FooBar, '_secretDrink');\n\n```\n\n> 當有用到proxy的時候\n```javascript=\n\n const target = {\n    get foo() {\n        return this.bar;\n    },\n    bar: 3\n};\nconst handler = {\n    get(target, propertyKey, receiver) {\n        if (propertyKey === 'bar') return 2;// 這邊透過reflect.get 將可以拿到handler.get 在特定條件下丟出來的值, 但是如果是直接透過target用特定key取值, 則會直接取用原生物件(非代理)的get func, 導致最後的到的值變成3\n        console.log('Reflect.get ', Reflect.get(target, propertyKey, receiver)); // this in foo getter references Proxy instance; logs 2\n        console.log('target[propertyKey] ', target[propertyKey]); // this in foo getter references \"target\" - logs 3\n    }\n};\nconst obj = new Proxy(target, handler); //\nconsole.log(obj.bar); // 因為 obj是一個proxy實例, 所以取用.bar會觸發 handler.get\n// 2\nobj.foo;\n// Reflect.get  2\n// target[propertyKey]  3\n\n```\n\n從這個案例來看, 我們可以發現refect的用意就是要去取得\"代理\" 這一個目標, 確保可以使用到代理內部handler的get, 而不是去使用原生物件的 getter\n\n### receiver\n\n#### 什麼是receiver?\n\n一般狀況下 receiver會去指向代理本身，比方說\n\n```javascript=\nget: function(target, property, receiver) {}\n```\n\n通常來講這個receiver 就會是指向使用了這個handler的代理自己, 但是有些狀況下並不是這樣的。\n\n這邊不太好懂, 可以看這篇stackoverflow\n\nhttps://stackoverflow.com/questions/37563495/what-is-a-receiver-in-javascript\n\n```javascript=\nvar handlers = {\n        get(target,key,context) {\n            console.log(greeter === context); //true, this line added\n            return function() {\n                context.speak(key + \"!\");\n            };\n        }\n    },\n    catchall = new Proxy( {}, handlers ),\n    greeter = {\n        speak(who = \"someone\") {\n            console.log( \"hello\", who );\n        }\n    };\n\n// setup `greeter` to fall back to `catchall`\nObject.setPrototypeOf( greeter, catchall );\n\ngreeter.speak();                // hello someone 發動greeter的speak方法, 很正常的拿到了 預設的 someone\ngreeter.speak( \"world\" );       // hello world 給予 world 這個字串參數, 也很正常的拿到了 hello world\n\ngreeter.everyone();             // hello everyone!\n\n\n```\n\n這邊的greeter.everyone是一個根本不存在的方法, 但是這邊被call了\n這樣最後會跑去觸發到由setPropertyOf 繼承到的catchall(是一個proxy實例)的handler.get\n在這種狀況下 get() 的receiver 參數就不會去指向 catchall, 而是指向greeter\n\n### Proxy 實用的地方\n\n\n#### 1. 實作單向 prop trap綁定\n\n\n```javascript=\nconst inputState = {\n    id: 'username',\n    value: ''\n}\nconst input = document.querySelector('#username')\nconst handler = {\n    set: function(target, key, value) {\n        if (target.id && key === 'username') {\n            target[key] = value;\n            document.querySelector(`#${target.id}`)\n            .value = value;\n            return true\n        }\n        return false\n    }\n}\n\nconst proxy = new Proxy(inputState, handler)\nproxy.value = 'John Doe'\n\n// 因為真的很基本, 就不特別解釋了\n```\n\n#### 2. trap呼叫無效/ 不存在方法的行為並throw error\n\n````javascript\nfunction Foo() {\n  return new Proxy(this, {\n    get: function (object, property) {\n    // 用reflect.has 去判斷 object 是不是有那個key 值\n      if (Reflect.has(object, property)) {\n        return Reflect.get(object, property);\n      } else {\n      //如果方法不存在, 那就return 一個攔截用的function\n        return function methodMissing() {\n          console.log('you called ' + property + ' but it doesn\\'t exist!');\n        }\n      }\n    }\n  });\n}\n\nFoo.prototype.bar = function () {\n  console.log('you called bar. Good job!');\n}\n\nfoo = new Foo();\nfoo.bar();\n//=> you called bar. Good job!\nfoo.this_method_does_not_exist()\n// error 被攔截\n//=> you called this_method_does_not_exist but it doesn't exist\n````\n\n#### 實作 interpolation\n\n這個比較複雜，預計下週在補完","source":"_posts/ES6學習筆記-Proxy 用途_介紹_使用情境.md","raw":"---\ntitle: ES6學習筆記-Proxy 用途/介紹/使用情境\ncategories: \n- 心得\ntags:\n- js\n---\n\n\n\n## 什麼是Proxy\n\n> 字面上的意思就是\"代理\" [color=red]\n\n- Q1: 所以說是要代理些什麼東西啊?\n- A1: 所謂的代理, 就是在要去代理一個物件內部 的 <屬性的存取>。過程中Proxy的作用方式，\n有點像是去形成一個攔截屏障，所有要存取目標物件的程序都需要去通過這層屏障才能完成存取，所以說這層屏障的用途就在於偵測屬性的被存取\n\n**這邊是一個利用Proxy去為一個空物件撰寫getter/setter的範例**\n\n````javascript\nvar obj = new Proxy({}, {\n  get: function (target, propKey, receiver) {\n    console.log(`getting ${propKey}!`);\n    return Reflect.get(target, propKey, receiver);\n  },\n  set: function (target, propKey, value, receiver) {\n    console.log(`setting ${propKey}!`);\n    return Reflect.set(target, propKey, value, receiver);\n  }\n});\n````\n\n\n## Proxy 的基本語法\n\n````javascript\nlet p = new Proxy(target, handler);\n````\n\n- 其中 **target** 是一個目標的物件（雖然說是物件，但是它實際上也可以是array/function，甚至是另外一個proxy）\n- **handler** 也是一個物件，但是他裡面的屬性  是proxy攔截(trap)到屬性存取行為時可以使用的函數。\n- 基本上，我們在定義handler的時候並不是直接給一個有很多自訂名稱的方法的物件。\n- handler裡面可以定義的方法有下面幾種(共13種)：\n\n    - **get(target, propKey, receiver)**：攔截對象屬性的讀取，比如proxy.foo和proxy['foo']。\n    - **set(target, propKey, value, receiver)**：攔截對象屬性的設置，比如proxy.foo = v或proxy['foo'] = v，返回一個Boolean。\n    - **has(target, propKey)**：攔截propKey in proxy的操作，返回一個Boolean。\n    - **deleteProperty(target, propKey)**：攔截delete proxy[propKey]的操作，返回一個Boolean。\n    - **ownKeys(target)**：攔截Object.getOwnPropertyNames(proxy)、Object.getOwnPropertySymbols(proxy)、Object.keys(proxy)、for...in循環，返回一個數組。該方法返回目標對象所有自身的屬性的屬性名，而Object.keys()的返回結果僅包括目標對象自身的可遍歷屬性。\n    - **getOwnPropertyDescriptor(target, propKey)**：攔截Object.getOwnPropertyDescriptor(proxy, propKey)，返回屬性的描述對象。\n    - **defineProperty(target, propKey, propDesc)**：攔截Object.defineProperty(proxy, propKey, propDesc）、Object.defineProperties(proxy, propDescs)，返回一個Boolean。\n    - **preventExtensions(target)**：攔截Object.preventExtensions(proxy)，返回一個Boolean。\n    - **getPrototypeOf(target)**：攔截Object.getPrototypeOf(proxy)，返回一個對象。\n    - **isExtensible(target)**：攔截Object.isExtensible(proxy)，返回一個Boolean。\n    - **setPrototypeOf(target, proto)**：攔截Object.setPrototypeOf(proxy, proto)，返回一個Boolean。如果目標對像是函數，那麼還有兩種額外操作可以攔截。\n    - **apply(target, object, args)**：攔截Proxy 實例作為函數調用的操作，比如proxy(...args)、proxy.call(object, ...args)、proxy.apply(.. .)。\n    - **construct(target, args)**：攔截 Proxy 實例作為構造函數調用的操作，比如new proxy(...args)。\n\n> MDN上面有更完整的說明 [color=red]\n> https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy#Handler_functions\n\n\n## 先來看個 Proxy 的基本演練\n\n> source code from MDN [color=red]\n\n````javascript\nlet handler = {\n    get: function(target, name) {\n        return name in target ?\n            target[name] :\n            37;\n    },\n    set: function(target, name, value) {\n    if (name === 'age') {\n      if (!Number.isInteger(value)) {\n        throw new TypeError('The age is not an integer');\n      }\n      if (value > 200) {\n        throw new RangeError('The age seems invalid');\n      }\n    }\n\n    // The default behavior to store the value\n    target[name] = value;\n\n    // Indicate success\n    return true;\n  }\n};\n\nlet p = new Proxy({}, handler);\n````\n\n這樣寫的話，當我們去執行console.log(p.abc),也就是去取用p的屬性值，就會觸發get function\n而如果我們去執行p.abc = \"123\", 就會觸發set function，這就是最基本的handler.get和handler.set的運用\n\n## 下週繼續: 常用的handler方法與他們的使用範例\n\n### 1. handler.apply\n\n基本上大家都知道apply就跟call 是類似的東西, 他們是被用來執行一個函數, 並且可以塞特定的變數(或array)進去函式作為 this 使用;\n而當一個函式被帶入proxy建構式而建立起proxy物件的時候, 因為函式本身也是一種物件([見ＭＤＮ解說](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions), 所以這樣就會變成只要該函式被以任何一種形式(一般/call/apply)呼叫的時候就會觸發代理的apply\n\n基本的型態是這樣(如下)\n\n```javascript=\n\napply: function(target, thisArg, argumentsList)\n\n```\n\n這邊target 是被代理的函式, thisArg 則是當這個被代理的函數是被call或者apply所呼叫時填入的this , argumentsList則是這個函數在被呼叫時的參數群\n\n### 2. handler.new\n\n這應該也是蠻好理解的, 簡單來說就是當一個能被作為建構子使用的函數, 被以proxy代理, 這樣的話, 他在被new 產生實例的時候, 就會觸發construct;\n\n\n基本的型態是這樣(如下)\n\n```javascript=\n\ncontruct: function(target, args)\n\n```\n\n### 3. handler.defineProperty\n\n這個就有點意思了,  handler.defineProperty 是proxy 用來代理 object.defineProperty的對應handler形式, 那什麼是object.defineProperty呢?\n簡單來講, object.defineProperty就是去賦值給一個物件的prop, 或者是產生並賦值一個prop。\n這聽起來似乎很像是set 或是 object['prop']=xxx 這樣的操作, 而的確object['prop']=xxx的背後就是用object.defineProperty做成的。\n\n他正確的形式是像這樣寫的\n\n```javascript=\nObject.defineProperty(obj, prop, descriptor) \n\n```\n\n這邊的obj就是 想要去賦值prop的物件,prop就是想要去改變的property, 而descriptor則是一個物件, 裡面預設包含：\n\n```javascript=\n{\n  enumerable: false,\n  configurable: false,\n  writable: false,\n  value: 'value',\n  get:()=>{}\n  set:()=>{}\n}\n```\n\n我們平常使用obj['prop']=value, 其實等同於是：\n\n```javascript=\nObject.defineProperty(obj, prop, {\nenumerable: true,\n  configurable: true,\n  writable: true,\n  value: 'value'\n})\n```\n\n這邊enumerable的用途是決定是否放行Object.keys() 或 for...in loop 去遍歷到這個屬性\nconfigurable代表的是這次操作之後能不能再重新用Object.defineProperty去改寫這個prop的descriptor\n而writable則是決定這個prop可不可以被覆寫\nget/set 基本上就是一般理解的get/set 函數。\n\n之後有機會的話再來寫一篇心得探討Object.defineProperty的用途\n\n那讓我們回歸到正題。\n\n我們這邊講到的是用proxy 去代理物件時，利用handler 中的 defineProperty trap 去偵測defineProperty行為, 這應該就不難理解了\n基本上只要是透過Object.defineProperty所做出來的操作, 全部都會觸發這個trap\n\n所以,\n\n```javascript=\nobj['prop']=value //會觸發\n\nObject.defineProperty(obj, prop, {\nenumerable: true,\n  configurable: true, \n  writable: true,\n  value: 'value'\n})  //會觸發\n\nlet a  = Object.prop //當然也會觸發\n\n```\n\nhandler.defineProperty 的基本形式如下\n\n```javascript=\ndefineProperty: function(target, property, descriptor)\n```\n\n唯一一個比較需要注意的點是, handler.defineProperty 必須要return 一個 boolean值（用來確定prop是否被正確define）, 不然會報錯\n\n\n### 4. handler.set\n\nset 基本上就跟一般認知的set 是一樣的東西, 簡單來說就是去設定物件prop的值, 和handler.defineProperty的差別在於, 用set 沒有辦法trap到利用Object.defineProperty 所做的操作\n\n基本的set 形式為：\n\n\n```javascript=\nset: function(target, property, value, receiver) {}\n```\n\n這邊的target 就是被代理的物件\nproperty則是想要被set 值的prop\nvalue 是想要給予prop的值\nreceiver 這個比較 特別, 這個預設都是指向proxy 實例自己, 但是在某些狀況底下也可以是別的東西（這個後面再討論）\n\n\n### 4. handler.get\n\n跟handler.get 同理\n\nget 的形式是\n\n```javascript=\nget: function(target, property, receiver) {}\n```\n\n和.set一樣, 最後必須要return true\n\n\n\n## 什麼是Reflect 和 receiver?\n\n### Reflect \n\nReflect 實際上和Proxy 是互相獨立的feature，但是 Reflect 常常跟著 Proxy一起被使用\nReflect本身是一種 built-in Object (跟Math一樣), 裡面的method就跟proxy的預設 handler集一樣（名稱一樣, 但是各個函數內容稍微有點差異）\n\n#### 什麼時候會用到Reflect\n\n> 平常沒有用到proxy的時候(讓對物件的操作可以變成用refect的method來處理, 優點在於統一整體code的一致性)\n```javascript=\n'_secretDrink' in FooBar;\ndelete FooBar._secretDrink;\n```\n有了 Reflect 我們可以這樣做：\n\n```javascript=\nReflect.has(FooBar, '_secretDrink');\nReflect.deleteProperty(FooBar, '_secretDrink');\n\n```\n\n> 當有用到proxy的時候\n```javascript=\n\n const target = {\n    get foo() {\n        return this.bar;\n    },\n    bar: 3\n};\nconst handler = {\n    get(target, propertyKey, receiver) {\n        if (propertyKey === 'bar') return 2;// 這邊透過reflect.get 將可以拿到handler.get 在特定條件下丟出來的值, 但是如果是直接透過target用特定key取值, 則會直接取用原生物件(非代理)的get func, 導致最後的到的值變成3\n        console.log('Reflect.get ', Reflect.get(target, propertyKey, receiver)); // this in foo getter references Proxy instance; logs 2\n        console.log('target[propertyKey] ', target[propertyKey]); // this in foo getter references \"target\" - logs 3\n    }\n};\nconst obj = new Proxy(target, handler); //\nconsole.log(obj.bar); // 因為 obj是一個proxy實例, 所以取用.bar會觸發 handler.get\n// 2\nobj.foo;\n// Reflect.get  2\n// target[propertyKey]  3\n\n```\n\n從這個案例來看, 我們可以發現refect的用意就是要去取得\"代理\" 這一個目標, 確保可以使用到代理內部handler的get, 而不是去使用原生物件的 getter\n\n### receiver\n\n#### 什麼是receiver?\n\n一般狀況下 receiver會去指向代理本身，比方說\n\n```javascript=\nget: function(target, property, receiver) {}\n```\n\n通常來講這個receiver 就會是指向使用了這個handler的代理自己, 但是有些狀況下並不是這樣的。\n\n這邊不太好懂, 可以看這篇stackoverflow\n\nhttps://stackoverflow.com/questions/37563495/what-is-a-receiver-in-javascript\n\n```javascript=\nvar handlers = {\n        get(target,key,context) {\n            console.log(greeter === context); //true, this line added\n            return function() {\n                context.speak(key + \"!\");\n            };\n        }\n    },\n    catchall = new Proxy( {}, handlers ),\n    greeter = {\n        speak(who = \"someone\") {\n            console.log( \"hello\", who );\n        }\n    };\n\n// setup `greeter` to fall back to `catchall`\nObject.setPrototypeOf( greeter, catchall );\n\ngreeter.speak();                // hello someone 發動greeter的speak方法, 很正常的拿到了 預設的 someone\ngreeter.speak( \"world\" );       // hello world 給予 world 這個字串參數, 也很正常的拿到了 hello world\n\ngreeter.everyone();             // hello everyone!\n\n\n```\n\n這邊的greeter.everyone是一個根本不存在的方法, 但是這邊被call了\n這樣最後會跑去觸發到由setPropertyOf 繼承到的catchall(是一個proxy實例)的handler.get\n在這種狀況下 get() 的receiver 參數就不會去指向 catchall, 而是指向greeter\n\n### Proxy 實用的地方\n\n\n#### 1. 實作單向 prop trap綁定\n\n\n```javascript=\nconst inputState = {\n    id: 'username',\n    value: ''\n}\nconst input = document.querySelector('#username')\nconst handler = {\n    set: function(target, key, value) {\n        if (target.id && key === 'username') {\n            target[key] = value;\n            document.querySelector(`#${target.id}`)\n            .value = value;\n            return true\n        }\n        return false\n    }\n}\n\nconst proxy = new Proxy(inputState, handler)\nproxy.value = 'John Doe'\n\n// 因為真的很基本, 就不特別解釋了\n```\n\n#### 2. trap呼叫無效/ 不存在方法的行為並throw error\n\n````javascript\nfunction Foo() {\n  return new Proxy(this, {\n    get: function (object, property) {\n    // 用reflect.has 去判斷 object 是不是有那個key 值\n      if (Reflect.has(object, property)) {\n        return Reflect.get(object, property);\n      } else {\n      //如果方法不存在, 那就return 一個攔截用的function\n        return function methodMissing() {\n          console.log('you called ' + property + ' but it doesn\\'t exist!');\n        }\n      }\n    }\n  });\n}\n\nFoo.prototype.bar = function () {\n  console.log('you called bar. Good job!');\n}\n\nfoo = new Foo();\nfoo.bar();\n//=> you called bar. Good job!\nfoo.this_method_does_not_exist()\n// error 被攔截\n//=> you called this_method_does_not_exist but it doesn't exist\n````\n\n#### 實作 interpolation\n\n這個比較複雜，預計下週在補完","slug":"ES6學習筆記-Proxy 用途_介紹_使用情境","published":1,"date":"2020-11-25T17:01:45.840Z","updated":"2020-11-25T17:01:45.841Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki5kjebs0009xdvd2ykpej5b","content":"<h2 id=\"什麼是Proxy\"><a href=\"#什麼是Proxy\" class=\"headerlink\" title=\"什麼是Proxy\"></a>什麼是Proxy</h2><blockquote>\n<p>字面上的意思就是”代理” [color=red]</p>\n</blockquote>\n<ul>\n<li>Q1: 所以說是要代理些什麼東西啊?</li>\n<li>A1: 所謂的代理, 就是在要去代理一個物件內部 的 &lt;屬性的存取&gt;。過程中Proxy的作用方式，<br>有點像是去形成一個攔截屏障，所有要存取目標物件的程序都需要去通過這層屏障才能完成存取，所以說這層屏障的用途就在於偵測屬性的被存取</li>\n</ul>\n<p><strong>這邊是一個利用Proxy去為一個空物件撰寫getter/setter的範例</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, &#123;</span><br><span class=\"line\">  get: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target, propKey, receiver</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`getting <span class=\"subst\">$&#123;propKey&#125;</span>!`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.get(target, propKey, receiver);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  set: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target, propKey, value, receiver</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`setting <span class=\"subst\">$&#123;propKey&#125;</span>!`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.set(target, propKey, value, receiver);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"Proxy-的基本語法\"><a href=\"#Proxy-的基本語法\" class=\"headerlink\" title=\"Proxy 的基本語法\"></a>Proxy 的基本語法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>其中 <strong>target</strong> 是一個目標的物件（雖然說是物件，但是它實際上也可以是array/function，甚至是另外一個proxy）</p>\n</li>\n<li><p><strong>handler</strong> 也是一個物件，但是他裡面的屬性  是proxy攔截(trap)到屬性存取行為時可以使用的函數。</p>\n</li>\n<li><p>基本上，我們在定義handler的時候並不是直接給一個有很多自訂名稱的方法的物件。</p>\n</li>\n<li><p>handler裡面可以定義的方法有下面幾種(共13種)：</p>\n<ul>\n<li>**get(target, propKey, receiver)**：攔截對象屬性的讀取，比如proxy.foo和proxy[‘foo’]。</li>\n<li>**set(target, propKey, value, receiver)**：攔截對象屬性的設置，比如proxy.foo = v或proxy[‘foo’] = v，返回一個Boolean。</li>\n<li>**has(target, propKey)**：攔截propKey in proxy的操作，返回一個Boolean。</li>\n<li>**deleteProperty(target, propKey)**：攔截delete proxy[propKey]的操作，返回一個Boolean。</li>\n<li>**ownKeys(target)**：攔截Object.getOwnPropertyNames(proxy)、Object.getOwnPropertySymbols(proxy)、Object.keys(proxy)、for…in循環，返回一個數組。該方法返回目標對象所有自身的屬性的屬性名，而Object.keys()的返回結果僅包括目標對象自身的可遍歷屬性。</li>\n<li>**getOwnPropertyDescriptor(target, propKey)**：攔截Object.getOwnPropertyDescriptor(proxy, propKey)，返回屬性的描述對象。</li>\n<li>**defineProperty(target, propKey, propDesc)**：攔截Object.defineProperty(proxy, propKey, propDesc）、Object.defineProperties(proxy, propDescs)，返回一個Boolean。</li>\n<li>**preventExtensions(target)**：攔截Object.preventExtensions(proxy)，返回一個Boolean。</li>\n<li>**getPrototypeOf(target)**：攔截Object.getPrototypeOf(proxy)，返回一個對象。</li>\n<li>**isExtensible(target)**：攔截Object.isExtensible(proxy)，返回一個Boolean。</li>\n<li>**setPrototypeOf(target, proto)**：攔截Object.setPrototypeOf(proxy, proto)，返回一個Boolean。如果目標對像是函數，那麼還有兩種額外操作可以攔截。</li>\n<li>**apply(target, object, args)**：攔截Proxy 實例作為函數調用的操作，比如proxy(…args)、proxy.call(object, …args)、proxy.apply(.. .)。</li>\n<li>**construct(target, args)**：攔截 Proxy 實例作為構造函數調用的操作，比如new proxy(…args)。</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>MDN上面有更完整的說明 [color=red]<br><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy#Handler_functions\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy#Handler_functions</a></p>\n</blockquote>\n<h2 id=\"先來看個-Proxy-的基本演練\"><a href=\"#先來看個-Proxy-的基本演練\" class=\"headerlink\" title=\"先來看個 Proxy 的基本演練\"></a>先來看個 Proxy 的基本演練</h2><blockquote>\n<p>source code from MDN [color=red]</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> handler = &#123;</span><br><span class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, name</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name <span class=\"keyword\">in</span> target ?</span><br><span class=\"line\">            target[name] :</span><br><span class=\"line\">            <span class=\"number\">37</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, name, value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (name === <span class=\"string\">&#x27;age&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"built_in\">Number</span>.isInteger(value)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">&#x27;The age is not an integer&#x27;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (value &gt; <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">RangeError</span>(<span class=\"string\">&#x27;The age seems invalid&#x27;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// The default behavior to store the value</span></span><br><span class=\"line\">    target[name] = value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Indicate success</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, handler);</span><br></pre></td></tr></table></figure>\n\n<p>這樣寫的話，當我們去執行console.log(p.abc),也就是去取用p的屬性值，就會觸發get function<br>而如果我們去執行p.abc = “123”, 就會觸發set function，這就是最基本的handler.get和handler.set的運用</p>\n<h2 id=\"下週繼續-常用的handler方法與他們的使用範例\"><a href=\"#下週繼續-常用的handler方法與他們的使用範例\" class=\"headerlink\" title=\"下週繼續: 常用的handler方法與他們的使用範例\"></a>下週繼續: 常用的handler方法與他們的使用範例</h2><h3 id=\"1-handler-apply\"><a href=\"#1-handler-apply\" class=\"headerlink\" title=\"1. handler.apply\"></a>1. handler.apply</h3><p>基本上大家都知道apply就跟call 是類似的東西, 他們是被用來執行一個函數, 並且可以塞特定的變數(或array)進去函式作為 this 使用;<br>而當一個函式被帶入proxy建構式而建立起proxy物件的時候, 因為函式本身也是一種物件(<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions\">見ＭＤＮ解說</a>, 所以這樣就會變成只要該函式被以任何一種形式(一般/call/apply)呼叫的時候就會觸發代理的apply</p>\n<p>基本的型態是這樣(如下)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">apply: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, thisArg, argumentsList</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br></pre></td></tr></table></figure>\n\n<p>這邊target 是被代理的函式, thisArg 則是當這個被代理的函數是被call或者apply所呼叫時填入的this , argumentsList則是這個函數在被呼叫時的參數群</p>\n<h3 id=\"2-handler-new\"><a href=\"#2-handler-new\" class=\"headerlink\" title=\"2. handler.new\"></a>2. handler.new</h3><p>這應該也是蠻好理解的, 簡單來說就是當一個能被作為建構子使用的函數, 被以proxy代理, 這樣的話, 他在被new 產生實例的時候, 就會觸發construct;</p>\n<p>基本的型態是這樣(如下)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">contruct: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-handler-defineProperty\"><a href=\"#3-handler-defineProperty\" class=\"headerlink\" title=\"3. handler.defineProperty\"></a>3. handler.defineProperty</h3><p>這個就有點意思了,  handler.defineProperty 是proxy 用來代理 object.defineProperty的對應handler形式, 那什麼是object.defineProperty呢?<br>簡單來講, object.defineProperty就是去賦值給一個物件的prop, 或者是產生並賦值一個prop。<br>這聽起來似乎很像是set 或是 object[‘prop’]=xxx 這樣的操作, 而的確object[‘prop’]=xxx的背後就是用object.defineProperty做成的。</p>\n<p>他正確的形式是像這樣寫的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, prop, descriptor) </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>這邊的obj就是 想要去賦值prop的物件,prop就是想要去改變的property, 而descriptor則是一個物件, 裡面預設包含：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  enumerable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  configurable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  writable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  value: <span class=\"string\">&#x27;value&#x27;</span>,</span><br><span class=\"line\">  get:<span class=\"function\">()=&gt;</span>&#123;&#125;</span><br><span class=\"line\">  set:<span class=\"function\">()=&gt;</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我們平常使用obj[‘prop’]=value, 其實等同於是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, prop, &#123;</span><br><span class=\"line\">enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  configurable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  writable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  value: <span class=\"string\">&#x27;value&#x27;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>這邊enumerable的用途是決定是否放行Object.keys() 或 for…in loop 去遍歷到這個屬性<br>configurable代表的是這次操作之後能不能再重新用Object.defineProperty去改寫這個prop的descriptor<br>而writable則是決定這個prop可不可以被覆寫<br>get/set 基本上就是一般理解的get/set 函數。</p>\n<p>之後有機會的話再來寫一篇心得探討Object.defineProperty的用途</p>\n<p>那讓我們回歸到正題。</p>\n<p>我們這邊講到的是用proxy 去代理物件時，利用handler 中的 defineProperty trap 去偵測defineProperty行為, 這應該就不難理解了<br>基本上只要是透過Object.defineProperty所做出來的操作, 全部都會觸發這個trap</p>\n<p>所以,</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj[<span class=\"string\">&#x27;prop&#x27;</span>]=value <span class=\"comment\">//會觸發</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, prop, &#123;</span><br><span class=\"line\">enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  configurable: <span class=\"literal\">true</span>, </span><br><span class=\"line\">  writable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  value: <span class=\"string\">&#x27;value&#x27;</span></span><br><span class=\"line\">&#125;)  <span class=\"comment\">//會觸發</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a  = <span class=\"built_in\">Object</span>.prop <span class=\"comment\">//當然也會觸發</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>handler.defineProperty 的基本形式如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">defineProperty: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, property, descriptor</span>)</span></span><br></pre></td></tr></table></figure>\n\n<p>唯一一個比較需要注意的點是, handler.defineProperty 必須要return 一個 boolean值（用來確定prop是否被正確define）, 不然會報錯</p>\n<h3 id=\"4-handler-set\"><a href=\"#4-handler-set\" class=\"headerlink\" title=\"4. handler.set\"></a>4. handler.set</h3><p>set 基本上就跟一般認知的set 是一樣的東西, 簡單來說就是去設定物件prop的值, 和handler.defineProperty的差別在於, 用set 沒有辦法trap到利用Object.defineProperty 所做的操作</p>\n<p>基本的set 形式為：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, property, value, receiver</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>這邊的target 就是被代理的物件<br>property則是想要被set 值的prop<br>value 是想要給予prop的值<br>receiver 這個比較 特別, 這個預設都是指向proxy 實例自己, 但是在某些狀況底下也可以是別的東西（這個後面再討論）</p>\n<h3 id=\"4-handler-get\"><a href=\"#4-handler-get\" class=\"headerlink\" title=\"4. handler.get\"></a>4. handler.get</h3><p>跟handler.get 同理</p>\n<p>get 的形式是</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, property, receiver</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>和.set一樣, 最後必須要return true</p>\n<h2 id=\"什麼是Reflect-和-receiver\"><a href=\"#什麼是Reflect-和-receiver\" class=\"headerlink\" title=\"什麼是Reflect 和 receiver?\"></a>什麼是Reflect 和 receiver?</h2><h3 id=\"Reflect\"><a href=\"#Reflect\" class=\"headerlink\" title=\"Reflect\"></a>Reflect</h3><p>Reflect 實際上和Proxy 是互相獨立的feature，但是 Reflect 常常跟著 Proxy一起被使用<br>Reflect本身是一種 built-in Object (跟Math一樣), 裡面的method就跟proxy的預設 handler集一樣（名稱一樣, 但是各個函數內容稍微有點差異）</p>\n<h4 id=\"什麼時候會用到Reflect\"><a href=\"#什麼時候會用到Reflect\" class=\"headerlink\" title=\"什麼時候會用到Reflect\"></a>什麼時候會用到Reflect</h4><blockquote>\n<p>平常沒有用到proxy的時候(讓對物件的操作可以變成用refect的method來處理, 優點在於統一整體code的一致性)</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;_secretDrink&#x27;</span> <span class=\"keyword\">in</span> FooBar;</span><br><span class=\"line\"><span class=\"keyword\">delete</span> FooBar._secretDrink;</span><br></pre></td></tr></table></figure>\n<p>有了 Reflect 我們可以這樣做：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Reflect</span>.has(FooBar, <span class=\"string\">&#x27;_secretDrink&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">Reflect</span>.deleteProperty(FooBar, <span class=\"string\">&#x27;_secretDrink&#x27;</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>當有用到proxy的時候</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">const</span> target = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> <span class=\"title\">foo</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.bar;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    bar: <span class=\"number\">3</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> handler = &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\">target, propertyKey, receiver</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (propertyKey === <span class=\"string\">&#x27;bar&#x27;</span>) <span class=\"keyword\">return</span> <span class=\"number\">2</span>;<span class=\"comment\">// 這邊透過reflect.get 將可以拿到handler.get 在特定條件下丟出來的值, 但是如果是直接透過target用特定key取值, 則會直接取用原生物件(非代理)的get func, 導致最後的到的值變成3</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Reflect.get &#x27;</span>, <span class=\"built_in\">Reflect</span>.get(target, propertyKey, receiver)); <span class=\"comment\">// this in foo getter references Proxy instance; logs 2</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;target[propertyKey] &#x27;</span>, target[propertyKey]); <span class=\"comment\">// this in foo getter references &quot;target&quot; - logs 3</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler); <span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.bar); <span class=\"comment\">// 因為 obj是一個proxy實例, 所以取用.bar會觸發 handler.get</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\">obj.foo;</span><br><span class=\"line\"><span class=\"comment\">// Reflect.get  2</span></span><br><span class=\"line\"><span class=\"comment\">// target[propertyKey]  3</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>從這個案例來看, 我們可以發現refect的用意就是要去取得”代理” 這一個目標, 確保可以使用到代理內部handler的get, 而不是去使用原生物件的 getter</p>\n<h3 id=\"receiver\"><a href=\"#receiver\" class=\"headerlink\" title=\"receiver\"></a>receiver</h3><h4 id=\"什麼是receiver\"><a href=\"#什麼是receiver\" class=\"headerlink\" title=\"什麼是receiver?\"></a>什麼是receiver?</h4><p>一般狀況下 receiver會去指向代理本身，比方說</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, property, receiver</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通常來講這個receiver 就會是指向使用了這個handler的代理自己, 但是有些狀況下並不是這樣的。</p>\n<p>這邊不太好懂, 可以看這篇stackoverflow</p>\n<p><a href=\"https://stackoverflow.com/questions/37563495/what-is-a-receiver-in-javascript\">https://stackoverflow.com/questions/37563495/what-is-a-receiver-in-javascript</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> handlers = &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\">target,key,context</span>)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(greeter === context); <span class=\"comment\">//true, this line added</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                context.speak(key + <span class=\"string\">&quot;!&quot;</span>);</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    catchall = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>( &#123;&#125;, handlers ),</span><br><span class=\"line\">    greeter = &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">speak</span>(<span class=\"params\">who = <span class=\"string\">&quot;someone&quot;</span></span>)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log( <span class=\"string\">&quot;hello&quot;</span>, who );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// setup `greeter` to fall back to `catchall`</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf( greeter, catchall );</span><br><span class=\"line\"></span><br><span class=\"line\">greeter.speak();                <span class=\"comment\">// hello someone 發動greeter的speak方法, 很正常的拿到了 預設的 someone</span></span><br><span class=\"line\">greeter.speak( <span class=\"string\">&quot;world&quot;</span> );       <span class=\"comment\">// hello world 給予 world 這個字串參數, 也很正常的拿到了 hello world</span></span><br><span class=\"line\"></span><br><span class=\"line\">greeter.everyone();             <span class=\"comment\">// hello everyone!</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>這邊的greeter.everyone是一個根本不存在的方法, 但是這邊被call了<br>這樣最後會跑去觸發到由setPropertyOf 繼承到的catchall(是一個proxy實例)的handler.get<br>在這種狀況下 get() 的receiver 參數就不會去指向 catchall, 而是指向greeter</p>\n<h3 id=\"Proxy-實用的地方\"><a href=\"#Proxy-實用的地方\" class=\"headerlink\" title=\"Proxy 實用的地方\"></a>Proxy 實用的地方</h3><h4 id=\"1-實作單向-prop-trap綁定\"><a href=\"#1-實作單向-prop-trap綁定\" class=\"headerlink\" title=\"1. 實作單向 prop trap綁定\"></a>1. 實作單向 prop trap綁定</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> inputState = &#123;</span><br><span class=\"line\">    id: <span class=\"string\">&#x27;username&#x27;</span>,</span><br><span class=\"line\">    value: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> input = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#username&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> handler = &#123;</span><br><span class=\"line\">    set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, key, value</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target.id &amp;&amp; key === <span class=\"string\">&#x27;username&#x27;</span>) &#123;</span><br><span class=\"line\">            target[key] = value;</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">`#<span class=\"subst\">$&#123;target.id&#125;</span>`</span>)</span><br><span class=\"line\">            .value = value;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(inputState, handler)</span><br><span class=\"line\">proxy.value = <span class=\"string\">&#x27;John Doe&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 因為真的很基本, 就不特別解釋了</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-trap呼叫無效-不存在方法的行為並throw-error\"><a href=\"#2-trap呼叫無效-不存在方法的行為並throw-error\" class=\"headerlink\" title=\"2. trap呼叫無效/ 不存在方法的行為並throw error\"></a>2. trap呼叫無效/ 不存在方法的行為並throw error</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(<span class=\"built_in\">this</span>, &#123;</span><br><span class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">object, property</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 用reflect.has 去判斷 object 是不是有那個key 值</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">Reflect</span>.has(object, property)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.get(object, property);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//如果方法不存在, 那就return 一個攔截用的function</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">methodMissing</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;you called &#x27;</span> + property + <span class=\"string\">&#x27; but it doesn\\&#x27;t exist!&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Foo.prototype.bar = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;you called bar. Good job!&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo = <span class=\"keyword\">new</span> Foo();</span><br><span class=\"line\">foo.bar();</span><br><span class=\"line\"><span class=\"comment\">//=&gt; you called bar. Good job!</span></span><br><span class=\"line\">foo.this_method_does_not_exist()</span><br><span class=\"line\"><span class=\"comment\">// error 被攔截</span></span><br><span class=\"line\"><span class=\"comment\">//=&gt; you called this_method_does_not_exist but it doesn&#x27;t exist</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"實作-interpolation\"><a href=\"#實作-interpolation\" class=\"headerlink\" title=\"實作 interpolation\"></a>實作 interpolation</h4><p>這個比較複雜，預計下週在補完</p>\n","site":{"data":{"css/variables":"","languages":{"zh-TW":{"title":{"archive":"時間線","category":"分類","tag":"標籤","schedule":"時間表"},"menu":{"home":"首頁","archives":"時間線","categories":"分類","tags":"標籤","about":"關於","search":"搜尋","schedule":"時間表","sitemap":"網站地圖","commonweal":"公益 404"},"sidebar":{"overview":"本站概要","toc":"文章目錄"},"post":{"posted":"發表於","edited":"更新於","created":"創建時間","modified":"修改時間","edit":"編輯","in":"分類於","read_more":"閱讀全文","untitled":"未命名","sticky":"置頂文","views":"閱讀次數","related_posts":"相關文章","copyright":{"author":"作者","link":"文章連結","post_author":"Written by","post_link":"This article originally appeared on","license_title":"版權聲明","license_content":"本網誌所有文章除特別聲明外，均採用 %s 許可協議。轉載請註明出處！"}},"footer":{"powered":"","total_views":"總瀏覽次數","total_visitors":"訪客總數"},"counter":{"tag_cloud":{"zero":"目前還沒有任何標籤","one":"目前共有 1 個標籤","other":"目前共有 %d 個標籤"},"categories":{"zero":"目前還沒有任何分類","one":"目前共有 1 個分類","other":"目前共有 %d 個分類"},"archive_posts":{"zero":"目前還沒有任何文章。","one":"目前共有 1 篇文章。","other":"目前共有 %d 篇文章。"}},"state":{"posts":"文章","tags":"標籤","categories":"分類"},"search":{"placeholder":"搜尋...","empty":"We didn't find any results for the search: %s","hits_time":"%s results found in %s ms","hits":"%s results found"},"cheers":{"um":"嗯..","ok":"還不錯","nice":"好","good":"很好","great":"非常好","excellent":"棒棒Der"},"keep_on":"繼續努力。","symbol":{"comma":"，","period":"。","colon":"："},"reward":{"donate":"捐贈","wechatpay":"微信支付","alipay":"支付寶","paypal":"貝寶","bitcoin":"比特幣"},"follow_me":{"welcome":"歡迎關注我的其它站點"},"accessibility":{"nav_toggle":"切換導航欄","prev_page":"上一頁","next_page":"下一頁"},"symbols_count_time":{"count":"文章字數","count_total":"總字數","time":"所需閱讀時間","time_total":"所需總閱讀時間","time_minutes":"分鐘"}}},"css/mixins":"","css/styles":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","template/head":"<script src=\"//js/tool/canvas-fx-base.js\"></script>\n\n<script src=\"//js/ripple-logo.js\"></script>\n<script src=\"//js/silk-wave.js\"></script>\n\n<style>\n  @font-face {\n  font-family: \"Roboto\";\n  src: url(//font/Roboto.ttf) format(\"truetype\");\n}\n</style>","css/styl-plugin/grid-post-layout/main":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","css/styl-plugin/grid-post-layout/mixins":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n","css/styl-plugin/grid-post-layout/variables":""}},"excerpt":"","more":"<h2 id=\"什麼是Proxy\"><a href=\"#什麼是Proxy\" class=\"headerlink\" title=\"什麼是Proxy\"></a>什麼是Proxy</h2><blockquote>\n<p>字面上的意思就是”代理” [color=red]</p>\n</blockquote>\n<ul>\n<li>Q1: 所以說是要代理些什麼東西啊?</li>\n<li>A1: 所謂的代理, 就是在要去代理一個物件內部 的 &lt;屬性的存取&gt;。過程中Proxy的作用方式，<br>有點像是去形成一個攔截屏障，所有要存取目標物件的程序都需要去通過這層屏障才能完成存取，所以說這層屏障的用途就在於偵測屬性的被存取</li>\n</ul>\n<p><strong>這邊是一個利用Proxy去為一個空物件撰寫getter/setter的範例</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, &#123;</span><br><span class=\"line\">  get: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target, propKey, receiver</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`getting <span class=\"subst\">$&#123;propKey&#125;</span>!`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.get(target, propKey, receiver);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  set: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target, propKey, value, receiver</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`setting <span class=\"subst\">$&#123;propKey&#125;</span>!`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.set(target, propKey, value, receiver);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"Proxy-的基本語法\"><a href=\"#Proxy-的基本語法\" class=\"headerlink\" title=\"Proxy 的基本語法\"></a>Proxy 的基本語法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>其中 <strong>target</strong> 是一個目標的物件（雖然說是物件，但是它實際上也可以是array/function，甚至是另外一個proxy）</p>\n</li>\n<li><p><strong>handler</strong> 也是一個物件，但是他裡面的屬性  是proxy攔截(trap)到屬性存取行為時可以使用的函數。</p>\n</li>\n<li><p>基本上，我們在定義handler的時候並不是直接給一個有很多自訂名稱的方法的物件。</p>\n</li>\n<li><p>handler裡面可以定義的方法有下面幾種(共13種)：</p>\n<ul>\n<li>**get(target, propKey, receiver)**：攔截對象屬性的讀取，比如proxy.foo和proxy[‘foo’]。</li>\n<li>**set(target, propKey, value, receiver)**：攔截對象屬性的設置，比如proxy.foo = v或proxy[‘foo’] = v，返回一個Boolean。</li>\n<li>**has(target, propKey)**：攔截propKey in proxy的操作，返回一個Boolean。</li>\n<li>**deleteProperty(target, propKey)**：攔截delete proxy[propKey]的操作，返回一個Boolean。</li>\n<li>**ownKeys(target)**：攔截Object.getOwnPropertyNames(proxy)、Object.getOwnPropertySymbols(proxy)、Object.keys(proxy)、for…in循環，返回一個數組。該方法返回目標對象所有自身的屬性的屬性名，而Object.keys()的返回結果僅包括目標對象自身的可遍歷屬性。</li>\n<li>**getOwnPropertyDescriptor(target, propKey)**：攔截Object.getOwnPropertyDescriptor(proxy, propKey)，返回屬性的描述對象。</li>\n<li>**defineProperty(target, propKey, propDesc)**：攔截Object.defineProperty(proxy, propKey, propDesc）、Object.defineProperties(proxy, propDescs)，返回一個Boolean。</li>\n<li>**preventExtensions(target)**：攔截Object.preventExtensions(proxy)，返回一個Boolean。</li>\n<li>**getPrototypeOf(target)**：攔截Object.getPrototypeOf(proxy)，返回一個對象。</li>\n<li>**isExtensible(target)**：攔截Object.isExtensible(proxy)，返回一個Boolean。</li>\n<li>**setPrototypeOf(target, proto)**：攔截Object.setPrototypeOf(proxy, proto)，返回一個Boolean。如果目標對像是函數，那麼還有兩種額外操作可以攔截。</li>\n<li>**apply(target, object, args)**：攔截Proxy 實例作為函數調用的操作，比如proxy(…args)、proxy.call(object, …args)、proxy.apply(.. .)。</li>\n<li>**construct(target, args)**：攔截 Proxy 實例作為構造函數調用的操作，比如new proxy(…args)。</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>MDN上面有更完整的說明 [color=red]<br><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy#Handler_functions\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy#Handler_functions</a></p>\n</blockquote>\n<h2 id=\"先來看個-Proxy-的基本演練\"><a href=\"#先來看個-Proxy-的基本演練\" class=\"headerlink\" title=\"先來看個 Proxy 的基本演練\"></a>先來看個 Proxy 的基本演練</h2><blockquote>\n<p>source code from MDN [color=red]</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> handler = &#123;</span><br><span class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, name</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name <span class=\"keyword\">in</span> target ?</span><br><span class=\"line\">            target[name] :</span><br><span class=\"line\">            <span class=\"number\">37</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, name, value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (name === <span class=\"string\">&#x27;age&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"built_in\">Number</span>.isInteger(value)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">&#x27;The age is not an integer&#x27;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (value &gt; <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">RangeError</span>(<span class=\"string\">&#x27;The age seems invalid&#x27;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// The default behavior to store the value</span></span><br><span class=\"line\">    target[name] = value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Indicate success</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, handler);</span><br></pre></td></tr></table></figure>\n\n<p>這樣寫的話，當我們去執行console.log(p.abc),也就是去取用p的屬性值，就會觸發get function<br>而如果我們去執行p.abc = “123”, 就會觸發set function，這就是最基本的handler.get和handler.set的運用</p>\n<h2 id=\"下週繼續-常用的handler方法與他們的使用範例\"><a href=\"#下週繼續-常用的handler方法與他們的使用範例\" class=\"headerlink\" title=\"下週繼續: 常用的handler方法與他們的使用範例\"></a>下週繼續: 常用的handler方法與他們的使用範例</h2><h3 id=\"1-handler-apply\"><a href=\"#1-handler-apply\" class=\"headerlink\" title=\"1. handler.apply\"></a>1. handler.apply</h3><p>基本上大家都知道apply就跟call 是類似的東西, 他們是被用來執行一個函數, 並且可以塞特定的變數(或array)進去函式作為 this 使用;<br>而當一個函式被帶入proxy建構式而建立起proxy物件的時候, 因為函式本身也是一種物件(<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions\">見ＭＤＮ解說</a>, 所以這樣就會變成只要該函式被以任何一種形式(一般/call/apply)呼叫的時候就會觸發代理的apply</p>\n<p>基本的型態是這樣(如下)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">apply: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, thisArg, argumentsList</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br></pre></td></tr></table></figure>\n\n<p>這邊target 是被代理的函式, thisArg 則是當這個被代理的函數是被call或者apply所呼叫時填入的this , argumentsList則是這個函數在被呼叫時的參數群</p>\n<h3 id=\"2-handler-new\"><a href=\"#2-handler-new\" class=\"headerlink\" title=\"2. handler.new\"></a>2. handler.new</h3><p>這應該也是蠻好理解的, 簡單來說就是當一個能被作為建構子使用的函數, 被以proxy代理, 這樣的話, 他在被new 產生實例的時候, 就會觸發construct;</p>\n<p>基本的型態是這樣(如下)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">contruct: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-handler-defineProperty\"><a href=\"#3-handler-defineProperty\" class=\"headerlink\" title=\"3. handler.defineProperty\"></a>3. handler.defineProperty</h3><p>這個就有點意思了,  handler.defineProperty 是proxy 用來代理 object.defineProperty的對應handler形式, 那什麼是object.defineProperty呢?<br>簡單來講, object.defineProperty就是去賦值給一個物件的prop, 或者是產生並賦值一個prop。<br>這聽起來似乎很像是set 或是 object[‘prop’]=xxx 這樣的操作, 而的確object[‘prop’]=xxx的背後就是用object.defineProperty做成的。</p>\n<p>他正確的形式是像這樣寫的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, prop, descriptor) </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>這邊的obj就是 想要去賦值prop的物件,prop就是想要去改變的property, 而descriptor則是一個物件, 裡面預設包含：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  enumerable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  configurable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  writable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  value: <span class=\"string\">&#x27;value&#x27;</span>,</span><br><span class=\"line\">  get:<span class=\"function\">()=&gt;</span>&#123;&#125;</span><br><span class=\"line\">  set:<span class=\"function\">()=&gt;</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我們平常使用obj[‘prop’]=value, 其實等同於是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, prop, &#123;</span><br><span class=\"line\">enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  configurable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  writable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  value: <span class=\"string\">&#x27;value&#x27;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>這邊enumerable的用途是決定是否放行Object.keys() 或 for…in loop 去遍歷到這個屬性<br>configurable代表的是這次操作之後能不能再重新用Object.defineProperty去改寫這個prop的descriptor<br>而writable則是決定這個prop可不可以被覆寫<br>get/set 基本上就是一般理解的get/set 函數。</p>\n<p>之後有機會的話再來寫一篇心得探討Object.defineProperty的用途</p>\n<p>那讓我們回歸到正題。</p>\n<p>我們這邊講到的是用proxy 去代理物件時，利用handler 中的 defineProperty trap 去偵測defineProperty行為, 這應該就不難理解了<br>基本上只要是透過Object.defineProperty所做出來的操作, 全部都會觸發這個trap</p>\n<p>所以,</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj[<span class=\"string\">&#x27;prop&#x27;</span>]=value <span class=\"comment\">//會觸發</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, prop, &#123;</span><br><span class=\"line\">enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  configurable: <span class=\"literal\">true</span>, </span><br><span class=\"line\">  writable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  value: <span class=\"string\">&#x27;value&#x27;</span></span><br><span class=\"line\">&#125;)  <span class=\"comment\">//會觸發</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a  = <span class=\"built_in\">Object</span>.prop <span class=\"comment\">//當然也會觸發</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>handler.defineProperty 的基本形式如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">defineProperty: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, property, descriptor</span>)</span></span><br></pre></td></tr></table></figure>\n\n<p>唯一一個比較需要注意的點是, handler.defineProperty 必須要return 一個 boolean值（用來確定prop是否被正確define）, 不然會報錯</p>\n<h3 id=\"4-handler-set\"><a href=\"#4-handler-set\" class=\"headerlink\" title=\"4. handler.set\"></a>4. handler.set</h3><p>set 基本上就跟一般認知的set 是一樣的東西, 簡單來說就是去設定物件prop的值, 和handler.defineProperty的差別在於, 用set 沒有辦法trap到利用Object.defineProperty 所做的操作</p>\n<p>基本的set 形式為：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, property, value, receiver</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>這邊的target 就是被代理的物件<br>property則是想要被set 值的prop<br>value 是想要給予prop的值<br>receiver 這個比較 特別, 這個預設都是指向proxy 實例自己, 但是在某些狀況底下也可以是別的東西（這個後面再討論）</p>\n<h3 id=\"4-handler-get\"><a href=\"#4-handler-get\" class=\"headerlink\" title=\"4. handler.get\"></a>4. handler.get</h3><p>跟handler.get 同理</p>\n<p>get 的形式是</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, property, receiver</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>和.set一樣, 最後必須要return true</p>\n<h2 id=\"什麼是Reflect-和-receiver\"><a href=\"#什麼是Reflect-和-receiver\" class=\"headerlink\" title=\"什麼是Reflect 和 receiver?\"></a>什麼是Reflect 和 receiver?</h2><h3 id=\"Reflect\"><a href=\"#Reflect\" class=\"headerlink\" title=\"Reflect\"></a>Reflect</h3><p>Reflect 實際上和Proxy 是互相獨立的feature，但是 Reflect 常常跟著 Proxy一起被使用<br>Reflect本身是一種 built-in Object (跟Math一樣), 裡面的method就跟proxy的預設 handler集一樣（名稱一樣, 但是各個函數內容稍微有點差異）</p>\n<h4 id=\"什麼時候會用到Reflect\"><a href=\"#什麼時候會用到Reflect\" class=\"headerlink\" title=\"什麼時候會用到Reflect\"></a>什麼時候會用到Reflect</h4><blockquote>\n<p>平常沒有用到proxy的時候(讓對物件的操作可以變成用refect的method來處理, 優點在於統一整體code的一致性)</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;_secretDrink&#x27;</span> <span class=\"keyword\">in</span> FooBar;</span><br><span class=\"line\"><span class=\"keyword\">delete</span> FooBar._secretDrink;</span><br></pre></td></tr></table></figure>\n<p>有了 Reflect 我們可以這樣做：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Reflect</span>.has(FooBar, <span class=\"string\">&#x27;_secretDrink&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">Reflect</span>.deleteProperty(FooBar, <span class=\"string\">&#x27;_secretDrink&#x27;</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>當有用到proxy的時候</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">const</span> target = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> <span class=\"title\">foo</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.bar;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    bar: <span class=\"number\">3</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> handler = &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\">target, propertyKey, receiver</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (propertyKey === <span class=\"string\">&#x27;bar&#x27;</span>) <span class=\"keyword\">return</span> <span class=\"number\">2</span>;<span class=\"comment\">// 這邊透過reflect.get 將可以拿到handler.get 在特定條件下丟出來的值, 但是如果是直接透過target用特定key取值, 則會直接取用原生物件(非代理)的get func, 導致最後的到的值變成3</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Reflect.get &#x27;</span>, <span class=\"built_in\">Reflect</span>.get(target, propertyKey, receiver)); <span class=\"comment\">// this in foo getter references Proxy instance; logs 2</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;target[propertyKey] &#x27;</span>, target[propertyKey]); <span class=\"comment\">// this in foo getter references &quot;target&quot; - logs 3</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler); <span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.bar); <span class=\"comment\">// 因為 obj是一個proxy實例, 所以取用.bar會觸發 handler.get</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\">obj.foo;</span><br><span class=\"line\"><span class=\"comment\">// Reflect.get  2</span></span><br><span class=\"line\"><span class=\"comment\">// target[propertyKey]  3</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>從這個案例來看, 我們可以發現refect的用意就是要去取得”代理” 這一個目標, 確保可以使用到代理內部handler的get, 而不是去使用原生物件的 getter</p>\n<h3 id=\"receiver\"><a href=\"#receiver\" class=\"headerlink\" title=\"receiver\"></a>receiver</h3><h4 id=\"什麼是receiver\"><a href=\"#什麼是receiver\" class=\"headerlink\" title=\"什麼是receiver?\"></a>什麼是receiver?</h4><p>一般狀況下 receiver會去指向代理本身，比方說</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, property, receiver</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通常來講這個receiver 就會是指向使用了這個handler的代理自己, 但是有些狀況下並不是這樣的。</p>\n<p>這邊不太好懂, 可以看這篇stackoverflow</p>\n<p><a href=\"https://stackoverflow.com/questions/37563495/what-is-a-receiver-in-javascript\">https://stackoverflow.com/questions/37563495/what-is-a-receiver-in-javascript</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> handlers = &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\">target,key,context</span>)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(greeter === context); <span class=\"comment\">//true, this line added</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                context.speak(key + <span class=\"string\">&quot;!&quot;</span>);</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    catchall = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>( &#123;&#125;, handlers ),</span><br><span class=\"line\">    greeter = &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">speak</span>(<span class=\"params\">who = <span class=\"string\">&quot;someone&quot;</span></span>)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log( <span class=\"string\">&quot;hello&quot;</span>, who );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// setup `greeter` to fall back to `catchall`</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf( greeter, catchall );</span><br><span class=\"line\"></span><br><span class=\"line\">greeter.speak();                <span class=\"comment\">// hello someone 發動greeter的speak方法, 很正常的拿到了 預設的 someone</span></span><br><span class=\"line\">greeter.speak( <span class=\"string\">&quot;world&quot;</span> );       <span class=\"comment\">// hello world 給予 world 這個字串參數, 也很正常的拿到了 hello world</span></span><br><span class=\"line\"></span><br><span class=\"line\">greeter.everyone();             <span class=\"comment\">// hello everyone!</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>這邊的greeter.everyone是一個根本不存在的方法, 但是這邊被call了<br>這樣最後會跑去觸發到由setPropertyOf 繼承到的catchall(是一個proxy實例)的handler.get<br>在這種狀況下 get() 的receiver 參數就不會去指向 catchall, 而是指向greeter</p>\n<h3 id=\"Proxy-實用的地方\"><a href=\"#Proxy-實用的地方\" class=\"headerlink\" title=\"Proxy 實用的地方\"></a>Proxy 實用的地方</h3><h4 id=\"1-實作單向-prop-trap綁定\"><a href=\"#1-實作單向-prop-trap綁定\" class=\"headerlink\" title=\"1. 實作單向 prop trap綁定\"></a>1. 實作單向 prop trap綁定</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> inputState = &#123;</span><br><span class=\"line\">    id: <span class=\"string\">&#x27;username&#x27;</span>,</span><br><span class=\"line\">    value: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> input = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#username&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> handler = &#123;</span><br><span class=\"line\">    set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, key, value</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target.id &amp;&amp; key === <span class=\"string\">&#x27;username&#x27;</span>) &#123;</span><br><span class=\"line\">            target[key] = value;</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">`#<span class=\"subst\">$&#123;target.id&#125;</span>`</span>)</span><br><span class=\"line\">            .value = value;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(inputState, handler)</span><br><span class=\"line\">proxy.value = <span class=\"string\">&#x27;John Doe&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 因為真的很基本, 就不特別解釋了</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-trap呼叫無效-不存在方法的行為並throw-error\"><a href=\"#2-trap呼叫無效-不存在方法的行為並throw-error\" class=\"headerlink\" title=\"2. trap呼叫無效/ 不存在方法的行為並throw error\"></a>2. trap呼叫無效/ 不存在方法的行為並throw error</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(<span class=\"built_in\">this</span>, &#123;</span><br><span class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">object, property</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 用reflect.has 去判斷 object 是不是有那個key 值</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">Reflect</span>.has(object, property)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.get(object, property);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//如果方法不存在, 那就return 一個攔截用的function</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">methodMissing</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;you called &#x27;</span> + property + <span class=\"string\">&#x27; but it doesn\\&#x27;t exist!&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Foo.prototype.bar = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;you called bar. Good job!&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo = <span class=\"keyword\">new</span> Foo();</span><br><span class=\"line\">foo.bar();</span><br><span class=\"line\"><span class=\"comment\">//=&gt; you called bar. Good job!</span></span><br><span class=\"line\">foo.this_method_does_not_exist()</span><br><span class=\"line\"><span class=\"comment\">// error 被攔截</span></span><br><span class=\"line\"><span class=\"comment\">//=&gt; you called this_method_does_not_exist but it doesn&#x27;t exist</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"實作-interpolation\"><a href=\"#實作-interpolation\" class=\"headerlink\" title=\"實作 interpolation\"></a>實作 interpolation</h4><p>這個比較複雜，預計下週在補完</p>\n"},{"title":"Proxy 的功用/實用的點","_content":"\n\n## 1. 實作雙/單向 prop trap綁定  \n\n````javascript\nconst input = document.querySelector('#username')\nconst handler = {\n    set: function(target, key, value) {\n        if (target.id && key === 'username') {\n            target[key] = value;\n            document.querySelector(`#${target.id}`)\n            .value = value;\n            return true\n        }\n        return false\n    }\n}\n\nconst proxy = new Proxy(inputState, handler)\nproxy.value = 'John Doe'\n````\n\n\n\n## 2. trap呼叫無效/ 不存在方法的行為並throw error\n````javascript\nfunction Foo() {\n  return new Proxy(this, {\n    get: function (object, property) {\n      if (Reflect.has(object, property)) {\n        return Reflect.get(object, property);\n      } else {\n        return function methodMissing() {\n          console.log('you called ' + property + ' but it doesn\\'t exist!');\n        }\n      }\n    }\n  });\n}\n\nFoo.prototype.bar = function () {\n  console.log('you called bar. Good job!');\n}\n\nfoo = new Foo();\nfoo.bar();\n//=> you called bar. Good job!\nfoo.this_method_does_not_exist()\n//=> you called this_method_does_not_exist but it doesn't exist\n````","source":"_posts/Proxy 的功用_實用的點.md","raw":"---\ntitle: Proxy 的功用/實用的點\ncategories: \n- 心得\ntags:\n- js\n---\n\n\n## 1. 實作雙/單向 prop trap綁定  \n\n````javascript\nconst input = document.querySelector('#username')\nconst handler = {\n    set: function(target, key, value) {\n        if (target.id && key === 'username') {\n            target[key] = value;\n            document.querySelector(`#${target.id}`)\n            .value = value;\n            return true\n        }\n        return false\n    }\n}\n\nconst proxy = new Proxy(inputState, handler)\nproxy.value = 'John Doe'\n````\n\n\n\n## 2. trap呼叫無效/ 不存在方法的行為並throw error\n````javascript\nfunction Foo() {\n  return new Proxy(this, {\n    get: function (object, property) {\n      if (Reflect.has(object, property)) {\n        return Reflect.get(object, property);\n      } else {\n        return function methodMissing() {\n          console.log('you called ' + property + ' but it doesn\\'t exist!');\n        }\n      }\n    }\n  });\n}\n\nFoo.prototype.bar = function () {\n  console.log('you called bar. Good job!');\n}\n\nfoo = new Foo();\nfoo.bar();\n//=> you called bar. Good job!\nfoo.this_method_does_not_exist()\n//=> you called this_method_does_not_exist but it doesn't exist\n````","slug":"Proxy 的功用_實用的點","published":1,"date":"2020-11-25T17:01:45.842Z","updated":"2020-11-25T17:01:45.843Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki5kjebt000bxdvdgzmcg7te","content":"<h2 id=\"1-實作雙-單向-prop-trap綁定\"><a href=\"#1-實作雙-單向-prop-trap綁定\" class=\"headerlink\" title=\"1. 實作雙/單向 prop trap綁定\"></a>1. 實作雙/單向 prop trap綁定</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> input = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#username&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> handler = &#123;</span><br><span class=\"line\">    set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, key, value</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target.id &amp;&amp; key === <span class=\"string\">&#x27;username&#x27;</span>) &#123;</span><br><span class=\"line\">            target[key] = value;</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">`#<span class=\"subst\">$&#123;target.id&#125;</span>`</span>)</span><br><span class=\"line\">            .value = value;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(inputState, handler)</span><br><span class=\"line\">proxy.value = <span class=\"string\">&#x27;John Doe&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-trap呼叫無效-不存在方法的行為並throw-error\"><a href=\"#2-trap呼叫無效-不存在方法的行為並throw-error\" class=\"headerlink\" title=\"2. trap呼叫無效/ 不存在方法的行為並throw error\"></a>2. trap呼叫無效/ 不存在方法的行為並throw error</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(<span class=\"built_in\">this</span>, &#123;</span><br><span class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">object, property</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">Reflect</span>.has(object, property)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.get(object, property);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">methodMissing</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;you called &#x27;</span> + property + <span class=\"string\">&#x27; but it doesn\\&#x27;t exist!&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Foo.prototype.bar = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;you called bar. Good job!&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo = <span class=\"keyword\">new</span> Foo();</span><br><span class=\"line\">foo.bar();</span><br><span class=\"line\"><span class=\"comment\">//=&gt; you called bar. Good job!</span></span><br><span class=\"line\">foo.this_method_does_not_exist()</span><br><span class=\"line\"><span class=\"comment\">//=&gt; you called this_method_does_not_exist but it doesn&#x27;t exist</span></span><br></pre></td></tr></table></figure>","site":{"data":{"css/variables":"","languages":{"zh-TW":{"title":{"archive":"時間線","category":"分類","tag":"標籤","schedule":"時間表"},"menu":{"home":"首頁","archives":"時間線","categories":"分類","tags":"標籤","about":"關於","search":"搜尋","schedule":"時間表","sitemap":"網站地圖","commonweal":"公益 404"},"sidebar":{"overview":"本站概要","toc":"文章目錄"},"post":{"posted":"發表於","edited":"更新於","created":"創建時間","modified":"修改時間","edit":"編輯","in":"分類於","read_more":"閱讀全文","untitled":"未命名","sticky":"置頂文","views":"閱讀次數","related_posts":"相關文章","copyright":{"author":"作者","link":"文章連結","post_author":"Written by","post_link":"This article originally appeared on","license_title":"版權聲明","license_content":"本網誌所有文章除特別聲明外，均採用 %s 許可協議。轉載請註明出處！"}},"footer":{"powered":"","total_views":"總瀏覽次數","total_visitors":"訪客總數"},"counter":{"tag_cloud":{"zero":"目前還沒有任何標籤","one":"目前共有 1 個標籤","other":"目前共有 %d 個標籤"},"categories":{"zero":"目前還沒有任何分類","one":"目前共有 1 個分類","other":"目前共有 %d 個分類"},"archive_posts":{"zero":"目前還沒有任何文章。","one":"目前共有 1 篇文章。","other":"目前共有 %d 篇文章。"}},"state":{"posts":"文章","tags":"標籤","categories":"分類"},"search":{"placeholder":"搜尋...","empty":"We didn't find any results for the search: %s","hits_time":"%s results found in %s ms","hits":"%s results found"},"cheers":{"um":"嗯..","ok":"還不錯","nice":"好","good":"很好","great":"非常好","excellent":"棒棒Der"},"keep_on":"繼續努力。","symbol":{"comma":"，","period":"。","colon":"："},"reward":{"donate":"捐贈","wechatpay":"微信支付","alipay":"支付寶","paypal":"貝寶","bitcoin":"比特幣"},"follow_me":{"welcome":"歡迎關注我的其它站點"},"accessibility":{"nav_toggle":"切換導航欄","prev_page":"上一頁","next_page":"下一頁"},"symbols_count_time":{"count":"文章字數","count_total":"總字數","time":"所需閱讀時間","time_total":"所需總閱讀時間","time_minutes":"分鐘"}}},"css/mixins":"","css/styles":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","template/head":"<script src=\"//js/tool/canvas-fx-base.js\"></script>\n\n<script src=\"//js/ripple-logo.js\"></script>\n<script src=\"//js/silk-wave.js\"></script>\n\n<style>\n  @font-face {\n  font-family: \"Roboto\";\n  src: url(//font/Roboto.ttf) format(\"truetype\");\n}\n</style>","css/styl-plugin/grid-post-layout/main":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","css/styl-plugin/grid-post-layout/mixins":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n","css/styl-plugin/grid-post-layout/variables":""}},"excerpt":"","more":"<h2 id=\"1-實作雙-單向-prop-trap綁定\"><a href=\"#1-實作雙-單向-prop-trap綁定\" class=\"headerlink\" title=\"1. 實作雙/單向 prop trap綁定\"></a>1. 實作雙/單向 prop trap綁定</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> input = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#username&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> handler = &#123;</span><br><span class=\"line\">    set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, key, value</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target.id &amp;&amp; key === <span class=\"string\">&#x27;username&#x27;</span>) &#123;</span><br><span class=\"line\">            target[key] = value;</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">`#<span class=\"subst\">$&#123;target.id&#125;</span>`</span>)</span><br><span class=\"line\">            .value = value;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(inputState, handler)</span><br><span class=\"line\">proxy.value = <span class=\"string\">&#x27;John Doe&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-trap呼叫無效-不存在方法的行為並throw-error\"><a href=\"#2-trap呼叫無效-不存在方法的行為並throw-error\" class=\"headerlink\" title=\"2. trap呼叫無效/ 不存在方法的行為並throw error\"></a>2. trap呼叫無效/ 不存在方法的行為並throw error</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(<span class=\"built_in\">this</span>, &#123;</span><br><span class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">object, property</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">Reflect</span>.has(object, property)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.get(object, property);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">methodMissing</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;you called &#x27;</span> + property + <span class=\"string\">&#x27; but it doesn\\&#x27;t exist!&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Foo.prototype.bar = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;you called bar. Good job!&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo = <span class=\"keyword\">new</span> Foo();</span><br><span class=\"line\">foo.bar();</span><br><span class=\"line\"><span class=\"comment\">//=&gt; you called bar. Good job!</span></span><br><span class=\"line\">foo.this_method_does_not_exist()</span><br><span class=\"line\"><span class=\"comment\">//=&gt; you called this_method_does_not_exist but it doesn&#x27;t exist</span></span><br></pre></td></tr></table></figure>"},{"title":"TYPESCRIPT學習筆記-ep1","_content":"\n\n\n\n# TYPESCRIPT的基礎常識\n\n\n## 基礎型別上與es5/es6 較有差異的部分\n1. 數字\nts的數字另外有支援兩種格式：2進位＆8進位;除此之外,ts 的number同樣都是浮點數\n```typescript=\nlet decLiteral: number = 6;\nlet hexLiteral: number = 0xf00d;\nlet binaryLiteral: number = 0b1010;\nlet octalLiteral: number = 0o744;\n```\n\n2. 陣列\n```typescript=\n//原則上ts的變數都要寫型別，而如果一個變數的型別是array\n//且這個array的子項型別都是number，則可寫成如下\nlet list: number[] = [1, 2, 3];\n```\n\n```typescript=\n//承上，或如下利用泛型\nlet list: number[] = [1, 2, 3];\n```\n\n3. 元組(陣列型別專用)\n\n- 最基本的範例：\n```typescript=\n// Declare a tuple type\nlet x: [string, number];\n// Initialize it\nx = ['hello', 10]; // OK\n// Initialize it incorrectly\nx = [10, 'hello']; // Error\n```\n\n- 為陣列編寫型別的好處\n\n```typescript=\nlet x: [string, number];\nx = ['hello', 10]; // OK\nconsole.log(x[0].substr(1)); // OK 因為x[0]在元組中定義為字串，可以使用substr方法\nconsole.log(x[1].substr(1)); // Error, 因為10屬於在元組中定義為數字，不能使用substr方法，所以會報錯\n```\n\n- 當偵測到陣列子項位置在元組定義範圍外的子項時，會用元組定義的型別的聯集來定義之\n\n```typescript=\nx[3] = 'world'; // OK, 字符串可以赋值给(string | number)类型\n\nconsole.log(x[5].toString()); // OK, 'string' 和 'number' 都有 toString\n\nx[6] = true; // Error, 布尔不是(string | number)类型\n```\n\n4. 列舉（Enumerate）\n\n- 能夠把變數的範圍限制在某些限制下進行存取並賦予其定義\n\n- 舉個實用的例子，團隊裡的後端在 Server 處理資料發生錯誤時，定義了一些代碼，來告訴前端說，這個代碼代表什麼錯誤，那個又是什麼：\n\n```javascript=\nconst handleWrongStatus = (status: string): void => {\n  switch (status) {\n    case 'A':\n      // Do something...\n      break;\n    case 'B':\n      // Do something...\n      break;\n    case 'C':\n      // Do something...\n      break;\n    default:\n      throw (new Error('No have wrong code!'));\n  }\n};\n```\n\n然而像上面這樣寫的話，缺點會在於各個case之間沒有語意化，你很難去釐清Case A 實際上是什麼, Case B又是什麼，在這種狀況下就可以去使用enumerate\n\nenumerate的寫法跟js的物件接近，如下\n\n```typescript=\nenum requestStatusCodes {\n  error,\n  success,\n}\n```\n\n正常來講，如果不幫上述這個requestStatusCodes 的裡面每一個子項去做定義，TS的編譯器會直接把error的編號定為0, success的編號定為1（流水號）\n\n這樣我們就可以透過requestStatusCodes.error拿到0這個列舉值, requestStatusCodes.success拿到1這個列舉值;或者透過requestStatusCodes[0]拿到error 這個列舉子項\n\n這樣的話。上述的case switch就可以這樣改良\n\n```typescript=\nenum requestWrongCodes {\n  missingParameter = 'A',\n  wrongParameterType = 'B',\n  invalidToken = 'C',\n}\n\nconst handleWrongStatus = (status: string): void => {\n  //es6解構賦值的寫法\n  const { missingParameter, wrongParameterType, invalidToken, } = requestWrongCodes;\n  switch (status) {\n    case missingParameter:\n      // Do something...\n      break;\n    case wrongParameterType:\n      // Do something...\n      break;\n    case invalidToken:\n      // Do something...\n      break;\n    default:\n      throw (new Error('No have wrong code!'));\n  }\n};\n```\n5.any/void 任意值與虛空值\n\n變數的型別如果不確定的話可以直接帶any，而函數的return type如果為空的話則可以直接帶:void\n\n```typescript=\nlet notSure: any = 4;\nnotSure = \"maybe a string instead\"; //這樣不會報錯\nnotSure = false; //這樣也不會報錯\n```\n\n```typescript=\nfunction warnUser(): void {\n    console.log(\"This is my warning message\");\n}\n```\n\n6.undefined/null 未定義與空值\n\n> TypeScript里，undefined和null两者各自有自己的类型分别叫做undefined和null。 和void相似，它们的本身的类型用处不是很大\n\n```typscript=\n// Not much else we can assign to these variables!\nlet u: undefined = undefined; \nlet n: null = null;\n```\n> 在默認狀況下 undefined和null 這兩種value也可以被賦予給任何型別作為其值\n```typescript=\nlet u: number = undefined; \nlet n: syting = null;\n```\n\n- --strictNullChecks是什麼？\n>簡單來說就是typescript 的tsconfig.json裡面的一個設定，只要做了這個設定以後，undefined和null 這兩種value就再也不會被默認為任何型別的一種預設值。也許在某處你想嘗試一個字串或空或未定義，可以使用聯合類型 ```ex: string|number|null```\n\n```json\n{\n    \"compileOnSave\": false,\n    \"compilerOptions\": {\n        ...\n        \"strictNullChecks\": true,\n        \"skipLibCheck\": true,\n        ...\n    }\n}\n```\n\n7. Never 這個型別是用來幹嘛用的?\n\nnever類型表示的是那些根本就不會有值的類型，例如一個只會return new Error('string') 的function； \n要注意值為never型別不接受null作為其值。\n\n```typescript=\nfunction error(message: string): never {\n    throw new Error(message);\n}\n```\n\n```typescript=\nlet something: void = null;\nlet nothing: never = null; // Error: Type 'null' is not assignable to type 'never'\n```\n\n8. 類型斷言\n\n類型斷言好比其它語言裡的類型轉換，但是不進行特殊的數據檢查和解構。\n.jsx檔案裡面只能用as的方式做類型斷言\n\n```typescript\nlet someValue: any = \"this is a string\";\n\nlet strLength: number = (<string>someValue).length;\n```\n\n```typescript\nlet someValue: any = \"this is a string\";\n\nlet strLength: number = (someValue as string).length;\n```","source":"_posts/TYPESCRIPT學習筆記-ep1.md","raw":"---\ntitle: TYPESCRIPT學習筆記-ep1\ncategories: \n- 心得\ntags:\n- ts\n---\n\n\n\n\n# TYPESCRIPT的基礎常識\n\n\n## 基礎型別上與es5/es6 較有差異的部分\n1. 數字\nts的數字另外有支援兩種格式：2進位＆8進位;除此之外,ts 的number同樣都是浮點數\n```typescript=\nlet decLiteral: number = 6;\nlet hexLiteral: number = 0xf00d;\nlet binaryLiteral: number = 0b1010;\nlet octalLiteral: number = 0o744;\n```\n\n2. 陣列\n```typescript=\n//原則上ts的變數都要寫型別，而如果一個變數的型別是array\n//且這個array的子項型別都是number，則可寫成如下\nlet list: number[] = [1, 2, 3];\n```\n\n```typescript=\n//承上，或如下利用泛型\nlet list: number[] = [1, 2, 3];\n```\n\n3. 元組(陣列型別專用)\n\n- 最基本的範例：\n```typescript=\n// Declare a tuple type\nlet x: [string, number];\n// Initialize it\nx = ['hello', 10]; // OK\n// Initialize it incorrectly\nx = [10, 'hello']; // Error\n```\n\n- 為陣列編寫型別的好處\n\n```typescript=\nlet x: [string, number];\nx = ['hello', 10]; // OK\nconsole.log(x[0].substr(1)); // OK 因為x[0]在元組中定義為字串，可以使用substr方法\nconsole.log(x[1].substr(1)); // Error, 因為10屬於在元組中定義為數字，不能使用substr方法，所以會報錯\n```\n\n- 當偵測到陣列子項位置在元組定義範圍外的子項時，會用元組定義的型別的聯集來定義之\n\n```typescript=\nx[3] = 'world'; // OK, 字符串可以赋值给(string | number)类型\n\nconsole.log(x[5].toString()); // OK, 'string' 和 'number' 都有 toString\n\nx[6] = true; // Error, 布尔不是(string | number)类型\n```\n\n4. 列舉（Enumerate）\n\n- 能夠把變數的範圍限制在某些限制下進行存取並賦予其定義\n\n- 舉個實用的例子，團隊裡的後端在 Server 處理資料發生錯誤時，定義了一些代碼，來告訴前端說，這個代碼代表什麼錯誤，那個又是什麼：\n\n```javascript=\nconst handleWrongStatus = (status: string): void => {\n  switch (status) {\n    case 'A':\n      // Do something...\n      break;\n    case 'B':\n      // Do something...\n      break;\n    case 'C':\n      // Do something...\n      break;\n    default:\n      throw (new Error('No have wrong code!'));\n  }\n};\n```\n\n然而像上面這樣寫的話，缺點會在於各個case之間沒有語意化，你很難去釐清Case A 實際上是什麼, Case B又是什麼，在這種狀況下就可以去使用enumerate\n\nenumerate的寫法跟js的物件接近，如下\n\n```typescript=\nenum requestStatusCodes {\n  error,\n  success,\n}\n```\n\n正常來講，如果不幫上述這個requestStatusCodes 的裡面每一個子項去做定義，TS的編譯器會直接把error的編號定為0, success的編號定為1（流水號）\n\n這樣我們就可以透過requestStatusCodes.error拿到0這個列舉值, requestStatusCodes.success拿到1這個列舉值;或者透過requestStatusCodes[0]拿到error 這個列舉子項\n\n這樣的話。上述的case switch就可以這樣改良\n\n```typescript=\nenum requestWrongCodes {\n  missingParameter = 'A',\n  wrongParameterType = 'B',\n  invalidToken = 'C',\n}\n\nconst handleWrongStatus = (status: string): void => {\n  //es6解構賦值的寫法\n  const { missingParameter, wrongParameterType, invalidToken, } = requestWrongCodes;\n  switch (status) {\n    case missingParameter:\n      // Do something...\n      break;\n    case wrongParameterType:\n      // Do something...\n      break;\n    case invalidToken:\n      // Do something...\n      break;\n    default:\n      throw (new Error('No have wrong code!'));\n  }\n};\n```\n5.any/void 任意值與虛空值\n\n變數的型別如果不確定的話可以直接帶any，而函數的return type如果為空的話則可以直接帶:void\n\n```typescript=\nlet notSure: any = 4;\nnotSure = \"maybe a string instead\"; //這樣不會報錯\nnotSure = false; //這樣也不會報錯\n```\n\n```typescript=\nfunction warnUser(): void {\n    console.log(\"This is my warning message\");\n}\n```\n\n6.undefined/null 未定義與空值\n\n> TypeScript里，undefined和null两者各自有自己的类型分别叫做undefined和null。 和void相似，它们的本身的类型用处不是很大\n\n```typscript=\n// Not much else we can assign to these variables!\nlet u: undefined = undefined; \nlet n: null = null;\n```\n> 在默認狀況下 undefined和null 這兩種value也可以被賦予給任何型別作為其值\n```typescript=\nlet u: number = undefined; \nlet n: syting = null;\n```\n\n- --strictNullChecks是什麼？\n>簡單來說就是typescript 的tsconfig.json裡面的一個設定，只要做了這個設定以後，undefined和null 這兩種value就再也不會被默認為任何型別的一種預設值。也許在某處你想嘗試一個字串或空或未定義，可以使用聯合類型 ```ex: string|number|null```\n\n```json\n{\n    \"compileOnSave\": false,\n    \"compilerOptions\": {\n        ...\n        \"strictNullChecks\": true,\n        \"skipLibCheck\": true,\n        ...\n    }\n}\n```\n\n7. Never 這個型別是用來幹嘛用的?\n\nnever類型表示的是那些根本就不會有值的類型，例如一個只會return new Error('string') 的function； \n要注意值為never型別不接受null作為其值。\n\n```typescript=\nfunction error(message: string): never {\n    throw new Error(message);\n}\n```\n\n```typescript=\nlet something: void = null;\nlet nothing: never = null; // Error: Type 'null' is not assignable to type 'never'\n```\n\n8. 類型斷言\n\n類型斷言好比其它語言裡的類型轉換，但是不進行特殊的數據檢查和解構。\n.jsx檔案裡面只能用as的方式做類型斷言\n\n```typescript\nlet someValue: any = \"this is a string\";\n\nlet strLength: number = (<string>someValue).length;\n```\n\n```typescript\nlet someValue: any = \"this is a string\";\n\nlet strLength: number = (someValue as string).length;\n```","slug":"TYPESCRIPT學習筆記-ep1","published":1,"date":"2020-11-25T17:01:45.844Z","updated":"2020-11-25T17:01:45.845Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki5kjebx000fxdvdhvzf36kj","content":"<h1 id=\"TYPESCRIPT的基礎常識\"><a href=\"#TYPESCRIPT的基礎常識\" class=\"headerlink\" title=\"TYPESCRIPT的基礎常識\"></a>TYPESCRIPT的基礎常識</h1><h2 id=\"基礎型別上與es5-es6-較有差異的部分\"><a href=\"#基礎型別上與es5-es6-較有差異的部分\" class=\"headerlink\" title=\"基礎型別上與es5/es6 較有差異的部分\"></a>基礎型別上與es5/es6 較有差異的部分</h2><ol>\n<li><p>數字<br>ts的數字另外有支援兩種格式：2進位＆8進位;除此之外,ts 的number同樣都是浮點數</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> decLiteral: <span class=\"built_in\">number</span> = <span class=\"number\">6</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> hexLiteral: <span class=\"built_in\">number</span> = <span class=\"number\">0xf00d</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> binaryLiteral: <span class=\"built_in\">number</span> = <span class=\"number\">0b1010</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> octalLiteral: <span class=\"built_in\">number</span> = <span class=\"number\">0o744</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>陣列</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//原則上ts的變數都要寫型別，而如果一個變數的型別是array</span></span><br><span class=\"line\"><span class=\"comment\">//且這個array的子項型別都是number，則可寫成如下</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> list: <span class=\"built_in\">number</span>[] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//承上，或如下利用泛型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> list: <span class=\"built_in\">number</span>[] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>元組(陣列型別專用)</li>\n</ol>\n<ul>\n<li><p>最基本的範例：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Declare a tuple type</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> x: [<span class=\"built_in\">string</span>, <span class=\"built_in\">number</span>];</span><br><span class=\"line\"><span class=\"comment\">// Initialize it</span></span><br><span class=\"line\">x = [<span class=\"string\">&#x27;hello&#x27;</span>, <span class=\"number\">10</span>]; <span class=\"comment\">// OK</span></span><br><span class=\"line\"><span class=\"comment\">// Initialize it incorrectly</span></span><br><span class=\"line\">x = [<span class=\"number\">10</span>, <span class=\"string\">&#x27;hello&#x27;</span>]; <span class=\"comment\">// Error</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>為陣列編寫型別的好處</p>\n</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x: [<span class=\"built_in\">string</span>, <span class=\"built_in\">number</span>];</span><br><span class=\"line\">x = [<span class=\"string\">&#x27;hello&#x27;</span>, <span class=\"number\">10</span>]; <span class=\"comment\">// OK</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x[<span class=\"number\">0</span>].substr(<span class=\"number\">1</span>)); <span class=\"comment\">// OK 因為x[0]在元組中定義為字串，可以使用substr方法</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x[<span class=\"number\">1</span>].substr(<span class=\"number\">1</span>)); <span class=\"comment\">// Error, 因為10屬於在元組中定義為數字，不能使用substr方法，所以會報錯</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>當偵測到陣列子項位置在元組定義範圍外的子項時，會用元組定義的型別的聯集來定義之</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x[<span class=\"number\">3</span>] = <span class=\"string\">&#x27;world&#x27;</span>; <span class=\"comment\">// OK, 字符串可以赋值给(string | number)类型</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x[<span class=\"number\">5</span>].toString()); <span class=\"comment\">// OK, &#x27;string&#x27; 和 &#x27;number&#x27; 都有 toString</span></span><br><span class=\"line\"></span><br><span class=\"line\">x[<span class=\"number\">6</span>] = <span class=\"literal\">true</span>; <span class=\"comment\">// Error, 布尔不是(string | number)类型</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>列舉（Enumerate）</li>\n</ol>\n<ul>\n<li><p>能夠把變數的範圍限制在某些限制下進行存取並賦予其定義</p>\n</li>\n<li><p>舉個實用的例子，團隊裡的後端在 Server 處理資料發生錯誤時，定義了一些代碼，來告訴前端說，這個代碼代表什麼錯誤，那個又是什麼：</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> handleWrongStatus = (status: string): <span class=\"function\"><span class=\"params\">void</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (status) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;A&#x27;</span>:</span><br><span class=\"line\">      <span class=\"comment\">// Do something...</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;B&#x27;</span>:</span><br><span class=\"line\">      <span class=\"comment\">// Do something...</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;C&#x27;</span>:</span><br><span class=\"line\">      <span class=\"comment\">// Do something...</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;No have wrong code!&#x27;</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>然而像上面這樣寫的話，缺點會在於各個case之間沒有語意化，你很難去釐清Case A 實際上是什麼, Case B又是什麼，在這種狀況下就可以去使用enumerate</p>\n<p>enumerate的寫法跟js的物件接近，如下</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">enum</span> requestStatusCodes &#123;</span><br><span class=\"line\">  error,</span><br><span class=\"line\">  success,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>正常來講，如果不幫上述這個requestStatusCodes 的裡面每一個子項去做定義，TS的編譯器會直接把error的編號定為0, success的編號定為1（流水號）</p>\n<p>這樣我們就可以透過requestStatusCodes.error拿到0這個列舉值, requestStatusCodes.success拿到1這個列舉值;或者透過requestStatusCodes[0]拿到error 這個列舉子項</p>\n<p>這樣的話。上述的case switch就可以這樣改良</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">enum</span> requestWrongCodes &#123;</span><br><span class=\"line\">  missingParameter = <span class=\"string\">&#x27;A&#x27;</span>,</span><br><span class=\"line\">  wrongParameterType = <span class=\"string\">&#x27;B&#x27;</span>,</span><br><span class=\"line\">  invalidToken = <span class=\"string\">&#x27;C&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> handleWrongStatus = (status: <span class=\"built_in\">string</span>): <span class=\"function\"><span class=\"params\">void</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//es6解構賦值的寫法</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; missingParameter, wrongParameterType, invalidToken, &#125; = requestWrongCodes;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (status) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> missingParameter:</span><br><span class=\"line\">      <span class=\"comment\">// Do something...</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> wrongParameterType:</span><br><span class=\"line\">      <span class=\"comment\">// Do something...</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> invalidToken:</span><br><span class=\"line\">      <span class=\"comment\">// Do something...</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;No have wrong code!&#x27;</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>5.any/void 任意值與虛空值</p>\n<p>變數的型別如果不確定的話可以直接帶any，而函數的return type如果為空的話則可以直接帶:void</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> notSure: <span class=\"built_in\">any</span> = <span class=\"number\">4</span>;</span><br><span class=\"line\">notSure = <span class=\"string\">&quot;maybe a string instead&quot;</span>; <span class=\"comment\">//這樣不會報錯</span></span><br><span class=\"line\">notSure = <span class=\"literal\">false</span>; <span class=\"comment\">//這樣也不會報錯</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">warnUser</span>(<span class=\"params\"></span>): <span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;This is my warning message&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>6.undefined/null 未定義與空值</p>\n<blockquote>\n<p>TypeScript里，undefined和null两者各自有自己的类型分别叫做undefined和null。 和void相似，它们的本身的类型用处不是很大</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; Not much else we can assign to these variables!</span><br><span class=\"line\">let u: undefined &#x3D; undefined; </span><br><span class=\"line\">let n: null &#x3D; null;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在默認狀況下 undefined和null 這兩種value也可以被賦予給任何型別作為其值</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> u: <span class=\"built_in\">number</span> = <span class=\"literal\">undefined</span>; </span><br><span class=\"line\"><span class=\"keyword\">let</span> n: syting = <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>–strictNullChecks是什麼？<blockquote>\n<p>簡單來說就是typescript 的tsconfig.json裡面的一個設定，只要做了這個設定以後，undefined和null 這兩種value就再也不會被默認為任何型別的一種預設值。也許在某處你想嘗試一個字串或空或未定義，可以使用聯合類型 <code>ex: string|number|null</code></p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;compileOnSave&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        &quot;strictNullChecks&quot;: true,</span><br><span class=\"line\">        &quot;skipLibCheck&quot;: true,</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li>Never 這個型別是用來幹嘛用的?</li>\n</ol>\n<p>never類型表示的是那些根本就不會有值的類型，例如一個只會return new Error(‘string’) 的function；<br>要注意值為never型別不接受null作為其值。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">error</span>(<span class=\"params\">message: <span class=\"built_in\">string</span></span>): <span class=\"title\">never</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(message);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> something: <span class=\"built_in\">void</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> nothing: <span class=\"built_in\">never</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// Error: Type &#x27;null&#x27; is not assignable to type &#x27;never&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li>類型斷言</li>\n</ol>\n<p>類型斷言好比其它語言裡的類型轉換，但是不進行特殊的數據檢查和解構。<br>.jsx檔案裡面只能用as的方式做類型斷言</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> someValue: <span class=\"built_in\">any</span> = <span class=\"string\">&quot;this is a string&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> strLength: <span class=\"built_in\">number</span> = (&lt;<span class=\"built_in\">string</span>&gt;someValue).length;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> someValue: <span class=\"built_in\">any</span> = <span class=\"string\">&quot;this is a string&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> strLength: <span class=\"built_in\">number</span> = (someValue <span class=\"keyword\">as</span> <span class=\"built_in\">string</span>).length;</span><br></pre></td></tr></table></figure>","site":{"data":{"css/variables":"","languages":{"zh-TW":{"title":{"archive":"時間線","category":"分類","tag":"標籤","schedule":"時間表"},"menu":{"home":"首頁","archives":"時間線","categories":"分類","tags":"標籤","about":"關於","search":"搜尋","schedule":"時間表","sitemap":"網站地圖","commonweal":"公益 404"},"sidebar":{"overview":"本站概要","toc":"文章目錄"},"post":{"posted":"發表於","edited":"更新於","created":"創建時間","modified":"修改時間","edit":"編輯","in":"分類於","read_more":"閱讀全文","untitled":"未命名","sticky":"置頂文","views":"閱讀次數","related_posts":"相關文章","copyright":{"author":"作者","link":"文章連結","post_author":"Written by","post_link":"This article originally appeared on","license_title":"版權聲明","license_content":"本網誌所有文章除特別聲明外，均採用 %s 許可協議。轉載請註明出處！"}},"footer":{"powered":"","total_views":"總瀏覽次數","total_visitors":"訪客總數"},"counter":{"tag_cloud":{"zero":"目前還沒有任何標籤","one":"目前共有 1 個標籤","other":"目前共有 %d 個標籤"},"categories":{"zero":"目前還沒有任何分類","one":"目前共有 1 個分類","other":"目前共有 %d 個分類"},"archive_posts":{"zero":"目前還沒有任何文章。","one":"目前共有 1 篇文章。","other":"目前共有 %d 篇文章。"}},"state":{"posts":"文章","tags":"標籤","categories":"分類"},"search":{"placeholder":"搜尋...","empty":"We didn't find any results for the search: %s","hits_time":"%s results found in %s ms","hits":"%s results found"},"cheers":{"um":"嗯..","ok":"還不錯","nice":"好","good":"很好","great":"非常好","excellent":"棒棒Der"},"keep_on":"繼續努力。","symbol":{"comma":"，","period":"。","colon":"："},"reward":{"donate":"捐贈","wechatpay":"微信支付","alipay":"支付寶","paypal":"貝寶","bitcoin":"比特幣"},"follow_me":{"welcome":"歡迎關注我的其它站點"},"accessibility":{"nav_toggle":"切換導航欄","prev_page":"上一頁","next_page":"下一頁"},"symbols_count_time":{"count":"文章字數","count_total":"總字數","time":"所需閱讀時間","time_total":"所需總閱讀時間","time_minutes":"分鐘"}}},"css/mixins":"","css/styles":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","template/head":"<script src=\"//js/tool/canvas-fx-base.js\"></script>\n\n<script src=\"//js/ripple-logo.js\"></script>\n<script src=\"//js/silk-wave.js\"></script>\n\n<style>\n  @font-face {\n  font-family: \"Roboto\";\n  src: url(//font/Roboto.ttf) format(\"truetype\");\n}\n</style>","css/styl-plugin/grid-post-layout/main":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","css/styl-plugin/grid-post-layout/mixins":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n","css/styl-plugin/grid-post-layout/variables":""}},"excerpt":"","more":"<h1 id=\"TYPESCRIPT的基礎常識\"><a href=\"#TYPESCRIPT的基礎常識\" class=\"headerlink\" title=\"TYPESCRIPT的基礎常識\"></a>TYPESCRIPT的基礎常識</h1><h2 id=\"基礎型別上與es5-es6-較有差異的部分\"><a href=\"#基礎型別上與es5-es6-較有差異的部分\" class=\"headerlink\" title=\"基礎型別上與es5/es6 較有差異的部分\"></a>基礎型別上與es5/es6 較有差異的部分</h2><ol>\n<li><p>數字<br>ts的數字另外有支援兩種格式：2進位＆8進位;除此之外,ts 的number同樣都是浮點數</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> decLiteral: <span class=\"built_in\">number</span> = <span class=\"number\">6</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> hexLiteral: <span class=\"built_in\">number</span> = <span class=\"number\">0xf00d</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> binaryLiteral: <span class=\"built_in\">number</span> = <span class=\"number\">0b1010</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> octalLiteral: <span class=\"built_in\">number</span> = <span class=\"number\">0o744</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>陣列</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//原則上ts的變數都要寫型別，而如果一個變數的型別是array</span></span><br><span class=\"line\"><span class=\"comment\">//且這個array的子項型別都是number，則可寫成如下</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> list: <span class=\"built_in\">number</span>[] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//承上，或如下利用泛型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> list: <span class=\"built_in\">number</span>[] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>元組(陣列型別專用)</li>\n</ol>\n<ul>\n<li><p>最基本的範例：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Declare a tuple type</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> x: [<span class=\"built_in\">string</span>, <span class=\"built_in\">number</span>];</span><br><span class=\"line\"><span class=\"comment\">// Initialize it</span></span><br><span class=\"line\">x = [<span class=\"string\">&#x27;hello&#x27;</span>, <span class=\"number\">10</span>]; <span class=\"comment\">// OK</span></span><br><span class=\"line\"><span class=\"comment\">// Initialize it incorrectly</span></span><br><span class=\"line\">x = [<span class=\"number\">10</span>, <span class=\"string\">&#x27;hello&#x27;</span>]; <span class=\"comment\">// Error</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>為陣列編寫型別的好處</p>\n</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x: [<span class=\"built_in\">string</span>, <span class=\"built_in\">number</span>];</span><br><span class=\"line\">x = [<span class=\"string\">&#x27;hello&#x27;</span>, <span class=\"number\">10</span>]; <span class=\"comment\">// OK</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x[<span class=\"number\">0</span>].substr(<span class=\"number\">1</span>)); <span class=\"comment\">// OK 因為x[0]在元組中定義為字串，可以使用substr方法</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x[<span class=\"number\">1</span>].substr(<span class=\"number\">1</span>)); <span class=\"comment\">// Error, 因為10屬於在元組中定義為數字，不能使用substr方法，所以會報錯</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>當偵測到陣列子項位置在元組定義範圍外的子項時，會用元組定義的型別的聯集來定義之</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x[<span class=\"number\">3</span>] = <span class=\"string\">&#x27;world&#x27;</span>; <span class=\"comment\">// OK, 字符串可以赋值给(string | number)类型</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x[<span class=\"number\">5</span>].toString()); <span class=\"comment\">// OK, &#x27;string&#x27; 和 &#x27;number&#x27; 都有 toString</span></span><br><span class=\"line\"></span><br><span class=\"line\">x[<span class=\"number\">6</span>] = <span class=\"literal\">true</span>; <span class=\"comment\">// Error, 布尔不是(string | number)类型</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>列舉（Enumerate）</li>\n</ol>\n<ul>\n<li><p>能夠把變數的範圍限制在某些限制下進行存取並賦予其定義</p>\n</li>\n<li><p>舉個實用的例子，團隊裡的後端在 Server 處理資料發生錯誤時，定義了一些代碼，來告訴前端說，這個代碼代表什麼錯誤，那個又是什麼：</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> handleWrongStatus = (status: string): <span class=\"function\"><span class=\"params\">void</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (status) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;A&#x27;</span>:</span><br><span class=\"line\">      <span class=\"comment\">// Do something...</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;B&#x27;</span>:</span><br><span class=\"line\">      <span class=\"comment\">// Do something...</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;C&#x27;</span>:</span><br><span class=\"line\">      <span class=\"comment\">// Do something...</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;No have wrong code!&#x27;</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>然而像上面這樣寫的話，缺點會在於各個case之間沒有語意化，你很難去釐清Case A 實際上是什麼, Case B又是什麼，在這種狀況下就可以去使用enumerate</p>\n<p>enumerate的寫法跟js的物件接近，如下</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">enum</span> requestStatusCodes &#123;</span><br><span class=\"line\">  error,</span><br><span class=\"line\">  success,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>正常來講，如果不幫上述這個requestStatusCodes 的裡面每一個子項去做定義，TS的編譯器會直接把error的編號定為0, success的編號定為1（流水號）</p>\n<p>這樣我們就可以透過requestStatusCodes.error拿到0這個列舉值, requestStatusCodes.success拿到1這個列舉值;或者透過requestStatusCodes[0]拿到error 這個列舉子項</p>\n<p>這樣的話。上述的case switch就可以這樣改良</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">enum</span> requestWrongCodes &#123;</span><br><span class=\"line\">  missingParameter = <span class=\"string\">&#x27;A&#x27;</span>,</span><br><span class=\"line\">  wrongParameterType = <span class=\"string\">&#x27;B&#x27;</span>,</span><br><span class=\"line\">  invalidToken = <span class=\"string\">&#x27;C&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> handleWrongStatus = (status: <span class=\"built_in\">string</span>): <span class=\"function\"><span class=\"params\">void</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//es6解構賦值的寫法</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; missingParameter, wrongParameterType, invalidToken, &#125; = requestWrongCodes;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (status) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> missingParameter:</span><br><span class=\"line\">      <span class=\"comment\">// Do something...</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> wrongParameterType:</span><br><span class=\"line\">      <span class=\"comment\">// Do something...</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> invalidToken:</span><br><span class=\"line\">      <span class=\"comment\">// Do something...</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;No have wrong code!&#x27;</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>5.any/void 任意值與虛空值</p>\n<p>變數的型別如果不確定的話可以直接帶any，而函數的return type如果為空的話則可以直接帶:void</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> notSure: <span class=\"built_in\">any</span> = <span class=\"number\">4</span>;</span><br><span class=\"line\">notSure = <span class=\"string\">&quot;maybe a string instead&quot;</span>; <span class=\"comment\">//這樣不會報錯</span></span><br><span class=\"line\">notSure = <span class=\"literal\">false</span>; <span class=\"comment\">//這樣也不會報錯</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">warnUser</span>(<span class=\"params\"></span>): <span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;This is my warning message&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>6.undefined/null 未定義與空值</p>\n<blockquote>\n<p>TypeScript里，undefined和null两者各自有自己的类型分别叫做undefined和null。 和void相似，它们的本身的类型用处不是很大</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; Not much else we can assign to these variables!</span><br><span class=\"line\">let u: undefined &#x3D; undefined; </span><br><span class=\"line\">let n: null &#x3D; null;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在默認狀況下 undefined和null 這兩種value也可以被賦予給任何型別作為其值</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> u: <span class=\"built_in\">number</span> = <span class=\"literal\">undefined</span>; </span><br><span class=\"line\"><span class=\"keyword\">let</span> n: syting = <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>–strictNullChecks是什麼？<blockquote>\n<p>簡單來說就是typescript 的tsconfig.json裡面的一個設定，只要做了這個設定以後，undefined和null 這兩種value就再也不會被默認為任何型別的一種預設值。也許在某處你想嘗試一個字串或空或未定義，可以使用聯合類型 <code>ex: string|number|null</code></p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;compileOnSave&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        &quot;strictNullChecks&quot;: true,</span><br><span class=\"line\">        &quot;skipLibCheck&quot;: true,</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li>Never 這個型別是用來幹嘛用的?</li>\n</ol>\n<p>never類型表示的是那些根本就不會有值的類型，例如一個只會return new Error(‘string’) 的function；<br>要注意值為never型別不接受null作為其值。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">error</span>(<span class=\"params\">message: <span class=\"built_in\">string</span></span>): <span class=\"title\">never</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(message);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> something: <span class=\"built_in\">void</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> nothing: <span class=\"built_in\">never</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// Error: Type &#x27;null&#x27; is not assignable to type &#x27;never&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li>類型斷言</li>\n</ol>\n<p>類型斷言好比其它語言裡的類型轉換，但是不進行特殊的數據檢查和解構。<br>.jsx檔案裡面只能用as的方式做類型斷言</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> someValue: <span class=\"built_in\">any</span> = <span class=\"string\">&quot;this is a string&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> strLength: <span class=\"built_in\">number</span> = (&lt;<span class=\"built_in\">string</span>&gt;someValue).length;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> someValue: <span class=\"built_in\">any</span> = <span class=\"string\">&quot;this is a string&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> strLength: <span class=\"built_in\">number</span> = (someValue <span class=\"keyword\">as</span> <span class=\"built_in\">string</span>).length;</span><br></pre></td></tr></table></figure>"},{"title":"TYPESCRIPT學習筆記-ep2.5","_content":"\n\n\n#### 如何使用interface 為函數定義參數型別與回傳值型別\n\n``` typescript\ninterface SearchFunc {\n  (source: string, subString: string): boolean;\n} // 定義函數參數/return 的方式\n\ninterface customVariables {\n  variableA: boolean;\n}\n```\n\n#### 如何使用interface 定義\"可索引類型\"\n\n```typescript=\ninterface arrayType {\n  [index: number]: string;\n} // 意思指的是[]內只能輸入數字, 並且return 值為字串\n\ninterface readonlyArrayType {\n  readonly [index: number]: string;\n} // 與readonly屬性的搭配應用方式, 這樣就可以把陣列轉為唯讀陣列\n\n// 問題狀況\ninterface arrayType {\n   [index: string]: number; //當索引值的型別是字串時會有一種特殊的問題, 會強制要求內部的變數型別跟這邊定義的一樣\n  value:string // 所以這樣會報錯 (必須是number)\n} // 當已經使用了strinf索引類型的定義時, 會強制要求回傳值是索引類型定義中的那個回傳值型別\n\n\n\n```\n\n#### 使用implement 將class與 interface 對接\n\n```typescript\n\ninterface ClockInterface {\n    currentTime: Date;\n    setTime(d: Date): void;\n}\n\nclass Clock implements ClockInterface {\n    currentTime: Date = new Date(); //如果class裡面沒有寫這個變數就會報錯\n    setTime(d: Date) {\n        this.currentTime = d;\n    }\n    constructor(h: number, m: number) { }\n}\n\n```\n\n\n#### 如何快速定義一個class的constructor 參數型別與其建立出來的實例型別？\n\n```typescript=\n//建議直接使用表達式\ninterface ClockConstructor {\n  new (hour: number, minute: number); //定義ctor 參數內容\n}\n\ninterface ClockInterface {\n  tick(); // 定義實例內容\n}\n\nconst Clock: ClockConstructor = class Clock implements ClockInterface {\n  constructor(h: number, m: number) {}\n  tick() {\n\n  }\n}\n```\n\n\n\n#### interface也可以extend\n\n> 實際使用起來就跟class的extend 差不多\n\n```typescript=\n\ninterface Shape {\n    color: string;\n}\n\ninterface Square extends Shape {\n    sideLength: number;\n}\n\nlet square = <Square>{};  \n// 這邊也可以寫成 let square:Square = {color:'blue',sideLength=10}, 但如果不寫預設值就會報錯\nsquare.color = \"blue\";\nsquare.sideLength = 10;\n```\n\n#### interface extend class？ 用意是什麼?\n\n```typescript=\nclass Control {\n    private state: any;\n}\n\ninterface SelectableControl extends Control {\n    select(): void; // 這邊定義了一個extend了 control的接口, 所以意思是說，如果今天有class想要implement 這個接口，他必須要有control 的全內容, 不然就會報錯\n}\n\nclass Button extends Control implements SelectableControl {\n    select() { } // 因為button 有 extend Control, 所以他本身就具有private 的state, 所以這樣給過\n\nclass TextBox extends Control {\n    select() { }\n}\n\n// Error: Property 'state' is missing in type 'Image'.\nclass Image implements SelectableControl {\n    select() { }\n    // 因為Image 本身沒有private 的state, 所以不能implement SelectableControl\n}\n\n\n```","source":"_posts/TYPESCRIPT學習筆記-ep2.5.md","raw":"---\ntitle: TYPESCRIPT學習筆記-ep2.5\ncategories: \n- 心得\ntags:\n- ts\n---\n\n\n\n#### 如何使用interface 為函數定義參數型別與回傳值型別\n\n``` typescript\ninterface SearchFunc {\n  (source: string, subString: string): boolean;\n} // 定義函數參數/return 的方式\n\ninterface customVariables {\n  variableA: boolean;\n}\n```\n\n#### 如何使用interface 定義\"可索引類型\"\n\n```typescript=\ninterface arrayType {\n  [index: number]: string;\n} // 意思指的是[]內只能輸入數字, 並且return 值為字串\n\ninterface readonlyArrayType {\n  readonly [index: number]: string;\n} // 與readonly屬性的搭配應用方式, 這樣就可以把陣列轉為唯讀陣列\n\n// 問題狀況\ninterface arrayType {\n   [index: string]: number; //當索引值的型別是字串時會有一種特殊的問題, 會強制要求內部的變數型別跟這邊定義的一樣\n  value:string // 所以這樣會報錯 (必須是number)\n} // 當已經使用了strinf索引類型的定義時, 會強制要求回傳值是索引類型定義中的那個回傳值型別\n\n\n\n```\n\n#### 使用implement 將class與 interface 對接\n\n```typescript\n\ninterface ClockInterface {\n    currentTime: Date;\n    setTime(d: Date): void;\n}\n\nclass Clock implements ClockInterface {\n    currentTime: Date = new Date(); //如果class裡面沒有寫這個變數就會報錯\n    setTime(d: Date) {\n        this.currentTime = d;\n    }\n    constructor(h: number, m: number) { }\n}\n\n```\n\n\n#### 如何快速定義一個class的constructor 參數型別與其建立出來的實例型別？\n\n```typescript=\n//建議直接使用表達式\ninterface ClockConstructor {\n  new (hour: number, minute: number); //定義ctor 參數內容\n}\n\ninterface ClockInterface {\n  tick(); // 定義實例內容\n}\n\nconst Clock: ClockConstructor = class Clock implements ClockInterface {\n  constructor(h: number, m: number) {}\n  tick() {\n\n  }\n}\n```\n\n\n\n#### interface也可以extend\n\n> 實際使用起來就跟class的extend 差不多\n\n```typescript=\n\ninterface Shape {\n    color: string;\n}\n\ninterface Square extends Shape {\n    sideLength: number;\n}\n\nlet square = <Square>{};  \n// 這邊也可以寫成 let square:Square = {color:'blue',sideLength=10}, 但如果不寫預設值就會報錯\nsquare.color = \"blue\";\nsquare.sideLength = 10;\n```\n\n#### interface extend class？ 用意是什麼?\n\n```typescript=\nclass Control {\n    private state: any;\n}\n\ninterface SelectableControl extends Control {\n    select(): void; // 這邊定義了一個extend了 control的接口, 所以意思是說，如果今天有class想要implement 這個接口，他必須要有control 的全內容, 不然就會報錯\n}\n\nclass Button extends Control implements SelectableControl {\n    select() { } // 因為button 有 extend Control, 所以他本身就具有private 的state, 所以這樣給過\n\nclass TextBox extends Control {\n    select() { }\n}\n\n// Error: Property 'state' is missing in type 'Image'.\nclass Image implements SelectableControl {\n    select() { }\n    // 因為Image 本身沒有private 的state, 所以不能implement SelectableControl\n}\n\n\n```","slug":"TYPESCRIPT學習筆記-ep2.5","published":1,"date":"2020-11-25T17:01:45.846Z","updated":"2020-11-25T17:01:45.847Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki5kjeby000hxdvd4tp73266","content":"<h4 id=\"如何使用interface-為函數定義參數型別與回傳值型別\"><a href=\"#如何使用interface-為函數定義參數型別與回傳值型別\" class=\"headerlink\" title=\"如何使用interface 為函數定義參數型別與回傳值型別\"></a>如何使用interface 為函數定義參數型別與回傳值型別</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> SearchFunc &#123;</span><br><span class=\"line\">  (source: <span class=\"built_in\">string</span>, <span class=\"attr\">subString</span>: <span class=\"built_in\">string</span>): <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">&#125; <span class=\"comment\">// 定義函數參數/return 的方式</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> customVariables &#123;</span><br><span class=\"line\">  variableA: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"如何使用interface-定義”可索引類型”\"><a href=\"#如何使用interface-定義”可索引類型”\" class=\"headerlink\" title=\"如何使用interface 定義”可索引類型”\"></a>如何使用interface 定義”可索引類型”</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> arrayType &#123;</span><br><span class=\"line\">  [index: <span class=\"built_in\">number</span>]: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125; <span class=\"comment\">// 意思指的是[]內只能輸入數字, 並且return 值為字串</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> readonlyArrayType &#123;</span><br><span class=\"line\">  <span class=\"keyword\">readonly</span> [index: <span class=\"built_in\">number</span>]: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125; <span class=\"comment\">// 與readonly屬性的搭配應用方式, 這樣就可以把陣列轉為唯讀陣列</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 問題狀況</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> arrayType &#123;</span><br><span class=\"line\">   [index: <span class=\"built_in\">string</span>]: <span class=\"built_in\">number</span>; <span class=\"comment\">//當索引值的型別是字串時會有一種特殊的問題, 會強制要求內部的變數型別跟這邊定義的一樣</span></span><br><span class=\"line\">  value:<span class=\"built_in\">string</span> <span class=\"comment\">// 所以這樣會報錯 (必須是number)</span></span><br><span class=\"line\">&#125; <span class=\"comment\">// 當已經使用了strinf索引類型的定義時, 會強制要求回傳值是索引類型定義中的那個回傳值型別</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用implement-將class與-interface-對接\"><a href=\"#使用implement-將class與-interface-對接\" class=\"headerlink\" title=\"使用implement 將class與 interface 對接\"></a>使用implement 將class與 interface 對接</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> ClockInterface &#123;</span><br><span class=\"line\">    currentTime: <span class=\"built_in\">Date</span>;</span><br><span class=\"line\">    setTime(d: <span class=\"built_in\">Date</span>): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Clock</span> <span class=\"title\">implements</span> <span class=\"title\">ClockInterface</span> </span>&#123;</span><br><span class=\"line\">    currentTime: <span class=\"built_in\">Date</span> = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(); <span class=\"comment\">//如果class裡面沒有寫這個變數就會報錯</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">setTime</span>(<span class=\"params\">d: <span class=\"built_in\">Date</span></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.currentTime = d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">h: <span class=\"built_in\">number</span>, m: <span class=\"built_in\">number</span></span>)</span> &#123; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"如何快速定義一個class的constructor-參數型別與其建立出來的實例型別？\"><a href=\"#如何快速定義一個class的constructor-參數型別與其建立出來的實例型別？\" class=\"headerlink\" title=\"如何快速定義一個class的constructor 參數型別與其建立出來的實例型別？\"></a>如何快速定義一個class的constructor 參數型別與其建立出來的實例型別？</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//建議直接使用表達式</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> ClockConstructor &#123;</span><br><span class=\"line\">  <span class=\"keyword\">new</span> (hour: <span class=\"built_in\">number</span>, <span class=\"attr\">minute</span>: <span class=\"built_in\">number</span>); <span class=\"comment\">//定義ctor 參數內容</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> ClockInterface &#123;</span><br><span class=\"line\">  tick(); <span class=\"comment\">// 定義實例內容</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Clock: ClockConstructor = <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Clock</span> <span class=\"title\">implements</span> <span class=\"title\">ClockInterface</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">h: <span class=\"built_in\">number</span>, m: <span class=\"built_in\">number</span></span>)</span> &#123;&#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">tick</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"interface也可以extend\"><a href=\"#interface也可以extend\" class=\"headerlink\" title=\"interface也可以extend\"></a>interface也可以extend</h4><blockquote>\n<p>實際使用起來就跟class的extend 差不多</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> Shape &#123;</span><br><span class=\"line\">    color: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> Square <span class=\"keyword\">extends</span> Shape &#123;</span><br><span class=\"line\">    sideLength: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> square = &lt;Square&gt;&#123;&#125;;  </span><br><span class=\"line\"><span class=\"comment\">// 這邊也可以寫成 let square:Square = &#123;color:&#x27;blue&#x27;,sideLength=10&#125;, 但如果不寫預設值就會報錯</span></span><br><span class=\"line\">square.color = <span class=\"string\">&quot;blue&quot;</span>;</span><br><span class=\"line\">square.sideLength = <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"interface-extend-class？-用意是什麼\"><a href=\"#interface-extend-class？-用意是什麼\" class=\"headerlink\" title=\"interface extend class？ 用意是什麼?\"></a>interface extend class？ 用意是什麼?</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Control</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> state: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> SelectableControl <span class=\"keyword\">extends</span> Control &#123;</span><br><span class=\"line\">    select(): <span class=\"built_in\">void</span>; <span class=\"comment\">// 這邊定義了一個extend了 control的接口, 所以意思是說，如果今天有class想要implement 這個接口，他必須要有control 的全內容, 不然就會報錯</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Button</span> <span class=\"keyword\">extends</span> <span class=\"title\">Control</span> <span class=\"title\">implements</span> <span class=\"title\">SelectableControl</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">select</span>(<span class=\"params\"></span>)</span> &#123; &#125; <span class=\"comment\">// 因為button 有 extend Control, 所以他本身就具有private 的state, 所以這樣給過</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TextBox</span> <span class=\"keyword\">extends</span> <span class=\"title\">Control</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">select</span>(<span class=\"params\"></span>)</span> &#123; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Error: Property &#x27;state&#x27; is missing in type &#x27;Image&#x27;.</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Image</span> <span class=\"title\">implements</span> <span class=\"title\">SelectableControl</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">select</span>(<span class=\"params\"></span>)</span> &#123; &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 因為Image 本身沒有private 的state, 所以不能implement SelectableControl</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{"css/variables":"","languages":{"zh-TW":{"title":{"archive":"時間線","category":"分類","tag":"標籤","schedule":"時間表"},"menu":{"home":"首頁","archives":"時間線","categories":"分類","tags":"標籤","about":"關於","search":"搜尋","schedule":"時間表","sitemap":"網站地圖","commonweal":"公益 404"},"sidebar":{"overview":"本站概要","toc":"文章目錄"},"post":{"posted":"發表於","edited":"更新於","created":"創建時間","modified":"修改時間","edit":"編輯","in":"分類於","read_more":"閱讀全文","untitled":"未命名","sticky":"置頂文","views":"閱讀次數","related_posts":"相關文章","copyright":{"author":"作者","link":"文章連結","post_author":"Written by","post_link":"This article originally appeared on","license_title":"版權聲明","license_content":"本網誌所有文章除特別聲明外，均採用 %s 許可協議。轉載請註明出處！"}},"footer":{"powered":"","total_views":"總瀏覽次數","total_visitors":"訪客總數"},"counter":{"tag_cloud":{"zero":"目前還沒有任何標籤","one":"目前共有 1 個標籤","other":"目前共有 %d 個標籤"},"categories":{"zero":"目前還沒有任何分類","one":"目前共有 1 個分類","other":"目前共有 %d 個分類"},"archive_posts":{"zero":"目前還沒有任何文章。","one":"目前共有 1 篇文章。","other":"目前共有 %d 篇文章。"}},"state":{"posts":"文章","tags":"標籤","categories":"分類"},"search":{"placeholder":"搜尋...","empty":"We didn't find any results for the search: %s","hits_time":"%s results found in %s ms","hits":"%s results found"},"cheers":{"um":"嗯..","ok":"還不錯","nice":"好","good":"很好","great":"非常好","excellent":"棒棒Der"},"keep_on":"繼續努力。","symbol":{"comma":"，","period":"。","colon":"："},"reward":{"donate":"捐贈","wechatpay":"微信支付","alipay":"支付寶","paypal":"貝寶","bitcoin":"比特幣"},"follow_me":{"welcome":"歡迎關注我的其它站點"},"accessibility":{"nav_toggle":"切換導航欄","prev_page":"上一頁","next_page":"下一頁"},"symbols_count_time":{"count":"文章字數","count_total":"總字數","time":"所需閱讀時間","time_total":"所需總閱讀時間","time_minutes":"分鐘"}}},"css/mixins":"","css/styles":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","template/head":"<script src=\"//js/tool/canvas-fx-base.js\"></script>\n\n<script src=\"//js/ripple-logo.js\"></script>\n<script src=\"//js/silk-wave.js\"></script>\n\n<style>\n  @font-face {\n  font-family: \"Roboto\";\n  src: url(//font/Roboto.ttf) format(\"truetype\");\n}\n</style>","css/styl-plugin/grid-post-layout/main":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","css/styl-plugin/grid-post-layout/mixins":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n","css/styl-plugin/grid-post-layout/variables":""}},"excerpt":"","more":"<h4 id=\"如何使用interface-為函數定義參數型別與回傳值型別\"><a href=\"#如何使用interface-為函數定義參數型別與回傳值型別\" class=\"headerlink\" title=\"如何使用interface 為函數定義參數型別與回傳值型別\"></a>如何使用interface 為函數定義參數型別與回傳值型別</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> SearchFunc &#123;</span><br><span class=\"line\">  (source: <span class=\"built_in\">string</span>, <span class=\"attr\">subString</span>: <span class=\"built_in\">string</span>): <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">&#125; <span class=\"comment\">// 定義函數參數/return 的方式</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> customVariables &#123;</span><br><span class=\"line\">  variableA: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"如何使用interface-定義”可索引類型”\"><a href=\"#如何使用interface-定義”可索引類型”\" class=\"headerlink\" title=\"如何使用interface 定義”可索引類型”\"></a>如何使用interface 定義”可索引類型”</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> arrayType &#123;</span><br><span class=\"line\">  [index: <span class=\"built_in\">number</span>]: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125; <span class=\"comment\">// 意思指的是[]內只能輸入數字, 並且return 值為字串</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> readonlyArrayType &#123;</span><br><span class=\"line\">  <span class=\"keyword\">readonly</span> [index: <span class=\"built_in\">number</span>]: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125; <span class=\"comment\">// 與readonly屬性的搭配應用方式, 這樣就可以把陣列轉為唯讀陣列</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 問題狀況</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> arrayType &#123;</span><br><span class=\"line\">   [index: <span class=\"built_in\">string</span>]: <span class=\"built_in\">number</span>; <span class=\"comment\">//當索引值的型別是字串時會有一種特殊的問題, 會強制要求內部的變數型別跟這邊定義的一樣</span></span><br><span class=\"line\">  value:<span class=\"built_in\">string</span> <span class=\"comment\">// 所以這樣會報錯 (必須是number)</span></span><br><span class=\"line\">&#125; <span class=\"comment\">// 當已經使用了strinf索引類型的定義時, 會強制要求回傳值是索引類型定義中的那個回傳值型別</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用implement-將class與-interface-對接\"><a href=\"#使用implement-將class與-interface-對接\" class=\"headerlink\" title=\"使用implement 將class與 interface 對接\"></a>使用implement 將class與 interface 對接</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> ClockInterface &#123;</span><br><span class=\"line\">    currentTime: <span class=\"built_in\">Date</span>;</span><br><span class=\"line\">    setTime(d: <span class=\"built_in\">Date</span>): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Clock</span> <span class=\"title\">implements</span> <span class=\"title\">ClockInterface</span> </span>&#123;</span><br><span class=\"line\">    currentTime: <span class=\"built_in\">Date</span> = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(); <span class=\"comment\">//如果class裡面沒有寫這個變數就會報錯</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">setTime</span>(<span class=\"params\">d: <span class=\"built_in\">Date</span></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.currentTime = d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">h: <span class=\"built_in\">number</span>, m: <span class=\"built_in\">number</span></span>)</span> &#123; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"如何快速定義一個class的constructor-參數型別與其建立出來的實例型別？\"><a href=\"#如何快速定義一個class的constructor-參數型別與其建立出來的實例型別？\" class=\"headerlink\" title=\"如何快速定義一個class的constructor 參數型別與其建立出來的實例型別？\"></a>如何快速定義一個class的constructor 參數型別與其建立出來的實例型別？</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//建議直接使用表達式</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> ClockConstructor &#123;</span><br><span class=\"line\">  <span class=\"keyword\">new</span> (hour: <span class=\"built_in\">number</span>, <span class=\"attr\">minute</span>: <span class=\"built_in\">number</span>); <span class=\"comment\">//定義ctor 參數內容</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> ClockInterface &#123;</span><br><span class=\"line\">  tick(); <span class=\"comment\">// 定義實例內容</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Clock: ClockConstructor = <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Clock</span> <span class=\"title\">implements</span> <span class=\"title\">ClockInterface</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">h: <span class=\"built_in\">number</span>, m: <span class=\"built_in\">number</span></span>)</span> &#123;&#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">tick</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"interface也可以extend\"><a href=\"#interface也可以extend\" class=\"headerlink\" title=\"interface也可以extend\"></a>interface也可以extend</h4><blockquote>\n<p>實際使用起來就跟class的extend 差不多</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> Shape &#123;</span><br><span class=\"line\">    color: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> Square <span class=\"keyword\">extends</span> Shape &#123;</span><br><span class=\"line\">    sideLength: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> square = &lt;Square&gt;&#123;&#125;;  </span><br><span class=\"line\"><span class=\"comment\">// 這邊也可以寫成 let square:Square = &#123;color:&#x27;blue&#x27;,sideLength=10&#125;, 但如果不寫預設值就會報錯</span></span><br><span class=\"line\">square.color = <span class=\"string\">&quot;blue&quot;</span>;</span><br><span class=\"line\">square.sideLength = <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"interface-extend-class？-用意是什麼\"><a href=\"#interface-extend-class？-用意是什麼\" class=\"headerlink\" title=\"interface extend class？ 用意是什麼?\"></a>interface extend class？ 用意是什麼?</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Control</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> state: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> SelectableControl <span class=\"keyword\">extends</span> Control &#123;</span><br><span class=\"line\">    select(): <span class=\"built_in\">void</span>; <span class=\"comment\">// 這邊定義了一個extend了 control的接口, 所以意思是說，如果今天有class想要implement 這個接口，他必須要有control 的全內容, 不然就會報錯</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Button</span> <span class=\"keyword\">extends</span> <span class=\"title\">Control</span> <span class=\"title\">implements</span> <span class=\"title\">SelectableControl</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">select</span>(<span class=\"params\"></span>)</span> &#123; &#125; <span class=\"comment\">// 因為button 有 extend Control, 所以他本身就具有private 的state, 所以這樣給過</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TextBox</span> <span class=\"keyword\">extends</span> <span class=\"title\">Control</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">select</span>(<span class=\"params\"></span>)</span> &#123; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Error: Property &#x27;state&#x27; is missing in type &#x27;Image&#x27;.</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Image</span> <span class=\"title\">implements</span> <span class=\"title\">SelectableControl</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">select</span>(<span class=\"params\"></span>)</span> &#123; &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 因為Image 本身沒有private 的state, 所以不能implement SelectableControl</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"TYPESCRIPT學習筆記-ep2","_content":"\n\n\n## 什麼是Interface(接口)?\n\n> 簡單來說就是一個用來定義一個物件內部 必要變數/變數型別的寫法\n> 好用的點在於可以去限制一個物件必須要具備什麼樣的property\n\n```typescript=\ninterface LabeledValue {\n  label: string;\n  name?:string; //後面有問號的property代表是optional的項目\n  readonly color:'red'\n  //前面有寫readonly的property，\n  //代表這個項目只要被interface初始定義之後就沒有辦法再被覆寫\n  //注意readonly只能在interface裡面使用\n}\n\nfunction printLabel(labeledObj: LabeledValue\n//直接把labeledObj 內容的型別定義為labeledValue 接口 \n) {\n  console.log(labeledObj.label);\n}\n\nlet myObj = {size: 10, label: \"Size 10 Object\"};\nprintLabel(myObj);\n```\n\n## 什麼是ReadonlyArray(唯讀陣列)?\n\n> 用途是用來確保陣列被定義為唯獨之後再也不能被修改\n\n```typescript=\nlet a: number[] = [1, 2, 3, 4];\nlet ro: ReadonlyArray<number> = a;\nro[0] = 12; // error!\nro.push(5); // error!\nro.length = 100; // error!\na = ro; // error!\n//但是可以用類型斷言強行複製\na = ro as number[];\n```\n\n## 我把函數的參數物件用一個具備optional屬性的interface來定義型別，然後我傳入不存在於該interface的property卻報錯了，為什麼?\n\n```typescript\ninterface LabeledValue {\n  name?:string; //後面有問號的property代表是optional的項目\n}\n//所以基本上這樣寫是合法的\n\nlet qq = (bb:LabeledValue)=>{\n    \n}\nqq({})//傳入空物件\n\n// 這樣寫也是合法的\nlet apple:LabeledValue ={};\napple.name = 'fuji';\n\n\n//但是這樣寫就會fail\napple.color = 'red';\n\n```\n\n這說明了optional屬性只能接受\"存在\"或“不存在”這兩種值，用一個本來就不符合interface的property是不合法的\n\n\n\n","source":"_posts/TYPESCRIPT學習筆記-ep2.md","raw":"---\ntitle: TYPESCRIPT學習筆記-ep2\ncategories: \n- 心得\ntags:\n- ts\n---\n\n\n\n## 什麼是Interface(接口)?\n\n> 簡單來說就是一個用來定義一個物件內部 必要變數/變數型別的寫法\n> 好用的點在於可以去限制一個物件必須要具備什麼樣的property\n\n```typescript=\ninterface LabeledValue {\n  label: string;\n  name?:string; //後面有問號的property代表是optional的項目\n  readonly color:'red'\n  //前面有寫readonly的property，\n  //代表這個項目只要被interface初始定義之後就沒有辦法再被覆寫\n  //注意readonly只能在interface裡面使用\n}\n\nfunction printLabel(labeledObj: LabeledValue\n//直接把labeledObj 內容的型別定義為labeledValue 接口 \n) {\n  console.log(labeledObj.label);\n}\n\nlet myObj = {size: 10, label: \"Size 10 Object\"};\nprintLabel(myObj);\n```\n\n## 什麼是ReadonlyArray(唯讀陣列)?\n\n> 用途是用來確保陣列被定義為唯獨之後再也不能被修改\n\n```typescript=\nlet a: number[] = [1, 2, 3, 4];\nlet ro: ReadonlyArray<number> = a;\nro[0] = 12; // error!\nro.push(5); // error!\nro.length = 100; // error!\na = ro; // error!\n//但是可以用類型斷言強行複製\na = ro as number[];\n```\n\n## 我把函數的參數物件用一個具備optional屬性的interface來定義型別，然後我傳入不存在於該interface的property卻報錯了，為什麼?\n\n```typescript\ninterface LabeledValue {\n  name?:string; //後面有問號的property代表是optional的項目\n}\n//所以基本上這樣寫是合法的\n\nlet qq = (bb:LabeledValue)=>{\n    \n}\nqq({})//傳入空物件\n\n// 這樣寫也是合法的\nlet apple:LabeledValue ={};\napple.name = 'fuji';\n\n\n//但是這樣寫就會fail\napple.color = 'red';\n\n```\n\n這說明了optional屬性只能接受\"存在\"或“不存在”這兩種值，用一個本來就不符合interface的property是不合法的\n\n\n\n","slug":"TYPESCRIPT學習筆記-ep2","published":1,"date":"2020-11-25T17:01:45.848Z","updated":"2020-11-25T17:01:45.848Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki5kjec0000mxdvd5x9s4wdg","content":"<h2 id=\"什麼是Interface-接口\"><a href=\"#什麼是Interface-接口\" class=\"headerlink\" title=\"什麼是Interface(接口)?\"></a>什麼是Interface(接口)?</h2><blockquote>\n<p>簡單來說就是一個用來定義一個物件內部 必要變數/變數型別的寫法<br>好用的點在於可以去限制一個物件必須要具備什麼樣的property</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> LabeledValue &#123;</span><br><span class=\"line\">  label: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  name?:<span class=\"built_in\">string</span>; <span class=\"comment\">//後面有問號的property代表是optional的項目</span></span><br><span class=\"line\">  <span class=\"keyword\">readonly</span> color:<span class=\"string\">&#x27;red&#x27;</span></span><br><span class=\"line\">  <span class=\"comment\">//前面有寫readonly的property，</span></span><br><span class=\"line\">  <span class=\"comment\">//代表這個項目只要被interface初始定義之後就沒有辦法再被覆寫</span></span><br><span class=\"line\">  <span class=\"comment\">//注意readonly只能在interface裡面使用</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printLabel</span>(<span class=\"params\">labeledObj: LabeledValue</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"comment\">//直接把labeledObj 內容的型別定義為labeledValue 接口 </span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(labeledObj.label);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> myObj = &#123;<span class=\"attr\">size</span>: <span class=\"number\">10</span>, <span class=\"attr\">label</span>: <span class=\"string\">&quot;Size 10 Object&quot;</span>&#125;;</span><br><span class=\"line\">printLabel(myObj);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"什麼是ReadonlyArray-唯讀陣列\"><a href=\"#什麼是ReadonlyArray-唯讀陣列\" class=\"headerlink\" title=\"什麼是ReadonlyArray(唯讀陣列)?\"></a>什麼是ReadonlyArray(唯讀陣列)?</h2><blockquote>\n<p>用途是用來確保陣列被定義為唯獨之後再也不能被修改</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a: <span class=\"built_in\">number</span>[] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> ro: ReadonlyArray&lt;<span class=\"built_in\">number</span>&gt; = a;</span><br><span class=\"line\">ro[<span class=\"number\">0</span>] = <span class=\"number\">12</span>; <span class=\"comment\">// error!</span></span><br><span class=\"line\">ro.push(<span class=\"number\">5</span>); <span class=\"comment\">// error!</span></span><br><span class=\"line\">ro.length = <span class=\"number\">100</span>; <span class=\"comment\">// error!</span></span><br><span class=\"line\">a = ro; <span class=\"comment\">// error!</span></span><br><span class=\"line\"><span class=\"comment\">//但是可以用類型斷言強行複製</span></span><br><span class=\"line\">a = ro <span class=\"keyword\">as</span> <span class=\"built_in\">number</span>[];</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"我把函數的參數物件用一個具備optional屬性的interface來定義型別，然後我傳入不存在於該interface的property卻報錯了，為什麼\"><a href=\"#我把函數的參數物件用一個具備optional屬性的interface來定義型別，然後我傳入不存在於該interface的property卻報錯了，為什麼\" class=\"headerlink\" title=\"我把函數的參數物件用一個具備optional屬性的interface來定義型別，然後我傳入不存在於該interface的property卻報錯了，為什麼?\"></a>我把函數的參數物件用一個具備optional屬性的interface來定義型別，然後我傳入不存在於該interface的property卻報錯了，為什麼?</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> LabeledValue &#123;</span><br><span class=\"line\">  name?:<span class=\"built_in\">string</span>; <span class=\"comment\">//後面有問號的property代表是optional的項目</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//所以基本上這樣寫是合法的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> qq = <span class=\"function\">(<span class=\"params\">bb:LabeledValue</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">qq(&#123;&#125;)<span class=\"comment\">//傳入空物件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 這樣寫也是合法的</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> apple:LabeledValue =&#123;&#125;;</span><br><span class=\"line\">apple.name = <span class=\"string\">&#x27;fuji&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//但是這樣寫就會fail</span></span><br><span class=\"line\">apple.color = <span class=\"string\">&#x27;red&#x27;</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>這說明了optional屬性只能接受”存在”或“不存在”這兩種值，用一個本來就不符合interface的property是不合法的</p>\n","site":{"data":{"css/variables":"","languages":{"zh-TW":{"title":{"archive":"時間線","category":"分類","tag":"標籤","schedule":"時間表"},"menu":{"home":"首頁","archives":"時間線","categories":"分類","tags":"標籤","about":"關於","search":"搜尋","schedule":"時間表","sitemap":"網站地圖","commonweal":"公益 404"},"sidebar":{"overview":"本站概要","toc":"文章目錄"},"post":{"posted":"發表於","edited":"更新於","created":"創建時間","modified":"修改時間","edit":"編輯","in":"分類於","read_more":"閱讀全文","untitled":"未命名","sticky":"置頂文","views":"閱讀次數","related_posts":"相關文章","copyright":{"author":"作者","link":"文章連結","post_author":"Written by","post_link":"This article originally appeared on","license_title":"版權聲明","license_content":"本網誌所有文章除特別聲明外，均採用 %s 許可協議。轉載請註明出處！"}},"footer":{"powered":"","total_views":"總瀏覽次數","total_visitors":"訪客總數"},"counter":{"tag_cloud":{"zero":"目前還沒有任何標籤","one":"目前共有 1 個標籤","other":"目前共有 %d 個標籤"},"categories":{"zero":"目前還沒有任何分類","one":"目前共有 1 個分類","other":"目前共有 %d 個分類"},"archive_posts":{"zero":"目前還沒有任何文章。","one":"目前共有 1 篇文章。","other":"目前共有 %d 篇文章。"}},"state":{"posts":"文章","tags":"標籤","categories":"分類"},"search":{"placeholder":"搜尋...","empty":"We didn't find any results for the search: %s","hits_time":"%s results found in %s ms","hits":"%s results found"},"cheers":{"um":"嗯..","ok":"還不錯","nice":"好","good":"很好","great":"非常好","excellent":"棒棒Der"},"keep_on":"繼續努力。","symbol":{"comma":"，","period":"。","colon":"："},"reward":{"donate":"捐贈","wechatpay":"微信支付","alipay":"支付寶","paypal":"貝寶","bitcoin":"比特幣"},"follow_me":{"welcome":"歡迎關注我的其它站點"},"accessibility":{"nav_toggle":"切換導航欄","prev_page":"上一頁","next_page":"下一頁"},"symbols_count_time":{"count":"文章字數","count_total":"總字數","time":"所需閱讀時間","time_total":"所需總閱讀時間","time_minutes":"分鐘"}}},"css/mixins":"","css/styles":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","template/head":"<script src=\"//js/tool/canvas-fx-base.js\"></script>\n\n<script src=\"//js/ripple-logo.js\"></script>\n<script src=\"//js/silk-wave.js\"></script>\n\n<style>\n  @font-face {\n  font-family: \"Roboto\";\n  src: url(//font/Roboto.ttf) format(\"truetype\");\n}\n</style>","css/styl-plugin/grid-post-layout/main":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","css/styl-plugin/grid-post-layout/mixins":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n","css/styl-plugin/grid-post-layout/variables":""}},"excerpt":"","more":"<h2 id=\"什麼是Interface-接口\"><a href=\"#什麼是Interface-接口\" class=\"headerlink\" title=\"什麼是Interface(接口)?\"></a>什麼是Interface(接口)?</h2><blockquote>\n<p>簡單來說就是一個用來定義一個物件內部 必要變數/變數型別的寫法<br>好用的點在於可以去限制一個物件必須要具備什麼樣的property</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> LabeledValue &#123;</span><br><span class=\"line\">  label: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  name?:<span class=\"built_in\">string</span>; <span class=\"comment\">//後面有問號的property代表是optional的項目</span></span><br><span class=\"line\">  <span class=\"keyword\">readonly</span> color:<span class=\"string\">&#x27;red&#x27;</span></span><br><span class=\"line\">  <span class=\"comment\">//前面有寫readonly的property，</span></span><br><span class=\"line\">  <span class=\"comment\">//代表這個項目只要被interface初始定義之後就沒有辦法再被覆寫</span></span><br><span class=\"line\">  <span class=\"comment\">//注意readonly只能在interface裡面使用</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printLabel</span>(<span class=\"params\">labeledObj: LabeledValue</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"comment\">//直接把labeledObj 內容的型別定義為labeledValue 接口 </span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(labeledObj.label);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> myObj = &#123;<span class=\"attr\">size</span>: <span class=\"number\">10</span>, <span class=\"attr\">label</span>: <span class=\"string\">&quot;Size 10 Object&quot;</span>&#125;;</span><br><span class=\"line\">printLabel(myObj);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"什麼是ReadonlyArray-唯讀陣列\"><a href=\"#什麼是ReadonlyArray-唯讀陣列\" class=\"headerlink\" title=\"什麼是ReadonlyArray(唯讀陣列)?\"></a>什麼是ReadonlyArray(唯讀陣列)?</h2><blockquote>\n<p>用途是用來確保陣列被定義為唯獨之後再也不能被修改</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a: <span class=\"built_in\">number</span>[] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> ro: ReadonlyArray&lt;<span class=\"built_in\">number</span>&gt; = a;</span><br><span class=\"line\">ro[<span class=\"number\">0</span>] = <span class=\"number\">12</span>; <span class=\"comment\">// error!</span></span><br><span class=\"line\">ro.push(<span class=\"number\">5</span>); <span class=\"comment\">// error!</span></span><br><span class=\"line\">ro.length = <span class=\"number\">100</span>; <span class=\"comment\">// error!</span></span><br><span class=\"line\">a = ro; <span class=\"comment\">// error!</span></span><br><span class=\"line\"><span class=\"comment\">//但是可以用類型斷言強行複製</span></span><br><span class=\"line\">a = ro <span class=\"keyword\">as</span> <span class=\"built_in\">number</span>[];</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"我把函數的參數物件用一個具備optional屬性的interface來定義型別，然後我傳入不存在於該interface的property卻報錯了，為什麼\"><a href=\"#我把函數的參數物件用一個具備optional屬性的interface來定義型別，然後我傳入不存在於該interface的property卻報錯了，為什麼\" class=\"headerlink\" title=\"我把函數的參數物件用一個具備optional屬性的interface來定義型別，然後我傳入不存在於該interface的property卻報錯了，為什麼?\"></a>我把函數的參數物件用一個具備optional屬性的interface來定義型別，然後我傳入不存在於該interface的property卻報錯了，為什麼?</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> LabeledValue &#123;</span><br><span class=\"line\">  name?:<span class=\"built_in\">string</span>; <span class=\"comment\">//後面有問號的property代表是optional的項目</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//所以基本上這樣寫是合法的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> qq = <span class=\"function\">(<span class=\"params\">bb:LabeledValue</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">qq(&#123;&#125;)<span class=\"comment\">//傳入空物件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 這樣寫也是合法的</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> apple:LabeledValue =&#123;&#125;;</span><br><span class=\"line\">apple.name = <span class=\"string\">&#x27;fuji&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//但是這樣寫就會fail</span></span><br><span class=\"line\">apple.color = <span class=\"string\">&#x27;red&#x27;</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>這說明了optional屬性只能接受”存在”或“不存在”這兩種值，用一個本來就不符合interface的property是不合法的</p>\n"},{"title":"TYPESCRIPT學習筆記-ep3","_content":"\n\n\n## TS 的class 跟 es6 有什麼差別？\n\n#### 1. private與 public 宣告的存在:\n如果一個方法/變數/constructor被宣告為public 則能在聲明它的類的外部被取用\n反之若宣告為private， 那這個方法/變數/constructor 就只能在自己的class裡面被使用\n\n所以說這樣會錯\n\n> 實際上, 當private 方法/變數/constructor 在父類別被繼承出去的時候，\n他是會進到子類別（或子類別的實例）裡面的，但是就是無法訪問而已\n\n````typescript\nclass fruit{\n    constructor(){\n\n    }\n\n    private type =\"fruit\";\n    method1(){\n        console.log(this.type);\n    }\n}\n\n\nlet a  = new fruit();\nconsole.log(a.type);//報錯, 因為type 只能在fruit裡面被使用，被new 出來的實例沒辦法取得他\n\n\nclass apple extends fruit{\n    constructor(){\n        super();\n        this.type = \"aa\"\n    }\n    mm(){\n        console.log(this.type);//報錯, 因為type 只能在fruit裡面被使用，就算是extend 過來也不行\n    }\n}\n````\n\n\n#### 2. protect 宣告的存在:\n\n##### 如果一個class 的方法/變數/constructor被宣告為protected， 則:\n1. 這個方法/變數/constructor能在class裡面被叫用\n但是我們不能透過這個class的實例去拿到他被 protect 的東西\n2. 但若如果今天這個class被作為一個父類別被繼承下去的話，他的子類別在子類class的實例化前/後, \n都可以去訪問這個被protected的東西\n\n\n#### 3. readonly 宣告的存在:\n\n##### 如果一個class 的變數被宣告為readonly， 則:\n1. 這個方法/變數/constructor只能在class(實例化前後)被讀取，但不能被改變\n2. 就算class被作為父類別繼承，他的子類別一樣不能去修改父類別繼承下來的變數\n3. 注意 readonly只能用來把變數標注成唯讀，方法跟constructor 是不能設定的\n\n#### 4. getter與 setter\n\n> typescript 的 class 可以把裡面的變數(屬性) 寫成 getter與setter 的形式[color=#36c169]\n\n> 如果是用VSCODE作為IDE的話，可以先把變數(屬性)反白，然後右鍵點左上角的小燈泡，這樣就可以自動產出ts 的get/set snippet 語法\n> ![](https://i.imgur.com/qGgO47X.png)\n\n以上面圖片這個例子來講, 當這個class的a屬性被改成get/set之後，就會變成下面這樣\n\n````typescript\nclass test{\n  constructor(){\n\n  }\n  private _a: string = \"abc\";\n  public get a(): string {\n    return this._a;\n  }\n  public set a(value: string) {\n    this._a = value;\n  }\n}\n````\n\n然後當這個class被實例化之後就可以透過setter去賦值，也就是\n````typescript\nlet example  = new test();\ntest.a = \"def\";\n//  這邊\"def\"會自動作為value 被帶入到set a(value)裡面去\n````\n\n\n","source":"_posts/TYPESCRIPT學習筆記-ep3.md","raw":"---\ntitle: TYPESCRIPT學習筆記-ep3\ncategories: \n- 心得\ntags:\n- ts\n---\n\n\n\n## TS 的class 跟 es6 有什麼差別？\n\n#### 1. private與 public 宣告的存在:\n如果一個方法/變數/constructor被宣告為public 則能在聲明它的類的外部被取用\n反之若宣告為private， 那這個方法/變數/constructor 就只能在自己的class裡面被使用\n\n所以說這樣會錯\n\n> 實際上, 當private 方法/變數/constructor 在父類別被繼承出去的時候，\n他是會進到子類別（或子類別的實例）裡面的，但是就是無法訪問而已\n\n````typescript\nclass fruit{\n    constructor(){\n\n    }\n\n    private type =\"fruit\";\n    method1(){\n        console.log(this.type);\n    }\n}\n\n\nlet a  = new fruit();\nconsole.log(a.type);//報錯, 因為type 只能在fruit裡面被使用，被new 出來的實例沒辦法取得他\n\n\nclass apple extends fruit{\n    constructor(){\n        super();\n        this.type = \"aa\"\n    }\n    mm(){\n        console.log(this.type);//報錯, 因為type 只能在fruit裡面被使用，就算是extend 過來也不行\n    }\n}\n````\n\n\n#### 2. protect 宣告的存在:\n\n##### 如果一個class 的方法/變數/constructor被宣告為protected， 則:\n1. 這個方法/變數/constructor能在class裡面被叫用\n但是我們不能透過這個class的實例去拿到他被 protect 的東西\n2. 但若如果今天這個class被作為一個父類別被繼承下去的話，他的子類別在子類class的實例化前/後, \n都可以去訪問這個被protected的東西\n\n\n#### 3. readonly 宣告的存在:\n\n##### 如果一個class 的變數被宣告為readonly， 則:\n1. 這個方法/變數/constructor只能在class(實例化前後)被讀取，但不能被改變\n2. 就算class被作為父類別繼承，他的子類別一樣不能去修改父類別繼承下來的變數\n3. 注意 readonly只能用來把變數標注成唯讀，方法跟constructor 是不能設定的\n\n#### 4. getter與 setter\n\n> typescript 的 class 可以把裡面的變數(屬性) 寫成 getter與setter 的形式[color=#36c169]\n\n> 如果是用VSCODE作為IDE的話，可以先把變數(屬性)反白，然後右鍵點左上角的小燈泡，這樣就可以自動產出ts 的get/set snippet 語法\n> ![](https://i.imgur.com/qGgO47X.png)\n\n以上面圖片這個例子來講, 當這個class的a屬性被改成get/set之後，就會變成下面這樣\n\n````typescript\nclass test{\n  constructor(){\n\n  }\n  private _a: string = \"abc\";\n  public get a(): string {\n    return this._a;\n  }\n  public set a(value: string) {\n    this._a = value;\n  }\n}\n````\n\n然後當這個class被實例化之後就可以透過setter去賦值，也就是\n````typescript\nlet example  = new test();\ntest.a = \"def\";\n//  這邊\"def\"會自動作為value 被帶入到set a(value)裡面去\n````\n\n\n","slug":"TYPESCRIPT學習筆記-ep3","published":1,"date":"2020-11-25T17:01:45.850Z","updated":"2020-11-25T17:01:45.850Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki5kjec1000pxdvdao021pec","content":"<h2 id=\"TS-的class-跟-es6-有什麼差別？\"><a href=\"#TS-的class-跟-es6-有什麼差別？\" class=\"headerlink\" title=\"TS 的class 跟 es6 有什麼差別？\"></a>TS 的class 跟 es6 有什麼差別？</h2><h4 id=\"1-private與-public-宣告的存在\"><a href=\"#1-private與-public-宣告的存在\" class=\"headerlink\" title=\"1. private與 public 宣告的存在:\"></a>1. private與 public 宣告的存在:</h4><p>如果一個方法/變數/constructor被宣告為public 則能在聲明它的類的外部被取用<br>反之若宣告為private， 那這個方法/變數/constructor 就只能在自己的class裡面被使用</p>\n<p>所以說這樣會錯</p>\n<blockquote>\n<p>實際上, 當private 方法/變數/constructor 在父類別被繼承出去的時候，<br>他是會進到子類別（或子類別的實例）裡面的，但是就是無法訪問而已</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">fruit</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">type</span> =<span class=\"string\">&quot;fruit&quot;</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">method1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.type);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a  = <span class=\"keyword\">new</span> fruit();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.type);<span class=\"comment\">//報錯, 因為type 只能在fruit裡面被使用，被new 出來的實例沒辦法取得他</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">apple</span> <span class=\"keyword\">extends</span> <span class=\"title\">fruit</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.type = <span class=\"string\">&quot;aa&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">mm</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.type);<span class=\"comment\">//報錯, 因為type 只能在fruit裡面被使用，就算是extend 過來也不行</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"2-protect-宣告的存在\"><a href=\"#2-protect-宣告的存在\" class=\"headerlink\" title=\"2. protect 宣告的存在:\"></a>2. protect 宣告的存在:</h4><h5 id=\"如果一個class-的方法-變數-constructor被宣告為protected，-則\"><a href=\"#如果一個class-的方法-變數-constructor被宣告為protected，-則\" class=\"headerlink\" title=\"如果一個class 的方法/變數/constructor被宣告為protected， 則:\"></a>如果一個class 的方法/變數/constructor被宣告為protected， 則:</h5><ol>\n<li>這個方法/變數/constructor能在class裡面被叫用<br>但是我們不能透過這個class的實例去拿到他被 protect 的東西</li>\n<li>但若如果今天這個class被作為一個父類別被繼承下去的話，他的子類別在子類class的實例化前/後,<br>都可以去訪問這個被protected的東西</li>\n</ol>\n<h4 id=\"3-readonly-宣告的存在\"><a href=\"#3-readonly-宣告的存在\" class=\"headerlink\" title=\"3. readonly 宣告的存在:\"></a>3. readonly 宣告的存在:</h4><h5 id=\"如果一個class-的變數被宣告為readonly，-則\"><a href=\"#如果一個class-的變數被宣告為readonly，-則\" class=\"headerlink\" title=\"如果一個class 的變數被宣告為readonly， 則:\"></a>如果一個class 的變數被宣告為readonly， 則:</h5><ol>\n<li>這個方法/變數/constructor只能在class(實例化前後)被讀取，但不能被改變</li>\n<li>就算class被作為父類別繼承，他的子類別一樣不能去修改父類別繼承下來的變數</li>\n<li>注意 readonly只能用來把變數標注成唯讀，方法跟constructor 是不能設定的</li>\n</ol>\n<h4 id=\"4-getter與-setter\"><a href=\"#4-getter與-setter\" class=\"headerlink\" title=\"4. getter與 setter\"></a>4. getter與 setter</h4><blockquote>\n<p>typescript 的 class 可以把裡面的變數(屬性) 寫成 getter與setter 的形式[color=#36c169]</p>\n</blockquote>\n<blockquote>\n<p>如果是用VSCODE作為IDE的話，可以先把變數(屬性)反白，然後右鍵點左上角的小燈泡，這樣就可以自動產出ts 的get/set snippet 語法<br><img src=\"https://i.imgur.com/qGgO47X.png\"></p>\n</blockquote>\n<p>以上面圖片這個例子來講, 當這個class的a屬性被改成get/set之後，就會變成下面這樣</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> _a: <span class=\"built_in\">string</span> = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">get</span> <span class=\"title\">a</span>(): <span class=\"title\">string</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>._a;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">set</span> <span class=\"title\">a</span>(<span class=\"params\">value: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>._a = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然後當這個class被實例化之後就可以透過setter去賦值，也就是</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> example  = <span class=\"keyword\">new</span> test();</span><br><span class=\"line\">test.a = <span class=\"string\">&quot;def&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">//  這邊&quot;def&quot;會自動作為value 被帶入到set a(value)裡面去</span></span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{"css/variables":"","languages":{"zh-TW":{"title":{"archive":"時間線","category":"分類","tag":"標籤","schedule":"時間表"},"menu":{"home":"首頁","archives":"時間線","categories":"分類","tags":"標籤","about":"關於","search":"搜尋","schedule":"時間表","sitemap":"網站地圖","commonweal":"公益 404"},"sidebar":{"overview":"本站概要","toc":"文章目錄"},"post":{"posted":"發表於","edited":"更新於","created":"創建時間","modified":"修改時間","edit":"編輯","in":"分類於","read_more":"閱讀全文","untitled":"未命名","sticky":"置頂文","views":"閱讀次數","related_posts":"相關文章","copyright":{"author":"作者","link":"文章連結","post_author":"Written by","post_link":"This article originally appeared on","license_title":"版權聲明","license_content":"本網誌所有文章除特別聲明外，均採用 %s 許可協議。轉載請註明出處！"}},"footer":{"powered":"","total_views":"總瀏覽次數","total_visitors":"訪客總數"},"counter":{"tag_cloud":{"zero":"目前還沒有任何標籤","one":"目前共有 1 個標籤","other":"目前共有 %d 個標籤"},"categories":{"zero":"目前還沒有任何分類","one":"目前共有 1 個分類","other":"目前共有 %d 個分類"},"archive_posts":{"zero":"目前還沒有任何文章。","one":"目前共有 1 篇文章。","other":"目前共有 %d 篇文章。"}},"state":{"posts":"文章","tags":"標籤","categories":"分類"},"search":{"placeholder":"搜尋...","empty":"We didn't find any results for the search: %s","hits_time":"%s results found in %s ms","hits":"%s results found"},"cheers":{"um":"嗯..","ok":"還不錯","nice":"好","good":"很好","great":"非常好","excellent":"棒棒Der"},"keep_on":"繼續努力。","symbol":{"comma":"，","period":"。","colon":"："},"reward":{"donate":"捐贈","wechatpay":"微信支付","alipay":"支付寶","paypal":"貝寶","bitcoin":"比特幣"},"follow_me":{"welcome":"歡迎關注我的其它站點"},"accessibility":{"nav_toggle":"切換導航欄","prev_page":"上一頁","next_page":"下一頁"},"symbols_count_time":{"count":"文章字數","count_total":"總字數","time":"所需閱讀時間","time_total":"所需總閱讀時間","time_minutes":"分鐘"}}},"css/mixins":"","css/styles":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","template/head":"<script src=\"//js/tool/canvas-fx-base.js\"></script>\n\n<script src=\"//js/ripple-logo.js\"></script>\n<script src=\"//js/silk-wave.js\"></script>\n\n<style>\n  @font-face {\n  font-family: \"Roboto\";\n  src: url(//font/Roboto.ttf) format(\"truetype\");\n}\n</style>","css/styl-plugin/grid-post-layout/main":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","css/styl-plugin/grid-post-layout/mixins":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n","css/styl-plugin/grid-post-layout/variables":""}},"excerpt":"","more":"<h2 id=\"TS-的class-跟-es6-有什麼差別？\"><a href=\"#TS-的class-跟-es6-有什麼差別？\" class=\"headerlink\" title=\"TS 的class 跟 es6 有什麼差別？\"></a>TS 的class 跟 es6 有什麼差別？</h2><h4 id=\"1-private與-public-宣告的存在\"><a href=\"#1-private與-public-宣告的存在\" class=\"headerlink\" title=\"1. private與 public 宣告的存在:\"></a>1. private與 public 宣告的存在:</h4><p>如果一個方法/變數/constructor被宣告為public 則能在聲明它的類的外部被取用<br>反之若宣告為private， 那這個方法/變數/constructor 就只能在自己的class裡面被使用</p>\n<p>所以說這樣會錯</p>\n<blockquote>\n<p>實際上, 當private 方法/變數/constructor 在父類別被繼承出去的時候，<br>他是會進到子類別（或子類別的實例）裡面的，但是就是無法訪問而已</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">fruit</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">type</span> =<span class=\"string\">&quot;fruit&quot;</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">method1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.type);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a  = <span class=\"keyword\">new</span> fruit();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.type);<span class=\"comment\">//報錯, 因為type 只能在fruit裡面被使用，被new 出來的實例沒辦法取得他</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">apple</span> <span class=\"keyword\">extends</span> <span class=\"title\">fruit</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.type = <span class=\"string\">&quot;aa&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">mm</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.type);<span class=\"comment\">//報錯, 因為type 只能在fruit裡面被使用，就算是extend 過來也不行</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"2-protect-宣告的存在\"><a href=\"#2-protect-宣告的存在\" class=\"headerlink\" title=\"2. protect 宣告的存在:\"></a>2. protect 宣告的存在:</h4><h5 id=\"如果一個class-的方法-變數-constructor被宣告為protected，-則\"><a href=\"#如果一個class-的方法-變數-constructor被宣告為protected，-則\" class=\"headerlink\" title=\"如果一個class 的方法/變數/constructor被宣告為protected， 則:\"></a>如果一個class 的方法/變數/constructor被宣告為protected， 則:</h5><ol>\n<li>這個方法/變數/constructor能在class裡面被叫用<br>但是我們不能透過這個class的實例去拿到他被 protect 的東西</li>\n<li>但若如果今天這個class被作為一個父類別被繼承下去的話，他的子類別在子類class的實例化前/後,<br>都可以去訪問這個被protected的東西</li>\n</ol>\n<h4 id=\"3-readonly-宣告的存在\"><a href=\"#3-readonly-宣告的存在\" class=\"headerlink\" title=\"3. readonly 宣告的存在:\"></a>3. readonly 宣告的存在:</h4><h5 id=\"如果一個class-的變數被宣告為readonly，-則\"><a href=\"#如果一個class-的變數被宣告為readonly，-則\" class=\"headerlink\" title=\"如果一個class 的變數被宣告為readonly， 則:\"></a>如果一個class 的變數被宣告為readonly， 則:</h5><ol>\n<li>這個方法/變數/constructor只能在class(實例化前後)被讀取，但不能被改變</li>\n<li>就算class被作為父類別繼承，他的子類別一樣不能去修改父類別繼承下來的變數</li>\n<li>注意 readonly只能用來把變數標注成唯讀，方法跟constructor 是不能設定的</li>\n</ol>\n<h4 id=\"4-getter與-setter\"><a href=\"#4-getter與-setter\" class=\"headerlink\" title=\"4. getter與 setter\"></a>4. getter與 setter</h4><blockquote>\n<p>typescript 的 class 可以把裡面的變數(屬性) 寫成 getter與setter 的形式[color=#36c169]</p>\n</blockquote>\n<blockquote>\n<p>如果是用VSCODE作為IDE的話，可以先把變數(屬性)反白，然後右鍵點左上角的小燈泡，這樣就可以自動產出ts 的get/set snippet 語法<br><img src=\"https://i.imgur.com/qGgO47X.png\"></p>\n</blockquote>\n<p>以上面圖片這個例子來講, 當這個class的a屬性被改成get/set之後，就會變成下面這樣</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> _a: <span class=\"built_in\">string</span> = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">get</span> <span class=\"title\">a</span>(): <span class=\"title\">string</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>._a;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">set</span> <span class=\"title\">a</span>(<span class=\"params\">value: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>._a = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然後當這個class被實例化之後就可以透過setter去賦值，也就是</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> example  = <span class=\"keyword\">new</span> test();</span><br><span class=\"line\">test.a = <span class=\"string\">&quot;def&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">//  這邊&quot;def&quot;會自動作為value 被帶入到set a(value)裡面去</span></span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"高見龍為自己學 git 學習筆記-ep1","_content":"\n\n\n\n## 一些簡單的基本：終端機指令\n\n\n1. 複製檔案```cp```\n2. 重新命名檔案 ```mv '舊檔名' ‘新檔名‘```\n3. 列出目前位置 ```pwd```\n4. 移除檔案 ```rm```\n5. 到根資料夾```cd ~```\n6. 顯示所有包括隱藏的檔案```ls -al```\n\n## Vim操作\n\n![](https://i.imgur.com/mXktH1C.png)\n\n## git 基本操作\n\n1. 使用者基本資料設定(bt device)，設定姓名/電子郵件\n\n```\ngit config --global user.name \"Eddie Kao\"\ngit config --global user.email \"eddiexxxx@gmail.com\"\n```\n- 這邊拿掉global 的話就會對專案直接做個別設定\n- 存取的global使用者資料會在user根資料夾底下的.gitconfig檔案裡\n```\n~/.gitconfig\n```\n\n\n2. 列出當前使用者資料設定\n```\ngit config --list\n```\n\n3. 其實可以把git的預設編輯器改成 VSCODE\nhttps://stackoverflow.com/questions/30024353/how-to-use-visual-studio-code-as-default-editor-for-git\n\n4. git 的操作指令其實也可以寫alias(縮寫)\n\n```terminal\ngit config --global alias.co checkout\n//把checkout指令改成co\n```\n```terminal\ngit config --global alias.l \"log--oneline--graph\"\n//也可以把一些比較複雜的指令改成alias\n```\n```terminal\ngit config --global alias.ls 'log --graph --pretty=format:\"%h <%an> %ar %s\"'\n//or more complicated\n//把git log的格式簡化用\n```\n\n## 專案git初始化的流程\n\n1. ```cd <folder>```\n2. ```git init```\n3. \n\n```git add --all```\n\n```\ngit add -A stages all changes\n\ngit add . stages new files and modifications, without deletions\n\ngit add -u stages modifications and deletions, without new files\n```\n\n4. ```git commit -m <commit log>```\n\n\n\n","source":"_posts/高見龍為自己學 git 學習筆記-ep1.md","raw":"---\ntitle: 高見龍為自己學 git 學習筆記-ep1\ncategories: \n- 心得\ntags:\n- git\n---\n\n\n\n\n## 一些簡單的基本：終端機指令\n\n\n1. 複製檔案```cp```\n2. 重新命名檔案 ```mv '舊檔名' ‘新檔名‘```\n3. 列出目前位置 ```pwd```\n4. 移除檔案 ```rm```\n5. 到根資料夾```cd ~```\n6. 顯示所有包括隱藏的檔案```ls -al```\n\n## Vim操作\n\n![](https://i.imgur.com/mXktH1C.png)\n\n## git 基本操作\n\n1. 使用者基本資料設定(bt device)，設定姓名/電子郵件\n\n```\ngit config --global user.name \"Eddie Kao\"\ngit config --global user.email \"eddiexxxx@gmail.com\"\n```\n- 這邊拿掉global 的話就會對專案直接做個別設定\n- 存取的global使用者資料會在user根資料夾底下的.gitconfig檔案裡\n```\n~/.gitconfig\n```\n\n\n2. 列出當前使用者資料設定\n```\ngit config --list\n```\n\n3. 其實可以把git的預設編輯器改成 VSCODE\nhttps://stackoverflow.com/questions/30024353/how-to-use-visual-studio-code-as-default-editor-for-git\n\n4. git 的操作指令其實也可以寫alias(縮寫)\n\n```terminal\ngit config --global alias.co checkout\n//把checkout指令改成co\n```\n```terminal\ngit config --global alias.l \"log--oneline--graph\"\n//也可以把一些比較複雜的指令改成alias\n```\n```terminal\ngit config --global alias.ls 'log --graph --pretty=format:\"%h <%an> %ar %s\"'\n//or more complicated\n//把git log的格式簡化用\n```\n\n## 專案git初始化的流程\n\n1. ```cd <folder>```\n2. ```git init```\n3. \n\n```git add --all```\n\n```\ngit add -A stages all changes\n\ngit add . stages new files and modifications, without deletions\n\ngit add -u stages modifications and deletions, without new files\n```\n\n4. ```git commit -m <commit log>```\n\n\n\n","slug":"高見龍為自己學 git 學習筆記-ep1","published":1,"date":"2020-11-25T17:01:45.852Z","updated":"2020-11-25T17:01:45.852Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki5kjec2000txdvdhce0du6f","content":"<h2 id=\"一些簡單的基本：終端機指令\"><a href=\"#一些簡單的基本：終端機指令\" class=\"headerlink\" title=\"一些簡單的基本：終端機指令\"></a>一些簡單的基本：終端機指令</h2><ol>\n<li>複製檔案<code>cp</code></li>\n<li>重新命名檔案 <code>mv &#39;舊檔名&#39; ‘新檔名‘</code></li>\n<li>列出目前位置 <code>pwd</code></li>\n<li>移除檔案 <code>rm</code></li>\n<li>到根資料夾<code>cd ~</code></li>\n<li>顯示所有包括隱藏的檔案<code>ls -al</code></li>\n</ol>\n<h2 id=\"Vim操作\"><a href=\"#Vim操作\" class=\"headerlink\" title=\"Vim操作\"></a>Vim操作</h2><p><img src=\"https://i.imgur.com/mXktH1C.png\"></p>\n<h2 id=\"git-基本操作\"><a href=\"#git-基本操作\" class=\"headerlink\" title=\"git 基本操作\"></a>git 基本操作</h2><ol>\n<li>使用者基本資料設定(bt device)，設定姓名/電子郵件</li>\n</ol>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git<span class=\"built_in\"> config </span>--global user.name <span class=\"string\">&quot;Eddie Kao&quot;</span></span><br><span class=\"line\">git<span class=\"built_in\"> config </span>--global user.email <span class=\"string\">&quot;eddiexxxx@gmail.com&quot;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>這邊拿掉global 的話就會對專案直接做個別設定</li>\n<li>存取的global使用者資料會在user根資料夾底下的.gitconfig檔案裡<figure class=\"highlight haml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~/.gitconfig</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<ol start=\"2\">\n<li><p>列出當前使用者資料設定</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git<span class=\"built_in\"> config </span>--list</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>其實可以把git的預設編輯器改成 VSCODE<br><a href=\"https://stackoverflow.com/questions/30024353/how-to-use-visual-studio-code-as-default-editor-for-git\">https://stackoverflow.com/questions/30024353/how-to-use-visual-studio-code-as-default-editor-for-git</a></p>\n</li>\n<li><p>git 的操作指令其實也可以寫alias(縮寫)</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global alias.co checkout</span><br><span class=\"line\">&#x2F;&#x2F;把checkout指令改成co</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global alias.l &quot;log--oneline--graph&quot;</span><br><span class=\"line\">&#x2F;&#x2F;也可以把一些比較複雜的指令改成alias</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global alias.ls &#39;log --graph --pretty&#x3D;format:&quot;%h &lt;%an&gt; %ar %s&quot;&#39;</span><br><span class=\"line\">&#x2F;&#x2F;or more complicated</span><br><span class=\"line\">&#x2F;&#x2F;把git log的格式簡化用</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"專案git初始化的流程\"><a href=\"#專案git初始化的流程\" class=\"headerlink\" title=\"專案git初始化的流程\"></a>專案git初始化的流程</h2><ol>\n<li><code>cd &lt;folder&gt;</code></li>\n<li><code>git init</code></li>\n<li></li>\n</ol>\n<p><code>git add --all</code></p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">add</span> -A stages all changes</span><br><span class=\"line\"></span><br><span class=\"line\">git <span class=\"built_in\">add</span> . stages <span class=\"built_in\">new</span> <span class=\"built_in\">files</span> <span class=\"keyword\">and</span> modifications, <span class=\"keyword\">without</span> deletions</span><br><span class=\"line\"></span><br><span class=\"line\">git <span class=\"built_in\">add</span> -u stages modifications <span class=\"keyword\">and</span> deletions, <span class=\"keyword\">without</span> <span class=\"built_in\">new</span> <span class=\"built_in\">files</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li><code>git commit -m &lt;commit log&gt;</code></li>\n</ol>\n","site":{"data":{"css/variables":"","languages":{"zh-TW":{"title":{"archive":"時間線","category":"分類","tag":"標籤","schedule":"時間表"},"menu":{"home":"首頁","archives":"時間線","categories":"分類","tags":"標籤","about":"關於","search":"搜尋","schedule":"時間表","sitemap":"網站地圖","commonweal":"公益 404"},"sidebar":{"overview":"本站概要","toc":"文章目錄"},"post":{"posted":"發表於","edited":"更新於","created":"創建時間","modified":"修改時間","edit":"編輯","in":"分類於","read_more":"閱讀全文","untitled":"未命名","sticky":"置頂文","views":"閱讀次數","related_posts":"相關文章","copyright":{"author":"作者","link":"文章連結","post_author":"Written by","post_link":"This article originally appeared on","license_title":"版權聲明","license_content":"本網誌所有文章除特別聲明外，均採用 %s 許可協議。轉載請註明出處！"}},"footer":{"powered":"","total_views":"總瀏覽次數","total_visitors":"訪客總數"},"counter":{"tag_cloud":{"zero":"目前還沒有任何標籤","one":"目前共有 1 個標籤","other":"目前共有 %d 個標籤"},"categories":{"zero":"目前還沒有任何分類","one":"目前共有 1 個分類","other":"目前共有 %d 個分類"},"archive_posts":{"zero":"目前還沒有任何文章。","one":"目前共有 1 篇文章。","other":"目前共有 %d 篇文章。"}},"state":{"posts":"文章","tags":"標籤","categories":"分類"},"search":{"placeholder":"搜尋...","empty":"We didn't find any results for the search: %s","hits_time":"%s results found in %s ms","hits":"%s results found"},"cheers":{"um":"嗯..","ok":"還不錯","nice":"好","good":"很好","great":"非常好","excellent":"棒棒Der"},"keep_on":"繼續努力。","symbol":{"comma":"，","period":"。","colon":"："},"reward":{"donate":"捐贈","wechatpay":"微信支付","alipay":"支付寶","paypal":"貝寶","bitcoin":"比特幣"},"follow_me":{"welcome":"歡迎關注我的其它站點"},"accessibility":{"nav_toggle":"切換導航欄","prev_page":"上一頁","next_page":"下一頁"},"symbols_count_time":{"count":"文章字數","count_total":"總字數","time":"所需閱讀時間","time_total":"所需總閱讀時間","time_minutes":"分鐘"}}},"css/mixins":"","css/styles":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","template/head":"<script src=\"//js/tool/canvas-fx-base.js\"></script>\n\n<script src=\"//js/ripple-logo.js\"></script>\n<script src=\"//js/silk-wave.js\"></script>\n\n<style>\n  @font-face {\n  font-family: \"Roboto\";\n  src: url(//font/Roboto.ttf) format(\"truetype\");\n}\n</style>","css/styl-plugin/grid-post-layout/main":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","css/styl-plugin/grid-post-layout/mixins":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n","css/styl-plugin/grid-post-layout/variables":""}},"excerpt":"","more":"<h2 id=\"一些簡單的基本：終端機指令\"><a href=\"#一些簡單的基本：終端機指令\" class=\"headerlink\" title=\"一些簡單的基本：終端機指令\"></a>一些簡單的基本：終端機指令</h2><ol>\n<li>複製檔案<code>cp</code></li>\n<li>重新命名檔案 <code>mv &#39;舊檔名&#39; ‘新檔名‘</code></li>\n<li>列出目前位置 <code>pwd</code></li>\n<li>移除檔案 <code>rm</code></li>\n<li>到根資料夾<code>cd ~</code></li>\n<li>顯示所有包括隱藏的檔案<code>ls -al</code></li>\n</ol>\n<h2 id=\"Vim操作\"><a href=\"#Vim操作\" class=\"headerlink\" title=\"Vim操作\"></a>Vim操作</h2><p><img src=\"https://i.imgur.com/mXktH1C.png\"></p>\n<h2 id=\"git-基本操作\"><a href=\"#git-基本操作\" class=\"headerlink\" title=\"git 基本操作\"></a>git 基本操作</h2><ol>\n<li>使用者基本資料設定(bt device)，設定姓名/電子郵件</li>\n</ol>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git<span class=\"built_in\"> config </span>--global user.name <span class=\"string\">&quot;Eddie Kao&quot;</span></span><br><span class=\"line\">git<span class=\"built_in\"> config </span>--global user.email <span class=\"string\">&quot;eddiexxxx@gmail.com&quot;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>這邊拿掉global 的話就會對專案直接做個別設定</li>\n<li>存取的global使用者資料會在user根資料夾底下的.gitconfig檔案裡<figure class=\"highlight haml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~/.gitconfig</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<ol start=\"2\">\n<li><p>列出當前使用者資料設定</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git<span class=\"built_in\"> config </span>--list</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>其實可以把git的預設編輯器改成 VSCODE<br><a href=\"https://stackoverflow.com/questions/30024353/how-to-use-visual-studio-code-as-default-editor-for-git\">https://stackoverflow.com/questions/30024353/how-to-use-visual-studio-code-as-default-editor-for-git</a></p>\n</li>\n<li><p>git 的操作指令其實也可以寫alias(縮寫)</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global alias.co checkout</span><br><span class=\"line\">&#x2F;&#x2F;把checkout指令改成co</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global alias.l &quot;log--oneline--graph&quot;</span><br><span class=\"line\">&#x2F;&#x2F;也可以把一些比較複雜的指令改成alias</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global alias.ls &#39;log --graph --pretty&#x3D;format:&quot;%h &lt;%an&gt; %ar %s&quot;&#39;</span><br><span class=\"line\">&#x2F;&#x2F;or more complicated</span><br><span class=\"line\">&#x2F;&#x2F;把git log的格式簡化用</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"專案git初始化的流程\"><a href=\"#專案git初始化的流程\" class=\"headerlink\" title=\"專案git初始化的流程\"></a>專案git初始化的流程</h2><ol>\n<li><code>cd &lt;folder&gt;</code></li>\n<li><code>git init</code></li>\n<li></li>\n</ol>\n<p><code>git add --all</code></p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">add</span> -A stages all changes</span><br><span class=\"line\"></span><br><span class=\"line\">git <span class=\"built_in\">add</span> . stages <span class=\"built_in\">new</span> <span class=\"built_in\">files</span> <span class=\"keyword\">and</span> modifications, <span class=\"keyword\">without</span> deletions</span><br><span class=\"line\"></span><br><span class=\"line\">git <span class=\"built_in\">add</span> -u stages modifications <span class=\"keyword\">and</span> deletions, <span class=\"keyword\">without</span> <span class=\"built_in\">new</span> <span class=\"built_in\">files</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li><code>git commit -m &lt;commit log&gt;</code></li>\n</ol>\n"},{"title":"高見龍為自己學 git 學習筆記-ep2","_content":"\n\n\n\n\n\n## 關於git add的一些常識\n\n當我git add 一個檔案之後, 我如果再去修改他, 接著再commit。\n其實在這個commit，git 並不會去紀錄該檔案的改動, 因為這個檔案只是被加到暫存區而已，git沒有辦法去refer到他的歷史改動狀況。\n\n所以建議如果要git add檔案, 一律add完之後commit一次再做改動\n\n> 要commit之前一定要先add --all, 或者可以直接使用 git commit -a\n\n> 想要add 一個資料夾, 包括底下的所有child folder, 可以使用git add ., 如果是想要 add 整個專案的內容，則可以用git add --all\n\n> git commit --allowed-empty -m \"\" 這樣寫就可以產生一個空的commit點ˊ \nlog\n\n> git 可以分成 工作目錄/暫存區/儲存區\n> 用git add 把檔案從工作目錄記錄到暫存區, 用git commit 把檔案從暫存區記錄到儲存區\n\n\n\n## git log 內容有些什麼\n\n可以看到每一個commit點\n\n1. commit 的人是誰?\n2. 時間點\n3. commit log\n\n> 可以搭配 --oneline 或 --graph 來做不同模式的log顯示\n> 可以用 --author 查詢特定開發者的commit內容\n> --author=\"\" 的使用, 如果開發者有兩位以上, 可以使用 userA \\| userB\n> --grep=\"\" 的使用, 可以尋找commit log裡面有特定字串的commit點\n> -S\"\" 的使用, 可以尋找commit 點之中，改動內容含有特定字串的commit 點\n> --since=\"\" & --until=\"\" & --after=\"2019-01\"  可以顯示特定時間點區間的commit點\n> \n\n\n## git rm 是幹嘛用的? 跟一般的rm 差在哪裡?\n\ngit rm 等於 先使用一般的rm , 然後再把這個rm 的改動 用add 加到暫存區\n\n> 可以使用 --cached ，這樣會變成單純的把檔案與git 斷聯，但是不會實際刪除檔案, 這樣該檔案在做完這個動作之後就會變成 untracked了\n\n\n## git mv 改變檔名\n\n例如\n```\n\ngit mv aa.html bb.html\n```\n\n\n","source":"_posts/高見龍為自己學 git 學習筆記-ep2.md","raw":"---\ntitle: 高見龍為自己學 git 學習筆記-ep2\ncategories: \n- 心得\ntags:\n- git\n---\n\n\n\n\n\n\n## 關於git add的一些常識\n\n當我git add 一個檔案之後, 我如果再去修改他, 接著再commit。\n其實在這個commit，git 並不會去紀錄該檔案的改動, 因為這個檔案只是被加到暫存區而已，git沒有辦法去refer到他的歷史改動狀況。\n\n所以建議如果要git add檔案, 一律add完之後commit一次再做改動\n\n> 要commit之前一定要先add --all, 或者可以直接使用 git commit -a\n\n> 想要add 一個資料夾, 包括底下的所有child folder, 可以使用git add ., 如果是想要 add 整個專案的內容，則可以用git add --all\n\n> git commit --allowed-empty -m \"\" 這樣寫就可以產生一個空的commit點ˊ \nlog\n\n> git 可以分成 工作目錄/暫存區/儲存區\n> 用git add 把檔案從工作目錄記錄到暫存區, 用git commit 把檔案從暫存區記錄到儲存區\n\n\n\n## git log 內容有些什麼\n\n可以看到每一個commit點\n\n1. commit 的人是誰?\n2. 時間點\n3. commit log\n\n> 可以搭配 --oneline 或 --graph 來做不同模式的log顯示\n> 可以用 --author 查詢特定開發者的commit內容\n> --author=\"\" 的使用, 如果開發者有兩位以上, 可以使用 userA \\| userB\n> --grep=\"\" 的使用, 可以尋找commit log裡面有特定字串的commit點\n> -S\"\" 的使用, 可以尋找commit 點之中，改動內容含有特定字串的commit 點\n> --since=\"\" & --until=\"\" & --after=\"2019-01\"  可以顯示特定時間點區間的commit點\n> \n\n\n## git rm 是幹嘛用的? 跟一般的rm 差在哪裡?\n\ngit rm 等於 先使用一般的rm , 然後再把這個rm 的改動 用add 加到暫存區\n\n> 可以使用 --cached ，這樣會變成單純的把檔案與git 斷聯，但是不會實際刪除檔案, 這樣該檔案在做完這個動作之後就會變成 untracked了\n\n\n## git mv 改變檔名\n\n例如\n```\n\ngit mv aa.html bb.html\n```\n\n\n","slug":"高見龍為自己學 git 學習筆記-ep2","published":1,"date":"2020-11-25T17:01:45.853Z","updated":"2020-11-25T17:01:45.854Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki5kjec3000vxdvdcenqgqoo","content":"<h2 id=\"關於git-add的一些常識\"><a href=\"#關於git-add的一些常識\" class=\"headerlink\" title=\"關於git add的一些常識\"></a>關於git add的一些常識</h2><p>當我git add 一個檔案之後, 我如果再去修改他, 接著再commit。<br>其實在這個commit，git 並不會去紀錄該檔案的改動, 因為這個檔案只是被加到暫存區而已，git沒有辦法去refer到他的歷史改動狀況。</p>\n<p>所以建議如果要git add檔案, 一律add完之後commit一次再做改動</p>\n<blockquote>\n<p>要commit之前一定要先add –all, 或者可以直接使用 git commit -a</p>\n</blockquote>\n<blockquote>\n<p>想要add 一個資料夾, 包括底下的所有child folder, 可以使用git add ., 如果是想要 add 整個專案的內容，則可以用git add –all</p>\n</blockquote>\n<blockquote>\n<p>git commit –allowed-empty -m “” 這樣寫就可以產生一個空的commit點ˊ<br>log</p>\n</blockquote>\n<blockquote>\n<p>git 可以分成 工作目錄/暫存區/儲存區<br>用git add 把檔案從工作目錄記錄到暫存區, 用git commit 把檔案從暫存區記錄到儲存區</p>\n</blockquote>\n<h2 id=\"git-log-內容有些什麼\"><a href=\"#git-log-內容有些什麼\" class=\"headerlink\" title=\"git log 內容有些什麼\"></a>git log 內容有些什麼</h2><p>可以看到每一個commit點</p>\n<ol>\n<li>commit 的人是誰?</li>\n<li>時間點</li>\n<li>commit log</li>\n</ol>\n<blockquote>\n<p>可以搭配 –oneline 或 –graph 來做不同模式的log顯示<br>可以用 –author 查詢特定開發者的commit內容<br>–author=”” 的使用, 如果開發者有兩位以上, 可以使用 userA | userB<br>–grep=”” 的使用, 可以尋找commit log裡面有特定字串的commit點<br>-S”” 的使用, 可以尋找commit 點之中，改動內容含有特定字串的commit 點<br>–since=”” &amp; –until=”” &amp; –after=”2019-01”  可以顯示特定時間點區間的commit點</p>\n</blockquote>\n<h2 id=\"git-rm-是幹嘛用的-跟一般的rm-差在哪裡\"><a href=\"#git-rm-是幹嘛用的-跟一般的rm-差在哪裡\" class=\"headerlink\" title=\"git rm 是幹嘛用的? 跟一般的rm 差在哪裡?\"></a>git rm 是幹嘛用的? 跟一般的rm 差在哪裡?</h2><p>git rm 等於 先使用一般的rm , 然後再把這個rm 的改動 用add 加到暫存區</p>\n<blockquote>\n<p>可以使用 –cached ，這樣會變成單純的把檔案與git 斷聯，但是不會實際刪除檔案, 這樣該檔案在做完這個動作之後就會變成 untracked了</p>\n</blockquote>\n<h2 id=\"git-mv-改變檔名\"><a href=\"#git-mv-改變檔名\" class=\"headerlink\" title=\"git mv 改變檔名\"></a>git mv 改變檔名</h2><p>例如</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">git</span> <span class=\"selector-tag\">mv</span> <span class=\"selector-tag\">aa</span><span class=\"selector-class\">.html</span> <span class=\"selector-tag\">bb</span><span class=\"selector-class\">.html</span></span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{"css/variables":"","languages":{"zh-TW":{"title":{"archive":"時間線","category":"分類","tag":"標籤","schedule":"時間表"},"menu":{"home":"首頁","archives":"時間線","categories":"分類","tags":"標籤","about":"關於","search":"搜尋","schedule":"時間表","sitemap":"網站地圖","commonweal":"公益 404"},"sidebar":{"overview":"本站概要","toc":"文章目錄"},"post":{"posted":"發表於","edited":"更新於","created":"創建時間","modified":"修改時間","edit":"編輯","in":"分類於","read_more":"閱讀全文","untitled":"未命名","sticky":"置頂文","views":"閱讀次數","related_posts":"相關文章","copyright":{"author":"作者","link":"文章連結","post_author":"Written by","post_link":"This article originally appeared on","license_title":"版權聲明","license_content":"本網誌所有文章除特別聲明外，均採用 %s 許可協議。轉載請註明出處！"}},"footer":{"powered":"","total_views":"總瀏覽次數","total_visitors":"訪客總數"},"counter":{"tag_cloud":{"zero":"目前還沒有任何標籤","one":"目前共有 1 個標籤","other":"目前共有 %d 個標籤"},"categories":{"zero":"目前還沒有任何分類","one":"目前共有 1 個分類","other":"目前共有 %d 個分類"},"archive_posts":{"zero":"目前還沒有任何文章。","one":"目前共有 1 篇文章。","other":"目前共有 %d 篇文章。"}},"state":{"posts":"文章","tags":"標籤","categories":"分類"},"search":{"placeholder":"搜尋...","empty":"We didn't find any results for the search: %s","hits_time":"%s results found in %s ms","hits":"%s results found"},"cheers":{"um":"嗯..","ok":"還不錯","nice":"好","good":"很好","great":"非常好","excellent":"棒棒Der"},"keep_on":"繼續努力。","symbol":{"comma":"，","period":"。","colon":"："},"reward":{"donate":"捐贈","wechatpay":"微信支付","alipay":"支付寶","paypal":"貝寶","bitcoin":"比特幣"},"follow_me":{"welcome":"歡迎關注我的其它站點"},"accessibility":{"nav_toggle":"切換導航欄","prev_page":"上一頁","next_page":"下一頁"},"symbols_count_time":{"count":"文章字數","count_total":"總字數","time":"所需閱讀時間","time_total":"所需總閱讀時間","time_minutes":"分鐘"}}},"css/mixins":"","css/styles":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","template/head":"<script src=\"//js/tool/canvas-fx-base.js\"></script>\n\n<script src=\"//js/ripple-logo.js\"></script>\n<script src=\"//js/silk-wave.js\"></script>\n\n<style>\n  @font-face {\n  font-family: \"Roboto\";\n  src: url(//font/Roboto.ttf) format(\"truetype\");\n}\n</style>","css/styl-plugin/grid-post-layout/main":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","css/styl-plugin/grid-post-layout/mixins":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n","css/styl-plugin/grid-post-layout/variables":""}},"excerpt":"","more":"<h2 id=\"關於git-add的一些常識\"><a href=\"#關於git-add的一些常識\" class=\"headerlink\" title=\"關於git add的一些常識\"></a>關於git add的一些常識</h2><p>當我git add 一個檔案之後, 我如果再去修改他, 接著再commit。<br>其實在這個commit，git 並不會去紀錄該檔案的改動, 因為這個檔案只是被加到暫存區而已，git沒有辦法去refer到他的歷史改動狀況。</p>\n<p>所以建議如果要git add檔案, 一律add完之後commit一次再做改動</p>\n<blockquote>\n<p>要commit之前一定要先add –all, 或者可以直接使用 git commit -a</p>\n</blockquote>\n<blockquote>\n<p>想要add 一個資料夾, 包括底下的所有child folder, 可以使用git add ., 如果是想要 add 整個專案的內容，則可以用git add –all</p>\n</blockquote>\n<blockquote>\n<p>git commit –allowed-empty -m “” 這樣寫就可以產生一個空的commit點ˊ<br>log</p>\n</blockquote>\n<blockquote>\n<p>git 可以分成 工作目錄/暫存區/儲存區<br>用git add 把檔案從工作目錄記錄到暫存區, 用git commit 把檔案從暫存區記錄到儲存區</p>\n</blockquote>\n<h2 id=\"git-log-內容有些什麼\"><a href=\"#git-log-內容有些什麼\" class=\"headerlink\" title=\"git log 內容有些什麼\"></a>git log 內容有些什麼</h2><p>可以看到每一個commit點</p>\n<ol>\n<li>commit 的人是誰?</li>\n<li>時間點</li>\n<li>commit log</li>\n</ol>\n<blockquote>\n<p>可以搭配 –oneline 或 –graph 來做不同模式的log顯示<br>可以用 –author 查詢特定開發者的commit內容<br>–author=”” 的使用, 如果開發者有兩位以上, 可以使用 userA | userB<br>–grep=”” 的使用, 可以尋找commit log裡面有特定字串的commit點<br>-S”” 的使用, 可以尋找commit 點之中，改動內容含有特定字串的commit 點<br>–since=”” &amp; –until=”” &amp; –after=”2019-01”  可以顯示特定時間點區間的commit點</p>\n</blockquote>\n<h2 id=\"git-rm-是幹嘛用的-跟一般的rm-差在哪裡\"><a href=\"#git-rm-是幹嘛用的-跟一般的rm-差在哪裡\" class=\"headerlink\" title=\"git rm 是幹嘛用的? 跟一般的rm 差在哪裡?\"></a>git rm 是幹嘛用的? 跟一般的rm 差在哪裡?</h2><p>git rm 等於 先使用一般的rm , 然後再把這個rm 的改動 用add 加到暫存區</p>\n<blockquote>\n<p>可以使用 –cached ，這樣會變成單純的把檔案與git 斷聯，但是不會實際刪除檔案, 這樣該檔案在做完這個動作之後就會變成 untracked了</p>\n</blockquote>\n<h2 id=\"git-mv-改變檔名\"><a href=\"#git-mv-改變檔名\" class=\"headerlink\" title=\"git mv 改變檔名\"></a>git mv 改變檔名</h2><p>例如</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">git</span> <span class=\"selector-tag\">mv</span> <span class=\"selector-tag\">aa</span><span class=\"selector-class\">.html</span> <span class=\"selector-tag\">bb</span><span class=\"selector-class\">.html</span></span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"高見龍為自己學 git 學習筆記-ep3","_content":"\n## git clone專案的方法\n\n說到clone專案(這邊以github為例), 一般狀況下有下面幾種比較常見的狀況\n\n### 作法一(遠端git倉庫直接clone到本地)\n\n  1. 首先第一步當然是直接在遠端倉庫的網頁(例如github的repo頁面)先開一個repo\n  2. 再來打開自己電腦的command line(或是也可以使用Vscode等IDE自帶的終端), 利用bash指令去把當前資料夾位置移到想要存放本地repo資料夾的地方\n  3. 然後就直接輸入`git clone <遠端repo位址>`\n  4. 這樣就可以創建出一個和遠端倉庫關聯的本地倉庫\n\n### 作法二(本地已經有一個裡面有檔案的資料夾, 然後在遠端也有一個裡面有東西的git倉庫,上面有master, 可能也有master以外的分支, 想要把本地的東西推到遠端)\n\n  1. 首先第一步先把本地的資料夾做git的初始化 `git init`\n  2. 再來 `git remote add <遠端資料庫的暱稱, 可以自訂> <遠端資料庫的位址>`\n  3. 上面這個動作是去為本地的這個倉庫\"標記\", 他有關聯上哪一個遠端倉庫(所以其實一個本地倉庫可以關聯上很多個遠端倉庫，但是暱稱不能重複)\n  4. 所以說如果我想要去關聯一個新的遠端倉庫(我們這邊取名為apple), 那就是`git remote add apple <apple的位址>`\n  5. 接下來因為我們這邊的狀況是本地已經有檔案, 想要推到遠端, 但遠端因為也是有東西的，所以這邊我們其實會有兩種做法，我們接著描述\n\n#### 作法二其1\n\n  1. 直接 `git fetch <指定遠端倉庫的暱稱>` 這邊以apple為例, 也就是 `git fetch apple`\n  2. 這麼做之後就可以把遠端倉庫的最新改動、所有分支與檔案下載回來, 而我們這邊因為本地倉庫是新開的，這個狀況叫做 \"unborn branch\", 是一個只有HEAD在本地的狀況(這部分以後再討論)。\n  3. 在這邊講的\"unborn branch\"的狀況下去做 fetch, 以這邊來講，就會把遠端的master下載回拉本地端，這樣就會在本地端看到一個origin/master分支, 這個就是遠端master在本地的備份, 這時候我們可以直接`git checkout master`或者直接把本地本來就存在的檔案做`git add -A && git commit -m 'initial msg'`, 這樣就會發現第4步的狀況。\n  4. 我們會發現本地出現了本地自己的master(關於 unborn branch的介紹可以看這一篇[stackoverflow](https://stackoverflow.com/questions/21252876/git-repository-created-without-a-master-branch) )。\n  5. 如果我們在4.的時候是透過`git checkout master`產生本地master的話，會發現本地master是會自動跟遠端的備份(origin/master)同步好的, 而且遠端master也會同時被視為上游分支(上游分支的解釋可以看第7步)，這樣就可以直接跳過第6步進階到第7步。\n  6. 但是如果我們在4的時候是透過`git add -A && git commit -m 'initial msg'`去走到第5步，則會發現本地master只有原本就存在本地的檔案，這時候如果用的IDE是 vscode, 如過利用左下角的分支切換功能, 去切到apple/master , 就會發現報錯 \"Git: fatal: A branch named 'master' already exists.\"，這種狀況下我們要去執行 `git pull apple master`，然後就會發現多出了一個新的分支叫做 FETCHED_HEAD，我們接著可以進階到第7步(FETCHED_HEAD只是暫時的, 第七步結束後,FETCHED_HEAD就會消失, IDE也不會再報一樣的錯)。\n  7. `git push -u <遠端倉庫的暱稱> <想要push過去的遠端倉庫分支>` , 以這邊來講就是`git push -u apple master`\n  8. 這邊的 **-u** 代表的是去把apple master去定為這個分支的上游分支，這樣以後在這個分支上做的git push, 最後都會把改動push到apple master。\n  9. 做完最後一步之後就會發現遠端repo的網頁上master的內容已經跟本地同步了\n\n#### 作法二其2\n\n  1. 直接 `git pull <指定遠端倉庫的暱稱> <指定想要pull下來的遠端倉庫分支>`，這邊以apple上的master分支為例, 也就是 `git pull apple master`\n  2. 其實這種狀況會跟前面其一的`git add -A && git commit -m 'initial msg'`狀況類似，接著也是直接`git push -u <遠端倉庫的暱稱> <想要push過去的遠端倉庫分支>` 就完事了（當然，如果有改動要commit的記得要commit）。","source":"_posts/高見龍為自己學 git 學習筆記-ep3.md","raw":"---\ntitle: 高見龍為自己學 git 學習筆記-ep3\ncategories: \n- 心得\ntags:\n- git\n---\n\n## git clone專案的方法\n\n說到clone專案(這邊以github為例), 一般狀況下有下面幾種比較常見的狀況\n\n### 作法一(遠端git倉庫直接clone到本地)\n\n  1. 首先第一步當然是直接在遠端倉庫的網頁(例如github的repo頁面)先開一個repo\n  2. 再來打開自己電腦的command line(或是也可以使用Vscode等IDE自帶的終端), 利用bash指令去把當前資料夾位置移到想要存放本地repo資料夾的地方\n  3. 然後就直接輸入`git clone <遠端repo位址>`\n  4. 這樣就可以創建出一個和遠端倉庫關聯的本地倉庫\n\n### 作法二(本地已經有一個裡面有檔案的資料夾, 然後在遠端也有一個裡面有東西的git倉庫,上面有master, 可能也有master以外的分支, 想要把本地的東西推到遠端)\n\n  1. 首先第一步先把本地的資料夾做git的初始化 `git init`\n  2. 再來 `git remote add <遠端資料庫的暱稱, 可以自訂> <遠端資料庫的位址>`\n  3. 上面這個動作是去為本地的這個倉庫\"標記\", 他有關聯上哪一個遠端倉庫(所以其實一個本地倉庫可以關聯上很多個遠端倉庫，但是暱稱不能重複)\n  4. 所以說如果我想要去關聯一個新的遠端倉庫(我們這邊取名為apple), 那就是`git remote add apple <apple的位址>`\n  5. 接下來因為我們這邊的狀況是本地已經有檔案, 想要推到遠端, 但遠端因為也是有東西的，所以這邊我們其實會有兩種做法，我們接著描述\n\n#### 作法二其1\n\n  1. 直接 `git fetch <指定遠端倉庫的暱稱>` 這邊以apple為例, 也就是 `git fetch apple`\n  2. 這麼做之後就可以把遠端倉庫的最新改動、所有分支與檔案下載回來, 而我們這邊因為本地倉庫是新開的，這個狀況叫做 \"unborn branch\", 是一個只有HEAD在本地的狀況(這部分以後再討論)。\n  3. 在這邊講的\"unborn branch\"的狀況下去做 fetch, 以這邊來講，就會把遠端的master下載回拉本地端，這樣就會在本地端看到一個origin/master分支, 這個就是遠端master在本地的備份, 這時候我們可以直接`git checkout master`或者直接把本地本來就存在的檔案做`git add -A && git commit -m 'initial msg'`, 這樣就會發現第4步的狀況。\n  4. 我們會發現本地出現了本地自己的master(關於 unborn branch的介紹可以看這一篇[stackoverflow](https://stackoverflow.com/questions/21252876/git-repository-created-without-a-master-branch) )。\n  5. 如果我們在4.的時候是透過`git checkout master`產生本地master的話，會發現本地master是會自動跟遠端的備份(origin/master)同步好的, 而且遠端master也會同時被視為上游分支(上游分支的解釋可以看第7步)，這樣就可以直接跳過第6步進階到第7步。\n  6. 但是如果我們在4的時候是透過`git add -A && git commit -m 'initial msg'`去走到第5步，則會發現本地master只有原本就存在本地的檔案，這時候如果用的IDE是 vscode, 如過利用左下角的分支切換功能, 去切到apple/master , 就會發現報錯 \"Git: fatal: A branch named 'master' already exists.\"，這種狀況下我們要去執行 `git pull apple master`，然後就會發現多出了一個新的分支叫做 FETCHED_HEAD，我們接著可以進階到第7步(FETCHED_HEAD只是暫時的, 第七步結束後,FETCHED_HEAD就會消失, IDE也不會再報一樣的錯)。\n  7. `git push -u <遠端倉庫的暱稱> <想要push過去的遠端倉庫分支>` , 以這邊來講就是`git push -u apple master`\n  8. 這邊的 **-u** 代表的是去把apple master去定為這個分支的上游分支，這樣以後在這個分支上做的git push, 最後都會把改動push到apple master。\n  9. 做完最後一步之後就會發現遠端repo的網頁上master的內容已經跟本地同步了\n\n#### 作法二其2\n\n  1. 直接 `git pull <指定遠端倉庫的暱稱> <指定想要pull下來的遠端倉庫分支>`，這邊以apple上的master分支為例, 也就是 `git pull apple master`\n  2. 其實這種狀況會跟前面其一的`git add -A && git commit -m 'initial msg'`狀況類似，接著也是直接`git push -u <遠端倉庫的暱稱> <想要push過去的遠端倉庫分支>` 就完事了（當然，如果有改動要commit的記得要commit）。","slug":"高見龍為自己學 git 學習筆記-ep3","published":1,"date":"2020-11-25T17:01:45.854Z","updated":"2020-11-25T17:01:45.855Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki5kjec4000yxdvdc7d79i7z","content":"<h2 id=\"git-clone專案的方法\"><a href=\"#git-clone專案的方法\" class=\"headerlink\" title=\"git clone專案的方法\"></a>git clone專案的方法</h2><p>說到clone專案(這邊以github為例), 一般狀況下有下面幾種比較常見的狀況</p>\n<h3 id=\"作法一-遠端git倉庫直接clone到本地\"><a href=\"#作法一-遠端git倉庫直接clone到本地\" class=\"headerlink\" title=\"作法一(遠端git倉庫直接clone到本地)\"></a>作法一(遠端git倉庫直接clone到本地)</h3><ol>\n<li>首先第一步當然是直接在遠端倉庫的網頁(例如github的repo頁面)先開一個repo</li>\n<li>再來打開自己電腦的command line(或是也可以使用Vscode等IDE自帶的終端), 利用bash指令去把當前資料夾位置移到想要存放本地repo資料夾的地方</li>\n<li>然後就直接輸入<code>git clone &lt;遠端repo位址&gt;</code></li>\n<li>這樣就可以創建出一個和遠端倉庫關聯的本地倉庫</li>\n</ol>\n<h3 id=\"作法二-本地已經有一個裡面有檔案的資料夾-然後在遠端也有一個裡面有東西的git倉庫-上面有master-可能也有master以外的分支-想要把本地的東西推到遠端\"><a href=\"#作法二-本地已經有一個裡面有檔案的資料夾-然後在遠端也有一個裡面有東西的git倉庫-上面有master-可能也有master以外的分支-想要把本地的東西推到遠端\" class=\"headerlink\" title=\"作法二(本地已經有一個裡面有檔案的資料夾, 然後在遠端也有一個裡面有東西的git倉庫,上面有master, 可能也有master以外的分支, 想要把本地的東西推到遠端)\"></a>作法二(本地已經有一個裡面有檔案的資料夾, 然後在遠端也有一個裡面有東西的git倉庫,上面有master, 可能也有master以外的分支, 想要把本地的東西推到遠端)</h3><ol>\n<li>首先第一步先把本地的資料夾做git的初始化 <code>git init</code></li>\n<li>再來 <code>git remote add &lt;遠端資料庫的暱稱, 可以自訂&gt; &lt;遠端資料庫的位址&gt;</code></li>\n<li>上面這個動作是去為本地的這個倉庫”標記”, 他有關聯上哪一個遠端倉庫(所以其實一個本地倉庫可以關聯上很多個遠端倉庫，但是暱稱不能重複)</li>\n<li>所以說如果我想要去關聯一個新的遠端倉庫(我們這邊取名為apple), 那就是<code>git remote add apple &lt;apple的位址&gt;</code></li>\n<li>接下來因為我們這邊的狀況是本地已經有檔案, 想要推到遠端, 但遠端因為也是有東西的，所以這邊我們其實會有兩種做法，我們接著描述</li>\n</ol>\n<h4 id=\"作法二其1\"><a href=\"#作法二其1\" class=\"headerlink\" title=\"作法二其1\"></a>作法二其1</h4><ol>\n<li>直接 <code>git fetch &lt;指定遠端倉庫的暱稱&gt;</code> 這邊以apple為例, 也就是 <code>git fetch apple</code></li>\n<li>這麼做之後就可以把遠端倉庫的最新改動、所有分支與檔案下載回來, 而我們這邊因為本地倉庫是新開的，這個狀況叫做 “unborn branch”, 是一個只有HEAD在本地的狀況(這部分以後再討論)。</li>\n<li>在這邊講的”unborn branch”的狀況下去做 fetch, 以這邊來講，就會把遠端的master下載回拉本地端，這樣就會在本地端看到一個origin/master分支, 這個就是遠端master在本地的備份, 這時候我們可以直接<code>git checkout master</code>或者直接把本地本來就存在的檔案做<code>git add -A &amp;&amp; git commit -m &#39;initial msg&#39;</code>, 這樣就會發現第4步的狀況。</li>\n<li>我們會發現本地出現了本地自己的master(關於 unborn branch的介紹可以看這一篇<a href=\"https://stackoverflow.com/questions/21252876/git-repository-created-without-a-master-branch\">stackoverflow</a> )。</li>\n<li>如果我們在4.的時候是透過<code>git checkout master</code>產生本地master的話，會發現本地master是會自動跟遠端的備份(origin/master)同步好的, 而且遠端master也會同時被視為上游分支(上游分支的解釋可以看第7步)，這樣就可以直接跳過第6步進階到第7步。</li>\n<li>但是如果我們在4的時候是透過<code>git add -A &amp;&amp; git commit -m &#39;initial msg&#39;</code>去走到第5步，則會發現本地master只有原本就存在本地的檔案，這時候如果用的IDE是 vscode, 如過利用左下角的分支切換功能, 去切到apple/master , 就會發現報錯 “Git: fatal: A branch named ‘master’ already exists.”，這種狀況下我們要去執行 <code>git pull apple master</code>，然後就會發現多出了一個新的分支叫做 FETCHED_HEAD，我們接著可以進階到第7步(FETCHED_HEAD只是暫時的, 第七步結束後,FETCHED_HEAD就會消失, IDE也不會再報一樣的錯)。</li>\n<li><code>git push -u &lt;遠端倉庫的暱稱&gt; &lt;想要push過去的遠端倉庫分支&gt;</code> , 以這邊來講就是<code>git push -u apple master</code></li>\n<li>這邊的 <strong>-u</strong> 代表的是去把apple master去定為這個分支的上游分支，這樣以後在這個分支上做的git push, 最後都會把改動push到apple master。</li>\n<li>做完最後一步之後就會發現遠端repo的網頁上master的內容已經跟本地同步了</li>\n</ol>\n<h4 id=\"作法二其2\"><a href=\"#作法二其2\" class=\"headerlink\" title=\"作法二其2\"></a>作法二其2</h4><ol>\n<li>直接 <code>git pull &lt;指定遠端倉庫的暱稱&gt; &lt;指定想要pull下來的遠端倉庫分支&gt;</code>，這邊以apple上的master分支為例, 也就是 <code>git pull apple master</code></li>\n<li>其實這種狀況會跟前面其一的<code>git add -A &amp;&amp; git commit -m &#39;initial msg&#39;</code>狀況類似，接著也是直接<code>git push -u &lt;遠端倉庫的暱稱&gt; &lt;想要push過去的遠端倉庫分支&gt;</code> 就完事了（當然，如果有改動要commit的記得要commit）。</li>\n</ol>\n","site":{"data":{"css/variables":"","languages":{"zh-TW":{"title":{"archive":"時間線","category":"分類","tag":"標籤","schedule":"時間表"},"menu":{"home":"首頁","archives":"時間線","categories":"分類","tags":"標籤","about":"關於","search":"搜尋","schedule":"時間表","sitemap":"網站地圖","commonweal":"公益 404"},"sidebar":{"overview":"本站概要","toc":"文章目錄"},"post":{"posted":"發表於","edited":"更新於","created":"創建時間","modified":"修改時間","edit":"編輯","in":"分類於","read_more":"閱讀全文","untitled":"未命名","sticky":"置頂文","views":"閱讀次數","related_posts":"相關文章","copyright":{"author":"作者","link":"文章連結","post_author":"Written by","post_link":"This article originally appeared on","license_title":"版權聲明","license_content":"本網誌所有文章除特別聲明外，均採用 %s 許可協議。轉載請註明出處！"}},"footer":{"powered":"","total_views":"總瀏覽次數","total_visitors":"訪客總數"},"counter":{"tag_cloud":{"zero":"目前還沒有任何標籤","one":"目前共有 1 個標籤","other":"目前共有 %d 個標籤"},"categories":{"zero":"目前還沒有任何分類","one":"目前共有 1 個分類","other":"目前共有 %d 個分類"},"archive_posts":{"zero":"目前還沒有任何文章。","one":"目前共有 1 篇文章。","other":"目前共有 %d 篇文章。"}},"state":{"posts":"文章","tags":"標籤","categories":"分類"},"search":{"placeholder":"搜尋...","empty":"We didn't find any results for the search: %s","hits_time":"%s results found in %s ms","hits":"%s results found"},"cheers":{"um":"嗯..","ok":"還不錯","nice":"好","good":"很好","great":"非常好","excellent":"棒棒Der"},"keep_on":"繼續努力。","symbol":{"comma":"，","period":"。","colon":"："},"reward":{"donate":"捐贈","wechatpay":"微信支付","alipay":"支付寶","paypal":"貝寶","bitcoin":"比特幣"},"follow_me":{"welcome":"歡迎關注我的其它站點"},"accessibility":{"nav_toggle":"切換導航欄","prev_page":"上一頁","next_page":"下一頁"},"symbols_count_time":{"count":"文章字數","count_total":"總字數","time":"所需閱讀時間","time_total":"所需總閱讀時間","time_minutes":"分鐘"}}},"css/mixins":"","css/styles":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","template/head":"<script src=\"//js/tool/canvas-fx-base.js\"></script>\n\n<script src=\"//js/ripple-logo.js\"></script>\n<script src=\"//js/silk-wave.js\"></script>\n\n<style>\n  @font-face {\n  font-family: \"Roboto\";\n  src: url(//font/Roboto.ttf) format(\"truetype\");\n}\n</style>","css/styl-plugin/grid-post-layout/main":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","css/styl-plugin/grid-post-layout/mixins":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n","css/styl-plugin/grid-post-layout/variables":""}},"excerpt":"","more":"<h2 id=\"git-clone專案的方法\"><a href=\"#git-clone專案的方法\" class=\"headerlink\" title=\"git clone專案的方法\"></a>git clone專案的方法</h2><p>說到clone專案(這邊以github為例), 一般狀況下有下面幾種比較常見的狀況</p>\n<h3 id=\"作法一-遠端git倉庫直接clone到本地\"><a href=\"#作法一-遠端git倉庫直接clone到本地\" class=\"headerlink\" title=\"作法一(遠端git倉庫直接clone到本地)\"></a>作法一(遠端git倉庫直接clone到本地)</h3><ol>\n<li>首先第一步當然是直接在遠端倉庫的網頁(例如github的repo頁面)先開一個repo</li>\n<li>再來打開自己電腦的command line(或是也可以使用Vscode等IDE自帶的終端), 利用bash指令去把當前資料夾位置移到想要存放本地repo資料夾的地方</li>\n<li>然後就直接輸入<code>git clone &lt;遠端repo位址&gt;</code></li>\n<li>這樣就可以創建出一個和遠端倉庫關聯的本地倉庫</li>\n</ol>\n<h3 id=\"作法二-本地已經有一個裡面有檔案的資料夾-然後在遠端也有一個裡面有東西的git倉庫-上面有master-可能也有master以外的分支-想要把本地的東西推到遠端\"><a href=\"#作法二-本地已經有一個裡面有檔案的資料夾-然後在遠端也有一個裡面有東西的git倉庫-上面有master-可能也有master以外的分支-想要把本地的東西推到遠端\" class=\"headerlink\" title=\"作法二(本地已經有一個裡面有檔案的資料夾, 然後在遠端也有一個裡面有東西的git倉庫,上面有master, 可能也有master以外的分支, 想要把本地的東西推到遠端)\"></a>作法二(本地已經有一個裡面有檔案的資料夾, 然後在遠端也有一個裡面有東西的git倉庫,上面有master, 可能也有master以外的分支, 想要把本地的東西推到遠端)</h3><ol>\n<li>首先第一步先把本地的資料夾做git的初始化 <code>git init</code></li>\n<li>再來 <code>git remote add &lt;遠端資料庫的暱稱, 可以自訂&gt; &lt;遠端資料庫的位址&gt;</code></li>\n<li>上面這個動作是去為本地的這個倉庫”標記”, 他有關聯上哪一個遠端倉庫(所以其實一個本地倉庫可以關聯上很多個遠端倉庫，但是暱稱不能重複)</li>\n<li>所以說如果我想要去關聯一個新的遠端倉庫(我們這邊取名為apple), 那就是<code>git remote add apple &lt;apple的位址&gt;</code></li>\n<li>接下來因為我們這邊的狀況是本地已經有檔案, 想要推到遠端, 但遠端因為也是有東西的，所以這邊我們其實會有兩種做法，我們接著描述</li>\n</ol>\n<h4 id=\"作法二其1\"><a href=\"#作法二其1\" class=\"headerlink\" title=\"作法二其1\"></a>作法二其1</h4><ol>\n<li>直接 <code>git fetch &lt;指定遠端倉庫的暱稱&gt;</code> 這邊以apple為例, 也就是 <code>git fetch apple</code></li>\n<li>這麼做之後就可以把遠端倉庫的最新改動、所有分支與檔案下載回來, 而我們這邊因為本地倉庫是新開的，這個狀況叫做 “unborn branch”, 是一個只有HEAD在本地的狀況(這部分以後再討論)。</li>\n<li>在這邊講的”unborn branch”的狀況下去做 fetch, 以這邊來講，就會把遠端的master下載回拉本地端，這樣就會在本地端看到一個origin/master分支, 這個就是遠端master在本地的備份, 這時候我們可以直接<code>git checkout master</code>或者直接把本地本來就存在的檔案做<code>git add -A &amp;&amp; git commit -m &#39;initial msg&#39;</code>, 這樣就會發現第4步的狀況。</li>\n<li>我們會發現本地出現了本地自己的master(關於 unborn branch的介紹可以看這一篇<a href=\"https://stackoverflow.com/questions/21252876/git-repository-created-without-a-master-branch\">stackoverflow</a> )。</li>\n<li>如果我們在4.的時候是透過<code>git checkout master</code>產生本地master的話，會發現本地master是會自動跟遠端的備份(origin/master)同步好的, 而且遠端master也會同時被視為上游分支(上游分支的解釋可以看第7步)，這樣就可以直接跳過第6步進階到第7步。</li>\n<li>但是如果我們在4的時候是透過<code>git add -A &amp;&amp; git commit -m &#39;initial msg&#39;</code>去走到第5步，則會發現本地master只有原本就存在本地的檔案，這時候如果用的IDE是 vscode, 如過利用左下角的分支切換功能, 去切到apple/master , 就會發現報錯 “Git: fatal: A branch named ‘master’ already exists.”，這種狀況下我們要去執行 <code>git pull apple master</code>，然後就會發現多出了一個新的分支叫做 FETCHED_HEAD，我們接著可以進階到第7步(FETCHED_HEAD只是暫時的, 第七步結束後,FETCHED_HEAD就會消失, IDE也不會再報一樣的錯)。</li>\n<li><code>git push -u &lt;遠端倉庫的暱稱&gt; &lt;想要push過去的遠端倉庫分支&gt;</code> , 以這邊來講就是<code>git push -u apple master</code></li>\n<li>這邊的 <strong>-u</strong> 代表的是去把apple master去定為這個分支的上游分支，這樣以後在這個分支上做的git push, 最後都會把改動push到apple master。</li>\n<li>做完最後一步之後就會發現遠端repo的網頁上master的內容已經跟本地同步了</li>\n</ol>\n<h4 id=\"作法二其2\"><a href=\"#作法二其2\" class=\"headerlink\" title=\"作法二其2\"></a>作法二其2</h4><ol>\n<li>直接 <code>git pull &lt;指定遠端倉庫的暱稱&gt; &lt;指定想要pull下來的遠端倉庫分支&gt;</code>，這邊以apple上的master分支為例, 也就是 <code>git pull apple master</code></li>\n<li>其實這種狀況會跟前面其一的<code>git add -A &amp;&amp; git commit -m &#39;initial msg&#39;</code>狀況類似，接著也是直接<code>git push -u &lt;遠端倉庫的暱稱&gt; &lt;想要push過去的遠端倉庫分支&gt;</code> 就完事了（當然，如果有改動要commit的記得要commit）。</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cki5kjebs0009xdvd2ykpej5b","category_id":"cki5kjebp0004xdvdbkth2foy","_id":"cki5kjebz000ixdvdglin8a7c"},{"post_id":"cki5kjebk0001xdvdapzdgkdh","category_id":"cki5kjebp0004xdvdbkth2foy","_id":"cki5kjec0000nxdvd21nl0ttz"},{"post_id":"cki5kjebt000bxdvdgzmcg7te","category_id":"cki5kjebp0004xdvdbkth2foy","_id":"cki5kjec1000qxdvd25s196h9"},{"post_id":"cki5kjebx000fxdvdhvzf36kj","category_id":"cki5kjebp0004xdvdbkth2foy","_id":"cki5kjec3000uxdvdbr6u5sai"},{"post_id":"cki5kjebo0003xdvdar7xh90c","category_id":"cki5kjebp0004xdvdbkth2foy","_id":"cki5kjec3000wxdvd4vn9g52s"},{"post_id":"cki5kjeby000hxdvd4tp73266","category_id":"cki5kjebp0004xdvdbkth2foy","_id":"cki5kjec4000zxdvdbpe3hge1"},{"post_id":"cki5kjec0000mxdvd5x9s4wdg","category_id":"cki5kjebp0004xdvdbkth2foy","_id":"cki5kjec50011xdvd41gsdia3"},{"post_id":"cki5kjebr0007xdvdei1mg8dc","category_id":"cki5kjebp0004xdvdbkth2foy","_id":"cki5kjec50013xdvd0q981boe"},{"post_id":"cki5kjec1000pxdvdao021pec","category_id":"cki5kjebp0004xdvdbkth2foy","_id":"cki5kjec50015xdvde7p5e1cm"},{"post_id":"cki5kjec2000txdvdhce0du6f","category_id":"cki5kjebp0004xdvdbkth2foy","_id":"cki5kjec50017xdvdcsicckrl"},{"post_id":"cki5kjec3000vxdvdcenqgqoo","category_id":"cki5kjebp0004xdvdbkth2foy","_id":"cki5kjec60019xdvd92lv0ug7"},{"post_id":"cki5kjec4000yxdvdc7d79i7z","category_id":"cki5kjebp0004xdvdbkth2foy","_id":"cki5kjec6001bxdvddrjp3dta"}],"PostTag":[{"post_id":"cki5kjebs0009xdvd2ykpej5b","tag_id":"cki5kjebq0005xdvd25muhgne","_id":"cki5kjebw000exdvd2uh1anki"},{"post_id":"cki5kjebk0001xdvdapzdgkdh","tag_id":"cki5kjebq0005xdvd25muhgne","_id":"cki5kjeby000gxdvdesh8f5py"},{"post_id":"cki5kjebt000bxdvdgzmcg7te","tag_id":"cki5kjebq0005xdvd25muhgne","_id":"cki5kjebz000lxdvdar13ek2q"},{"post_id":"cki5kjebo0003xdvdar7xh90c","tag_id":"cki5kjebq0005xdvd25muhgne","_id":"cki5kjec1000oxdvdb2of3qgw"},{"post_id":"cki5kjebr0007xdvdei1mg8dc","tag_id":"cki5kjebq0005xdvd25muhgne","_id":"cki5kjec2000sxdvd37f69bsw"},{"post_id":"cki5kjebx000fxdvdhvzf36kj","tag_id":"cki5kjec2000rxdvd08i56d50","_id":"cki5kjec40010xdvd7h7o3vaa"},{"post_id":"cki5kjeby000hxdvd4tp73266","tag_id":"cki5kjec2000rxdvd08i56d50","_id":"cki5kjec50014xdvd5r7ognxb"},{"post_id":"cki5kjec0000mxdvd5x9s4wdg","tag_id":"cki5kjec2000rxdvd08i56d50","_id":"cki5kjec60018xdvd0me82c8h"},{"post_id":"cki5kjec1000pxdvdao021pec","tag_id":"cki5kjec2000rxdvd08i56d50","_id":"cki5kjec6001cxdvd65j64k68"},{"post_id":"cki5kjec2000txdvdhce0du6f","tag_id":"cki5kjec6001axdvd83zq3imb","_id":"cki5kjec6001exdvd22y50tuf"},{"post_id":"cki5kjec3000vxdvdcenqgqoo","tag_id":"cki5kjec6001axdvd83zq3imb","_id":"cki5kjec7001gxdvd3l3ids9e"},{"post_id":"cki5kjec4000yxdvdc7d79i7z","tag_id":"cki5kjec6001axdvd83zq3imb","_id":"cki5kjec7001hxdvdevflf33u"}],"Tag":[{"name":"js","_id":"cki5kjebq0005xdvd25muhgne"},{"name":"ts","_id":"cki5kjec2000rxdvd08i56d50"},{"name":"git","_id":"cki5kjec6001axdvd83zq3imb"}]}}