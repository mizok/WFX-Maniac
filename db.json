{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/font/Roboto.ttf","path":"font/Roboto.ttf","modified":1,"renderable":0},{"_id":"source/assets/images/logo-s.png","path":"assets/images/logo-s.png","modified":1,"renderable":0},{"_id":"source/assets/images/logo-x16.png","path":"assets/images/logo-x16.png","modified":1,"renderable":0},{"_id":"source/assets/images/logo-x32.png","path":"assets/images/logo-x32.png","modified":1,"renderable":0},{"_id":"source/assets/images/logo.png","path":"assets/images/logo.png","modified":1,"renderable":0},{"_id":"source/assets/images/logo.svg","path":"assets/images/logo.svg","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schedule.js","path":"js/schedule.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_data/css/variables.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1606323705829},{"_id":"source/_posts/2D渲染環境基礎篇 I -  成為Canvas Ninja ~ 理解2D渲染的精髓.md","hash":"5a99052a787dcd88b68cd98028cd7764376f7ed4","modified":1631639712897},{"_id":"source/_data/languages.yml","hash":"7bfe2d25966665ec5d112126422df3baf0456d0d","modified":1606323705830},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1604835201565},{"_id":"source/.DS_Store","hash":"6ff9cf3e90764a628d6afdafc82d579f1f49561c","modified":1631200927386},{"_id":"source/_posts/2D渲染環境基礎篇 II -  成為Canvas Ninja ~ 理解2D渲染的精髓.md","hash":"88e33314d972bf9fbba95f3d48b31575cdafddfc","modified":1632028123585},{"_id":"source/_posts/2D渲染環境基礎篇 II [補充篇] -  成為Canvas Ninja ~ 理解2D渲染的精髓.md","hash":"cbc5c4a6a3c68cf10491a466b3c3d77f8ddc0bce","modified":1632198116623},{"_id":"source/_posts/2D渲染環境基礎篇 III[ 變形與陣列運算 ]  -  成為Canvas Ninja ~ 理解2D渲染的精髓.md","hash":"beef8b6ff9361f6a3e29c4ccb4c6312bf8b59148","modified":1632218917736},{"_id":"source/_posts/2D渲染環境基礎篇 V [Canvas動畫概論] -  成為Canvas Ninja ~ 理解2D渲染的精髓.md","hash":"dc593bf1b2ad923b758e2507bc2e6a7e4e09ff68","modified":1632408441295},{"_id":"source/_posts/2D渲染環境基礎篇 IV [像素操作概論] -  成為Canvas Ninja ~ 理解2D渲染的精髓.md","hash":"f23c0a82dd8e8d602e1c7cbe7f5fa537488bcc18","modified":1632329883734},{"_id":"source/_posts/Canvas 動畫概論 -  成為Canvas Ninja - 理解2D渲染的精髓.md","hash":"51cb8a8da110e9d994ac39d984ee2c8ea69a836a","modified":1631639991358},{"_id":"source/_posts/Canvas 與使用者互動 -  成為Canvas Ninja - 理解2D渲染的精髓.md","hash":"9e448e220bef7ebb2729cc5a6f05d9bc550b6a8f","modified":1631640038888},{"_id":"source/_posts/Canvas進階技巧 I - 成為Canvas Ninja ~ 理解2D渲染的精髓.md","hash":"224757c03eacfcc1de286c3a36427a87fb4684e9","modified":1631640142348},{"_id":"source/_posts/Canvas基礎概論 II  - 成為Canvas Ninja ~ 理解2D渲染的精髓.md","hash":"44ebd90d2a49f8611c53e93349a8d6bd444d5e2a","modified":1631639733471},{"_id":"source/_posts/Canvas基礎概論 I  - 成為Canvas Ninja ~ 理解2D渲染的精髓 .md","hash":"69d2a0f90b281d09f165a648a1ea030c1794a437","modified":1631639725870},{"_id":"source/_posts/ES5_ES6學習筆記-ep1.md","hash":"cdc953bdc6f5ab6898efe0dc1966ff2af72c58ad","modified":1607802720887},{"_id":"source/_posts/ES5_ES6學習筆記-ep2.md","hash":"84e8afb254ec8f0868936757f6fca590e52a14b5","modified":1607802724913},{"_id":"source/_posts/ES5_ES6學習筆記-ep3.md","hash":"0621824aa499c6ed3371d95ee18546bd60675acc","modified":1607802728504},{"_id":"source/_posts/TYPESCRIPT學習筆記-ep1.md","hash":"201818b785ae48c195b0948b0f2539da6e3f9d71","modified":1607802771902},{"_id":"source/_posts/ES6學習筆記-Proxy 用途_介紹_使用情境.md","hash":"43ae456dd8acd786f6b41e72eb290e667ca0eec9","modified":1607802733428},{"_id":"source/_posts/Proxy 的功用_實用的點.md","hash":"a2404bbaf37740c8cfde1d5bc694d2e3965a698b","modified":1607802736235},{"_id":"source/_posts/TYPESCRIPT學習筆記-ep2.5.md","hash":"3121cae9906cd9debf26ae9e284ca907e7f16061","modified":1607802774910},{"_id":"source/_posts/TYPESCRIPT學習筆記-ep2.md","hash":"40be2de6959b70c9485f51c61a108032c07465e1","modified":1607802777837},{"_id":"source/_posts/TYPESCRIPT學習筆記-ep3.md","hash":"a806f0fd0618d7f256ff01cab844bb1a5f9f6061","modified":1607802780423},{"_id":"source/_posts/rxjs 學習筆記 - ep1.md","hash":"954a2b6d51a33c822ef2073f5d4844cb4cfc01ff","modified":1607853696027},{"_id":"source/_posts/rxjs 學習筆記 - ep2.md","hash":"951dab1ada318f39a1039a8057714e1303e5557c","modified":1607916584895},{"_id":"source/_posts/序言 - 成為Canvas Ninja ～ 理解2D渲染的精髓.md","hash":"ecdd4c68a465927fa78fb0b63466bcf0800bf06b","modified":1631636763245},{"_id":"source/_posts/高見龍為自己學 git 學習筆記-ep1.md","hash":"767831c717f52f07359b0236dba84852cda97d32","modified":1607802861494},{"_id":"source/_posts/高見龍為自己學 git 學習筆記-ep2.md","hash":"051c08bb1313c073a924bf3c5b529694e4e70291","modified":1607802714341},{"_id":"source/categories/index.md","hash":"f13ff7f72abc343e95e44d18fb67e70e5754471c","modified":1606323705878},{"_id":"source/_posts/高見龍為自己學 git 學習筆記-ep3.md","hash":"10fbc0cc9476454c29dac769c6dc43d7f28b3243","modified":1607802718248},{"_id":"source/font/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1606675598159},{"_id":"source/js/ripple-logo.js","hash":"56a622f77bce4af40248356864bf58151475d2f3","modified":1606750364649},{"_id":"source/js/silk-wave.js","hash":"3e9db66ca7aaa376044be0f4f5797eea5634fef2","modified":1606754680556},{"_id":"source/tags/index.md","hash":"d7661bebbfddf81890cd69ac4ac22493e05cdf00","modified":1606323705884},{"_id":"source/_data/css/mixins.styl","hash":"6c410b2ffa55a03918e3a8bcb9bdbb13db2cb043","modified":1606323705825},{"_id":"source/_data/css/styles.styl","hash":"af578467f29be7cc298370a41334ba15e3ab4069","modified":1606323705829},{"_id":"source/_data/template/head.njk","hash":"db36d661845c660216c8e143c18c3a9c36c872de","modified":1606755585226},{"_id":"source/assets/images/logo-x16.png","hash":"11b339774b77bc6cf837d02b314ece9e636f0996","modified":1606323705862},{"_id":"source/assets/images/logo-x32.png","hash":"3fbe1420ad48bbf2fd8e8263a1f061cd1defd401","modified":1606323705863},{"_id":"source/assets/images/logo.png","hash":"9a88d28b1d0eab65904ed057c89d3f9cfbfae7f8","modified":1606323705864},{"_id":"source/assets/images/logo.svg","hash":"c4f96fe23214f2226a394b5c2128b89fd8653757","modified":1606323705877},{"_id":"source/_data/css/styl-plugin/grid-post-layout/main.styl","hash":"72d7b726cdce319ba443ef803f36f4aaa57ca649","modified":1606323705826},{"_id":"source/_data/css/styl-plugin/grid-post-layout/mixins.styl","hash":"7ffea75079cb849c3fd4a236b02758ea6fd8adae","modified":1630528866369},{"_id":"source/_data/css/styl-plugin/grid-post-layout/variables.styl","hash":"c29d25243a62a3d2b0416b180bb854fe4256899c","modified":1606592878870},{"_id":"source/js/tool/canvas-fx-base.js","hash":"e7058c084d2cc57fd865b6abf51230220ce167b9","modified":1606753360105},{"_id":"source/font/Roboto.ttf","hash":"4e63a47d2e8f26886bb414b9eb54b024742d20f2","modified":1322543554000},{"_id":"source/assets/images/logo-s.png","hash":"c7844876b6d3b61c7c9e954b74d62727adbe38c4","modified":1606323705857},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1606846888234},{"_id":"themes/next/.eslintrc.json","hash":"9c0762486f24a8c5e60f8b6c875e4c4728942649","modified":1606846888234},{"_id":"themes/next/.gitignore","hash":"4600f2b61b2fe0d61f824bda9aa2b5d072f0e635","modified":1606846888244},{"_id":"themes/next/.gitattributes","hash":"ec43734985e1cafd53d88ded3020103f7416123c","modified":1606846888235},{"_id":"themes/next/.npmignore","hash":"b5753ace1856548855d1f2c31c05da85781629e6","modified":1606846888244},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1606846888244},{"_id":"themes/next/_config.yml","hash":"70223963595b24111ac4b855ff9c5fb4cc865da5","modified":1606846888246},{"_id":"themes/next/_vendors.yml","hash":"e9c3342df55b72ce4e919aa227a84ca3758153e9","modified":1606846888246},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1606846888247},{"_id":"themes/next/package.json","hash":"f8462cc98af78b72fba872e725ad21f71169b4da","modified":1606846888276},{"_id":"themes/next/renovate.json","hash":"cb29cc16e61b0b8a6dac34657d76822ae29ad5aa","modified":1606846888277},{"_id":"themes/next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1606846888255},{"_id":"themes/next/languages/ar.yml","hash":"7a62243ec54196e3d1bea7364f05aded490bc234","modified":1606846888256},{"_id":"themes/next/languages/de.yml","hash":"dc448f724c7d436233e9567711a09e0d56e60e3b","modified":1606846888256},{"_id":"themes/next/languages/default.yml","hash":"48a76170d70ef7c1fac96720bc5064b43061708d","modified":1606846888256},{"_id":"themes/next/languages/en.yml","hash":"48a76170d70ef7c1fac96720bc5064b43061708d","modified":1606846888256},{"_id":"themes/next/languages/es.yml","hash":"c3506dfaa771e827ae6adb322477c6e835cd0f09","modified":1606846888257},{"_id":"themes/next/languages/fa.yml","hash":"649823297167b902455c0aec8ddebb462df71c7d","modified":1606846888257},{"_id":"themes/next/languages/fr.yml","hash":"8ddfe98e7847ee8f1eaba9119f9fbdc42d7ec120","modified":1606846888257},{"_id":"themes/next/languages/id.yml","hash":"ac018805190bc4bdc06091f5a6444e612fc700b0","modified":1606846888257},{"_id":"themes/next/languages/it.yml","hash":"82a93c32b3fcf6517441cdc73f75bc6173beb392","modified":1606846888257},{"_id":"themes/next/languages/ja.yml","hash":"fec1e1c15ad2df7ed1249173cc719ccba6d3b842","modified":1606846888257},{"_id":"themes/next/languages/ko.yml","hash":"8342df2f4190ba4ee004b70d1d6ccd341033dbe7","modified":1606846888258},{"_id":"themes/next/languages/nl.yml","hash":"0d3b56613197cb190900311507535db41daec7d4","modified":1606846888258},{"_id":"themes/next/languages/pt-BR.yml","hash":"47daeaa23c4db073e77761c9a6f62d3932af06ec","modified":1606846888258},{"_id":"themes/next/languages/pt.yml","hash":"e0e2675261e2e80f7ce7d19c945c08217b068d81","modified":1606846888258},{"_id":"themes/next/languages/ru.yml","hash":"fdf5c623890db24cb56ab5ffe0c49db3542477c8","modified":1606846888258},{"_id":"themes/next/languages/tr.yml","hash":"54de3d8d85e3c7b14b163c3d322411b7301a09b3","modified":1606846888259},{"_id":"themes/next/languages/uk.yml","hash":"1c9a0b8d8160c77cc62064207d57f460f365cae9","modified":1606846888259},{"_id":"themes/next/languages/vi.yml","hash":"1f9657b58e11db21f93eb895c90123b8f91751a7","modified":1606846888259},{"_id":"themes/next/languages/zh-CN.yml","hash":"6f7c742316c96d5b71da50fddfb060ff7ec1ea99","modified":1606846888259},{"_id":"themes/next/languages/zh-HK.yml","hash":"149fccd0afdbc8db76e372cbc73d7b5f07bb7515","modified":1606846888259},{"_id":"themes/next/languages/zh-TW.yml","hash":"d534f321ee0c235e1ebfea383eb1892bbd7d7e95","modified":1606846888260},{"_id":"themes/next/layout/_layout.njk","hash":"23a4f9b0b768b04e66e60079f107471163f2e567","modified":1606846888260},{"_id":"themes/next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1606846888275},{"_id":"themes/next/layout/category.njk","hash":"0a590e87af50e57b15fc37695c9a3bf4a97c3d92","modified":1606846888275},{"_id":"themes/next/layout/index.njk","hash":"37ec3d1bcd20b8ac1d18e0d68f990450890b46cd","modified":1606846888275},{"_id":"themes/next/layout/page.njk","hash":"60bc943fc708c3b2a19fc4fe0a15af86529d1fcd","modified":1606846888275},{"_id":"themes/next/layout/post.njk","hash":"6abeb85fb3e4c382ed4bb6049b12a807e6226e67","modified":1606846888276},{"_id":"themes/next/layout/tag.njk","hash":"6cd707f846bfd6becbcfb060c26958bb4015c31f","modified":1606846888276},{"_id":"themes/next/scripts/renderer.js","hash":"c53dbede2ad5f68d7349bc5ed8ac7157d723e987","modified":1606846888406},{"_id":"themes/next/layout/_macro/post-collapse.njk","hash":"1a30d751871dabfa80940042ddb1f77d07d830b9","modified":1606846888260},{"_id":"themes/next/test/index.js","hash":"6bf0289846538be3e9a63809af98f00e1fbdd90b","modified":1606846888555},{"_id":"themes/next/layout/_macro/post.njk","hash":"b5dd3bf172cd242b93f5461b989e97a7efc0ac89","modified":1606846888260},{"_id":"themes/next/layout/_macro/sidebar.njk","hash":"c0a843a3019f0bb8f2e734dc173028ead732b3c0","modified":1606846888260},{"_id":"themes/next/layout/_partials/comments.njk","hash":"334e8d8117a46c8c097788811322a62627952219","modified":1606846888260},{"_id":"themes/next/layout/_partials/footer.njk","hash":"d16fdaf94d66efc0242b0c26ed539017e3b4f795","modified":1606846888261},{"_id":"themes/next/layout/_partials/languages.njk","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1606846888263},{"_id":"themes/next/layout/_partials/pagination.njk","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1606846888264},{"_id":"themes/next/layout/_partials/widgets.njk","hash":"24eb5b683310810f93c1d7f68f8f70f1a29fd217","modified":1606846888266},{"_id":"themes/next/layout/_scripts/index.njk","hash":"6f0433940680c0f9db37542ca36f76e4bb1c1d50","modified":1606846888267},{"_id":"themes/next/layout/_scripts/noscript.njk","hash":"4f250d0bf80be06dd2c95c1d4c2ba2624b59cf2a","modified":1606846888267},{"_id":"themes/next/layout/_scripts/pjax.njk","hash":"28a3bcb1ce50924a5a48b0f3756ac3a8736867f1","modified":1606846888267},{"_id":"themes/next/layout/_scripts/vendors.njk","hash":"bada07da2a47ed6de6081796367b19dd9e906cfb","modified":1606846888267},{"_id":"themes/next/layout/_third-party/baidu-push.njk","hash":"8627c8c8b031ecee16c522433b66fa4d6979b8ea","modified":1606846888269},{"_id":"themes/next/layout/_third-party/index.njk","hash":"e9f4fba68662569885e5d711f4c4dba2a1cba8e8","modified":1606846888271},{"_id":"themes/next/layout/_third-party/nprogress.njk","hash":"271139c3896a6d294f46f767cb21b2e848050841","modified":1606846888272},{"_id":"themes/next/layout/_third-party/quicklink.njk","hash":"294b7f6a4fa566e369d8be0ce7b28f35b6c14563","modified":1606846888272},{"_id":"themes/next/layout/_third-party/rating.njk","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1606846888272},{"_id":"themes/next/scripts/events/index.js","hash":"89091bc943cd8b8c63b8af3d26fb0a027048e9ba","modified":1606846888278},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1606846888378},{"_id":"themes/next/scripts/filters/locals.js","hash":"fa1e558f058f93455acdd553ab1be30b26f137e4","modified":1606846888381},{"_id":"themes/next/scripts/filters/minify.js","hash":"be0574c64a38210e449c99d38a760452015060a3","modified":1606846888392},{"_id":"themes/next/scripts/filters/post.js","hash":"bac5646993153f9f6a630c9f0052bb17fa760a9c","modified":1606846888398},{"_id":"themes/next/scripts/helpers/engine.js","hash":"682a8e16b5182c123c96b04222d967407e1fd6d6","modified":1606846888400},{"_id":"themes/next/scripts/helpers/font.js","hash":"9cf01a3cf62d9b5a1a0db8145088774bf94045c8","modified":1606846888401},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"413c51fa3caa87fe95d1d8f95e6023f096515632","modified":1606846888403},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"577c510374cf9bcfa8d3a1027e42411a9324805e","modified":1606846888404},{"_id":"themes/next/scripts/helpers/next-vendors.js","hash":"afdd6a188a74c188f0dd154fac70efd4080ca262","modified":1606846888405},{"_id":"themes/next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1606846888406},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1606846888407},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1606846888408},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"79102d9e9bccff6224e77a77c4d2d363094ae3df","modified":1606846888409},{"_id":"themes/next/scripts/tags/index.js","hash":"17f9451ce1f10f78437f52218757d38d4e1591b0","modified":1606846888488},{"_id":"themes/next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1606846888489},{"_id":"themes/next/scripts/tags/link-grid.js","hash":"9e2c58d1a4d1dd84fa86144e5b4576b2fd10a37f","modified":1606846888490},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"464effc08e757ce8e1bb094707d06ad829af9d62","modified":1606846888491},{"_id":"themes/next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1606846888494},{"_id":"themes/next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1606846888496},{"_id":"themes/next/scripts/tags/tabs.js","hash":"2bf00d56b3b289a7dd27e9b5820430a2457a19f3","modified":1606846888497},{"_id":"themes/next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1606846888498},{"_id":"themes/next/source/css/_colors.styl","hash":"b37f9847d2f95632e911df670b51921a7d748068","modified":1606846888499},{"_id":"themes/next/source/css/_mixins.styl","hash":"b9c3d3087a917c94cf34ffd6621528d377af8fc9","modified":1606846888519},{"_id":"themes/next/source/css/main.styl","hash":"78ce791cc4ac95386cf6839ca72f5f7b51f86ee9","modified":1606846888523},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1606846888523},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1606846888524},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1606846888525},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1606846888525},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1606846888526},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1606846888526},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1606846888526},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1606846888526},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1606846888526},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1606846888527},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1606846888527},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1606846888528},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1606846888528},{"_id":"themes/next/source/js/algolia-search.js","hash":"7c6c966cdbe6e46d5f885606b0b9daf2ea3f757d","modified":1606846888528},{"_id":"themes/next/source/js/bookmark.js","hash":"e45e1fbb7c6d645e9c410759486216e570d02bef","modified":1606846888530},{"_id":"themes/next/source/js/local-search.js","hash":"9f4fe7bbe0f16be72d26ccb8b22bd33767f83cff","modified":1606846888531},{"_id":"themes/next/source/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1606846888542},{"_id":"themes/next/source/js/next-boot.js","hash":"c2a04055d8edec03dc74e1c45d83bd3b51467de0","modified":1606846888545},{"_id":"themes/next/source/js/schedule.js","hash":"ababd67895ce49049271601c6928fce56a1c6bbb","modified":1606846888547},{"_id":"themes/next/source/js/utils.js","hash":"294ab5a791b73c13f155df6dce7c7ac8b1e7c6b0","modified":1606846888549},{"_id":"themes/next/test/helpers/font.js","hash":"8930b1f16facc18dc6764bf6efd753ca50d3f1cb","modified":1606846888552},{"_id":"themes/next/test/helpers/index.js","hash":"63ba28afed697f7b3574436b1133b8ecc9c0c357","modified":1606846888553},{"_id":"themes/next/test/helpers/next-url.js","hash":"abc4ee5149df6172b2c36b6e85d1993ec748ddea","modified":1606846888554},{"_id":"themes/next/test/tags/button.js","hash":"48f2aa4c513e9e24bd6a811410520b74cd7ea88b","modified":1606846888556},{"_id":"themes/next/test/tags/caniuse.js","hash":"aa5e728445caeaf7c2ccd0f3fcb2cad0c93ca6d1","modified":1606846888557},{"_id":"themes/next/test/tags/center-quote.js","hash":"7667342fd1a1417eaf6a254012b84ae40e8d13dd","modified":1606846888562},{"_id":"themes/next/test/tags/index.js","hash":"e8779e54f0979b221858f8bb74dd081bb503b910","modified":1606846888564},{"_id":"themes/next/test/tags/group-pictures.js","hash":"f41640e5d0f552c0b0c4ac8876a2edb0fcf54e56","modified":1606846888563},{"_id":"themes/next/test/tags/link-grid.js","hash":"88ec69e4dc1d493d21254ed9296a2514e91f0f8b","modified":1606846888566},{"_id":"themes/next/test/tags/label.js","hash":"4ebf3698c258ca978b997acbdd0dece44069c09d","modified":1606846888565},{"_id":"themes/next/test/tags/mermaid.js","hash":"ed5b5a70ee49842501c952c4d62483f1fc8eba6b","modified":1606846888567},{"_id":"themes/next/test/tags/note.js","hash":"3dcfcd65bf9f326972ea7571fdb1444200f5d07e","modified":1606846888568},{"_id":"themes/next/test/tags/pdf.js","hash":"fd6ea5123560a90f7e7c1eface23dbe1455db25f","modified":1606846888569},{"_id":"themes/next/test/tags/tabs.js","hash":"d63722919f9da2e44d6b952801e10a2915ea9c12","modified":1606846888571},{"_id":"themes/next/test/validate/index.js","hash":"ef716c1db8e3c93c320f73b6da4010e03b4eb0ae","modified":1606846888573},{"_id":"themes/next/test/tags/video.js","hash":"b796fc4dceb20a30e730c322bb5474c0162464cc","modified":1606846888572},{"_id":"themes/next/layout/_partials/head/head-unique.njk","hash":"37bdf020591feb0cf72327c9efd755bf78a0afd6","modified":1606846888261},{"_id":"themes/next/layout/_partials/head/head.njk","hash":"52c94623e6c54ac7c710808343fa10ec5f590ddf","modified":1606846888261},{"_id":"themes/next/layout/_partials/header/brand.njk","hash":"c082a16163d1fb5d7cf858fb7522fca9d18f1ba6","modified":1606846888261},{"_id":"themes/next/layout/_partials/header/index.njk","hash":"53895b3af95667edc5bf5d7356f8a2b4fe091447","modified":1606846888262},{"_id":"themes/next/layout/_partials/header/menu-item.njk","hash":"61eec1fb84711369b9dabd1d2cae64858844c2eb","modified":1606846888262},{"_id":"themes/next/layout/_partials/header/menu.njk","hash":"c9390824b57f23b7c8a5c23a9834514123673766","modified":1606846888262},{"_id":"themes/next/layout/_partials/header/sub-menu.njk","hash":"75a158a5b54a3a76ee6590f5e0e2dd4a9f0be869","modified":1606846888262},{"_id":"themes/next/layout/_partials/page/breadcrumb.njk","hash":"edb3bb6d644b7407673c5ef3a426a244e98fcf89","modified":1606846888263},{"_id":"themes/next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1606846888263},{"_id":"themes/next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1606846888263},{"_id":"themes/next/layout/_partials/page/schedule.njk","hash":"9d650333160ad1977fe42d9770869ff1660a95fe","modified":1606846888263},{"_id":"themes/next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1606846888263},{"_id":"themes/next/layout/_partials/post/post-copyright.njk","hash":"133942922e34abae9e4de7ea5591d77c0caa4b37","modified":1606846888264},{"_id":"themes/next/layout/_partials/post/post-followme.njk","hash":"154df0bb323c332d8c25343f258ee865e5553423","modified":1606846888264},{"_id":"themes/next/layout/_partials/post/post-footer.njk","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1606846888264},{"_id":"themes/next/layout/_partials/post/post-meta.njk","hash":"1410fad73e0a08a45166e4a055ba150fd06e8636","modified":1606846888265},{"_id":"themes/next/layout/_partials/post/post-related.njk","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1606846888265},{"_id":"themes/next/layout/_partials/post/post-reward.njk","hash":"a9bb52d0537d27cfe670d80e716da6780786ab8a","modified":1606846888265},{"_id":"themes/next/layout/_partials/search/algolia-search.njk","hash":"c2ccaac9caeea1a43dc31f4f8368f8f548aab0af","modified":1606846888265},{"_id":"themes/next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1606846888266},{"_id":"themes/next/layout/_partials/search/localsearch.njk","hash":"90156f42d6e6e326ed38482d6623a0aac0352016","modified":1606846888266},{"_id":"themes/next/layout/_partials/sidebar/site-overview.njk","hash":"c419158e19805e2db614a5f5651e3e534e4a5e4e","modified":1606846888266},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.njk","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1606846888268},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.njk","hash":"ad197fd728dd7ac90f910fdf80ce848eab3ff187","modified":1606846888268},{"_id":"themes/next/layout/_third-party/analytics/growingio.njk","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1606846888268},{"_id":"themes/next/layout/_third-party/analytics/index.njk","hash":"e3717fbbe8aff5195427b878f4bcd77b8f79c4f3","modified":1606846888268},{"_id":"themes/next/layout/_third-party/chat/chatra.njk","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1606846888269},{"_id":"themes/next/layout/_third-party/chat/tidio.njk","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1606846888269},{"_id":"themes/next/layout/_third-party/comments/changyan.njk","hash":"5c2cd9b6f02bcb6248d3f18638a58e329fe8c0d1","modified":1606846888269},{"_id":"themes/next/layout/_third-party/comments/disqus.njk","hash":"cc1450d62d76e59968bdd25836694b8339207384","modified":1606846888270},{"_id":"themes/next/layout/_third-party/comments/disqusjs.njk","hash":"54eab4840443262432ec7c47e56e9859ace2a902","modified":1606846888270},{"_id":"themes/next/layout/_third-party/comments/gitalk.njk","hash":"ec0474e23ca122b34858ffb0bb8c99f241749c61","modified":1606846888270},{"_id":"themes/next/layout/_third-party/comments/isso.njk","hash":"c1bf0753fc4bc5f21d61eaffbcc915a462c7d830","modified":1606846888270},{"_id":"themes/next/layout/_third-party/comments/livere.njk","hash":"6252b0353c6a36d03c68ebec1073293442221bd1","modified":1606846888270},{"_id":"themes/next/layout/_third-party/comments/utterances.njk","hash":"0bd36093386bb64cd90756d114cee2cd9d8773c3","modified":1606846888271},{"_id":"themes/next/layout/_third-party/math/index.njk","hash":"47a982aec8830c2f9711b2aff59ff83f09deb09e","modified":1606846888271},{"_id":"themes/next/layout/_third-party/math/katex.njk","hash":"b6746dfad32cc8a46ff8f4194a7a16ca41744803","modified":1606846888271},{"_id":"themes/next/layout/_third-party/math/mathjax.njk","hash":"a8239f99b316e6c060bad8173be3a25c67138697","modified":1606846888272},{"_id":"themes/next/layout/_third-party/search/algolia-search.njk","hash":"97035261aa85c7d39c6ce1211cdefc6248c0446d","modified":1606846888272},{"_id":"themes/next/layout/_third-party/search/localsearch.njk","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1606846888273},{"_id":"themes/next/layout/_third-party/search/swiftype.njk","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1606846888273},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1606846888273},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.njk","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1606846888273},{"_id":"themes/next/layout/_third-party/statistics/firestore.njk","hash":"0ff61346dc1327054ea2c211ba6fb654cdcdfd8d","modified":1606846888274},{"_id":"themes/next/layout/_third-party/statistics/index.njk","hash":"7b68f0751b28bac0f8efdb6c0345738bf3a3c38c","modified":1606846888274},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.njk","hash":"811a3ad58c0a15550100bdc199bef8add1ad526c","modified":1606846888274},{"_id":"themes/next/layout/_third-party/tags/mermaid.njk","hash":"007da98b913a62946c03a87f8fa25b3db856caa1","modified":1606846888274},{"_id":"themes/next/layout/_third-party/tags/pdf.njk","hash":"b6241ebbb091ef18b3d06cba08ac2e04e3f67a7d","modified":1606846888275},{"_id":"themes/next/scripts/events/lib/config.js","hash":"09b58494e9d9d25542d1d218f2d0ffc4d2da9f30","modified":1606846888280},{"_id":"themes/next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":1606846888281},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"7b0ea8d28ced63977dc6539920eb044b1098adcb","modified":1606846888284},{"_id":"themes/next/scripts/events/lib/utils.js","hash":"b281be775b693f9bf32766c8f6ef703c72ac9b00","modified":1606846888285},{"_id":"themes/next/scripts/events/lib/vendors.js","hash":"f76c7e13fc4304f86260068c9d83d3477b64ee4b","modified":1606846888287},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"4c3f325d5997ff74cf6b31c82c3a52b29da2ad98","modified":1606846888289},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1606846888291},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1606846888292},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"8a6907ac004b669012536d68752ea0057ffcdc89","modified":1606846888294},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"9475e1aee89741f06b3fc5a144bf75c62137d8f2","modified":1606846888372},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"387e59cd396c62fe095b388c8ff8d4191cfbdeb9","modified":1606846888373},{"_id":"themes/next/scripts/filters/comment/isso.js","hash":"c702086871478093a3888df8b8a818f6a0889883","modified":1606846888374},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"1198cb63375a53400431c2e65e3361416cdf8eb6","modified":1606846888376},{"_id":"themes/next/scripts/filters/comment/utterances.js","hash":"a2a5a0d230191f784a6cad16b06fc25bc01d5fca","modified":1606846888377},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1606846888522},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e1fbf169b9b6a194b518240cbd06ec3c48b83d61","modified":1606846888523},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1606846888523},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c65536a128b9bc9dbe2fbb1b235a3cded2891002","modified":1606846888523},{"_id":"themes/next/source/css/_variables/base.styl","hash":"32a1b73944561655087d80f025208a84e012b3cf","modified":1606846888523},{"_id":"themes/next/source/js/schemes/muse.js","hash":"d7a6c12bb534810eb748d0ba28aff67cccf0bb3f","modified":1606846888548},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"92915560810c0311dada43ed629b8fc4ff0fc7a4","modified":1606846888500},{"_id":"themes/next/source/css/_common/components/index.styl","hash":"1c75a837faae9aa2d0a5f30d2078aa8d2ccc2552","modified":1606846888502},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d4809783ded05625675b1b4bbd9e99d7f5f7d7f9","modified":1606846888500},{"_id":"themes/next/source/css/_common/outline/index.styl","hash":"0c9f72ad98807521cbdcee7b5bbe2e884311db39","modified":1606846888512},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"ee8fb8348aa76a9b346927ba4cae5666d8d777f7","modified":1606846888508},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"6f4fe62057f4ac37f428759583a3a798d4ad22e9","modified":1606846888514},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"9f88d350df8115d26c6adbc2025a27ef9a42d7ff","modified":1606846888512},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1606846888514},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1606846888515},{"_id":"themes/next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1606846888515},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1606846888516},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"41cba8c4c5637a6b8f1b62e67673b33676f5d734","modified":1606846888516},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1606846888516},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"572a41499391677d84b16d8dbd6a996a3d5ce041","modified":1606846888518},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"4817e77577896ab5c0da434549917ee703a3f4cf","modified":1606846888519},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"fd49b521d67eaccc629f77b4e095cb7310327565","modified":1606846888519},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"5604ac1e161099a4d3e5657d53507268866dc717","modified":1606846888519},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"f6d165dae928c12bde3f271d299a93b334116433","modified":1606846888520},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"b332868d76d9f1651efd65abfc0d3c9d699b1a45","modified":1606846888520},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1606846888520},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"a57dca7008b1f4721359a2a3b420ed2eec02b0a1","modified":1606846888521},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"06080fd963c904d96c00eff098a284e337953013","modified":1606846888520},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"82a29572dd90451f75358a2ee2522b87304a0bb8","modified":1606846888520},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c706733f5196776fe2657a9bebe0a727cf8fe8e5","modified":1606846888521},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1606846888521},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1606846888521},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"be5c46b983df08b9dbac1b4749b1a101b54b6b50","modified":1606846888521},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"6eee86c8f0175d6c09e434053516cd8556f78d44","modified":1606846888522},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"c435cfd858bf82726fff2c85d384e2207bea0370","modified":1606846888522},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"6c78d4eeadc969d11efbb2f8a36f6b6bcd45e5bd","modified":1606846888522},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"78f0b6edc296a9ed5144da9f9752c0b96bebfaa5","modified":1606846888522},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1606846888522},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1606846888502},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1606846888502},{"_id":"themes/next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1606846888503},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1606846888503},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1606846888506},{"_id":"themes/next/source/css/_common/components/third-party/index.styl","hash":"b457756758f0632767e8a560e3033059cbe4a67b","modified":1606846888509},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"2896840ab8ac8ab2a7f76d18df893f290ac31625","modified":1606846888510},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"83c6588c51cd418336f4945813410a100ddfe2a4","modified":1606846888509},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"7102f8e819b62cf7d121fd063dc663fd068feaa6","modified":1606846888508},{"_id":"themes/next/source/css/_common/components/post/index.styl","hash":"b3fa752f72ca1413289b76c56fbd33a00e3d25d7","modified":1606846888506},{"_id":"themes/next/source/css/_common/components/post/post-body.styl","hash":"5d61dedb3bec1021d52894f9b379e4d0953f6a35","modified":1606846888506},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"5ecc1bccb30404b3e1a13c71e5975e1071f8081c","modified":1606846888507},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"2c534d2b2dbc932ad65d335a720a7ba9612bac04","modified":1606846888509},{"_id":"themes/next/source/css/_common/components/third-party/utterances.styl","hash":"bf88d9c585d7b00463c46352402cfea415c29493","modified":1606846888510},{"_id":"themes/next/source/css/_common/components/post/post-footer.styl","hash":"8a2e724df3d5cd14765eb951f0a9e1dba399fd35","modified":1606846888507},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"76d0dfb3a8b873a6180604ac6daecf38b6a963a2","modified":1606846888507},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1606846888507},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"8492bcd28beddf60f0cd56bd7a98de6ed9ab4098","modified":1606846888507},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1606846888508},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"b1181c5f12a70b8bf710586fcb0d7959841ee512","modified":1606846888508},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1606846888508},{"_id":"themes/next/source/css/_common/outline/footer/index.styl","hash":"f11dca93e334b68a29e792f7abe682993fab7568","modified":1606846888510},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"d6d60f02b5e9f89dbfce180b3884030898022664","modified":1606846888510},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"254e781e7b25e31a1a589c8b38dc608802f1cc6e","modified":1606846888511},{"_id":"themes/next/source/css/_common/outline/header/index.styl","hash":"f1778d2c56974b96dae429456d5c55be325c4946","modified":1606846888511},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"6d8afd8e23c40bb2b2a2edbe4eb0d2671cd81188","modified":1606846888511},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"9a47c9045e443b8d20932f9c564a3a05fa4c6b51","modified":1606846888511},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"9c8abc55c9d94d384a245013951aba5ecca2f4fe","modified":1606846888511},{"_id":"themes/next/source/css/_common/outline/sidebar/index.styl","hash":"d180871d4440090241fc988736c1f3a7efb4b1ba","modified":1606846888512},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"66782e68f1c74a7d0aecef20e2ca16bbe6b52592","modified":1606846888512},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1606846888513},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"9950c3188a28e1c63b5498b7bdcd14b12ace3e28","modified":1606846888513},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"ab715dbf2b98bfeb5e7b7c43e92e5c02496cc2ea","modified":1606846888513},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"fbdb63c6a8887d19b7137325ba7d6806f728139c","modified":1606846888513},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"f7ff85fe6c4efb8ff036fab2c3277b7d8bed69a8","modified":1606846888513},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"469855a72d2c2b63a21df8fbcb8cc41d32cb9bde","modified":1606846888513},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"432e73bc4f99322af6af1852e0ea6e674919c31a","modified":1606846888514},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"69eb1c282a8fd5dbab606cc09c34c5dc8e44e753","modified":1606846888514},{"_id":"themes/next/source/css/_common/scaffolding/highlight/index.styl","hash":"920f21dc03b28f006aef7e9d0fd444c2cd283efc","modified":1606846888515},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"15a5e273a8137550c93c8d2a60f9fcf86e04a89e","modified":1606846888516},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"83ee4993710fc8daa1c8dbfccd5d5091fd244c30","modified":1606846888515},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1606846888517},{"_id":"themes/next/source/css/_common/scaffolding/tags/index.styl","hash":"cef4e779473daa3761709958243c6b8a57bbd814","modified":1606846888517},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1606846888517},{"_id":"themes/next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"91342dc160f5f91cb89abc1d46a91ae7f6997b95","modified":1606846888517},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"f10c70fcc68d2cccf52f45e0ccacedfa066e86e7","modified":1606846888518},{"_id":"themes/next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"3c029a003e9bf747e1b9cc7c0c127f6028374876","modified":1606846888517},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1606846888518},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"50b00218e854200c4ec0573a841e226d49c45cba","modified":1606846888518},{"_id":"public/js/ripple-logo.js","hash":"56a622f77bce4af40248356864bf58151475d2f3","modified":1632408523340},{"_id":"public/js/silk-wave.js","hash":"3e9db66ca7aaa376044be0f4f5797eea5634fef2","modified":1632408523340},{"_id":"public/js/tool/canvas-fx-base.js","hash":"e7058c084d2cc57fd865b6abf51230220ce167b9","modified":1632408523340},{"_id":"public/search.xml","hash":"ef6d87a96993b54a55a01ff8fd715fbb0786b131","modified":1632408523340},{"_id":"public/categories/index.html","hash":"b2681d8594ab6b9b911f82891b7d0f036b263dff","modified":1632408523340},{"_id":"public/tags/index.html","hash":"a8683d22884099cb34b6ee570a4386d01756174d","modified":1632408523340},{"_id":"public/2021/09/15/Canvas 動畫概論 -  成為Canvas Ninja - 理解2D渲染的精髓/index.html","hash":"5bbf9b8e42e4c1a487b7bd1d7c66e17c40c91f99","modified":1632408523340},{"_id":"public/2021/09/14/Canvas進階技巧 I - 成為Canvas Ninja ~ 理解2D渲染的精髓/index.html","hash":"e5442a20d10d9ef6492a86e00b9c0b28c1057e42","modified":1632408523340},{"_id":"public/2021/09/14/Canvas 與使用者互動 -  成為Canvas Ninja - 理解2D渲染的精髓/index.html","hash":"613e17b1ed1fb920d3d7c72b23c34d201f5b61b4","modified":1632408523340},{"_id":"public/2020/12/13/rxjs 學習筆記 - ep2/index.html","hash":"1aabd6a990f6a010f0928a2c3afdcad2724d293c","modified":1632408523340},{"_id":"public/2020/12/13/rxjs 學習筆記 - ep1/index.html","hash":"78bfa0b4a7d5a6152f979ae7d020a45e0fc2097f","modified":1632408523340},{"_id":"public/archives/page/3/index.html","hash":"d2ea3730ca287969f5bf9096f956e5b919e577e5","modified":1632408523340},{"_id":"public/archives/2020/page/2/index.html","hash":"f0ce65106413be87ff3f69dd131bbd7511d78962","modified":1632408523340},{"_id":"public/archives/2020/11/page/2/index.html","hash":"39a4d82df3ae36e23afb8fff534053fc2f70bba6","modified":1632408523340},{"_id":"public/archives/2020/12/index.html","hash":"7aae0a5e4b65682d31a22b2bce50ca118db41f4b","modified":1632408523340},{"_id":"public/archives/2021/page/2/index.html","hash":"f0ef26ae6530135410861d5ef12aa8cf76e80279","modified":1632408523340},{"_id":"public/archives/2021/09/page/2/index.html","hash":"b68bb3e942cd8a509f54a46da84384da3ac41230","modified":1632408523340},{"_id":"public/categories/前端技術學習心得/page/3/index.html","hash":"0530ea567747dfef7d0dabf5470153dd3079b169","modified":1632408523340},{"_id":"public/tags/2021鐵人賽/page/2/index.html","hash":"f856c0839481af20576ab933d503878db2df7637","modified":1632408523340},{"_id":"public/tags/js/index.html","hash":"cfd406e41aa8715386a6af08cac966ca116743e4","modified":1632408523340},{"_id":"public/tags/ts/index.html","hash":"4fa0df928aabd6d609613c4650c8c2e0bd91f6fb","modified":1632408523340},{"_id":"public/tags/rxjs/index.html","hash":"73fd8711bd51048104783cd7e4178e939bb1b448","modified":1632408523340},{"_id":"public/tags/git/index.html","hash":"a86ec313643b379a7cbf21d59578ecdfcc944ad4","modified":1632408523340},{"_id":"public/2021/09/21/2D渲染環境基礎篇 IV [像素操作概論] -  成為Canvas Ninja ~ 理解2D渲染的精髓/index.html","hash":"0a51b3841f669fd805ef0cd9db4f2fb27db9e544","modified":1632408523340},{"_id":"public/2021/09/21/2D渲染環境基礎篇 V [Canvas動畫概論] -  成為Canvas Ninja ~ 理解2D渲染的精髓/index.html","hash":"e511dd45c1aac4e88dbc1e48c872716fb482b5ca","modified":1632408523340},{"_id":"public/2021/09/15/2D渲染環境基礎篇 II [補充篇] -  成為Canvas Ninja ~ 理解2D渲染的精髓/index.html","hash":"fc43f33432a0c00e786f927f5c88b18d88bff55b","modified":1632408523340},{"_id":"public/2021/09/14/2D渲染環境基礎篇 II -  成為Canvas Ninja ~ 理解2D渲染的精髓/index.html","hash":"0bef8637e8243bc1315022bba6ee611d066c4b4a","modified":1632408523340},{"_id":"public/2021/09/14/2D渲染環境基礎篇 I -  成為Canvas Ninja ~ 理解2D渲染的精髓/index.html","hash":"1a87e58a0954df40fb2b83523debe9897ceb3c1c","modified":1632408523340},{"_id":"public/2021/09/14/2D渲染環境基礎篇 III[ 變形與陣列運算 ]  -  成為Canvas Ninja ~ 理解2D渲染的精髓/index.html","hash":"199dc701dab46505cc72b8f4835a440eac49bc97","modified":1632408523340},{"_id":"public/2021/09/10/Canvas基礎概論 II  - 成為Canvas Ninja ~ 理解2D渲染的精髓/index.html","hash":"8d5092c4773a1e05a813b0b9d4cabddffb15c566","modified":1632408523340},{"_id":"public/2021/09/09/Canvas基礎概論 I  - 成為Canvas Ninja ~ 理解2D渲染的精髓 /index.html","hash":"da32042c7eec994a0d50c6e340c48fe70f945858","modified":1632408523340},{"_id":"public/2021/09/02/序言 - 成為Canvas Ninja ～ 理解2D渲染的精髓/index.html","hash":"05bb575f4e4de77e044dae918af4250fbcd29c42","modified":1632408523340},{"_id":"public/2020/11/26/高見龍為自己學 git 學習筆記-ep3/index.html","hash":"6449f2e85bc03c29e699ae87b713b88038b43c03","modified":1632408523340},{"_id":"public/2020/11/26/高見龍為自己學 git 學習筆記-ep2/index.html","hash":"0bc7db7739f46e28ab6ac4ddb820bc62bd787caa","modified":1632408523340},{"_id":"public/2020/11/26/高見龍為自己學 git 學習筆記-ep1/index.html","hash":"17525a6363c0a31f57bd3614581c57fce8fdc17f","modified":1632408523340},{"_id":"public/2020/11/26/TYPESCRIPT學習筆記-ep3/index.html","hash":"fbfde4b4566a82f2b82204d28ab0ea1c220086b5","modified":1632408523340},{"_id":"public/2020/11/26/TYPESCRIPT學習筆記-ep2/index.html","hash":"a1b11650161ade09903a552e3fc9865852e71c26","modified":1632408523340},{"_id":"public/2020/11/26/TYPESCRIPT學習筆記-ep2.5/index.html","hash":"5e3da9bd75ae6fff7f2ef5b49602183061f937a5","modified":1632408523340},{"_id":"public/2020/11/26/TYPESCRIPT學習筆記-ep1/index.html","hash":"0a0873f8b7757beade905ba6df6500a74a571eca","modified":1632408523340},{"_id":"public/2020/11/26/Proxy 的功用_實用的點/index.html","hash":"eda19142031ee2f5fb96595e581ab219c65cc306","modified":1632408523340},{"_id":"public/2020/11/26/ES6學習筆記-Proxy 用途_介紹_使用情境/index.html","hash":"4c552dc0614650c6993d35e3f6c0624f9b6f2c50","modified":1632408523340},{"_id":"public/2020/11/26/ES5_ES6學習筆記-ep3/index.html","hash":"f59b61ead16973c48b7a1101010e3388463ad20e","modified":1632408523340},{"_id":"public/2020/11/26/ES5_ES6學習筆記-ep2/index.html","hash":"8ec9601ad043cc30dac66b372a5ea44f128f5f31","modified":1632408523340},{"_id":"public/2020/11/26/ES5_ES6學習筆記-ep1/index.html","hash":"bb202908eba0b3bc4cc156bad792786b33408810","modified":1632408523340},{"_id":"public/archives/index.html","hash":"0378ee7d2f1e8d58388e1808a1599d3afb040371","modified":1632408523340},{"_id":"public/archives/page/2/index.html","hash":"0e438d42971e4888170fe51a59a638cc47c7e536","modified":1632408523340},{"_id":"public/archives/2020/index.html","hash":"b46f68018046cb88df7b5fe5d8dad3c1ac9c8017","modified":1632408523340},{"_id":"public/archives/2020/11/index.html","hash":"0f9d5ae84d4c81adc5e9114c9ac302ee978ea0c7","modified":1632408523340},{"_id":"public/archives/2021/index.html","hash":"7fb67e47d85d26c87cbd884a3844a97a0f63b117","modified":1632408523340},{"_id":"public/archives/2021/09/index.html","hash":"a4cac6f725e2a451b19e38b4c356bc38056353f3","modified":1632408523340},{"_id":"public/categories/前端技術學習心得/index.html","hash":"13decb296e87873b512322e55e8ae398f02e155c","modified":1632408523340},{"_id":"public/categories/前端技術學習心得/page/2/index.html","hash":"35719ccf9d7e9ac207f92151093aeebd70d1b6f5","modified":1632408523340},{"_id":"public/index.html","hash":"d057c7520578d381784ec2331acee6bb3b4fd45b","modified":1632408523340},{"_id":"public/page/2/index.html","hash":"aab86a5b101f4ae17f1293a5279a4f3acb5f3bbf","modified":1632408523340},{"_id":"public/page/3/index.html","hash":"de9e7ec4fdac99d72471177374b6022db932f628","modified":1632408523340},{"_id":"public/tags/2021鐵人賽/index.html","hash":"ec2543bbee9897214938990e0286af9607e5a8d2","modified":1632408523340},{"_id":"public/assets/images/logo-x16.png","hash":"11b339774b77bc6cf837d02b314ece9e636f0996","modified":1632408523340},{"_id":"public/assets/images/logo-x32.png","hash":"3fbe1420ad48bbf2fd8e8263a1f061cd1defd401","modified":1632408523340},{"_id":"public/assets/images/logo.svg","hash":"c4f96fe23214f2226a394b5c2128b89fd8653757","modified":1632408523340},{"_id":"public/assets/images/logo.png","hash":"9a88d28b1d0eab65904ed057c89d3f9cfbfae7f8","modified":1632408523340},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1632408523340},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1632408523340},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1632408523340},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1632408523340},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1632408523340},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1632408523340},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1632408523340},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1632408523340},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1632408523340},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1632408523340},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1632408523340},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1632408523340},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1632408523340},{"_id":"public/font/Roboto.ttf","hash":"4e63a47d2e8f26886bb414b9eb54b024742d20f2","modified":1632408523340},{"_id":"public/assets/images/logo-s.png","hash":"c7844876b6d3b61c7c9e954b74d62727adbe38c4","modified":1632408523340},{"_id":"public/js/algolia-search.js","hash":"7c6c966cdbe6e46d5f885606b0b9daf2ea3f757d","modified":1632408523340},{"_id":"public/js/bookmark.js","hash":"e45e1fbb7c6d645e9c410759486216e570d02bef","modified":1632408523340},{"_id":"public/js/local-search.js","hash":"9f4fe7bbe0f16be72d26ccb8b22bd33767f83cff","modified":1632408523340},{"_id":"public/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1632408523340},{"_id":"public/js/next-boot.js","hash":"c2a04055d8edec03dc74e1c45d83bd3b51467de0","modified":1632408523340},{"_id":"public/js/schedule.js","hash":"ababd67895ce49049271601c6928fce56a1c6bbb","modified":1632408523340},{"_id":"public/js/utils.js","hash":"294ab5a791b73c13f155df6dce7c7ac8b1e7c6b0","modified":1632408523340},{"_id":"public/js/schemes/muse.js","hash":"d7a6c12bb534810eb748d0ba28aff67cccf0bb3f","modified":1632408523340},{"_id":"public/css/main.css","hash":"17a2ab1fa9de4d2a37b8ce8727a93c0f53d2702b","modified":1632408523340}],"Category":[{"name":"前端技術學習心得","_id":"cktx1vyxr0004tay27owi927o"}],"Data":[{"_id":"css/variables","data":""},{"_id":"languages","data":{"zh-TW":{"title":{"archive":"時間線","category":"分類","tag":"標籤","schedule":"時間表"},"menu":{"home":"首頁","archives":"時間線","categories":"分類","tags":"標籤","about":"關於","search":"搜尋","schedule":"時間表","sitemap":"網站地圖","commonweal":"公益 404"},"sidebar":{"overview":"本站概要","toc":"文章目錄"},"post":{"posted":"發表於","edited":"更新於","created":"創建時間","modified":"修改時間","edit":"編輯","in":"分類於","read_more":"閱讀全文","untitled":"未命名","sticky":"置頂文","views":"閱讀次數","related_posts":"相關文章","copyright":{"author":"作者","link":"文章連結","post_author":"Written by","post_link":"This article originally appeared on","license_title":"版權聲明","license_content":"本網誌所有文章除特別聲明外，均採用 %s 許可協議。轉載請註明出處！"}},"footer":{"powered":"","total_views":"總瀏覽次數","total_visitors":"訪客總數"},"counter":{"tag_cloud":{"zero":"目前還沒有任何標籤","one":"目前共有 1 個標籤","other":"目前共有 %d 個標籤"},"categories":{"zero":"目前還沒有任何分類","one":"目前共有 1 個分類","other":"目前共有 %d 個分類"},"archive_posts":{"zero":"目前還沒有任何文章。","one":"目前共有 1 篇文章。","other":"目前共有 %d 篇文章。"}},"state":{"posts":"文章","tags":"標籤","categories":"分類"},"search":{"placeholder":"搜尋...","empty":"We didn't find any results for the search: %s","hits_time":"%s results found in %s ms","hits":"%s results found"},"cheers":{"um":"嗯..","ok":"還不錯","nice":"好","good":"很好","great":"非常好","excellent":"棒棒Der"},"keep_on":"繼續努力。","symbol":{"comma":"，","period":"。","colon":"："},"reward":{"donate":"捐贈","wechatpay":"微信支付","alipay":"支付寶","paypal":"貝寶","bitcoin":"比特幣"},"follow_me":{"welcome":"歡迎關注我的其它站點"},"accessibility":{"nav_toggle":"切換導航欄","prev_page":"上一頁","next_page":"下一頁"},"symbols_count_time":{"count":"文章字數","count_total":"總字數","time":"所需閱讀時間","time_total":"所需總閱讀時間","time_minutes":"分鐘"}}}},{"_id":"css/mixins","data":""},{"_id":"css/styles","data":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n"},{"_id":"template/head","data":"<script src=\"//js/tool/canvas-fx-base.js\"></script>\n\n<script src=\"//js/ripple-logo.js\"></script>\n<script src=\"//js/silk-wave.js\"></script>\n\n<style>\n  @font-face {\n  font-family: \"Roboto\";\n  src: url(//font/Roboto.ttf) format(\"truetype\");\n}\n</style>"},{"_id":"css/styl-plugin/grid-post-layout/main","data":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n"},{"_id":"css/styl-plugin/grid-post-layout/mixins","data":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n"},{"_id":"css/styl-plugin/grid-post-layout/variables","data":""}],"Page":[{"title":"categories","date":"2020-11-11T16:14:07.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-11-12 00:14:07\ntype: \"categories\"\n---\n","updated":"2020-11-25T17:01:45.878Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cktx1vyxh0000tay2dbzaa42z","content":"","site":{"data":{"css/variables":"","languages":{"zh-TW":{"title":{"archive":"時間線","category":"分類","tag":"標籤","schedule":"時間表"},"menu":{"home":"首頁","archives":"時間線","categories":"分類","tags":"標籤","about":"關於","search":"搜尋","schedule":"時間表","sitemap":"網站地圖","commonweal":"公益 404"},"sidebar":{"overview":"本站概要","toc":"文章目錄"},"post":{"posted":"發表於","edited":"更新於","created":"創建時間","modified":"修改時間","edit":"編輯","in":"分類於","read_more":"閱讀全文","untitled":"未命名","sticky":"置頂文","views":"閱讀次數","related_posts":"相關文章","copyright":{"author":"作者","link":"文章連結","post_author":"Written by","post_link":"This article originally appeared on","license_title":"版權聲明","license_content":"本網誌所有文章除特別聲明外，均採用 %s 許可協議。轉載請註明出處！"}},"footer":{"powered":"","total_views":"總瀏覽次數","total_visitors":"訪客總數"},"counter":{"tag_cloud":{"zero":"目前還沒有任何標籤","one":"目前共有 1 個標籤","other":"目前共有 %d 個標籤"},"categories":{"zero":"目前還沒有任何分類","one":"目前共有 1 個分類","other":"目前共有 %d 個分類"},"archive_posts":{"zero":"目前還沒有任何文章。","one":"目前共有 1 篇文章。","other":"目前共有 %d 篇文章。"}},"state":{"posts":"文章","tags":"標籤","categories":"分類"},"search":{"placeholder":"搜尋...","empty":"We didn't find any results for the search: %s","hits_time":"%s results found in %s ms","hits":"%s results found"},"cheers":{"um":"嗯..","ok":"還不錯","nice":"好","good":"很好","great":"非常好","excellent":"棒棒Der"},"keep_on":"繼續努力。","symbol":{"comma":"，","period":"。","colon":"："},"reward":{"donate":"捐贈","wechatpay":"微信支付","alipay":"支付寶","paypal":"貝寶","bitcoin":"比特幣"},"follow_me":{"welcome":"歡迎關注我的其它站點"},"accessibility":{"nav_toggle":"切換導航欄","prev_page":"上一頁","next_page":"下一頁"},"symbols_count_time":{"count":"文章字數","count_total":"總字數","time":"所需閱讀時間","time_total":"所需總閱讀時間","time_minutes":"分鐘"}}},"css/mixins":"","css/styles":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","template/head":"<script src=\"//js/tool/canvas-fx-base.js\"></script>\n\n<script src=\"//js/ripple-logo.js\"></script>\n<script src=\"//js/silk-wave.js\"></script>\n\n<style>\n  @font-face {\n  font-family: \"Roboto\";\n  src: url(//font/Roboto.ttf) format(\"truetype\");\n}\n</style>","css/styl-plugin/grid-post-layout/main":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","css/styl-plugin/grid-post-layout/mixins":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n","css/styl-plugin/grid-post-layout/variables":""}},"excerpt":"","more":""},{"_content":"const RIPPLE_LOGO_DEFAULT = {\n  title: 'title', // 標題\n  points: 3, // 總波紋數量\n  maxBorder: 4, // 波紋最大線寬\n  lineColor: 'white', // 波紋顏色\n  fillColor: 'rgba(255,255,255,.25)', // 波紋有填充時的顏色\n  fadeInSpan: 500, // 波紋淡入時的耗時\n  lifeSpan: 5000, // 波紋淡入到淡出至0的總耗時\n  maxSize: 750, // 波紋最大尺寸\n  minRate: 0.5, // 波紋最小尺寸倍率（取最大尺寸浮點百分比）\n  randomFill: true, // 是否隨機填充\n  radiusMetaRate: 10, // 波紋半徑擴張速度\n  speedMetaRate: 0.5, // 波紋中心點位移速度\n  globalAlpha: 0.35 // 波紋透明度\n}\n\nclass RippleLogo extends CanvasFxBase {\n  constructor(\n    ele, config\n  ) {\n    super(ele, config, RIPPLE_LOGO_DEFAULT);\n    this.pool = [];\n    this.init();\n  }\n  init() {\n    super.init();\n\n    window.addEventListener('resize', super.debounce(() => {\n      this.drawAll();\n    }, 500));\n\n    for (let i = 0; i < this.points; i++) {\n      const isFill = i % 2 === 0 && this.randomFill;\n      const newPulse = this.createPulse(isFill, this.radiusMetaRate, this.speedMetaRate);\n      this.pool.push(newPulse);\n    }\n    this.drawAll();\n  }\n  drawAll() {\n    this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n    this.pool.forEach((ele) => {\n      ele.draw();\n    });\n    cancelAnimationFrame(this.loop);\n    this.loop = window.requestAnimationFrame(() => {\n      this.pulseMeta();\n      this.drawAll();\n    });\n    this.ctx.save();\n    this.ctx.globalAlpha = 1;\n    this.drawTitle();\n    this.ctx.restore();\n  }\n  drawTitle() {\n    this.ctx.textAlign = 'center';\n    this.ctx.font = `${this.canvasWidth / 7.2}px Roboto`;\n    this.ctx.textBaseline = 'middle';\n    this.ctx.fillStyle = \"grey\";\n    this.ctx.fillText(this.title, this.canvasWidth / 2, this.canvasHeight / 2);\n  }\n  pulseMeta() {\n    this.pool.forEach((ele, i) => {\n      ele.radius += .5;\n      ele.center.x += ele.speedX;\n      ele.center.y += ele.speedY;\n      if (ele.life <= this.fadeInSpan / 16) {\n        ele.opacity += this.globalAlpha / (this.fadeInSpan / 16);\n        ele.life += 1;\n      }\n      else {\n        if (ele.opacity < 0) {\n          const isFill = i % 2 === 0 && this.randomFill;\n          const newPulse = this.createPulse(isFill, this.radiusMetaRate, this.speedMetaRate);\n          this.pool[i] = newPulse;\n        }\n        else {\n          ele.opacity -= this.globalAlpha * 16 / (this.lifeSpan);\n        }\n      }\n    });\n  }\n  createPulse(isFill, radiusMetaRate, speedMetaRate) {\n    const $this = this;\n    const pulse = {\n      center: {\n        x: $this.canvasWidth * Math.random(),\n        y: $this.canvasHeight * Math.random()\n      },\n      speedX: (Math.random() > 0.5 ? 1 : -1) * Math.random() * speedMetaRate,\n      speedY: (Math.random() > 0.5 ? 1 : -1) * Math.random() * speedMetaRate,\n      radiusMeta: (Math.random() > 0.5 ? 1 : -1) * radiusMetaRate * Math.random(),\n      borderWidth: $this.maxBorder * Math.random(),\n      lifeSpan: $this.lifeSpan,\n      life: 0,\n      opacity: 0,\n      radius: $this.maxSize * (Math.random() > $this.minRate ? Math.random() : $this.minRate) / 2,\n      draw() {\n        $this.ctx.beginPath();\n        $this.ctx.lineWidth = this.borderWidth;\n        $this.ctx.strokeStyle = $this.lineColor;\n        $this.ctx.fillStyle = $this.fillColor;\n        $this.ctx.globalAlpha = this.opacity;\n        $this.ctx.arc(this.center.x, this.center.y, this.radius, 0, Math.PI * 2, true);\n        if (isFill) {\n          $this.ctx.fill();\n        }\n        else {\n          $this.ctx.stroke();\n        }\n        $this.ctx.closePath();\n      }\n    };\n    return pulse;\n  }\n}\n\n\n","source":"js/ripple-logo.js","raw":"const RIPPLE_LOGO_DEFAULT = {\n  title: 'title', // 標題\n  points: 3, // 總波紋數量\n  maxBorder: 4, // 波紋最大線寬\n  lineColor: 'white', // 波紋顏色\n  fillColor: 'rgba(255,255,255,.25)', // 波紋有填充時的顏色\n  fadeInSpan: 500, // 波紋淡入時的耗時\n  lifeSpan: 5000, // 波紋淡入到淡出至0的總耗時\n  maxSize: 750, // 波紋最大尺寸\n  minRate: 0.5, // 波紋最小尺寸倍率（取最大尺寸浮點百分比）\n  randomFill: true, // 是否隨機填充\n  radiusMetaRate: 10, // 波紋半徑擴張速度\n  speedMetaRate: 0.5, // 波紋中心點位移速度\n  globalAlpha: 0.35 // 波紋透明度\n}\n\nclass RippleLogo extends CanvasFxBase {\n  constructor(\n    ele, config\n  ) {\n    super(ele, config, RIPPLE_LOGO_DEFAULT);\n    this.pool = [];\n    this.init();\n  }\n  init() {\n    super.init();\n\n    window.addEventListener('resize', super.debounce(() => {\n      this.drawAll();\n    }, 500));\n\n    for (let i = 0; i < this.points; i++) {\n      const isFill = i % 2 === 0 && this.randomFill;\n      const newPulse = this.createPulse(isFill, this.radiusMetaRate, this.speedMetaRate);\n      this.pool.push(newPulse);\n    }\n    this.drawAll();\n  }\n  drawAll() {\n    this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n    this.pool.forEach((ele) => {\n      ele.draw();\n    });\n    cancelAnimationFrame(this.loop);\n    this.loop = window.requestAnimationFrame(() => {\n      this.pulseMeta();\n      this.drawAll();\n    });\n    this.ctx.save();\n    this.ctx.globalAlpha = 1;\n    this.drawTitle();\n    this.ctx.restore();\n  }\n  drawTitle() {\n    this.ctx.textAlign = 'center';\n    this.ctx.font = `${this.canvasWidth / 7.2}px Roboto`;\n    this.ctx.textBaseline = 'middle';\n    this.ctx.fillStyle = \"grey\";\n    this.ctx.fillText(this.title, this.canvasWidth / 2, this.canvasHeight / 2);\n  }\n  pulseMeta() {\n    this.pool.forEach((ele, i) => {\n      ele.radius += .5;\n      ele.center.x += ele.speedX;\n      ele.center.y += ele.speedY;\n      if (ele.life <= this.fadeInSpan / 16) {\n        ele.opacity += this.globalAlpha / (this.fadeInSpan / 16);\n        ele.life += 1;\n      }\n      else {\n        if (ele.opacity < 0) {\n          const isFill = i % 2 === 0 && this.randomFill;\n          const newPulse = this.createPulse(isFill, this.radiusMetaRate, this.speedMetaRate);\n          this.pool[i] = newPulse;\n        }\n        else {\n          ele.opacity -= this.globalAlpha * 16 / (this.lifeSpan);\n        }\n      }\n    });\n  }\n  createPulse(isFill, radiusMetaRate, speedMetaRate) {\n    const $this = this;\n    const pulse = {\n      center: {\n        x: $this.canvasWidth * Math.random(),\n        y: $this.canvasHeight * Math.random()\n      },\n      speedX: (Math.random() > 0.5 ? 1 : -1) * Math.random() * speedMetaRate,\n      speedY: (Math.random() > 0.5 ? 1 : -1) * Math.random() * speedMetaRate,\n      radiusMeta: (Math.random() > 0.5 ? 1 : -1) * radiusMetaRate * Math.random(),\n      borderWidth: $this.maxBorder * Math.random(),\n      lifeSpan: $this.lifeSpan,\n      life: 0,\n      opacity: 0,\n      radius: $this.maxSize * (Math.random() > $this.minRate ? Math.random() : $this.minRate) / 2,\n      draw() {\n        $this.ctx.beginPath();\n        $this.ctx.lineWidth = this.borderWidth;\n        $this.ctx.strokeStyle = $this.lineColor;\n        $this.ctx.fillStyle = $this.fillColor;\n        $this.ctx.globalAlpha = this.opacity;\n        $this.ctx.arc(this.center.x, this.center.y, this.radius, 0, Math.PI * 2, true);\n        if (isFill) {\n          $this.ctx.fill();\n        }\n        else {\n          $this.ctx.stroke();\n        }\n        $this.ctx.closePath();\n      }\n    };\n    return pulse;\n  }\n}\n\n\n","date":"2020-11-30T15:32:44.649Z","updated":"2020-11-30T15:32:44.649Z","path":"js/ripple-logo.js","layout":"false","title":"","comments":1,"_id":"cktx1vyxn0002tay2dsqn7fx5","content":"const RIPPLE_LOGO_DEFAULT = {\n  title: 'title', // 標題\n  points: 3, // 總波紋數量\n  maxBorder: 4, // 波紋最大線寬\n  lineColor: 'white', // 波紋顏色\n  fillColor: 'rgba(255,255,255,.25)', // 波紋有填充時的顏色\n  fadeInSpan: 500, // 波紋淡入時的耗時\n  lifeSpan: 5000, // 波紋淡入到淡出至0的總耗時\n  maxSize: 750, // 波紋最大尺寸\n  minRate: 0.5, // 波紋最小尺寸倍率（取最大尺寸浮點百分比）\n  randomFill: true, // 是否隨機填充\n  radiusMetaRate: 10, // 波紋半徑擴張速度\n  speedMetaRate: 0.5, // 波紋中心點位移速度\n  globalAlpha: 0.35 // 波紋透明度\n}\n\nclass RippleLogo extends CanvasFxBase {\n  constructor(\n    ele, config\n  ) {\n    super(ele, config, RIPPLE_LOGO_DEFAULT);\n    this.pool = [];\n    this.init();\n  }\n  init() {\n    super.init();\n\n    window.addEventListener('resize', super.debounce(() => {\n      this.drawAll();\n    }, 500));\n\n    for (let i = 0; i < this.points; i++) {\n      const isFill = i % 2 === 0 && this.randomFill;\n      const newPulse = this.createPulse(isFill, this.radiusMetaRate, this.speedMetaRate);\n      this.pool.push(newPulse);\n    }\n    this.drawAll();\n  }\n  drawAll() {\n    this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n    this.pool.forEach((ele) => {\n      ele.draw();\n    });\n    cancelAnimationFrame(this.loop);\n    this.loop = window.requestAnimationFrame(() => {\n      this.pulseMeta();\n      this.drawAll();\n    });\n    this.ctx.save();\n    this.ctx.globalAlpha = 1;\n    this.drawTitle();\n    this.ctx.restore();\n  }\n  drawTitle() {\n    this.ctx.textAlign = 'center';\n    this.ctx.font = `${this.canvasWidth / 7.2}px Roboto`;\n    this.ctx.textBaseline = 'middle';\n    this.ctx.fillStyle = \"grey\";\n    this.ctx.fillText(this.title, this.canvasWidth / 2, this.canvasHeight / 2);\n  }\n  pulseMeta() {\n    this.pool.forEach((ele, i) => {\n      ele.radius += .5;\n      ele.center.x += ele.speedX;\n      ele.center.y += ele.speedY;\n      if (ele.life <= this.fadeInSpan / 16) {\n        ele.opacity += this.globalAlpha / (this.fadeInSpan / 16);\n        ele.life += 1;\n      }\n      else {\n        if (ele.opacity < 0) {\n          const isFill = i % 2 === 0 && this.randomFill;\n          const newPulse = this.createPulse(isFill, this.radiusMetaRate, this.speedMetaRate);\n          this.pool[i] = newPulse;\n        }\n        else {\n          ele.opacity -= this.globalAlpha * 16 / (this.lifeSpan);\n        }\n      }\n    });\n  }\n  createPulse(isFill, radiusMetaRate, speedMetaRate) {\n    const $this = this;\n    const pulse = {\n      center: {\n        x: $this.canvasWidth * Math.random(),\n        y: $this.canvasHeight * Math.random()\n      },\n      speedX: (Math.random() > 0.5 ? 1 : -1) * Math.random() * speedMetaRate,\n      speedY: (Math.random() > 0.5 ? 1 : -1) * Math.random() * speedMetaRate,\n      radiusMeta: (Math.random() > 0.5 ? 1 : -1) * radiusMetaRate * Math.random(),\n      borderWidth: $this.maxBorder * Math.random(),\n      lifeSpan: $this.lifeSpan,\n      life: 0,\n      opacity: 0,\n      radius: $this.maxSize * (Math.random() > $this.minRate ? Math.random() : $this.minRate) / 2,\n      draw() {\n        $this.ctx.beginPath();\n        $this.ctx.lineWidth = this.borderWidth;\n        $this.ctx.strokeStyle = $this.lineColor;\n        $this.ctx.fillStyle = $this.fillColor;\n        $this.ctx.globalAlpha = this.opacity;\n        $this.ctx.arc(this.center.x, this.center.y, this.radius, 0, Math.PI * 2, true);\n        if (isFill) {\n          $this.ctx.fill();\n        }\n        else {\n          $this.ctx.stroke();\n        }\n        $this.ctx.closePath();\n      }\n    };\n    return pulse;\n  }\n}\n\n\n","site":{"data":{"css/variables":"","languages":{"zh-TW":{"title":{"archive":"時間線","category":"分類","tag":"標籤","schedule":"時間表"},"menu":{"home":"首頁","archives":"時間線","categories":"分類","tags":"標籤","about":"關於","search":"搜尋","schedule":"時間表","sitemap":"網站地圖","commonweal":"公益 404"},"sidebar":{"overview":"本站概要","toc":"文章目錄"},"post":{"posted":"發表於","edited":"更新於","created":"創建時間","modified":"修改時間","edit":"編輯","in":"分類於","read_more":"閱讀全文","untitled":"未命名","sticky":"置頂文","views":"閱讀次數","related_posts":"相關文章","copyright":{"author":"作者","link":"文章連結","post_author":"Written by","post_link":"This article originally appeared on","license_title":"版權聲明","license_content":"本網誌所有文章除特別聲明外，均採用 %s 許可協議。轉載請註明出處！"}},"footer":{"powered":"","total_views":"總瀏覽次數","total_visitors":"訪客總數"},"counter":{"tag_cloud":{"zero":"目前還沒有任何標籤","one":"目前共有 1 個標籤","other":"目前共有 %d 個標籤"},"categories":{"zero":"目前還沒有任何分類","one":"目前共有 1 個分類","other":"目前共有 %d 個分類"},"archive_posts":{"zero":"目前還沒有任何文章。","one":"目前共有 1 篇文章。","other":"目前共有 %d 篇文章。"}},"state":{"posts":"文章","tags":"標籤","categories":"分類"},"search":{"placeholder":"搜尋...","empty":"We didn't find any results for the search: %s","hits_time":"%s results found in %s ms","hits":"%s results found"},"cheers":{"um":"嗯..","ok":"還不錯","nice":"好","good":"很好","great":"非常好","excellent":"棒棒Der"},"keep_on":"繼續努力。","symbol":{"comma":"，","period":"。","colon":"："},"reward":{"donate":"捐贈","wechatpay":"微信支付","alipay":"支付寶","paypal":"貝寶","bitcoin":"比特幣"},"follow_me":{"welcome":"歡迎關注我的其它站點"},"accessibility":{"nav_toggle":"切換導航欄","prev_page":"上一頁","next_page":"下一頁"},"symbols_count_time":{"count":"文章字數","count_total":"總字數","time":"所需閱讀時間","time_total":"所需總閱讀時間","time_minutes":"分鐘"}}},"css/mixins":"","css/styles":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","template/head":"<script src=\"//js/tool/canvas-fx-base.js\"></script>\n\n<script src=\"//js/ripple-logo.js\"></script>\n<script src=\"//js/silk-wave.js\"></script>\n\n<style>\n  @font-face {\n  font-family: \"Roboto\";\n  src: url(//font/Roboto.ttf) format(\"truetype\");\n}\n</style>","css/styl-plugin/grid-post-layout/main":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","css/styl-plugin/grid-post-layout/mixins":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n","css/styl-plugin/grid-post-layout/variables":""}},"excerpt":"","more":"const RIPPLE_LOGO_DEFAULT = {\n  title: 'title', // 標題\n  points: 3, // 總波紋數量\n  maxBorder: 4, // 波紋最大線寬\n  lineColor: 'white', // 波紋顏色\n  fillColor: 'rgba(255,255,255,.25)', // 波紋有填充時的顏色\n  fadeInSpan: 500, // 波紋淡入時的耗時\n  lifeSpan: 5000, // 波紋淡入到淡出至0的總耗時\n  maxSize: 750, // 波紋最大尺寸\n  minRate: 0.5, // 波紋最小尺寸倍率（取最大尺寸浮點百分比）\n  randomFill: true, // 是否隨機填充\n  radiusMetaRate: 10, // 波紋半徑擴張速度\n  speedMetaRate: 0.5, // 波紋中心點位移速度\n  globalAlpha: 0.35 // 波紋透明度\n}\n\nclass RippleLogo extends CanvasFxBase {\n  constructor(\n    ele, config\n  ) {\n    super(ele, config, RIPPLE_LOGO_DEFAULT);\n    this.pool = [];\n    this.init();\n  }\n  init() {\n    super.init();\n\n    window.addEventListener('resize', super.debounce(() => {\n      this.drawAll();\n    }, 500));\n\n    for (let i = 0; i < this.points; i++) {\n      const isFill = i % 2 === 0 && this.randomFill;\n      const newPulse = this.createPulse(isFill, this.radiusMetaRate, this.speedMetaRate);\n      this.pool.push(newPulse);\n    }\n    this.drawAll();\n  }\n  drawAll() {\n    this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n    this.pool.forEach((ele) => {\n      ele.draw();\n    });\n    cancelAnimationFrame(this.loop);\n    this.loop = window.requestAnimationFrame(() => {\n      this.pulseMeta();\n      this.drawAll();\n    });\n    this.ctx.save();\n    this.ctx.globalAlpha = 1;\n    this.drawTitle();\n    this.ctx.restore();\n  }\n  drawTitle() {\n    this.ctx.textAlign = 'center';\n    this.ctx.font = `${this.canvasWidth / 7.2}px Roboto`;\n    this.ctx.textBaseline = 'middle';\n    this.ctx.fillStyle = \"grey\";\n    this.ctx.fillText(this.title, this.canvasWidth / 2, this.canvasHeight / 2);\n  }\n  pulseMeta() {\n    this.pool.forEach((ele, i) => {\n      ele.radius += .5;\n      ele.center.x += ele.speedX;\n      ele.center.y += ele.speedY;\n      if (ele.life <= this.fadeInSpan / 16) {\n        ele.opacity += this.globalAlpha / (this.fadeInSpan / 16);\n        ele.life += 1;\n      }\n      else {\n        if (ele.opacity < 0) {\n          const isFill = i % 2 === 0 && this.randomFill;\n          const newPulse = this.createPulse(isFill, this.radiusMetaRate, this.speedMetaRate);\n          this.pool[i] = newPulse;\n        }\n        else {\n          ele.opacity -= this.globalAlpha * 16 / (this.lifeSpan);\n        }\n      }\n    });\n  }\n  createPulse(isFill, radiusMetaRate, speedMetaRate) {\n    const $this = this;\n    const pulse = {\n      center: {\n        x: $this.canvasWidth * Math.random(),\n        y: $this.canvasHeight * Math.random()\n      },\n      speedX: (Math.random() > 0.5 ? 1 : -1) * Math.random() * speedMetaRate,\n      speedY: (Math.random() > 0.5 ? 1 : -1) * Math.random() * speedMetaRate,\n      radiusMeta: (Math.random() > 0.5 ? 1 : -1) * radiusMetaRate * Math.random(),\n      borderWidth: $this.maxBorder * Math.random(),\n      lifeSpan: $this.lifeSpan,\n      life: 0,\n      opacity: 0,\n      radius: $this.maxSize * (Math.random() > $this.minRate ? Math.random() : $this.minRate) / 2,\n      draw() {\n        $this.ctx.beginPath();\n        $this.ctx.lineWidth = this.borderWidth;\n        $this.ctx.strokeStyle = $this.lineColor;\n        $this.ctx.fillStyle = $this.fillColor;\n        $this.ctx.globalAlpha = this.opacity;\n        $this.ctx.arc(this.center.x, this.center.y, this.radius, 0, Math.PI * 2, true);\n        if (isFill) {\n          $this.ctx.fill();\n        }\n        else {\n          $this.ctx.stroke();\n        }\n        $this.ctx.closePath();\n      }\n    };\n    return pulse;\n  }\n}\n\n\n"},{"_content":"const SILK_WAVE_DEFAULT = {\n  range: 100,\n  strokeWeight: 2,\n  strokeColor: 'white',\n  lineNumber: 10,\n  vertexGap: 20,\n  frequency: 0.005,\n  verticalNoiseParameter: 0.025,\n  horizontalNoiseParameter: 0.001,\n  globalAlpha: 0.15\n\n}\n\nclass SilkWave extends CanvasFxBase {\n  constructor(ele, config) {\n    super(ele, config, SILK_WAVE_DEFAULT);\n    this.init();\n  }\n  init() {\n    super.init();\n    requestAnimationFrame(() => {\n      this.drawAll();\n    })\n  }\n  drawAll() {\n    this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n\n    for (let i = 0; i < this.range; i++) {\n      let thisLineAlpha = super.linearInterpolation(i, 0, this.range, 0, 1); //定義單一線條顏色\n      this.ctx.strokeStyle = `rgba(255,255,255,${thisLineAlpha})`;\n      this.ctx.globalAlpha = this.globalAlpha;\n      //把水平座標分割成複數段落\n      for (let x = -(this.vertexGap / 2); x < this.space.width + (this.vertexGap / 2) + 1; x += this.vertexGap) {\n        let randomNoise = this.perlinNoise(x * this.horizontalNoiseParameter, i * this.verticalNoiseParameter, this.frameCount * this.frequency);\n        let y = super.linearInterpolation(randomNoise, 0, 1, 0, this.space.height);\n        if (x === -(this.vertexGap / 2)) {\n          this.ctx.beginPath();\n          this.ctx.moveTo(x, y);\n        }\n        else if (x < this.space.width + (this.vertexGap / 2) + 1) {\n          this.ctx.lineTo(x, y, x, y + 100)\n        }\n      }\n      this.ctx.stroke();\n    }\n    requestAnimationFrame(() => {\n      this.drawAll();\n    })\n  }\n}","source":"js/silk-wave.js","raw":"const SILK_WAVE_DEFAULT = {\n  range: 100,\n  strokeWeight: 2,\n  strokeColor: 'white',\n  lineNumber: 10,\n  vertexGap: 20,\n  frequency: 0.005,\n  verticalNoiseParameter: 0.025,\n  horizontalNoiseParameter: 0.001,\n  globalAlpha: 0.15\n\n}\n\nclass SilkWave extends CanvasFxBase {\n  constructor(ele, config) {\n    super(ele, config, SILK_WAVE_DEFAULT);\n    this.init();\n  }\n  init() {\n    super.init();\n    requestAnimationFrame(() => {\n      this.drawAll();\n    })\n  }\n  drawAll() {\n    this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n\n    for (let i = 0; i < this.range; i++) {\n      let thisLineAlpha = super.linearInterpolation(i, 0, this.range, 0, 1); //定義單一線條顏色\n      this.ctx.strokeStyle = `rgba(255,255,255,${thisLineAlpha})`;\n      this.ctx.globalAlpha = this.globalAlpha;\n      //把水平座標分割成複數段落\n      for (let x = -(this.vertexGap / 2); x < this.space.width + (this.vertexGap / 2) + 1; x += this.vertexGap) {\n        let randomNoise = this.perlinNoise(x * this.horizontalNoiseParameter, i * this.verticalNoiseParameter, this.frameCount * this.frequency);\n        let y = super.linearInterpolation(randomNoise, 0, 1, 0, this.space.height);\n        if (x === -(this.vertexGap / 2)) {\n          this.ctx.beginPath();\n          this.ctx.moveTo(x, y);\n        }\n        else if (x < this.space.width + (this.vertexGap / 2) + 1) {\n          this.ctx.lineTo(x, y, x, y + 100)\n        }\n      }\n      this.ctx.stroke();\n    }\n    requestAnimationFrame(() => {\n      this.drawAll();\n    })\n  }\n}","date":"2020-11-30T16:44:40.556Z","updated":"2020-11-30T16:44:40.556Z","path":"js/silk-wave.js","layout":"false","title":"","comments":1,"_id":"cktx1vyxs0006tay2cs4p4qkj","content":"const SILK_WAVE_DEFAULT = {\n  range: 100,\n  strokeWeight: 2,\n  strokeColor: 'white',\n  lineNumber: 10,\n  vertexGap: 20,\n  frequency: 0.005,\n  verticalNoiseParameter: 0.025,\n  horizontalNoiseParameter: 0.001,\n  globalAlpha: 0.15\n\n}\n\nclass SilkWave extends CanvasFxBase {\n  constructor(ele, config) {\n    super(ele, config, SILK_WAVE_DEFAULT);\n    this.init();\n  }\n  init() {\n    super.init();\n    requestAnimationFrame(() => {\n      this.drawAll();\n    })\n  }\n  drawAll() {\n    this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n\n    for (let i = 0; i < this.range; i++) {\n      let thisLineAlpha = super.linearInterpolation(i, 0, this.range, 0, 1); //定義單一線條顏色\n      this.ctx.strokeStyle = `rgba(255,255,255,${thisLineAlpha})`;\n      this.ctx.globalAlpha = this.globalAlpha;\n      //把水平座標分割成複數段落\n      for (let x = -(this.vertexGap / 2); x < this.space.width + (this.vertexGap / 2) + 1; x += this.vertexGap) {\n        let randomNoise = this.perlinNoise(x * this.horizontalNoiseParameter, i * this.verticalNoiseParameter, this.frameCount * this.frequency);\n        let y = super.linearInterpolation(randomNoise, 0, 1, 0, this.space.height);\n        if (x === -(this.vertexGap / 2)) {\n          this.ctx.beginPath();\n          this.ctx.moveTo(x, y);\n        }\n        else if (x < this.space.width + (this.vertexGap / 2) + 1) {\n          this.ctx.lineTo(x, y, x, y + 100)\n        }\n      }\n      this.ctx.stroke();\n    }\n    requestAnimationFrame(() => {\n      this.drawAll();\n    })\n  }\n}","site":{"data":{"css/variables":"","languages":{"zh-TW":{"title":{"archive":"時間線","category":"分類","tag":"標籤","schedule":"時間表"},"menu":{"home":"首頁","archives":"時間線","categories":"分類","tags":"標籤","about":"關於","search":"搜尋","schedule":"時間表","sitemap":"網站地圖","commonweal":"公益 404"},"sidebar":{"overview":"本站概要","toc":"文章目錄"},"post":{"posted":"發表於","edited":"更新於","created":"創建時間","modified":"修改時間","edit":"編輯","in":"分類於","read_more":"閱讀全文","untitled":"未命名","sticky":"置頂文","views":"閱讀次數","related_posts":"相關文章","copyright":{"author":"作者","link":"文章連結","post_author":"Written by","post_link":"This article originally appeared on","license_title":"版權聲明","license_content":"本網誌所有文章除特別聲明外，均採用 %s 許可協議。轉載請註明出處！"}},"footer":{"powered":"","total_views":"總瀏覽次數","total_visitors":"訪客總數"},"counter":{"tag_cloud":{"zero":"目前還沒有任何標籤","one":"目前共有 1 個標籤","other":"目前共有 %d 個標籤"},"categories":{"zero":"目前還沒有任何分類","one":"目前共有 1 個分類","other":"目前共有 %d 個分類"},"archive_posts":{"zero":"目前還沒有任何文章。","one":"目前共有 1 篇文章。","other":"目前共有 %d 篇文章。"}},"state":{"posts":"文章","tags":"標籤","categories":"分類"},"search":{"placeholder":"搜尋...","empty":"We didn't find any results for the search: %s","hits_time":"%s results found in %s ms","hits":"%s results found"},"cheers":{"um":"嗯..","ok":"還不錯","nice":"好","good":"很好","great":"非常好","excellent":"棒棒Der"},"keep_on":"繼續努力。","symbol":{"comma":"，","period":"。","colon":"："},"reward":{"donate":"捐贈","wechatpay":"微信支付","alipay":"支付寶","paypal":"貝寶","bitcoin":"比特幣"},"follow_me":{"welcome":"歡迎關注我的其它站點"},"accessibility":{"nav_toggle":"切換導航欄","prev_page":"上一頁","next_page":"下一頁"},"symbols_count_time":{"count":"文章字數","count_total":"總字數","time":"所需閱讀時間","time_total":"所需總閱讀時間","time_minutes":"分鐘"}}},"css/mixins":"","css/styles":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","template/head":"<script src=\"//js/tool/canvas-fx-base.js\"></script>\n\n<script src=\"//js/ripple-logo.js\"></script>\n<script src=\"//js/silk-wave.js\"></script>\n\n<style>\n  @font-face {\n  font-family: \"Roboto\";\n  src: url(//font/Roboto.ttf) format(\"truetype\");\n}\n</style>","css/styl-plugin/grid-post-layout/main":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","css/styl-plugin/grid-post-layout/mixins":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n","css/styl-plugin/grid-post-layout/variables":""}},"excerpt":"","more":"const SILK_WAVE_DEFAULT = {\n  range: 100,\n  strokeWeight: 2,\n  strokeColor: 'white',\n  lineNumber: 10,\n  vertexGap: 20,\n  frequency: 0.005,\n  verticalNoiseParameter: 0.025,\n  horizontalNoiseParameter: 0.001,\n  globalAlpha: 0.15\n\n}\n\nclass SilkWave extends CanvasFxBase {\n  constructor(ele, config) {\n    super(ele, config, SILK_WAVE_DEFAULT);\n    this.init();\n  }\n  init() {\n    super.init();\n    requestAnimationFrame(() => {\n      this.drawAll();\n    })\n  }\n  drawAll() {\n    this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n\n    for (let i = 0; i < this.range; i++) {\n      let thisLineAlpha = super.linearInterpolation(i, 0, this.range, 0, 1); //定義單一線條顏色\n      this.ctx.strokeStyle = `rgba(255,255,255,${thisLineAlpha})`;\n      this.ctx.globalAlpha = this.globalAlpha;\n      //把水平座標分割成複數段落\n      for (let x = -(this.vertexGap / 2); x < this.space.width + (this.vertexGap / 2) + 1; x += this.vertexGap) {\n        let randomNoise = this.perlinNoise(x * this.horizontalNoiseParameter, i * this.verticalNoiseParameter, this.frameCount * this.frequency);\n        let y = super.linearInterpolation(randomNoise, 0, 1, 0, this.space.height);\n        if (x === -(this.vertexGap / 2)) {\n          this.ctx.beginPath();\n          this.ctx.moveTo(x, y);\n        }\n        else if (x < this.space.width + (this.vertexGap / 2) + 1) {\n          this.ctx.lineTo(x, y, x, y + 100)\n        }\n      }\n      this.ctx.stroke();\n    }\n    requestAnimationFrame(() => {\n      this.drawAll();\n    })\n  }\n}"},{"title":"tags","date":"2020-11-11T16:14:19.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-11-12 00:14:19\ntype: \"tags\"\n---\n","updated":"2020-11-25T17:01:45.884Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cktx1vyxu0008tay23jpn5a62","content":"","site":{"data":{"css/variables":"","languages":{"zh-TW":{"title":{"archive":"時間線","category":"分類","tag":"標籤","schedule":"時間表"},"menu":{"home":"首頁","archives":"時間線","categories":"分類","tags":"標籤","about":"關於","search":"搜尋","schedule":"時間表","sitemap":"網站地圖","commonweal":"公益 404"},"sidebar":{"overview":"本站概要","toc":"文章目錄"},"post":{"posted":"發表於","edited":"更新於","created":"創建時間","modified":"修改時間","edit":"編輯","in":"分類於","read_more":"閱讀全文","untitled":"未命名","sticky":"置頂文","views":"閱讀次數","related_posts":"相關文章","copyright":{"author":"作者","link":"文章連結","post_author":"Written by","post_link":"This article originally appeared on","license_title":"版權聲明","license_content":"本網誌所有文章除特別聲明外，均採用 %s 許可協議。轉載請註明出處！"}},"footer":{"powered":"","total_views":"總瀏覽次數","total_visitors":"訪客總數"},"counter":{"tag_cloud":{"zero":"目前還沒有任何標籤","one":"目前共有 1 個標籤","other":"目前共有 %d 個標籤"},"categories":{"zero":"目前還沒有任何分類","one":"目前共有 1 個分類","other":"目前共有 %d 個分類"},"archive_posts":{"zero":"目前還沒有任何文章。","one":"目前共有 1 篇文章。","other":"目前共有 %d 篇文章。"}},"state":{"posts":"文章","tags":"標籤","categories":"分類"},"search":{"placeholder":"搜尋...","empty":"We didn't find any results for the search: %s","hits_time":"%s results found in %s ms","hits":"%s results found"},"cheers":{"um":"嗯..","ok":"還不錯","nice":"好","good":"很好","great":"非常好","excellent":"棒棒Der"},"keep_on":"繼續努力。","symbol":{"comma":"，","period":"。","colon":"："},"reward":{"donate":"捐贈","wechatpay":"微信支付","alipay":"支付寶","paypal":"貝寶","bitcoin":"比特幣"},"follow_me":{"welcome":"歡迎關注我的其它站點"},"accessibility":{"nav_toggle":"切換導航欄","prev_page":"上一頁","next_page":"下一頁"},"symbols_count_time":{"count":"文章字數","count_total":"總字數","time":"所需閱讀時間","time_total":"所需總閱讀時間","time_minutes":"分鐘"}}},"css/mixins":"","css/styles":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","template/head":"<script src=\"//js/tool/canvas-fx-base.js\"></script>\n\n<script src=\"//js/ripple-logo.js\"></script>\n<script src=\"//js/silk-wave.js\"></script>\n\n<style>\n  @font-face {\n  font-family: \"Roboto\";\n  src: url(//font/Roboto.ttf) format(\"truetype\");\n}\n</style>","css/styl-plugin/grid-post-layout/main":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","css/styl-plugin/grid-post-layout/mixins":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n","css/styl-plugin/grid-post-layout/variables":""}},"excerpt":"","more":""},{"_content":"class CanvasFxBase {\n  constructor(\n    ele, config, defaultConfig\n  ) {\n    config = Object.assign(defaultConfig, config);\n    this.ele = ele;\n    Object.assign(this, config);\n    this.frameCount = 0;\n    this.ctx = null;\n  }\n  init() {\n    if (this.ele.tagName !== 'CANVAS') {\n      const space = document.createElement('canvas');\n      this.ele.appendChild(space);\n      this.space = this.ele.querySelectorAll('canvas')[0];\n      this.canvasWidth = this.ele.getBoundingClientRect().width;\n      this.canvasHeight = this.ele.getBoundingClientRect().height;\n    }\n    else {\n      this.space = this.ele;\n      this.canvasWidth = this.ele.parentElement.getBoundingClientRect().width;\n      this.canvasHeight = this.ele.parentElement.getBoundingClientRect().height;\n    }\n\n    this.ctx = this.space.getContext('2d');\n    this.size();\n    const $this = this;\n    window.addEventListener('resize', $this.debounce(() => {\n      $this.size();\n    }, 500));\n    this.countframe();\n\n  }\n  countframe() {\n    let instance = this;\n    instance.frameCount += 1;\n    requestAnimationFrame(() => {\n      instance.countframe();\n    })\n  }\n  size() {\n    if (this.ele.tagName !== 'CANVAS') {\n      this.canvasWidth = this.ele.getBoundingClientRect().width;\n      this.canvasHeight = this.ele.getBoundingClientRect().height;\n      this.space.width = this.canvasWidth;\n      this.space.height = this.canvasHeight;\n    }\n    else {\n      this.canvasWidth = this.space.parentElement.getBoundingClientRect().width;\n      this.canvasHeight = this.space.parentElement.getBoundingClientRect().height;\n      this.space.width = this.canvasWidth;\n      this.space.height = this.canvasHeight;\n    }\n\n  }\n  debounce(func, delay) {\n    let timer = null;\n    const $this = this;\n    return () => {\n      const context = $this;\n      const args = arguments;\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        func.apply(context, args);\n      }, delay);\n    };\n  }\n  perlinNoise(x, y, z) {\n    const getNoiseFloat = (x, y, z) => {\n      var p = new Array(512)\n      var permutation = [151, 160, 137, 91, 90, 15,\n        131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23,\n        190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33,\n        88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166,\n        77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244,\n        102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,\n        135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123,\n        5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,\n        223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9,\n        129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228,\n        251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107,\n        49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,\n        138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180\n      ];\n      for (var i = 0; i < 256; i++)\n        p[256 + i] = p[i] = permutation[i];\n\n      var X = Math.floor(x) & 255,                  // FIND UNIT CUBE THAT\n        Y = Math.floor(y) & 255,                  // CONTAINS POINT.\n        Z = Math.floor(z) & 255;\n      x -= Math.floor(x);                                // FIND RELATIVE X,Y,Z\n      y -= Math.floor(y);                                // OF POINT IN CUBE.\n      z -= Math.floor(z);\n      var u = fade(x),                                // COMPUTE FADE CURVES\n        v = fade(y),                                // FOR EACH OF X,Y,Z.\n        w = fade(z);\n      var A = p[X] + Y, AA = p[A] + Z, AB = p[A + 1] + Z,      // HASH COORDINATES OF\n        B = p[X + 1] + Y, BA = p[B] + Z, BB = p[B + 1] + Z;      // THE 8 CUBE CORNERS,\n\n      return scale(lerp(w, lerp(v, lerp(u, grad(p[AA], x, y, z),  // AND ADD\n        grad(p[BA], x - 1, y, z)), // BLENDED\n        lerp(u, grad(p[AB], x, y - 1, z),  // RESULTS\n          grad(p[BB], x - 1, y - 1, z))),// FROM  8\n        lerp(v, lerp(u, grad(p[AA + 1], x, y, z - 1),  // CORNERS\n          grad(p[BA + 1], x - 1, y, z - 1)), // OF CUBE\n          lerp(u, grad(p[AB + 1], x, y - 1, z - 1),\n            grad(p[BB + 1], x - 1, y - 1, z - 1)))));\n    }\n    const fade = (t) => { return t * t * t * (t * (t * 6 - 15) + 10); }\n    const lerp = (t, a, b) => { return a + t * (b - a); }\n    const grad = (hash, x, y, z) => {\n      var h = hash & 15;                      // CONVERT LO 4 BITS OF HASH CODE\n      var u = h < 8 ? x : y,                 // INTO 12 GRADIENT DIRECTIONS.\n        v = h < 4 ? y : h == 12 || h == 14 ? x : z;\n      return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);\n    }\n    const scale = (n) => { return (1 + n) / 2; }\n    return getNoiseFloat(x, y, z);\n  }\n  linearInterpolation(x, min, max, virtualMin, virtualMax) {\n    return ((x - min) / (max - min)) * (virtualMax - virtualMin);\n  }\n}","source":"js/tool/canvas-fx-base.js","raw":"class CanvasFxBase {\n  constructor(\n    ele, config, defaultConfig\n  ) {\n    config = Object.assign(defaultConfig, config);\n    this.ele = ele;\n    Object.assign(this, config);\n    this.frameCount = 0;\n    this.ctx = null;\n  }\n  init() {\n    if (this.ele.tagName !== 'CANVAS') {\n      const space = document.createElement('canvas');\n      this.ele.appendChild(space);\n      this.space = this.ele.querySelectorAll('canvas')[0];\n      this.canvasWidth = this.ele.getBoundingClientRect().width;\n      this.canvasHeight = this.ele.getBoundingClientRect().height;\n    }\n    else {\n      this.space = this.ele;\n      this.canvasWidth = this.ele.parentElement.getBoundingClientRect().width;\n      this.canvasHeight = this.ele.parentElement.getBoundingClientRect().height;\n    }\n\n    this.ctx = this.space.getContext('2d');\n    this.size();\n    const $this = this;\n    window.addEventListener('resize', $this.debounce(() => {\n      $this.size();\n    }, 500));\n    this.countframe();\n\n  }\n  countframe() {\n    let instance = this;\n    instance.frameCount += 1;\n    requestAnimationFrame(() => {\n      instance.countframe();\n    })\n  }\n  size() {\n    if (this.ele.tagName !== 'CANVAS') {\n      this.canvasWidth = this.ele.getBoundingClientRect().width;\n      this.canvasHeight = this.ele.getBoundingClientRect().height;\n      this.space.width = this.canvasWidth;\n      this.space.height = this.canvasHeight;\n    }\n    else {\n      this.canvasWidth = this.space.parentElement.getBoundingClientRect().width;\n      this.canvasHeight = this.space.parentElement.getBoundingClientRect().height;\n      this.space.width = this.canvasWidth;\n      this.space.height = this.canvasHeight;\n    }\n\n  }\n  debounce(func, delay) {\n    let timer = null;\n    const $this = this;\n    return () => {\n      const context = $this;\n      const args = arguments;\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        func.apply(context, args);\n      }, delay);\n    };\n  }\n  perlinNoise(x, y, z) {\n    const getNoiseFloat = (x, y, z) => {\n      var p = new Array(512)\n      var permutation = [151, 160, 137, 91, 90, 15,\n        131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23,\n        190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33,\n        88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166,\n        77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244,\n        102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,\n        135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123,\n        5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,\n        223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9,\n        129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228,\n        251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107,\n        49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,\n        138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180\n      ];\n      for (var i = 0; i < 256; i++)\n        p[256 + i] = p[i] = permutation[i];\n\n      var X = Math.floor(x) & 255,                  // FIND UNIT CUBE THAT\n        Y = Math.floor(y) & 255,                  // CONTAINS POINT.\n        Z = Math.floor(z) & 255;\n      x -= Math.floor(x);                                // FIND RELATIVE X,Y,Z\n      y -= Math.floor(y);                                // OF POINT IN CUBE.\n      z -= Math.floor(z);\n      var u = fade(x),                                // COMPUTE FADE CURVES\n        v = fade(y),                                // FOR EACH OF X,Y,Z.\n        w = fade(z);\n      var A = p[X] + Y, AA = p[A] + Z, AB = p[A + 1] + Z,      // HASH COORDINATES OF\n        B = p[X + 1] + Y, BA = p[B] + Z, BB = p[B + 1] + Z;      // THE 8 CUBE CORNERS,\n\n      return scale(lerp(w, lerp(v, lerp(u, grad(p[AA], x, y, z),  // AND ADD\n        grad(p[BA], x - 1, y, z)), // BLENDED\n        lerp(u, grad(p[AB], x, y - 1, z),  // RESULTS\n          grad(p[BB], x - 1, y - 1, z))),// FROM  8\n        lerp(v, lerp(u, grad(p[AA + 1], x, y, z - 1),  // CORNERS\n          grad(p[BA + 1], x - 1, y, z - 1)), // OF CUBE\n          lerp(u, grad(p[AB + 1], x, y - 1, z - 1),\n            grad(p[BB + 1], x - 1, y - 1, z - 1)))));\n    }\n    const fade = (t) => { return t * t * t * (t * (t * 6 - 15) + 10); }\n    const lerp = (t, a, b) => { return a + t * (b - a); }\n    const grad = (hash, x, y, z) => {\n      var h = hash & 15;                      // CONVERT LO 4 BITS OF HASH CODE\n      var u = h < 8 ? x : y,                 // INTO 12 GRADIENT DIRECTIONS.\n        v = h < 4 ? y : h == 12 || h == 14 ? x : z;\n      return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);\n    }\n    const scale = (n) => { return (1 + n) / 2; }\n    return getNoiseFloat(x, y, z);\n  }\n  linearInterpolation(x, min, max, virtualMin, virtualMax) {\n    return ((x - min) / (max - min)) * (virtualMax - virtualMin);\n  }\n}","date":"2020-11-30T16:22:40.105Z","updated":"2020-11-30T16:22:40.105Z","path":"js/tool/canvas-fx-base.js","layout":"false","title":"","comments":1,"_id":"cktx1vyxw000atay25jc4f427","content":"class CanvasFxBase {\n  constructor(\n    ele, config, defaultConfig\n  ) {\n    config = Object.assign(defaultConfig, config);\n    this.ele = ele;\n    Object.assign(this, config);\n    this.frameCount = 0;\n    this.ctx = null;\n  }\n  init() {\n    if (this.ele.tagName !== 'CANVAS') {\n      const space = document.createElement('canvas');\n      this.ele.appendChild(space);\n      this.space = this.ele.querySelectorAll('canvas')[0];\n      this.canvasWidth = this.ele.getBoundingClientRect().width;\n      this.canvasHeight = this.ele.getBoundingClientRect().height;\n    }\n    else {\n      this.space = this.ele;\n      this.canvasWidth = this.ele.parentElement.getBoundingClientRect().width;\n      this.canvasHeight = this.ele.parentElement.getBoundingClientRect().height;\n    }\n\n    this.ctx = this.space.getContext('2d');\n    this.size();\n    const $this = this;\n    window.addEventListener('resize', $this.debounce(() => {\n      $this.size();\n    }, 500));\n    this.countframe();\n\n  }\n  countframe() {\n    let instance = this;\n    instance.frameCount += 1;\n    requestAnimationFrame(() => {\n      instance.countframe();\n    })\n  }\n  size() {\n    if (this.ele.tagName !== 'CANVAS') {\n      this.canvasWidth = this.ele.getBoundingClientRect().width;\n      this.canvasHeight = this.ele.getBoundingClientRect().height;\n      this.space.width = this.canvasWidth;\n      this.space.height = this.canvasHeight;\n    }\n    else {\n      this.canvasWidth = this.space.parentElement.getBoundingClientRect().width;\n      this.canvasHeight = this.space.parentElement.getBoundingClientRect().height;\n      this.space.width = this.canvasWidth;\n      this.space.height = this.canvasHeight;\n    }\n\n  }\n  debounce(func, delay) {\n    let timer = null;\n    const $this = this;\n    return () => {\n      const context = $this;\n      const args = arguments;\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        func.apply(context, args);\n      }, delay);\n    };\n  }\n  perlinNoise(x, y, z) {\n    const getNoiseFloat = (x, y, z) => {\n      var p = new Array(512)\n      var permutation = [151, 160, 137, 91, 90, 15,\n        131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23,\n        190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33,\n        88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166,\n        77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244,\n        102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,\n        135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123,\n        5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,\n        223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9,\n        129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228,\n        251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107,\n        49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,\n        138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180\n      ];\n      for (var i = 0; i < 256; i++)\n        p[256 + i] = p[i] = permutation[i];\n\n      var X = Math.floor(x) & 255,                  // FIND UNIT CUBE THAT\n        Y = Math.floor(y) & 255,                  // CONTAINS POINT.\n        Z = Math.floor(z) & 255;\n      x -= Math.floor(x);                                // FIND RELATIVE X,Y,Z\n      y -= Math.floor(y);                                // OF POINT IN CUBE.\n      z -= Math.floor(z);\n      var u = fade(x),                                // COMPUTE FADE CURVES\n        v = fade(y),                                // FOR EACH OF X,Y,Z.\n        w = fade(z);\n      var A = p[X] + Y, AA = p[A] + Z, AB = p[A + 1] + Z,      // HASH COORDINATES OF\n        B = p[X + 1] + Y, BA = p[B] + Z, BB = p[B + 1] + Z;      // THE 8 CUBE CORNERS,\n\n      return scale(lerp(w, lerp(v, lerp(u, grad(p[AA], x, y, z),  // AND ADD\n        grad(p[BA], x - 1, y, z)), // BLENDED\n        lerp(u, grad(p[AB], x, y - 1, z),  // RESULTS\n          grad(p[BB], x - 1, y - 1, z))),// FROM  8\n        lerp(v, lerp(u, grad(p[AA + 1], x, y, z - 1),  // CORNERS\n          grad(p[BA + 1], x - 1, y, z - 1)), // OF CUBE\n          lerp(u, grad(p[AB + 1], x, y - 1, z - 1),\n            grad(p[BB + 1], x - 1, y - 1, z - 1)))));\n    }\n    const fade = (t) => { return t * t * t * (t * (t * 6 - 15) + 10); }\n    const lerp = (t, a, b) => { return a + t * (b - a); }\n    const grad = (hash, x, y, z) => {\n      var h = hash & 15;                      // CONVERT LO 4 BITS OF HASH CODE\n      var u = h < 8 ? x : y,                 // INTO 12 GRADIENT DIRECTIONS.\n        v = h < 4 ? y : h == 12 || h == 14 ? x : z;\n      return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);\n    }\n    const scale = (n) => { return (1 + n) / 2; }\n    return getNoiseFloat(x, y, z);\n  }\n  linearInterpolation(x, min, max, virtualMin, virtualMax) {\n    return ((x - min) / (max - min)) * (virtualMax - virtualMin);\n  }\n}","site":{"data":{"css/variables":"","languages":{"zh-TW":{"title":{"archive":"時間線","category":"分類","tag":"標籤","schedule":"時間表"},"menu":{"home":"首頁","archives":"時間線","categories":"分類","tags":"標籤","about":"關於","search":"搜尋","schedule":"時間表","sitemap":"網站地圖","commonweal":"公益 404"},"sidebar":{"overview":"本站概要","toc":"文章目錄"},"post":{"posted":"發表於","edited":"更新於","created":"創建時間","modified":"修改時間","edit":"編輯","in":"分類於","read_more":"閱讀全文","untitled":"未命名","sticky":"置頂文","views":"閱讀次數","related_posts":"相關文章","copyright":{"author":"作者","link":"文章連結","post_author":"Written by","post_link":"This article originally appeared on","license_title":"版權聲明","license_content":"本網誌所有文章除特別聲明外，均採用 %s 許可協議。轉載請註明出處！"}},"footer":{"powered":"","total_views":"總瀏覽次數","total_visitors":"訪客總數"},"counter":{"tag_cloud":{"zero":"目前還沒有任何標籤","one":"目前共有 1 個標籤","other":"目前共有 %d 個標籤"},"categories":{"zero":"目前還沒有任何分類","one":"目前共有 1 個分類","other":"目前共有 %d 個分類"},"archive_posts":{"zero":"目前還沒有任何文章。","one":"目前共有 1 篇文章。","other":"目前共有 %d 篇文章。"}},"state":{"posts":"文章","tags":"標籤","categories":"分類"},"search":{"placeholder":"搜尋...","empty":"We didn't find any results for the search: %s","hits_time":"%s results found in %s ms","hits":"%s results found"},"cheers":{"um":"嗯..","ok":"還不錯","nice":"好","good":"很好","great":"非常好","excellent":"棒棒Der"},"keep_on":"繼續努力。","symbol":{"comma":"，","period":"。","colon":"："},"reward":{"donate":"捐贈","wechatpay":"微信支付","alipay":"支付寶","paypal":"貝寶","bitcoin":"比特幣"},"follow_me":{"welcome":"歡迎關注我的其它站點"},"accessibility":{"nav_toggle":"切換導航欄","prev_page":"上一頁","next_page":"下一頁"},"symbols_count_time":{"count":"文章字數","count_total":"總字數","time":"所需閱讀時間","time_total":"所需總閱讀時間","time_minutes":"分鐘"}}},"css/mixins":"","css/styles":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","template/head":"<script src=\"//js/tool/canvas-fx-base.js\"></script>\n\n<script src=\"//js/ripple-logo.js\"></script>\n<script src=\"//js/silk-wave.js\"></script>\n\n<style>\n  @font-face {\n  font-family: \"Roboto\";\n  src: url(//font/Roboto.ttf) format(\"truetype\");\n}\n</style>","css/styl-plugin/grid-post-layout/main":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","css/styl-plugin/grid-post-layout/mixins":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n","css/styl-plugin/grid-post-layout/variables":""}},"excerpt":"","more":"class CanvasFxBase {\n  constructor(\n    ele, config, defaultConfig\n  ) {\n    config = Object.assign(defaultConfig, config);\n    this.ele = ele;\n    Object.assign(this, config);\n    this.frameCount = 0;\n    this.ctx = null;\n  }\n  init() {\n    if (this.ele.tagName !== 'CANVAS') {\n      const space = document.createElement('canvas');\n      this.ele.appendChild(space);\n      this.space = this.ele.querySelectorAll('canvas')[0];\n      this.canvasWidth = this.ele.getBoundingClientRect().width;\n      this.canvasHeight = this.ele.getBoundingClientRect().height;\n    }\n    else {\n      this.space = this.ele;\n      this.canvasWidth = this.ele.parentElement.getBoundingClientRect().width;\n      this.canvasHeight = this.ele.parentElement.getBoundingClientRect().height;\n    }\n\n    this.ctx = this.space.getContext('2d');\n    this.size();\n    const $this = this;\n    window.addEventListener('resize', $this.debounce(() => {\n      $this.size();\n    }, 500));\n    this.countframe();\n\n  }\n  countframe() {\n    let instance = this;\n    instance.frameCount += 1;\n    requestAnimationFrame(() => {\n      instance.countframe();\n    })\n  }\n  size() {\n    if (this.ele.tagName !== 'CANVAS') {\n      this.canvasWidth = this.ele.getBoundingClientRect().width;\n      this.canvasHeight = this.ele.getBoundingClientRect().height;\n      this.space.width = this.canvasWidth;\n      this.space.height = this.canvasHeight;\n    }\n    else {\n      this.canvasWidth = this.space.parentElement.getBoundingClientRect().width;\n      this.canvasHeight = this.space.parentElement.getBoundingClientRect().height;\n      this.space.width = this.canvasWidth;\n      this.space.height = this.canvasHeight;\n    }\n\n  }\n  debounce(func, delay) {\n    let timer = null;\n    const $this = this;\n    return () => {\n      const context = $this;\n      const args = arguments;\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        func.apply(context, args);\n      }, delay);\n    };\n  }\n  perlinNoise(x, y, z) {\n    const getNoiseFloat = (x, y, z) => {\n      var p = new Array(512)\n      var permutation = [151, 160, 137, 91, 90, 15,\n        131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23,\n        190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33,\n        88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166,\n        77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244,\n        102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,\n        135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123,\n        5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,\n        223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9,\n        129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228,\n        251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107,\n        49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,\n        138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180\n      ];\n      for (var i = 0; i < 256; i++)\n        p[256 + i] = p[i] = permutation[i];\n\n      var X = Math.floor(x) & 255,                  // FIND UNIT CUBE THAT\n        Y = Math.floor(y) & 255,                  // CONTAINS POINT.\n        Z = Math.floor(z) & 255;\n      x -= Math.floor(x);                                // FIND RELATIVE X,Y,Z\n      y -= Math.floor(y);                                // OF POINT IN CUBE.\n      z -= Math.floor(z);\n      var u = fade(x),                                // COMPUTE FADE CURVES\n        v = fade(y),                                // FOR EACH OF X,Y,Z.\n        w = fade(z);\n      var A = p[X] + Y, AA = p[A] + Z, AB = p[A + 1] + Z,      // HASH COORDINATES OF\n        B = p[X + 1] + Y, BA = p[B] + Z, BB = p[B + 1] + Z;      // THE 8 CUBE CORNERS,\n\n      return scale(lerp(w, lerp(v, lerp(u, grad(p[AA], x, y, z),  // AND ADD\n        grad(p[BA], x - 1, y, z)), // BLENDED\n        lerp(u, grad(p[AB], x, y - 1, z),  // RESULTS\n          grad(p[BB], x - 1, y - 1, z))),// FROM  8\n        lerp(v, lerp(u, grad(p[AA + 1], x, y, z - 1),  // CORNERS\n          grad(p[BA + 1], x - 1, y, z - 1)), // OF CUBE\n          lerp(u, grad(p[AB + 1], x, y - 1, z - 1),\n            grad(p[BB + 1], x - 1, y - 1, z - 1)))));\n    }\n    const fade = (t) => { return t * t * t * (t * (t * 6 - 15) + 10); }\n    const lerp = (t, a, b) => { return a + t * (b - a); }\n    const grad = (hash, x, y, z) => {\n      var h = hash & 15;                      // CONVERT LO 4 BITS OF HASH CODE\n      var u = h < 8 ? x : y,                 // INTO 12 GRADIENT DIRECTIONS.\n        v = h < 4 ? y : h == 12 || h == 14 ? x : z;\n      return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);\n    }\n    const scale = (n) => { return (1 + n) / 2; }\n    return getNoiseFloat(x, y, z);\n  }\n  linearInterpolation(x, min, max, virtualMin, virtualMax) {\n    return ((x - min) / (max - min)) * (virtualMax - virtualMin);\n  }\n}"}],"Post":[{"title":"Day4 - 2D渲染環境基礎篇 I -  成為Canvas Ninja ～ 理解2D渲染的精髓","_content":"\n## 進入2D渲染的世界\n\n我們在前面的章節有提到，任何Canvas的相關程序，起手式必定是先取得渲染環境，所以2D渲染程序的第一步當然也就是先取得2D得渲染環境\n\n````javascript\n  let cvs = document.querySelector('canvas');\n  let ctx = cvs.getContext('2d'); //這個ctx就是2d模式的渲染環境\n````\n\n## 2D渲染環境下的座標系\n\n  在國高中上數學課的提到座標系時，我們會很習慣的去畫一個X軸向右為正，Y軸向上為正的座標軸，像這樣的座標系也就是所謂的『卡氏座標』，他是一種遵循右手定則的坐標系。  \n\n  我猜大家應該都已經把過去學過的數學/理化都還給老師了，所以這邊我們稍微複習一下『右手定則』這個概念：  \n\n  所謂的『右手定則』指的是：  \n\n  <img src=\"https://i.imgur.com/rJUSy76.png\" width=\"250\">\n\n  把右手伸出來，掌心朝自己，四指的方向會跟上圖Y軸同向，而大拇指方向則跟X軸同向，同時，你不管怎麼旋轉這張圖，你都可以用你的右手(手心必須朝自己)四指去比出Ｙ軸方向/用大拇指比出Ｘ軸方向，這就是所謂的『右手定則座標系』\n\n  但是在Canvas 2D渲染環境的世界中，它所採取的座標系並不是『右手定則座標系』，而是『左手定則座標系』。\n\n  『左手定則座標系』其實就是『右手定則座標系』的鏡像版～也就是說，我們其實可以直接把上面這張圖水平翻轉，它就直接成為了『左手定則座標系』，這時候你會發現，像剛剛同樣的操作，會變成只有左手才做得到。\n\n  <img src=\"https://i.imgur.com/XnfXM9b.png\" width=\"250\">\n\n\n  接著是重點，『左手定則座標系』和 『右手定則座標系』雖然看上去好像很相像，但最重要的差別就在於：  \n\n  > 右手定則的座標系，逆時針是正的旋轉方向，但是左手定則的座標系，順時針才是正的旋轉方向\n\n  這點必須要熟記。\n\n\n## 2D渲染環境下常見的API與Property\n\n  實際上，比起我們之後會提到的webgl環境，2D渲染環境的API在使用上都相當的直觀而且單純（當然，這也同時意味著2D渲染的難點不在於對API的理解，而是在於運算的過程）\n  \n  隨然說2D渲染環境的api數量繁多，但是為了避免一條一條介紹有點流水帳，\n  \n  在這邊我把常見的API/Property劃分成三種類型：\n\n  - 路徑/上色相關\n  - 變形相關\n  - 像素操作相關\n\n  在接下來的章節中我會根據上述的三種類型，一一介紹三種類型中常用的api和這些api相關的基礎常識\n\n  ","source":"_posts/2D渲染環境基礎篇 I -  成為Canvas Ninja ~ 理解2D渲染的精髓.md","raw":"---\ntitle: Day4 - 2D渲染環境基礎篇 I -  成為Canvas Ninja ～ 理解2D渲染的精髓\ncategories: \n- 前端技術學習心得\ntags:\n- 2021鐵人賽\n---\n\n## 進入2D渲染的世界\n\n我們在前面的章節有提到，任何Canvas的相關程序，起手式必定是先取得渲染環境，所以2D渲染程序的第一步當然也就是先取得2D得渲染環境\n\n````javascript\n  let cvs = document.querySelector('canvas');\n  let ctx = cvs.getContext('2d'); //這個ctx就是2d模式的渲染環境\n````\n\n## 2D渲染環境下的座標系\n\n  在國高中上數學課的提到座標系時，我們會很習慣的去畫一個X軸向右為正，Y軸向上為正的座標軸，像這樣的座標系也就是所謂的『卡氏座標』，他是一種遵循右手定則的坐標系。  \n\n  我猜大家應該都已經把過去學過的數學/理化都還給老師了，所以這邊我們稍微複習一下『右手定則』這個概念：  \n\n  所謂的『右手定則』指的是：  \n\n  <img src=\"https://i.imgur.com/rJUSy76.png\" width=\"250\">\n\n  把右手伸出來，掌心朝自己，四指的方向會跟上圖Y軸同向，而大拇指方向則跟X軸同向，同時，你不管怎麼旋轉這張圖，你都可以用你的右手(手心必須朝自己)四指去比出Ｙ軸方向/用大拇指比出Ｘ軸方向，這就是所謂的『右手定則座標系』\n\n  但是在Canvas 2D渲染環境的世界中，它所採取的座標系並不是『右手定則座標系』，而是『左手定則座標系』。\n\n  『左手定則座標系』其實就是『右手定則座標系』的鏡像版～也就是說，我們其實可以直接把上面這張圖水平翻轉，它就直接成為了『左手定則座標系』，這時候你會發現，像剛剛同樣的操作，會變成只有左手才做得到。\n\n  <img src=\"https://i.imgur.com/XnfXM9b.png\" width=\"250\">\n\n\n  接著是重點，『左手定則座標系』和 『右手定則座標系』雖然看上去好像很相像，但最重要的差別就在於：  \n\n  > 右手定則的座標系，逆時針是正的旋轉方向，但是左手定則的座標系，順時針才是正的旋轉方向\n\n  這點必須要熟記。\n\n\n## 2D渲染環境下常見的API與Property\n\n  實際上，比起我們之後會提到的webgl環境，2D渲染環境的API在使用上都相當的直觀而且單純（當然，這也同時意味著2D渲染的難點不在於對API的理解，而是在於運算的過程）\n  \n  隨然說2D渲染環境的api數量繁多，但是為了避免一條一條介紹有點流水帳，\n  \n  在這邊我把常見的API/Property劃分成三種類型：\n\n  - 路徑/上色相關\n  - 變形相關\n  - 像素操作相關\n\n  在接下來的章節中我會根據上述的三種類型，一一介紹三種類型中常用的api和這些api相關的基礎常識\n\n  ","slug":"2D渲染環境基礎篇 I -  成為Canvas Ninja ~ 理解2D渲染的精髓","published":1,"date":"2021-09-13T17:43:17.271Z","updated":"2021-09-14T17:15:12.897Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktx1vyxj0001tay22grm3zru","content":"<h2 id=\"進入2D渲染的世界\"><a href=\"#進入2D渲染的世界\" class=\"headerlink\" title=\"進入2D渲染的世界\"></a>進入2D渲染的世界</h2><p>我們在前面的章節有提到，任何Canvas的相關程序，起手式必定是先取得渲染環境，所以2D渲染程序的第一步當然也就是先取得2D得渲染環境</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> cvs = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;canvas&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> ctx = cvs.getContext(<span class=\"string\">&#x27;2d&#x27;</span>); <span class=\"comment\">//這個ctx就是2d模式的渲染環境</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2D渲染環境下的座標系\"><a href=\"#2D渲染環境下的座標系\" class=\"headerlink\" title=\"2D渲染環境下的座標系\"></a>2D渲染環境下的座標系</h2><p>  在國高中上數學課的提到座標系時，我們會很習慣的去畫一個X軸向右為正，Y軸向上為正的座標軸，像這樣的座標系也就是所謂的『卡氏座標』，他是一種遵循右手定則的坐標系。  </p>\n<p>  我猜大家應該都已經把過去學過的數學/理化都還給老師了，所以這邊我們稍微複習一下『右手定則』這個概念：  </p>\n<p>  所謂的『右手定則』指的是：  </p>\n  <img src=\"https://i.imgur.com/rJUSy76.png\" width=\"250\">\n\n<p>  把右手伸出來，掌心朝自己，四指的方向會跟上圖Y軸同向，而大拇指方向則跟X軸同向，同時，你不管怎麼旋轉這張圖，你都可以用你的右手(手心必須朝自己)四指去比出Ｙ軸方向/用大拇指比出Ｘ軸方向，這就是所謂的『右手定則座標系』</p>\n<p>  但是在Canvas 2D渲染環境的世界中，它所採取的座標系並不是『右手定則座標系』，而是『左手定則座標系』。</p>\n<p>  『左手定則座標系』其實就是『右手定則座標系』的鏡像版～也就是說，我們其實可以直接把上面這張圖水平翻轉，它就直接成為了『左手定則座標系』，這時候你會發現，像剛剛同樣的操作，會變成只有左手才做得到。</p>\n  <img src=\"https://i.imgur.com/XnfXM9b.png\" width=\"250\">\n\n\n<p>  接著是重點，『左手定則座標系』和 『右手定則座標系』雖然看上去好像很相像，但最重要的差別就在於：  </p>\n<blockquote>\n<p>右手定則的座標系，逆時針是正的旋轉方向，但是左手定則的座標系，順時針才是正的旋轉方向</p>\n</blockquote>\n<p>  這點必須要熟記。</p>\n<h2 id=\"2D渲染環境下常見的API與Property\"><a href=\"#2D渲染環境下常見的API與Property\" class=\"headerlink\" title=\"2D渲染環境下常見的API與Property\"></a>2D渲染環境下常見的API與Property</h2><p>  實際上，比起我們之後會提到的webgl環境，2D渲染環境的API在使用上都相當的直觀而且單純（當然，這也同時意味著2D渲染的難點不在於對API的理解，而是在於運算的過程）</p>\n<p>  隨然說2D渲染環境的api數量繁多，但是為了避免一條一條介紹有點流水帳，</p>\n<p>  在這邊我把常見的API/Property劃分成三種類型：</p>\n<ul>\n<li><p>路徑/上色相關</p>\n</li>\n<li><p>變形相關</p>\n</li>\n<li><p>像素操作相關</p>\n<p>在接下來的章節中我會根據上述的三種類型，一一介紹三種類型中常用的api和這些api相關的基礎常識</p>\n</li>\n</ul>\n","site":{"data":{"css/variables":"","languages":{"zh-TW":{"title":{"archive":"時間線","category":"分類","tag":"標籤","schedule":"時間表"},"menu":{"home":"首頁","archives":"時間線","categories":"分類","tags":"標籤","about":"關於","search":"搜尋","schedule":"時間表","sitemap":"網站地圖","commonweal":"公益 404"},"sidebar":{"overview":"本站概要","toc":"文章目錄"},"post":{"posted":"發表於","edited":"更新於","created":"創建時間","modified":"修改時間","edit":"編輯","in":"分類於","read_more":"閱讀全文","untitled":"未命名","sticky":"置頂文","views":"閱讀次數","related_posts":"相關文章","copyright":{"author":"作者","link":"文章連結","post_author":"Written by","post_link":"This article originally appeared on","license_title":"版權聲明","license_content":"本網誌所有文章除特別聲明外，均採用 %s 許可協議。轉載請註明出處！"}},"footer":{"powered":"","total_views":"總瀏覽次數","total_visitors":"訪客總數"},"counter":{"tag_cloud":{"zero":"目前還沒有任何標籤","one":"目前共有 1 個標籤","other":"目前共有 %d 個標籤"},"categories":{"zero":"目前還沒有任何分類","one":"目前共有 1 個分類","other":"目前共有 %d 個分類"},"archive_posts":{"zero":"目前還沒有任何文章。","one":"目前共有 1 篇文章。","other":"目前共有 %d 篇文章。"}},"state":{"posts":"文章","tags":"標籤","categories":"分類"},"search":{"placeholder":"搜尋...","empty":"We didn't find any results for the search: %s","hits_time":"%s results found in %s ms","hits":"%s results found"},"cheers":{"um":"嗯..","ok":"還不錯","nice":"好","good":"很好","great":"非常好","excellent":"棒棒Der"},"keep_on":"繼續努力。","symbol":{"comma":"，","period":"。","colon":"："},"reward":{"donate":"捐贈","wechatpay":"微信支付","alipay":"支付寶","paypal":"貝寶","bitcoin":"比特幣"},"follow_me":{"welcome":"歡迎關注我的其它站點"},"accessibility":{"nav_toggle":"切換導航欄","prev_page":"上一頁","next_page":"下一頁"},"symbols_count_time":{"count":"文章字數","count_total":"總字數","time":"所需閱讀時間","time_total":"所需總閱讀時間","time_minutes":"分鐘"}}},"css/mixins":"","css/styles":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","template/head":"<script src=\"//js/tool/canvas-fx-base.js\"></script>\n\n<script src=\"//js/ripple-logo.js\"></script>\n<script src=\"//js/silk-wave.js\"></script>\n\n<style>\n  @font-face {\n  font-family: \"Roboto\";\n  src: url(//font/Roboto.ttf) format(\"truetype\");\n}\n</style>","css/styl-plugin/grid-post-layout/main":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","css/styl-plugin/grid-post-layout/mixins":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n","css/styl-plugin/grid-post-layout/variables":""}},"excerpt":"","more":"<h2 id=\"進入2D渲染的世界\"><a href=\"#進入2D渲染的世界\" class=\"headerlink\" title=\"進入2D渲染的世界\"></a>進入2D渲染的世界</h2><p>我們在前面的章節有提到，任何Canvas的相關程序，起手式必定是先取得渲染環境，所以2D渲染程序的第一步當然也就是先取得2D得渲染環境</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> cvs = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;canvas&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> ctx = cvs.getContext(<span class=\"string\">&#x27;2d&#x27;</span>); <span class=\"comment\">//這個ctx就是2d模式的渲染環境</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2D渲染環境下的座標系\"><a href=\"#2D渲染環境下的座標系\" class=\"headerlink\" title=\"2D渲染環境下的座標系\"></a>2D渲染環境下的座標系</h2><p>  在國高中上數學課的提到座標系時，我們會很習慣的去畫一個X軸向右為正，Y軸向上為正的座標軸，像這樣的座標系也就是所謂的『卡氏座標』，他是一種遵循右手定則的坐標系。  </p>\n<p>  我猜大家應該都已經把過去學過的數學/理化都還給老師了，所以這邊我們稍微複習一下『右手定則』這個概念：  </p>\n<p>  所謂的『右手定則』指的是：  </p>\n  <img src=\"https://i.imgur.com/rJUSy76.png\" width=\"250\">\n\n<p>  把右手伸出來，掌心朝自己，四指的方向會跟上圖Y軸同向，而大拇指方向則跟X軸同向，同時，你不管怎麼旋轉這張圖，你都可以用你的右手(手心必須朝自己)四指去比出Ｙ軸方向/用大拇指比出Ｘ軸方向，這就是所謂的『右手定則座標系』</p>\n<p>  但是在Canvas 2D渲染環境的世界中，它所採取的座標系並不是『右手定則座標系』，而是『左手定則座標系』。</p>\n<p>  『左手定則座標系』其實就是『右手定則座標系』的鏡像版～也就是說，我們其實可以直接把上面這張圖水平翻轉，它就直接成為了『左手定則座標系』，這時候你會發現，像剛剛同樣的操作，會變成只有左手才做得到。</p>\n  <img src=\"https://i.imgur.com/XnfXM9b.png\" width=\"250\">\n\n\n<p>  接著是重點，『左手定則座標系』和 『右手定則座標系』雖然看上去好像很相像，但最重要的差別就在於：  </p>\n<blockquote>\n<p>右手定則的座標系，逆時針是正的旋轉方向，但是左手定則的座標系，順時針才是正的旋轉方向</p>\n</blockquote>\n<p>  這點必須要熟記。</p>\n<h2 id=\"2D渲染環境下常見的API與Property\"><a href=\"#2D渲染環境下常見的API與Property\" class=\"headerlink\" title=\"2D渲染環境下常見的API與Property\"></a>2D渲染環境下常見的API與Property</h2><p>  實際上，比起我們之後會提到的webgl環境，2D渲染環境的API在使用上都相當的直觀而且單純（當然，這也同時意味著2D渲染的難點不在於對API的理解，而是在於運算的過程）</p>\n<p>  隨然說2D渲染環境的api數量繁多，但是為了避免一條一條介紹有點流水帳，</p>\n<p>  在這邊我把常見的API/Property劃分成三種類型：</p>\n<ul>\n<li><p>路徑/上色相關</p>\n</li>\n<li><p>變形相關</p>\n</li>\n<li><p>像素操作相關</p>\n<p>在接下來的章節中我會根據上述的三種類型，一一介紹三種類型中常用的api和這些api相關的基礎常識</p>\n</li>\n</ul>\n"},{"title":"Day5 - 2D渲染環境基礎篇 II -  成為Canvas Ninja ～ 理解2D渲染的精髓","_content":"\n## 何謂路徑？\n\n要介紹路徑繪圖相關的api之前，必須要先理解什麼叫做『路徑』。  \n有學過電腦繪圖軟體，例如Adobe Photoshop, Adobe Illustrator的同學可能對『路徑』這個詞相當的熟悉，同時也可能可以更快速掌握2D渲染環境路徑繪圖的概念，但是考量到大多數人都沒有美術學經歷背景，所以這邊還是簡單做點說明~\n\n\n> 路徑是使用繪圖工具建立的任意形狀的曲線，用它可勾勒出物體的輪廓，所以也稱之為輪廓線。 為了滿足繪圖的需要，路徑又分為開放路徑和封閉路徑。 --維基百科\n\n如果要白話一點的解釋『路徑(Path)』這個概念，可以想像成他是由一條透明的曲線所圈出來的一塊(非)開放區域，在canvas中我們可以利用(接下來會提到的)上色填充相關api為已經成形的路徑設定填充色(fill)/邊框色(stroke)。\n\n有學過SVG相關知識的同學應該馬上就會發現這其實就跟SVG的Path 屬性是一樣的東西～沒錯，路徑(Path)其實是計算機繪圖領域的概念，並不是Canvas獨有的。\n\n<img src=\"https://i.imgur.com/7TfVMlG.png\" width=\"500\">\n\n(圖片說明：在上圖我們可以看到我們必須要先有一個葉子形狀的Path，然後接著才可以對這個Path施加Fill和Stroke)\n\n接下來我們要藉由實作的方式來加速學習api的使用方式，藉由實際操作API來畫一條線/一個圓/一個不規則形狀來加深對API的認識。\n\n在開始之前，有一個**特別需要注意的地方**，那就是『繪製路徑』這個行為過程其實有點類似於用筆尖在紙面上作畫。  \n這個『筆尖』會是一個實際存在的座標(但是你看不到)，打個比方:假設我們現在畫了一段由A點畫向B點的路徑，那麼『筆尖』最後也會停在B上面。  \n這時候要注意，如果沒有利用API去移動筆尖，而是直接在別的地方畫了一個新的形狀，那麼先被畫出來的形狀和後被畫出來的形狀就會產生多餘的連線。\n    \n## 來畫一條線看看吧!\n\n  <p class=\"codepen\" data-height=\"300\" data-default-tab=\"html,result\" data-slug-hash=\"XWgeKoJ\" data-user=\"mizok_contest\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/mizok_contest/pen/XWgeKoJ\">\n  canvas畫線</a> by mizok_contest (<a href=\"https://codepen.io/mizok_contest\">@mizok_contest</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n\n## 起手式!\n\n任何的路徑在開始畫之前，最好都要先使用ctx.beginPath()來宣告『嘿，我要開始畫路徑囉』;\n然後在結束路徑繪製時，也最好使用ctx.closePath() 來宣告結束路徑的繪製;\n\n一般來說如果不宣告結束，那麼路徑就會一直存續下去，這樣就沒有辦法畫出個別獨立的圖形（例如個別獨立顏色不同的方塊）\n\n另外一提，ctx.fill() (填充顏色的api) 本身自帶closePath的效果，所以如果先執行了fill()，則可以不用額外宣告結束路徑繪製。\n\n## 接著來畫一個圓!\n\n````javascript\n// API 用法\nvoid ctx.arc(x, y, radius, startAngle, endAngle [, counterclockwise]);\n// x: 圓心X座標\n// y: 圓心Y座標\n// radius : 半徑\n// startAngle: 起始角度=> 記得是順時針為正喔(而且必須要是徑度量)\n// endEngle: 結束角度=> 記得是順時針為正喔(而且必須要是徑度量)\n// counterClockwise : 是否以逆時針方向作畫\n````\n\n這邊我提出了一個錯誤的範例，和一個正確的範例，讓大家可以參考一下錯誤的原因和正確的寫法。\n\n<p class=\"codepen\" data-height=\"300\" data-default-tab=\"html,result\" data-slug-hash=\"RwgLGPQ\" data-user=\"mizok_contest\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/mizok_contest/pen/RwgLGPQ\">\n  canvas畫圓</a> by mizok_contest (<a href=\"https://codepen.io/mizok_contest\">@mizok_contest</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n\n## 畫一個不規則形狀!\n\n這邊我們利用畫二次曲線的API來畫一個由三條曲線構成的形狀，接著填充並且賦予框線。\n這邊可以稍微理解一下Canvas 的API ～ ctx.curveTo是怎麼定義二次曲線的參數需求。\n簡單來說這個api把一段二次曲線看作是一個由三個點所構成的曲線，三個點分別是：\n- 開始畫線時筆尖的座標(第一端點)\n- 曲線結束的端點座標(第二端點)\n- 兩個端點沿著曲線拉出的切線所形成的交點，是為『控制點 cp』\n\n<img src=\"https://i.imgur.com/zW0Biud.png\" width=\"300\">\n\n\n````javascript\nvoid ctx.quadraticCurveTo(cpx, cpy, x, y);\n// cpx: 曲線控制點X座標\n// cpy: 曲線控制點Y座標\n// x: 曲線結束點Ｘ座標\n// y: 曲線結束點Y座標\n````\n\n<p class=\"codepen\" data-height=\"300\" data-default-tab=\"html,result\" data-slug-hash=\"ExXwNZL\" data-user=\"mizok_contest\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/mizok_contest/pen/ExXwNZL\">\n  canvas畫不規則形狀</a> by mizok_contest (<a href=\"https://codepen.io/mizok_contest\">@mizok_contest</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n\n## Canvas Property的紀錄(save)與復原(restore)\n\n我們在前面的三個範例都有去調整過渲染環境當前的fillStyle和 strokeStyle 來改變填充色和邊框的顏色。  \n(有電腦繪圖經驗的同學可能很快的就注意到了--這兩個東西其實就是Illustrator的前景色和背景色吧!)\n要知道，Canvas的Property在同一時間底下是只有一個唯一值的，也就是說填充色在同一瞬間只能被指定一個hex作為類似全域變數的概念，  \n所以如果今天有一個需求，要先畫出一條紅色的線，接著再畫出一條藍色的線，流程便會是：\n- 把fillstyle 設定成紅色\n- 畫第一條線\n- 把fillstyle 設定成藍色\n- 畫第二條線\n\n雖然這樣的場景很單純看起來沒什麼，但是如果今天到了很複雜的狀況，例如初始顏色是透過random函數隨機決定的，而繪製過程中突然有需求回歸原本random到的那個顏色，那就會需要有能夠復原Property的需求。\n\n上述的場景雖然可以透過把字串值存取道臨時變數來達成，但是別忘了，Canvas 的Property 遠遠不止strokeStyle 一個，如果任何一個Property都要存一個變數，想必程式碼會變得很亂。\n\n這時我們就可以透過Canvas 的原生API，也就是ctx.save()與 ctx.restore() (存檔與讀檔) 來達成上述需求。\n\n這邊我提出了一個範例，範例中我先random 了一個hex色碼來作為初始顏色，畫一條線，接著把顏色改為藍色再畫一條線，最後我則是回歸原本ramdom到的顏色畫第三條線。\n\n\n<p class=\"codepen\" data-height=\"300\" data-default-tab=\"html,result\" data-slug-hash=\"PojJWaE\" data-user=\"mizok_contest\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/mizok_contest/pen/PojJWaE\">\n  canvas畫不規則形狀</a> by mizok_contest (<a href=\"https://codepen.io/mizok_contest\">@mizok_contest</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n\n\n## 路徑繪製/上色 - 小結\n\n實際上，canvas 關於繪製路徑的api還遠不止上述提到的這幾種。\n例如曲線還有 ctx.bezierCurveTo()(貝茲曲線), 設定邊框粗細可以用 ctx.lineWidth, 設定端點類型可以用ctx.lineJoin...,etc\n\n這些api/property 如果要在文章中一一介紹其實多少會變得有點流水帳，所以我比較傾向讓大家自己去搜尋自己需要的api\n\n推薦在查詢api 的時候可以多使用MDN~ MDN 會是學習Canvas基礎的好幫手。\n\nhttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\n\n\n\n","source":"_posts/2D渲染環境基礎篇 II -  成為Canvas Ninja ~ 理解2D渲染的精髓.md","raw":"---\ntitle: Day5 - 2D渲染環境基礎篇 II -  成為Canvas Ninja ～ 理解2D渲染的精髓\ncategories: \n- 前端技術學習心得\ntags:\n- 2021鐵人賽\n---\n\n## 何謂路徑？\n\n要介紹路徑繪圖相關的api之前，必須要先理解什麼叫做『路徑』。  \n有學過電腦繪圖軟體，例如Adobe Photoshop, Adobe Illustrator的同學可能對『路徑』這個詞相當的熟悉，同時也可能可以更快速掌握2D渲染環境路徑繪圖的概念，但是考量到大多數人都沒有美術學經歷背景，所以這邊還是簡單做點說明~\n\n\n> 路徑是使用繪圖工具建立的任意形狀的曲線，用它可勾勒出物體的輪廓，所以也稱之為輪廓線。 為了滿足繪圖的需要，路徑又分為開放路徑和封閉路徑。 --維基百科\n\n如果要白話一點的解釋『路徑(Path)』這個概念，可以想像成他是由一條透明的曲線所圈出來的一塊(非)開放區域，在canvas中我們可以利用(接下來會提到的)上色填充相關api為已經成形的路徑設定填充色(fill)/邊框色(stroke)。\n\n有學過SVG相關知識的同學應該馬上就會發現這其實就跟SVG的Path 屬性是一樣的東西～沒錯，路徑(Path)其實是計算機繪圖領域的概念，並不是Canvas獨有的。\n\n<img src=\"https://i.imgur.com/7TfVMlG.png\" width=\"500\">\n\n(圖片說明：在上圖我們可以看到我們必須要先有一個葉子形狀的Path，然後接著才可以對這個Path施加Fill和Stroke)\n\n接下來我們要藉由實作的方式來加速學習api的使用方式，藉由實際操作API來畫一條線/一個圓/一個不規則形狀來加深對API的認識。\n\n在開始之前，有一個**特別需要注意的地方**，那就是『繪製路徑』這個行為過程其實有點類似於用筆尖在紙面上作畫。  \n這個『筆尖』會是一個實際存在的座標(但是你看不到)，打個比方:假設我們現在畫了一段由A點畫向B點的路徑，那麼『筆尖』最後也會停在B上面。  \n這時候要注意，如果沒有利用API去移動筆尖，而是直接在別的地方畫了一個新的形狀，那麼先被畫出來的形狀和後被畫出來的形狀就會產生多餘的連線。\n    \n## 來畫一條線看看吧!\n\n  <p class=\"codepen\" data-height=\"300\" data-default-tab=\"html,result\" data-slug-hash=\"XWgeKoJ\" data-user=\"mizok_contest\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/mizok_contest/pen/XWgeKoJ\">\n  canvas畫線</a> by mizok_contest (<a href=\"https://codepen.io/mizok_contest\">@mizok_contest</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n\n## 起手式!\n\n任何的路徑在開始畫之前，最好都要先使用ctx.beginPath()來宣告『嘿，我要開始畫路徑囉』;\n然後在結束路徑繪製時，也最好使用ctx.closePath() 來宣告結束路徑的繪製;\n\n一般來說如果不宣告結束，那麼路徑就會一直存續下去，這樣就沒有辦法畫出個別獨立的圖形（例如個別獨立顏色不同的方塊）\n\n另外一提，ctx.fill() (填充顏色的api) 本身自帶closePath的效果，所以如果先執行了fill()，則可以不用額外宣告結束路徑繪製。\n\n## 接著來畫一個圓!\n\n````javascript\n// API 用法\nvoid ctx.arc(x, y, radius, startAngle, endAngle [, counterclockwise]);\n// x: 圓心X座標\n// y: 圓心Y座標\n// radius : 半徑\n// startAngle: 起始角度=> 記得是順時針為正喔(而且必須要是徑度量)\n// endEngle: 結束角度=> 記得是順時針為正喔(而且必須要是徑度量)\n// counterClockwise : 是否以逆時針方向作畫\n````\n\n這邊我提出了一個錯誤的範例，和一個正確的範例，讓大家可以參考一下錯誤的原因和正確的寫法。\n\n<p class=\"codepen\" data-height=\"300\" data-default-tab=\"html,result\" data-slug-hash=\"RwgLGPQ\" data-user=\"mizok_contest\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/mizok_contest/pen/RwgLGPQ\">\n  canvas畫圓</a> by mizok_contest (<a href=\"https://codepen.io/mizok_contest\">@mizok_contest</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n\n## 畫一個不規則形狀!\n\n這邊我們利用畫二次曲線的API來畫一個由三條曲線構成的形狀，接著填充並且賦予框線。\n這邊可以稍微理解一下Canvas 的API ～ ctx.curveTo是怎麼定義二次曲線的參數需求。\n簡單來說這個api把一段二次曲線看作是一個由三個點所構成的曲線，三個點分別是：\n- 開始畫線時筆尖的座標(第一端點)\n- 曲線結束的端點座標(第二端點)\n- 兩個端點沿著曲線拉出的切線所形成的交點，是為『控制點 cp』\n\n<img src=\"https://i.imgur.com/zW0Biud.png\" width=\"300\">\n\n\n````javascript\nvoid ctx.quadraticCurveTo(cpx, cpy, x, y);\n// cpx: 曲線控制點X座標\n// cpy: 曲線控制點Y座標\n// x: 曲線結束點Ｘ座標\n// y: 曲線結束點Y座標\n````\n\n<p class=\"codepen\" data-height=\"300\" data-default-tab=\"html,result\" data-slug-hash=\"ExXwNZL\" data-user=\"mizok_contest\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/mizok_contest/pen/ExXwNZL\">\n  canvas畫不規則形狀</a> by mizok_contest (<a href=\"https://codepen.io/mizok_contest\">@mizok_contest</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n\n## Canvas Property的紀錄(save)與復原(restore)\n\n我們在前面的三個範例都有去調整過渲染環境當前的fillStyle和 strokeStyle 來改變填充色和邊框的顏色。  \n(有電腦繪圖經驗的同學可能很快的就注意到了--這兩個東西其實就是Illustrator的前景色和背景色吧!)\n要知道，Canvas的Property在同一時間底下是只有一個唯一值的，也就是說填充色在同一瞬間只能被指定一個hex作為類似全域變數的概念，  \n所以如果今天有一個需求，要先畫出一條紅色的線，接著再畫出一條藍色的線，流程便會是：\n- 把fillstyle 設定成紅色\n- 畫第一條線\n- 把fillstyle 設定成藍色\n- 畫第二條線\n\n雖然這樣的場景很單純看起來沒什麼，但是如果今天到了很複雜的狀況，例如初始顏色是透過random函數隨機決定的，而繪製過程中突然有需求回歸原本random到的那個顏色，那就會需要有能夠復原Property的需求。\n\n上述的場景雖然可以透過把字串值存取道臨時變數來達成，但是別忘了，Canvas 的Property 遠遠不止strokeStyle 一個，如果任何一個Property都要存一個變數，想必程式碼會變得很亂。\n\n這時我們就可以透過Canvas 的原生API，也就是ctx.save()與 ctx.restore() (存檔與讀檔) 來達成上述需求。\n\n這邊我提出了一個範例，範例中我先random 了一個hex色碼來作為初始顏色，畫一條線，接著把顏色改為藍色再畫一條線，最後我則是回歸原本ramdom到的顏色畫第三條線。\n\n\n<p class=\"codepen\" data-height=\"300\" data-default-tab=\"html,result\" data-slug-hash=\"PojJWaE\" data-user=\"mizok_contest\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/mizok_contest/pen/PojJWaE\">\n  canvas畫不規則形狀</a> by mizok_contest (<a href=\"https://codepen.io/mizok_contest\">@mizok_contest</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n\n\n## 路徑繪製/上色 - 小結\n\n實際上，canvas 關於繪製路徑的api還遠不止上述提到的這幾種。\n例如曲線還有 ctx.bezierCurveTo()(貝茲曲線), 設定邊框粗細可以用 ctx.lineWidth, 設定端點類型可以用ctx.lineJoin...,etc\n\n這些api/property 如果要在文章中一一介紹其實多少會變得有點流水帳，所以我比較傾向讓大家自己去搜尋自己需要的api\n\n推薦在查詢api 的時候可以多使用MDN~ MDN 會是學習Canvas基礎的好幫手。\n\nhttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\n\n\n\n","slug":"2D渲染環境基礎篇 II -  成為Canvas Ninja ~ 理解2D渲染的精髓","published":1,"date":"2021-09-13T17:43:18.147Z","updated":"2021-09-19T05:08:43.585Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktx1vyxo0003tay202kj74d4","content":"<h2 id=\"何謂路徑？\"><a href=\"#何謂路徑？\" class=\"headerlink\" title=\"何謂路徑？\"></a>何謂路徑？</h2><p>要介紹路徑繪圖相關的api之前，必須要先理解什麼叫做『路徑』。<br>有學過電腦繪圖軟體，例如Adobe Photoshop, Adobe Illustrator的同學可能對『路徑』這個詞相當的熟悉，同時也可能可以更快速掌握2D渲染環境路徑繪圖的概念，但是考量到大多數人都沒有美術學經歷背景，所以這邊還是簡單做點說明~</p>\n<blockquote>\n<p>路徑是使用繪圖工具建立的任意形狀的曲線，用它可勾勒出物體的輪廓，所以也稱之為輪廓線。 為了滿足繪圖的需要，路徑又分為開放路徑和封閉路徑。 –維基百科</p>\n</blockquote>\n<p>如果要白話一點的解釋『路徑(Path)』這個概念，可以想像成他是由一條透明的曲線所圈出來的一塊(非)開放區域，在canvas中我們可以利用(接下來會提到的)上色填充相關api為已經成形的路徑設定填充色(fill)/邊框色(stroke)。</p>\n<p>有學過SVG相關知識的同學應該馬上就會發現這其實就跟SVG的Path 屬性是一樣的東西～沒錯，路徑(Path)其實是計算機繪圖領域的概念，並不是Canvas獨有的。</p>\n<img src=\"https://i.imgur.com/7TfVMlG.png\" width=\"500\">\n\n<p>(圖片說明：在上圖我們可以看到我們必須要先有一個葉子形狀的Path，然後接著才可以對這個Path施加Fill和Stroke)</p>\n<p>接下來我們要藉由實作的方式來加速學習api的使用方式，藉由實際操作API來畫一條線/一個圓/一個不規則形狀來加深對API的認識。</p>\n<p>在開始之前，有一個<strong>特別需要注意的地方</strong>，那就是『繪製路徑』這個行為過程其實有點類似於用筆尖在紙面上作畫。<br>這個『筆尖』會是一個實際存在的座標(但是你看不到)，打個比方:假設我們現在畫了一段由A點畫向B點的路徑，那麼『筆尖』最後也會停在B上面。<br>這時候要注意，如果沒有利用API去移動筆尖，而是直接在別的地方畫了一個新的形狀，那麼先被畫出來的形狀和後被畫出來的形狀就會產生多餘的連線。</p>\n<h2 id=\"來畫一條線看看吧\"><a href=\"#來畫一條線看看吧\" class=\"headerlink\" title=\"來畫一條線看看吧!\"></a>來畫一條線看看吧!</h2>  <p class=\"codepen\" data-height=\"300\" data-default-tab=\"html,result\" data-slug-hash=\"XWgeKoJ\" data-user=\"mizok_contest\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/mizok_contest/pen/XWgeKoJ\">\n  canvas畫線</a> by mizok_contest (<a href=\"https://codepen.io/mizok_contest\">@mizok_contest</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n\n<h2 id=\"起手式\"><a href=\"#起手式\" class=\"headerlink\" title=\"起手式!\"></a>起手式!</h2><p>任何的路徑在開始畫之前，最好都要先使用ctx.beginPath()來宣告『嘿，我要開始畫路徑囉』;<br>然後在結束路徑繪製時，也最好使用ctx.closePath() 來宣告結束路徑的繪製;</p>\n<p>一般來說如果不宣告結束，那麼路徑就會一直存續下去，這樣就沒有辦法畫出個別獨立的圖形（例如個別獨立顏色不同的方塊）</p>\n<p>另外一提，ctx.fill() (填充顏色的api) 本身自帶closePath的效果，所以如果先執行了fill()，則可以不用額外宣告結束路徑繪製。</p>\n<h2 id=\"接著來畫一個圓\"><a href=\"#接著來畫一個圓\" class=\"headerlink\" title=\"接著來畫一個圓!\"></a>接著來畫一個圓!</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// API 用法</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> ctx.arc(x, y, radius, startAngle, endAngle [, counterclockwise]);</span><br><span class=\"line\"><span class=\"comment\">// x: 圓心X座標</span></span><br><span class=\"line\"><span class=\"comment\">// y: 圓心Y座標</span></span><br><span class=\"line\"><span class=\"comment\">// radius : 半徑</span></span><br><span class=\"line\"><span class=\"comment\">// startAngle: 起始角度=&gt; 記得是順時針為正喔(而且必須要是徑度量)</span></span><br><span class=\"line\"><span class=\"comment\">// endEngle: 結束角度=&gt; 記得是順時針為正喔(而且必須要是徑度量)</span></span><br><span class=\"line\"><span class=\"comment\">// counterClockwise : 是否以逆時針方向作畫</span></span><br></pre></td></tr></table></figure>\n\n<p>這邊我提出了一個錯誤的範例，和一個正確的範例，讓大家可以參考一下錯誤的原因和正確的寫法。</p>\n<p class=\"codepen\" data-height=\"300\" data-default-tab=\"html,result\" data-slug-hash=\"RwgLGPQ\" data-user=\"mizok_contest\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/mizok_contest/pen/RwgLGPQ\">\n  canvas畫圓</a> by mizok_contest (<a href=\"https://codepen.io/mizok_contest\">@mizok_contest</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n\n<h2 id=\"畫一個不規則形狀\"><a href=\"#畫一個不規則形狀\" class=\"headerlink\" title=\"畫一個不規則形狀!\"></a>畫一個不規則形狀!</h2><p>這邊我們利用畫二次曲線的API來畫一個由三條曲線構成的形狀，接著填充並且賦予框線。<br>這邊可以稍微理解一下Canvas 的API ～ ctx.curveTo是怎麼定義二次曲線的參數需求。<br>簡單來說這個api把一段二次曲線看作是一個由三個點所構成的曲線，三個點分別是：</p>\n<ul>\n<li>開始畫線時筆尖的座標(第一端點)</li>\n<li>曲線結束的端點座標(第二端點)</li>\n<li>兩個端點沿著曲線拉出的切線所形成的交點，是為『控制點 cp』</li>\n</ul>\n<img src=\"https://i.imgur.com/zW0Biud.png\" width=\"300\">\n\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> ctx.quadraticCurveTo(cpx, cpy, x, y);</span><br><span class=\"line\"><span class=\"comment\">// cpx: 曲線控制點X座標</span></span><br><span class=\"line\"><span class=\"comment\">// cpy: 曲線控制點Y座標</span></span><br><span class=\"line\"><span class=\"comment\">// x: 曲線結束點Ｘ座標</span></span><br><span class=\"line\"><span class=\"comment\">// y: 曲線結束點Y座標</span></span><br></pre></td></tr></table></figure>\n\n<p class=\"codepen\" data-height=\"300\" data-default-tab=\"html,result\" data-slug-hash=\"ExXwNZL\" data-user=\"mizok_contest\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/mizok_contest/pen/ExXwNZL\">\n  canvas畫不規則形狀</a> by mizok_contest (<a href=\"https://codepen.io/mizok_contest\">@mizok_contest</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n\n<h2 id=\"Canvas-Property的紀錄-save-與復原-restore\"><a href=\"#Canvas-Property的紀錄-save-與復原-restore\" class=\"headerlink\" title=\"Canvas Property的紀錄(save)與復原(restore)\"></a>Canvas Property的紀錄(save)與復原(restore)</h2><p>我們在前面的三個範例都有去調整過渲染環境當前的fillStyle和 strokeStyle 來改變填充色和邊框的顏色。<br>(有電腦繪圖經驗的同學可能很快的就注意到了–這兩個東西其實就是Illustrator的前景色和背景色吧!)<br>要知道，Canvas的Property在同一時間底下是只有一個唯一值的，也就是說填充色在同一瞬間只能被指定一個hex作為類似全域變數的概念，<br>所以如果今天有一個需求，要先畫出一條紅色的線，接著再畫出一條藍色的線，流程便會是：</p>\n<ul>\n<li>把fillstyle 設定成紅色</li>\n<li>畫第一條線</li>\n<li>把fillstyle 設定成藍色</li>\n<li>畫第二條線</li>\n</ul>\n<p>雖然這樣的場景很單純看起來沒什麼，但是如果今天到了很複雜的狀況，例如初始顏色是透過random函數隨機決定的，而繪製過程中突然有需求回歸原本random到的那個顏色，那就會需要有能夠復原Property的需求。</p>\n<p>上述的場景雖然可以透過把字串值存取道臨時變數來達成，但是別忘了，Canvas 的Property 遠遠不止strokeStyle 一個，如果任何一個Property都要存一個變數，想必程式碼會變得很亂。</p>\n<p>這時我們就可以透過Canvas 的原生API，也就是ctx.save()與 ctx.restore() (存檔與讀檔) 來達成上述需求。</p>\n<p>這邊我提出了一個範例，範例中我先random 了一個hex色碼來作為初始顏色，畫一條線，接著把顏色改為藍色再畫一條線，最後我則是回歸原本ramdom到的顏色畫第三條線。</p>\n<p class=\"codepen\" data-height=\"300\" data-default-tab=\"html,result\" data-slug-hash=\"PojJWaE\" data-user=\"mizok_contest\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/mizok_contest/pen/PojJWaE\">\n  canvas畫不規則形狀</a> by mizok_contest (<a href=\"https://codepen.io/mizok_contest\">@mizok_contest</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n\n\n<h2 id=\"路徑繪製-上色-小結\"><a href=\"#路徑繪製-上色-小結\" class=\"headerlink\" title=\"路徑繪製/上色 - 小結\"></a>路徑繪製/上色 - 小結</h2><p>實際上，canvas 關於繪製路徑的api還遠不止上述提到的這幾種。<br>例如曲線還有 ctx.bezierCurveTo()(貝茲曲線), 設定邊框粗細可以用 ctx.lineWidth, 設定端點類型可以用ctx.lineJoin…,etc</p>\n<p>這些api/property 如果要在文章中一一介紹其實多少會變得有點流水帳，所以我比較傾向讓大家自己去搜尋自己需要的api</p>\n<p>推薦在查詢api 的時候可以多使用MDN~ MDN 會是學習Canvas基礎的好幫手。</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D</a></p>\n","site":{"data":{"css/variables":"","languages":{"zh-TW":{"title":{"archive":"時間線","category":"分類","tag":"標籤","schedule":"時間表"},"menu":{"home":"首頁","archives":"時間線","categories":"分類","tags":"標籤","about":"關於","search":"搜尋","schedule":"時間表","sitemap":"網站地圖","commonweal":"公益 404"},"sidebar":{"overview":"本站概要","toc":"文章目錄"},"post":{"posted":"發表於","edited":"更新於","created":"創建時間","modified":"修改時間","edit":"編輯","in":"分類於","read_more":"閱讀全文","untitled":"未命名","sticky":"置頂文","views":"閱讀次數","related_posts":"相關文章","copyright":{"author":"作者","link":"文章連結","post_author":"Written by","post_link":"This article originally appeared on","license_title":"版權聲明","license_content":"本網誌所有文章除特別聲明外，均採用 %s 許可協議。轉載請註明出處！"}},"footer":{"powered":"","total_views":"總瀏覽次數","total_visitors":"訪客總數"},"counter":{"tag_cloud":{"zero":"目前還沒有任何標籤","one":"目前共有 1 個標籤","other":"目前共有 %d 個標籤"},"categories":{"zero":"目前還沒有任何分類","one":"目前共有 1 個分類","other":"目前共有 %d 個分類"},"archive_posts":{"zero":"目前還沒有任何文章。","one":"目前共有 1 篇文章。","other":"目前共有 %d 篇文章。"}},"state":{"posts":"文章","tags":"標籤","categories":"分類"},"search":{"placeholder":"搜尋...","empty":"We didn't find any results for the search: %s","hits_time":"%s results found in %s ms","hits":"%s results found"},"cheers":{"um":"嗯..","ok":"還不錯","nice":"好","good":"很好","great":"非常好","excellent":"棒棒Der"},"keep_on":"繼續努力。","symbol":{"comma":"，","period":"。","colon":"："},"reward":{"donate":"捐贈","wechatpay":"微信支付","alipay":"支付寶","paypal":"貝寶","bitcoin":"比特幣"},"follow_me":{"welcome":"歡迎關注我的其它站點"},"accessibility":{"nav_toggle":"切換導航欄","prev_page":"上一頁","next_page":"下一頁"},"symbols_count_time":{"count":"文章字數","count_total":"總字數","time":"所需閱讀時間","time_total":"所需總閱讀時間","time_minutes":"分鐘"}}},"css/mixins":"","css/styles":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","template/head":"<script src=\"//js/tool/canvas-fx-base.js\"></script>\n\n<script src=\"//js/ripple-logo.js\"></script>\n<script src=\"//js/silk-wave.js\"></script>\n\n<style>\n  @font-face {\n  font-family: \"Roboto\";\n  src: url(//font/Roboto.ttf) format(\"truetype\");\n}\n</style>","css/styl-plugin/grid-post-layout/main":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","css/styl-plugin/grid-post-layout/mixins":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n","css/styl-plugin/grid-post-layout/variables":""}},"excerpt":"","more":"<h2 id=\"何謂路徑？\"><a href=\"#何謂路徑？\" class=\"headerlink\" title=\"何謂路徑？\"></a>何謂路徑？</h2><p>要介紹路徑繪圖相關的api之前，必須要先理解什麼叫做『路徑』。<br>有學過電腦繪圖軟體，例如Adobe Photoshop, Adobe Illustrator的同學可能對『路徑』這個詞相當的熟悉，同時也可能可以更快速掌握2D渲染環境路徑繪圖的概念，但是考量到大多數人都沒有美術學經歷背景，所以這邊還是簡單做點說明~</p>\n<blockquote>\n<p>路徑是使用繪圖工具建立的任意形狀的曲線，用它可勾勒出物體的輪廓，所以也稱之為輪廓線。 為了滿足繪圖的需要，路徑又分為開放路徑和封閉路徑。 –維基百科</p>\n</blockquote>\n<p>如果要白話一點的解釋『路徑(Path)』這個概念，可以想像成他是由一條透明的曲線所圈出來的一塊(非)開放區域，在canvas中我們可以利用(接下來會提到的)上色填充相關api為已經成形的路徑設定填充色(fill)/邊框色(stroke)。</p>\n<p>有學過SVG相關知識的同學應該馬上就會發現這其實就跟SVG的Path 屬性是一樣的東西～沒錯，路徑(Path)其實是計算機繪圖領域的概念，並不是Canvas獨有的。</p>\n<img src=\"https://i.imgur.com/7TfVMlG.png\" width=\"500\">\n\n<p>(圖片說明：在上圖我們可以看到我們必須要先有一個葉子形狀的Path，然後接著才可以對這個Path施加Fill和Stroke)</p>\n<p>接下來我們要藉由實作的方式來加速學習api的使用方式，藉由實際操作API來畫一條線/一個圓/一個不規則形狀來加深對API的認識。</p>\n<p>在開始之前，有一個<strong>特別需要注意的地方</strong>，那就是『繪製路徑』這個行為過程其實有點類似於用筆尖在紙面上作畫。<br>這個『筆尖』會是一個實際存在的座標(但是你看不到)，打個比方:假設我們現在畫了一段由A點畫向B點的路徑，那麼『筆尖』最後也會停在B上面。<br>這時候要注意，如果沒有利用API去移動筆尖，而是直接在別的地方畫了一個新的形狀，那麼先被畫出來的形狀和後被畫出來的形狀就會產生多餘的連線。</p>\n<h2 id=\"來畫一條線看看吧\"><a href=\"#來畫一條線看看吧\" class=\"headerlink\" title=\"來畫一條線看看吧!\"></a>來畫一條線看看吧!</h2>  <p class=\"codepen\" data-height=\"300\" data-default-tab=\"html,result\" data-slug-hash=\"XWgeKoJ\" data-user=\"mizok_contest\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/mizok_contest/pen/XWgeKoJ\">\n  canvas畫線</a> by mizok_contest (<a href=\"https://codepen.io/mizok_contest\">@mizok_contest</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n\n<h2 id=\"起手式\"><a href=\"#起手式\" class=\"headerlink\" title=\"起手式!\"></a>起手式!</h2><p>任何的路徑在開始畫之前，最好都要先使用ctx.beginPath()來宣告『嘿，我要開始畫路徑囉』;<br>然後在結束路徑繪製時，也最好使用ctx.closePath() 來宣告結束路徑的繪製;</p>\n<p>一般來說如果不宣告結束，那麼路徑就會一直存續下去，這樣就沒有辦法畫出個別獨立的圖形（例如個別獨立顏色不同的方塊）</p>\n<p>另外一提，ctx.fill() (填充顏色的api) 本身自帶closePath的效果，所以如果先執行了fill()，則可以不用額外宣告結束路徑繪製。</p>\n<h2 id=\"接著來畫一個圓\"><a href=\"#接著來畫一個圓\" class=\"headerlink\" title=\"接著來畫一個圓!\"></a>接著來畫一個圓!</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// API 用法</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> ctx.arc(x, y, radius, startAngle, endAngle [, counterclockwise]);</span><br><span class=\"line\"><span class=\"comment\">// x: 圓心X座標</span></span><br><span class=\"line\"><span class=\"comment\">// y: 圓心Y座標</span></span><br><span class=\"line\"><span class=\"comment\">// radius : 半徑</span></span><br><span class=\"line\"><span class=\"comment\">// startAngle: 起始角度=&gt; 記得是順時針為正喔(而且必須要是徑度量)</span></span><br><span class=\"line\"><span class=\"comment\">// endEngle: 結束角度=&gt; 記得是順時針為正喔(而且必須要是徑度量)</span></span><br><span class=\"line\"><span class=\"comment\">// counterClockwise : 是否以逆時針方向作畫</span></span><br></pre></td></tr></table></figure>\n\n<p>這邊我提出了一個錯誤的範例，和一個正確的範例，讓大家可以參考一下錯誤的原因和正確的寫法。</p>\n<p class=\"codepen\" data-height=\"300\" data-default-tab=\"html,result\" data-slug-hash=\"RwgLGPQ\" data-user=\"mizok_contest\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/mizok_contest/pen/RwgLGPQ\">\n  canvas畫圓</a> by mizok_contest (<a href=\"https://codepen.io/mizok_contest\">@mizok_contest</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n\n<h2 id=\"畫一個不規則形狀\"><a href=\"#畫一個不規則形狀\" class=\"headerlink\" title=\"畫一個不規則形狀!\"></a>畫一個不規則形狀!</h2><p>這邊我們利用畫二次曲線的API來畫一個由三條曲線構成的形狀，接著填充並且賦予框線。<br>這邊可以稍微理解一下Canvas 的API ～ ctx.curveTo是怎麼定義二次曲線的參數需求。<br>簡單來說這個api把一段二次曲線看作是一個由三個點所構成的曲線，三個點分別是：</p>\n<ul>\n<li>開始畫線時筆尖的座標(第一端點)</li>\n<li>曲線結束的端點座標(第二端點)</li>\n<li>兩個端點沿著曲線拉出的切線所形成的交點，是為『控制點 cp』</li>\n</ul>\n<img src=\"https://i.imgur.com/zW0Biud.png\" width=\"300\">\n\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> ctx.quadraticCurveTo(cpx, cpy, x, y);</span><br><span class=\"line\"><span class=\"comment\">// cpx: 曲線控制點X座標</span></span><br><span class=\"line\"><span class=\"comment\">// cpy: 曲線控制點Y座標</span></span><br><span class=\"line\"><span class=\"comment\">// x: 曲線結束點Ｘ座標</span></span><br><span class=\"line\"><span class=\"comment\">// y: 曲線結束點Y座標</span></span><br></pre></td></tr></table></figure>\n\n<p class=\"codepen\" data-height=\"300\" data-default-tab=\"html,result\" data-slug-hash=\"ExXwNZL\" data-user=\"mizok_contest\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/mizok_contest/pen/ExXwNZL\">\n  canvas畫不規則形狀</a> by mizok_contest (<a href=\"https://codepen.io/mizok_contest\">@mizok_contest</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n\n<h2 id=\"Canvas-Property的紀錄-save-與復原-restore\"><a href=\"#Canvas-Property的紀錄-save-與復原-restore\" class=\"headerlink\" title=\"Canvas Property的紀錄(save)與復原(restore)\"></a>Canvas Property的紀錄(save)與復原(restore)</h2><p>我們在前面的三個範例都有去調整過渲染環境當前的fillStyle和 strokeStyle 來改變填充色和邊框的顏色。<br>(有電腦繪圖經驗的同學可能很快的就注意到了–這兩個東西其實就是Illustrator的前景色和背景色吧!)<br>要知道，Canvas的Property在同一時間底下是只有一個唯一值的，也就是說填充色在同一瞬間只能被指定一個hex作為類似全域變數的概念，<br>所以如果今天有一個需求，要先畫出一條紅色的線，接著再畫出一條藍色的線，流程便會是：</p>\n<ul>\n<li>把fillstyle 設定成紅色</li>\n<li>畫第一條線</li>\n<li>把fillstyle 設定成藍色</li>\n<li>畫第二條線</li>\n</ul>\n<p>雖然這樣的場景很單純看起來沒什麼，但是如果今天到了很複雜的狀況，例如初始顏色是透過random函數隨機決定的，而繪製過程中突然有需求回歸原本random到的那個顏色，那就會需要有能夠復原Property的需求。</p>\n<p>上述的場景雖然可以透過把字串值存取道臨時變數來達成，但是別忘了，Canvas 的Property 遠遠不止strokeStyle 一個，如果任何一個Property都要存一個變數，想必程式碼會變得很亂。</p>\n<p>這時我們就可以透過Canvas 的原生API，也就是ctx.save()與 ctx.restore() (存檔與讀檔) 來達成上述需求。</p>\n<p>這邊我提出了一個範例，範例中我先random 了一個hex色碼來作為初始顏色，畫一條線，接著把顏色改為藍色再畫一條線，最後我則是回歸原本ramdom到的顏色畫第三條線。</p>\n<p class=\"codepen\" data-height=\"300\" data-default-tab=\"html,result\" data-slug-hash=\"PojJWaE\" data-user=\"mizok_contest\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/mizok_contest/pen/PojJWaE\">\n  canvas畫不規則形狀</a> by mizok_contest (<a href=\"https://codepen.io/mizok_contest\">@mizok_contest</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n\n\n<h2 id=\"路徑繪製-上色-小結\"><a href=\"#路徑繪製-上色-小結\" class=\"headerlink\" title=\"路徑繪製/上色 - 小結\"></a>路徑繪製/上色 - 小結</h2><p>實際上，canvas 關於繪製路徑的api還遠不止上述提到的這幾種。<br>例如曲線還有 ctx.bezierCurveTo()(貝茲曲線), 設定邊框粗細可以用 ctx.lineWidth, 設定端點類型可以用ctx.lineJoin…,etc</p>\n<p>這些api/property 如果要在文章中一一介紹其實多少會變得有點流水帳，所以我比較傾向讓大家自己去搜尋自己需要的api</p>\n<p>推薦在查詢api 的時候可以多使用MDN~ MDN 會是學習Canvas基礎的好幫手。</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D</a></p>\n"},{"title":"Day6 - 2D渲染環境基礎篇 II [補充篇] -  成為Canvas Ninja ～ 理解2D渲染的精髓","_content":"\n## 路徑繪製常令人感到疑惑的點 - 非零纏繞與奇偶規則\n\n初學路徑繪製的時候，大部分人應該會發現一種讓人疑惑的狀況。\n\n那就是當繪製的路徑稍微複雜一點且路徑線段產生交錯的時候，有些透過路徑線圍起來的區域，在發動ctx.fill()填充顏色\n之後，仍然維持未填充的狀態。\n\n之所以產生這種狀況的原因，是因為『你的大腦』和『程式邏輯』判斷封閉區域的規則不一樣。\n\n而這篇文章的重點就在於講解『程式邏輯』判斷一個『路徑』是否存在『封閉區域』的判斷依據。\n\n這個『判斷依據』一共有兩種模式，一種稱為『非零纏繞(Nonzero)』，另外一種則叫做『奇偶規則(Evenodd)』。\n\n## 試著畫一個因為線段交錯而產生複雜封閉區的路徑\n\n能最簡單體現這兩種判斷邏輯差別的方式就是畫兩個五角星，然後在ctx.fill()這個方法內導入填充模式的參數（也就是\"evenodd\" or \"nonzero\"）。\n\n> ctx.fill() 的參數型別相關資訊可以看這篇MDN上的[介紹](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fill)\n\n\n<p class=\"codepen\" data-height=\"300\" data-default-tab=\"html,result\" data-slug-hash=\"BaZmdOv\" data-user=\"mizok_contest\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/mizok_contest/pen/BaZmdOv\">\n  非零纏繞與奇偶規則介紹1</a> by mizok_contest (<a href=\"https://codepen.io/mizok_contest\">@mizok_contest</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n\n> 好啦, 我知道我的五角星很醜, 不要再嫌了\n\n這邊我們可以發現，左邊evenodd規則所畫出來的圖形，中間並沒有被填滿，但是nonezero規則下的圖形卻是相反過來的狀況。\n\n這是為什麼？ 接下來我們就是要來解釋這兩種規則的差異。\n\n## 解釋非零纏繞與奇偶規則\n\n非零纏繞(nonzero)、奇偶規則(evenodd) 其實是在電腦圖學一個很常見的概念(SVG也會牽涉到這兩個東西)，這兩種概念是用在“當判斷一個座標是否處於一個封閉路徑內部時”，採用的兩種基準點。\n\n<img src=\"https://i.imgur.com/uw1xKbU.png\" width=\"400\">\n\n上圖是同一個path , 採用不同的規則時，在被Fill之後的樣子\n我們可以看到這個path是由相同的一組編號1~5的向量線所形成的一個path。\n\n基本上這兩種模式判斷的依據都是透過向量的改變狀況，還有向量的夾角來判定。\n\n這邊我們先來複習一下高中的數學/物理～所謂的向量，指的是一種從座標A移動到座標B的附帶方向的移動量。\n而『向量的夾角』指的則是兩條向量之前夾的最小角度(意思就是說『夾角』永遠是指小於180度的那個角)。\n\n<img src=\"https://i.imgur.com/zeZZ9at.png\">\n\n另外，夾角的計算~必須要是讓兩組向量從同一個座標點出發才能夠判定\n\n> 像下面這邊的案例是透過把A向量拉出延伸, 直到Ａ向量與B向量自同一座標出發\n\n<img src=\"https://i.imgur.com/dlxvUwK.png\" width=\"400\">\n\n我們在接下來的講解其實還會提到向量夾角的正負值，所以我們這邊也簡單的做一些說明:\n\n向量夾角正負的判斷, 這邊就會牽涉到我們前面講到的canvas座標系問題\n\n> 還記得我們前面有提到過canvas的座標系是屬於左手定則坐標系嗎?而且左手定則坐標系是『順時針方向為正\n\n當我們有兩條向量(A與B), 假設今天我們要讓Ａ轉變成B, 其實可以想像有一台以A向量方向前進的車，而突然這台車受到某種外力的干涉，導致車子必須變成以B向量方向行駛:\n\n![向量夾角](https://i.imgur.com/FjkJeyd.png)\n\n\n\n------------------------------------------------------\n\nBTW，對高中數學還有印象的人可能還會記得這個公式～  \n\n假設有一個向量圍成的三角形如下：\n\n<img src=\"https://i.imgur.com/QPXKWpb.png\" width=\"400\">\n\n如果我們要求取AC向量和AB向量的夾角，則可以透過這個公式來求得\n\n\n<img src=\"https://i.imgur.com/POHe4mc.png\" width=\"400\">\n\n\n> 而這樣的公式因爲完全是數理邏輯，所以我們其實也可以把它改寫成程式\n\n接下來我們看看兩種規則是怎麼透過向量夾角機制來判定封閉區域是否存在 :D\n\n###  非零纏繞(nonzero)\n\n<img src=\"https://i.imgur.com/ftLWrMo.png\" width=\"400\">  \n\n\n由點A向外隨便一個方向拉一條無限延伸的線(淡藍色的線)，當這條線和1~5編號的向量交接時，若交接的夾角是呈逆時針，則-1，若為順時針則+1，最後的總和若不為0，代表點A在Path內部(也就是說A在一個封閉路徑內部)，若為0則反之。\n\n### 奇偶規則(evenodd)\n\n<img src=\"https://i.imgur.com/QT1XMRn.png\" width=\"400\">  \n\n> 奇偶規則的判定比較簡單，同時他也跟向量判定沒太大關係。\n\n由點A向外隨便一個方向拉一條無限延伸的線(淡藍色的線)，當這條線和1~5編號的向量交接時，每碰到一條線就+1,\n最後的總和若為奇數，代表點A在Path內部(也就是說A在一個封閉路徑內部)，若為偶數則反之。\n\n\n## 小結\n\n一般來說，大部分情況下evenodd的填充方式不會去涵蓋到shade region\n(就是容易因為模式改變而轉變為 開放/封閉 區域 的地方)。\n\n所以當我們想要用path去畫一個鏤空的圖形，一般會先把fillRule 改成evenodd。\n\n**但是**，evenodd & 鏤空 這兩件事其實不是充要條件，而是就統計學上來講，evenodd模式容易創造出比較多的鏤空區。\n\n根據繪製路徑的細節，nonzero模式同樣也可能創造出鏤空區。例如下面這個案例。\n\n> 這個路徑是以nonzero方式填充，但卻仍然有鏤空區存在。\n\n<img src=\"https://i.imgur.com/6YbkadA.png\" width=\"400\"> \n\n\n\n","source":"_posts/2D渲染環境基礎篇 II [補充篇] -  成為Canvas Ninja ~ 理解2D渲染的精髓.md","raw":"---\ntitle: Day6 - 2D渲染環境基礎篇 II [補充篇] -  成為Canvas Ninja ～ 理解2D渲染的精髓\ncategories: \n- 前端技術學習心得\ntags:\n- 2021鐵人賽\n---\n\n## 路徑繪製常令人感到疑惑的點 - 非零纏繞與奇偶規則\n\n初學路徑繪製的時候，大部分人應該會發現一種讓人疑惑的狀況。\n\n那就是當繪製的路徑稍微複雜一點且路徑線段產生交錯的時候，有些透過路徑線圍起來的區域，在發動ctx.fill()填充顏色\n之後，仍然維持未填充的狀態。\n\n之所以產生這種狀況的原因，是因為『你的大腦』和『程式邏輯』判斷封閉區域的規則不一樣。\n\n而這篇文章的重點就在於講解『程式邏輯』判斷一個『路徑』是否存在『封閉區域』的判斷依據。\n\n這個『判斷依據』一共有兩種模式，一種稱為『非零纏繞(Nonzero)』，另外一種則叫做『奇偶規則(Evenodd)』。\n\n## 試著畫一個因為線段交錯而產生複雜封閉區的路徑\n\n能最簡單體現這兩種判斷邏輯差別的方式就是畫兩個五角星，然後在ctx.fill()這個方法內導入填充模式的參數（也就是\"evenodd\" or \"nonzero\"）。\n\n> ctx.fill() 的參數型別相關資訊可以看這篇MDN上的[介紹](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fill)\n\n\n<p class=\"codepen\" data-height=\"300\" data-default-tab=\"html,result\" data-slug-hash=\"BaZmdOv\" data-user=\"mizok_contest\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/mizok_contest/pen/BaZmdOv\">\n  非零纏繞與奇偶規則介紹1</a> by mizok_contest (<a href=\"https://codepen.io/mizok_contest\">@mizok_contest</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n\n> 好啦, 我知道我的五角星很醜, 不要再嫌了\n\n這邊我們可以發現，左邊evenodd規則所畫出來的圖形，中間並沒有被填滿，但是nonezero規則下的圖形卻是相反過來的狀況。\n\n這是為什麼？ 接下來我們就是要來解釋這兩種規則的差異。\n\n## 解釋非零纏繞與奇偶規則\n\n非零纏繞(nonzero)、奇偶規則(evenodd) 其實是在電腦圖學一個很常見的概念(SVG也會牽涉到這兩個東西)，這兩種概念是用在“當判斷一個座標是否處於一個封閉路徑內部時”，採用的兩種基準點。\n\n<img src=\"https://i.imgur.com/uw1xKbU.png\" width=\"400\">\n\n上圖是同一個path , 採用不同的規則時，在被Fill之後的樣子\n我們可以看到這個path是由相同的一組編號1~5的向量線所形成的一個path。\n\n基本上這兩種模式判斷的依據都是透過向量的改變狀況，還有向量的夾角來判定。\n\n這邊我們先來複習一下高中的數學/物理～所謂的向量，指的是一種從座標A移動到座標B的附帶方向的移動量。\n而『向量的夾角』指的則是兩條向量之前夾的最小角度(意思就是說『夾角』永遠是指小於180度的那個角)。\n\n<img src=\"https://i.imgur.com/zeZZ9at.png\">\n\n另外，夾角的計算~必須要是讓兩組向量從同一個座標點出發才能夠判定\n\n> 像下面這邊的案例是透過把A向量拉出延伸, 直到Ａ向量與B向量自同一座標出發\n\n<img src=\"https://i.imgur.com/dlxvUwK.png\" width=\"400\">\n\n我們在接下來的講解其實還會提到向量夾角的正負值，所以我們這邊也簡單的做一些說明:\n\n向量夾角正負的判斷, 這邊就會牽涉到我們前面講到的canvas座標系問題\n\n> 還記得我們前面有提到過canvas的座標系是屬於左手定則坐標系嗎?而且左手定則坐標系是『順時針方向為正\n\n當我們有兩條向量(A與B), 假設今天我們要讓Ａ轉變成B, 其實可以想像有一台以A向量方向前進的車，而突然這台車受到某種外力的干涉，導致車子必須變成以B向量方向行駛:\n\n![向量夾角](https://i.imgur.com/FjkJeyd.png)\n\n\n\n------------------------------------------------------\n\nBTW，對高中數學還有印象的人可能還會記得這個公式～  \n\n假設有一個向量圍成的三角形如下：\n\n<img src=\"https://i.imgur.com/QPXKWpb.png\" width=\"400\">\n\n如果我們要求取AC向量和AB向量的夾角，則可以透過這個公式來求得\n\n\n<img src=\"https://i.imgur.com/POHe4mc.png\" width=\"400\">\n\n\n> 而這樣的公式因爲完全是數理邏輯，所以我們其實也可以把它改寫成程式\n\n接下來我們看看兩種規則是怎麼透過向量夾角機制來判定封閉區域是否存在 :D\n\n###  非零纏繞(nonzero)\n\n<img src=\"https://i.imgur.com/ftLWrMo.png\" width=\"400\">  \n\n\n由點A向外隨便一個方向拉一條無限延伸的線(淡藍色的線)，當這條線和1~5編號的向量交接時，若交接的夾角是呈逆時針，則-1，若為順時針則+1，最後的總和若不為0，代表點A在Path內部(也就是說A在一個封閉路徑內部)，若為0則反之。\n\n### 奇偶規則(evenodd)\n\n<img src=\"https://i.imgur.com/QT1XMRn.png\" width=\"400\">  \n\n> 奇偶規則的判定比較簡單，同時他也跟向量判定沒太大關係。\n\n由點A向外隨便一個方向拉一條無限延伸的線(淡藍色的線)，當這條線和1~5編號的向量交接時，每碰到一條線就+1,\n最後的總和若為奇數，代表點A在Path內部(也就是說A在一個封閉路徑內部)，若為偶數則反之。\n\n\n## 小結\n\n一般來說，大部分情況下evenodd的填充方式不會去涵蓋到shade region\n(就是容易因為模式改變而轉變為 開放/封閉 區域 的地方)。\n\n所以當我們想要用path去畫一個鏤空的圖形，一般會先把fillRule 改成evenodd。\n\n**但是**，evenodd & 鏤空 這兩件事其實不是充要條件，而是就統計學上來講，evenodd模式容易創造出比較多的鏤空區。\n\n根據繪製路徑的細節，nonzero模式同樣也可能創造出鏤空區。例如下面這個案例。\n\n> 這個路徑是以nonzero方式填充，但卻仍然有鏤空區存在。\n\n<img src=\"https://i.imgur.com/6YbkadA.png\" width=\"400\"> \n\n\n\n","slug":"2D渲染環境基礎篇 II [補充篇] -  成為Canvas Ninja ~ 理解2D渲染的精髓","published":1,"date":"2021-09-14T18:44:43.287Z","updated":"2021-09-21T04:21:56.623Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktx1vyxt0007tay2dtffelie","content":"<h2 id=\"路徑繪製常令人感到疑惑的點-非零纏繞與奇偶規則\"><a href=\"#路徑繪製常令人感到疑惑的點-非零纏繞與奇偶規則\" class=\"headerlink\" title=\"路徑繪製常令人感到疑惑的點 - 非零纏繞與奇偶規則\"></a>路徑繪製常令人感到疑惑的點 - 非零纏繞與奇偶規則</h2><p>初學路徑繪製的時候，大部分人應該會發現一種讓人疑惑的狀況。</p>\n<p>那就是當繪製的路徑稍微複雜一點且路徑線段產生交錯的時候，有些透過路徑線圍起來的區域，在發動ctx.fill()填充顏色<br>之後，仍然維持未填充的狀態。</p>\n<p>之所以產生這種狀況的原因，是因為『你的大腦』和『程式邏輯』判斷封閉區域的規則不一樣。</p>\n<p>而這篇文章的重點就在於講解『程式邏輯』判斷一個『路徑』是否存在『封閉區域』的判斷依據。</p>\n<p>這個『判斷依據』一共有兩種模式，一種稱為『非零纏繞(Nonzero)』，另外一種則叫做『奇偶規則(Evenodd)』。</p>\n<h2 id=\"試著畫一個因為線段交錯而產生複雜封閉區的路徑\"><a href=\"#試著畫一個因為線段交錯而產生複雜封閉區的路徑\" class=\"headerlink\" title=\"試著畫一個因為線段交錯而產生複雜封閉區的路徑\"></a>試著畫一個因為線段交錯而產生複雜封閉區的路徑</h2><p>能最簡單體現這兩種判斷邏輯差別的方式就是畫兩個五角星，然後在ctx.fill()這個方法內導入填充模式的參數（也就是”evenodd” or “nonzero”）。</p>\n<blockquote>\n<p>ctx.fill() 的參數型別相關資訊可以看這篇MDN上的<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fill\">介紹</a></p>\n</blockquote>\n<p class=\"codepen\" data-height=\"300\" data-default-tab=\"html,result\" data-slug-hash=\"BaZmdOv\" data-user=\"mizok_contest\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/mizok_contest/pen/BaZmdOv\">\n  非零纏繞與奇偶規則介紹1</a> by mizok_contest (<a href=\"https://codepen.io/mizok_contest\">@mizok_contest</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n\n<blockquote>\n<p>好啦, 我知道我的五角星很醜, 不要再嫌了</p>\n</blockquote>\n<p>這邊我們可以發現，左邊evenodd規則所畫出來的圖形，中間並沒有被填滿，但是nonezero規則下的圖形卻是相反過來的狀況。</p>\n<p>這是為什麼？ 接下來我們就是要來解釋這兩種規則的差異。</p>\n<h2 id=\"解釋非零纏繞與奇偶規則\"><a href=\"#解釋非零纏繞與奇偶規則\" class=\"headerlink\" title=\"解釋非零纏繞與奇偶規則\"></a>解釋非零纏繞與奇偶規則</h2><p>非零纏繞(nonzero)、奇偶規則(evenodd) 其實是在電腦圖學一個很常見的概念(SVG也會牽涉到這兩個東西)，這兩種概念是用在“當判斷一個座標是否處於一個封閉路徑內部時”，採用的兩種基準點。</p>\n<img src=\"https://i.imgur.com/uw1xKbU.png\" width=\"400\">\n\n<p>上圖是同一個path , 採用不同的規則時，在被Fill之後的樣子<br>我們可以看到這個path是由相同的一組編號1~5的向量線所形成的一個path。</p>\n<p>基本上這兩種模式判斷的依據都是透過向量的改變狀況，還有向量的夾角來判定。</p>\n<p>這邊我們先來複習一下高中的數學/物理～所謂的向量，指的是一種從座標A移動到座標B的附帶方向的移動量。<br>而『向量的夾角』指的則是兩條向量之前夾的最小角度(意思就是說『夾角』永遠是指小於180度的那個角)。</p>\n<img src=\"https://i.imgur.com/zeZZ9at.png\">\n\n<p>另外，夾角的計算~必須要是讓兩組向量從同一個座標點出發才能夠判定</p>\n<blockquote>\n<p>像下面這邊的案例是透過把A向量拉出延伸, 直到Ａ向量與B向量自同一座標出發</p>\n</blockquote>\n<img src=\"https://i.imgur.com/dlxvUwK.png\" width=\"400\">\n\n<p>我們在接下來的講解其實還會提到向量夾角的正負值，所以我們這邊也簡單的做一些說明:</p>\n<p>向量夾角正負的判斷, 這邊就會牽涉到我們前面講到的canvas座標系問題</p>\n<blockquote>\n<p>還記得我們前面有提到過canvas的座標系是屬於左手定則坐標系嗎?而且左手定則坐標系是『順時針方向為正</p>\n</blockquote>\n<p>當我們有兩條向量(A與B), 假設今天我們要讓Ａ轉變成B, 其實可以想像有一台以A向量方向前進的車，而突然這台車受到某種外力的干涉，導致車子必須變成以B向量方向行駛:</p>\n<p><img src=\"https://i.imgur.com/FjkJeyd.png\" alt=\"向量夾角\"></p>\n<hr>\n<p>BTW，對高中數學還有印象的人可能還會記得這個公式～  </p>\n<p>假設有一個向量圍成的三角形如下：</p>\n<img src=\"https://i.imgur.com/QPXKWpb.png\" width=\"400\">\n\n<p>如果我們要求取AC向量和AB向量的夾角，則可以透過這個公式來求得</p>\n<img src=\"https://i.imgur.com/POHe4mc.png\" width=\"400\">\n\n\n<blockquote>\n<p>而這樣的公式因爲完全是數理邏輯，所以我們其實也可以把它改寫成程式</p>\n</blockquote>\n<p>接下來我們看看兩種規則是怎麼透過向量夾角機制來判定封閉區域是否存在 :D</p>\n<h3 id=\"非零纏繞-nonzero\"><a href=\"#非零纏繞-nonzero\" class=\"headerlink\" title=\"非零纏繞(nonzero)\"></a>非零纏繞(nonzero)</h3><img src=\"https://i.imgur.com/ftLWrMo.png\" width=\"400\">  \n\n\n<p>由點A向外隨便一個方向拉一條無限延伸的線(淡藍色的線)，當這條線和1~5編號的向量交接時，若交接的夾角是呈逆時針，則-1，若為順時針則+1，最後的總和若不為0，代表點A在Path內部(也就是說A在一個封閉路徑內部)，若為0則反之。</p>\n<h3 id=\"奇偶規則-evenodd\"><a href=\"#奇偶規則-evenodd\" class=\"headerlink\" title=\"奇偶規則(evenodd)\"></a>奇偶規則(evenodd)</h3><img src=\"https://i.imgur.com/QT1XMRn.png\" width=\"400\">  \n\n<blockquote>\n<p>奇偶規則的判定比較簡單，同時他也跟向量判定沒太大關係。</p>\n</blockquote>\n<p>由點A向外隨便一個方向拉一條無限延伸的線(淡藍色的線)，當這條線和1~5編號的向量交接時，每碰到一條線就+1,<br>最後的總和若為奇數，代表點A在Path內部(也就是說A在一個封閉路徑內部)，若為偶數則反之。</p>\n<h2 id=\"小結\"><a href=\"#小結\" class=\"headerlink\" title=\"小結\"></a>小結</h2><p>一般來說，大部分情況下evenodd的填充方式不會去涵蓋到shade region<br>(就是容易因為模式改變而轉變為 開放/封閉 區域 的地方)。</p>\n<p>所以當我們想要用path去畫一個鏤空的圖形，一般會先把fillRule 改成evenodd。</p>\n<p><strong>但是</strong>，evenodd &amp; 鏤空 這兩件事其實不是充要條件，而是就統計學上來講，evenodd模式容易創造出比較多的鏤空區。</p>\n<p>根據繪製路徑的細節，nonzero模式同樣也可能創造出鏤空區。例如下面這個案例。</p>\n<blockquote>\n<p>這個路徑是以nonzero方式填充，但卻仍然有鏤空區存在。</p>\n</blockquote>\n<img src=\"https://i.imgur.com/6YbkadA.png\" width=\"400\"> \n\n\n\n","site":{"data":{"css/variables":"","languages":{"zh-TW":{"title":{"archive":"時間線","category":"分類","tag":"標籤","schedule":"時間表"},"menu":{"home":"首頁","archives":"時間線","categories":"分類","tags":"標籤","about":"關於","search":"搜尋","schedule":"時間表","sitemap":"網站地圖","commonweal":"公益 404"},"sidebar":{"overview":"本站概要","toc":"文章目錄"},"post":{"posted":"發表於","edited":"更新於","created":"創建時間","modified":"修改時間","edit":"編輯","in":"分類於","read_more":"閱讀全文","untitled":"未命名","sticky":"置頂文","views":"閱讀次數","related_posts":"相關文章","copyright":{"author":"作者","link":"文章連結","post_author":"Written by","post_link":"This article originally appeared on","license_title":"版權聲明","license_content":"本網誌所有文章除特別聲明外，均採用 %s 許可協議。轉載請註明出處！"}},"footer":{"powered":"","total_views":"總瀏覽次數","total_visitors":"訪客總數"},"counter":{"tag_cloud":{"zero":"目前還沒有任何標籤","one":"目前共有 1 個標籤","other":"目前共有 %d 個標籤"},"categories":{"zero":"目前還沒有任何分類","one":"目前共有 1 個分類","other":"目前共有 %d 個分類"},"archive_posts":{"zero":"目前還沒有任何文章。","one":"目前共有 1 篇文章。","other":"目前共有 %d 篇文章。"}},"state":{"posts":"文章","tags":"標籤","categories":"分類"},"search":{"placeholder":"搜尋...","empty":"We didn't find any results for the search: %s","hits_time":"%s results found in %s ms","hits":"%s results found"},"cheers":{"um":"嗯..","ok":"還不錯","nice":"好","good":"很好","great":"非常好","excellent":"棒棒Der"},"keep_on":"繼續努力。","symbol":{"comma":"，","period":"。","colon":"："},"reward":{"donate":"捐贈","wechatpay":"微信支付","alipay":"支付寶","paypal":"貝寶","bitcoin":"比特幣"},"follow_me":{"welcome":"歡迎關注我的其它站點"},"accessibility":{"nav_toggle":"切換導航欄","prev_page":"上一頁","next_page":"下一頁"},"symbols_count_time":{"count":"文章字數","count_total":"總字數","time":"所需閱讀時間","time_total":"所需總閱讀時間","time_minutes":"分鐘"}}},"css/mixins":"","css/styles":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","template/head":"<script src=\"//js/tool/canvas-fx-base.js\"></script>\n\n<script src=\"//js/ripple-logo.js\"></script>\n<script src=\"//js/silk-wave.js\"></script>\n\n<style>\n  @font-face {\n  font-family: \"Roboto\";\n  src: url(//font/Roboto.ttf) format(\"truetype\");\n}\n</style>","css/styl-plugin/grid-post-layout/main":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","css/styl-plugin/grid-post-layout/mixins":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n","css/styl-plugin/grid-post-layout/variables":""}},"excerpt":"","more":"<h2 id=\"路徑繪製常令人感到疑惑的點-非零纏繞與奇偶規則\"><a href=\"#路徑繪製常令人感到疑惑的點-非零纏繞與奇偶規則\" class=\"headerlink\" title=\"路徑繪製常令人感到疑惑的點 - 非零纏繞與奇偶規則\"></a>路徑繪製常令人感到疑惑的點 - 非零纏繞與奇偶規則</h2><p>初學路徑繪製的時候，大部分人應該會發現一種讓人疑惑的狀況。</p>\n<p>那就是當繪製的路徑稍微複雜一點且路徑線段產生交錯的時候，有些透過路徑線圍起來的區域，在發動ctx.fill()填充顏色<br>之後，仍然維持未填充的狀態。</p>\n<p>之所以產生這種狀況的原因，是因為『你的大腦』和『程式邏輯』判斷封閉區域的規則不一樣。</p>\n<p>而這篇文章的重點就在於講解『程式邏輯』判斷一個『路徑』是否存在『封閉區域』的判斷依據。</p>\n<p>這個『判斷依據』一共有兩種模式，一種稱為『非零纏繞(Nonzero)』，另外一種則叫做『奇偶規則(Evenodd)』。</p>\n<h2 id=\"試著畫一個因為線段交錯而產生複雜封閉區的路徑\"><a href=\"#試著畫一個因為線段交錯而產生複雜封閉區的路徑\" class=\"headerlink\" title=\"試著畫一個因為線段交錯而產生複雜封閉區的路徑\"></a>試著畫一個因為線段交錯而產生複雜封閉區的路徑</h2><p>能最簡單體現這兩種判斷邏輯差別的方式就是畫兩個五角星，然後在ctx.fill()這個方法內導入填充模式的參數（也就是”evenodd” or “nonzero”）。</p>\n<blockquote>\n<p>ctx.fill() 的參數型別相關資訊可以看這篇MDN上的<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fill\">介紹</a></p>\n</blockquote>\n<p class=\"codepen\" data-height=\"300\" data-default-tab=\"html,result\" data-slug-hash=\"BaZmdOv\" data-user=\"mizok_contest\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/mizok_contest/pen/BaZmdOv\">\n  非零纏繞與奇偶規則介紹1</a> by mizok_contest (<a href=\"https://codepen.io/mizok_contest\">@mizok_contest</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n\n<blockquote>\n<p>好啦, 我知道我的五角星很醜, 不要再嫌了</p>\n</blockquote>\n<p>這邊我們可以發現，左邊evenodd規則所畫出來的圖形，中間並沒有被填滿，但是nonezero規則下的圖形卻是相反過來的狀況。</p>\n<p>這是為什麼？ 接下來我們就是要來解釋這兩種規則的差異。</p>\n<h2 id=\"解釋非零纏繞與奇偶規則\"><a href=\"#解釋非零纏繞與奇偶規則\" class=\"headerlink\" title=\"解釋非零纏繞與奇偶規則\"></a>解釋非零纏繞與奇偶規則</h2><p>非零纏繞(nonzero)、奇偶規則(evenodd) 其實是在電腦圖學一個很常見的概念(SVG也會牽涉到這兩個東西)，這兩種概念是用在“當判斷一個座標是否處於一個封閉路徑內部時”，採用的兩種基準點。</p>\n<img src=\"https://i.imgur.com/uw1xKbU.png\" width=\"400\">\n\n<p>上圖是同一個path , 採用不同的規則時，在被Fill之後的樣子<br>我們可以看到這個path是由相同的一組編號1~5的向量線所形成的一個path。</p>\n<p>基本上這兩種模式判斷的依據都是透過向量的改變狀況，還有向量的夾角來判定。</p>\n<p>這邊我們先來複習一下高中的數學/物理～所謂的向量，指的是一種從座標A移動到座標B的附帶方向的移動量。<br>而『向量的夾角』指的則是兩條向量之前夾的最小角度(意思就是說『夾角』永遠是指小於180度的那個角)。</p>\n<img src=\"https://i.imgur.com/zeZZ9at.png\">\n\n<p>另外，夾角的計算~必須要是讓兩組向量從同一個座標點出發才能夠判定</p>\n<blockquote>\n<p>像下面這邊的案例是透過把A向量拉出延伸, 直到Ａ向量與B向量自同一座標出發</p>\n</blockquote>\n<img src=\"https://i.imgur.com/dlxvUwK.png\" width=\"400\">\n\n<p>我們在接下來的講解其實還會提到向量夾角的正負值，所以我們這邊也簡單的做一些說明:</p>\n<p>向量夾角正負的判斷, 這邊就會牽涉到我們前面講到的canvas座標系問題</p>\n<blockquote>\n<p>還記得我們前面有提到過canvas的座標系是屬於左手定則坐標系嗎?而且左手定則坐標系是『順時針方向為正</p>\n</blockquote>\n<p>當我們有兩條向量(A與B), 假設今天我們要讓Ａ轉變成B, 其實可以想像有一台以A向量方向前進的車，而突然這台車受到某種外力的干涉，導致車子必須變成以B向量方向行駛:</p>\n<p><img src=\"https://i.imgur.com/FjkJeyd.png\" alt=\"向量夾角\"></p>\n<hr>\n<p>BTW，對高中數學還有印象的人可能還會記得這個公式～  </p>\n<p>假設有一個向量圍成的三角形如下：</p>\n<img src=\"https://i.imgur.com/QPXKWpb.png\" width=\"400\">\n\n<p>如果我們要求取AC向量和AB向量的夾角，則可以透過這個公式來求得</p>\n<img src=\"https://i.imgur.com/POHe4mc.png\" width=\"400\">\n\n\n<blockquote>\n<p>而這樣的公式因爲完全是數理邏輯，所以我們其實也可以把它改寫成程式</p>\n</blockquote>\n<p>接下來我們看看兩種規則是怎麼透過向量夾角機制來判定封閉區域是否存在 :D</p>\n<h3 id=\"非零纏繞-nonzero\"><a href=\"#非零纏繞-nonzero\" class=\"headerlink\" title=\"非零纏繞(nonzero)\"></a>非零纏繞(nonzero)</h3><img src=\"https://i.imgur.com/ftLWrMo.png\" width=\"400\">  \n\n\n<p>由點A向外隨便一個方向拉一條無限延伸的線(淡藍色的線)，當這條線和1~5編號的向量交接時，若交接的夾角是呈逆時針，則-1，若為順時針則+1，最後的總和若不為0，代表點A在Path內部(也就是說A在一個封閉路徑內部)，若為0則反之。</p>\n<h3 id=\"奇偶規則-evenodd\"><a href=\"#奇偶規則-evenodd\" class=\"headerlink\" title=\"奇偶規則(evenodd)\"></a>奇偶規則(evenodd)</h3><img src=\"https://i.imgur.com/QT1XMRn.png\" width=\"400\">  \n\n<blockquote>\n<p>奇偶規則的判定比較簡單，同時他也跟向量判定沒太大關係。</p>\n</blockquote>\n<p>由點A向外隨便一個方向拉一條無限延伸的線(淡藍色的線)，當這條線和1~5編號的向量交接時，每碰到一條線就+1,<br>最後的總和若為奇數，代表點A在Path內部(也就是說A在一個封閉路徑內部)，若為偶數則反之。</p>\n<h2 id=\"小結\"><a href=\"#小結\" class=\"headerlink\" title=\"小結\"></a>小結</h2><p>一般來說，大部分情況下evenodd的填充方式不會去涵蓋到shade region<br>(就是容易因為模式改變而轉變為 開放/封閉 區域 的地方)。</p>\n<p>所以當我們想要用path去畫一個鏤空的圖形，一般會先把fillRule 改成evenodd。</p>\n<p><strong>但是</strong>，evenodd &amp; 鏤空 這兩件事其實不是充要條件，而是就統計學上來講，evenodd模式容易創造出比較多的鏤空區。</p>\n<p>根據繪製路徑的細節，nonzero模式同樣也可能創造出鏤空區。例如下面這個案例。</p>\n<blockquote>\n<p>這個路徑是以nonzero方式填充，但卻仍然有鏤空區存在。</p>\n</blockquote>\n<img src=\"https://i.imgur.com/6YbkadA.png\" width=\"400\"> \n\n\n\n"},{"title":"Day7 - 2D渲染環境基礎篇 III[ 變形與陣列運算 ] -  成為Canvas Ninja ～ 理解2D渲染的精髓","_content":"\n之前我們有提到過，canvas其實本身可以看做一群像素形成的2維陣列，而Canvas的圖像變形，其實就是對canvas自身做的一種陣列運算。  \n\n高中讀理組的同學可能還記得數學課學過的『旋轉矩陣』、『平移矩陣』...之類的東西~沒有錯，其實Canvas的變形API背後的原理就是矩陣運算～而第一次聽到這些名詞的人也不用太擔心如何理解這些數理常識，因為在2D渲染環境的case中，其實光靠API就已經可以處理絕大部分的變形問題。\n\n接下來我們就直接看看變形相關的API都有哪些～\n# Rotate/Translate/scale\n之所以把這三個放在一起介紹，是因為這三個API常常會一同使用。\n\n有些人可能會想像canvas的旋轉應該就是旋轉當前畫好的圖像，但是實際上不是的。  \nCanvas的旋轉是固定以**座標軸原點**(0,0)為旋轉中心轉動整張canvas。\n\n就像MDN上面的這張圖片一樣\n\n![img](https://i.imgur.com/WWyvfm7.png)\n\n到這邊一定會有人問~那如果說我需要以某個座標作為旋轉中心, 要怎麼辦？\n這時候就會用到ctx.translate。ctx.translate的用途是把座標軸中心移動到指定新座標，這樣我們就可以透過移動**座標軸原點**來滿足移動旋轉中心的需求\n\n![img](https://i.imgur.com/QAUyriB.png)\n\n而最後scale其實就跟rotate差不多，比較不同的是scale可以輸入兩個參數，一個參數是for X軸，另一個for Y軸(分別是兩個方向的縮放變形)，而當然因為縮放也同樣會有所謂的\"變形中心\"，變形中心也就跟rotate一樣固定默認為座標軸原點，所以要移動變形中心也是必須要依賴ctx.translate\n# Transform/setTransform/getTransform\n\n之所以把Transform系列的API 獨立出來講，是因為Transform的參數稍多，一條一條拉出來講解比較清楚些。\n而且因為這個API會牽涉到一點點矩陣運算的常識，所以我想也可以稍微提到點這部分背後的運算邏輯(其實還蠻有趣的)～\n\n> 由於這邊我們不會另外講解一般矩陣運算的做法，高中沒有學過或已經還給老師的人可以看[這邊](https://highscope.ch.ntu.edu.tw/wordpress/?p=50848)\n\n## ctx.transform() 的用法\n\n````javascript  \nvoid ctx.transform(a, b, c, d, e, f); //一共會有六個參數\n\n//a (m11): 水平scale參數, 最小值為1\n\n//b (m12): Y軸傾斜參數(skewY) , 最小值為0\n\n//c (m21): X軸傾斜參數(skewX) , 最小值為0\n\n//d (m22): 垂直scale參數 , 最小值為1\n\n//e (dx): X軸平移參數 , 最小值為0\n\n//f (dy): Y軸平移參數 , 最小值為0\n\n````\n\n在這邊我們可以看到這些m11、m12..,etc.這些奇怪的代號，這邊m11,m12,m21,m22指的是**當前變形矩陣**(Current Transform Matrix, 簡稱CTM)的四個子項名稱(例如m11意思就是CTM的第一行第一列的元素)。\n\n所謂的**當前變形矩陣**(CTM)是一個3x3矩陣，用途是用來表示canvas元素當前的變形狀態，而當我們每次去使用ctx.scale/ctx.translate/ctx.transform/ctx.rotate 最終都會導致CTM產生變化。  \n\n仔細觀察上面a,b,c,d,e,f 這幾個參數，會發現一個有趣的地方，那就是這些參數似乎沒有跟Rotate相關的數值(例如角度)，這是因為~ Canvas的旋轉，其實是SkewX/SkewY 合併運用而產生的結果，所以這邊我們可以看到SkewX/SkewY相關的參數，但卻看不到Rotate的Degree值。\n\n## ctx.getTransform()/ctx.setTransform() 的用法\n\n首先，這兩個方法其實就是直接去 取得/設定 CTM。  \ngetTransform 本身並沒有參數，他會回傳當前渲染環境的CTM陣列值。  \n\n````javascript\nlet storedTransform = ctx.getTransform();\n````\n\nsetTransform 本身的參數則和transform一模一樣，但是他和transform的差別就在於setTransform是直接賦予CTM指定的新陣列值，而transform的陣列值則會透過矩陣乘積的方式累計到當前的CTM上(後面會提到)\n\n````javascript  \nvoid ctx.transform(a, b, c, d, e, f); //一共會有六個參數\n````\n\n## 當前變形矩陣(CTM)與變形前後向量座標的關係\n\n這邊我們實際用矩陣來表示CTM的組成:\n\n````\na(m11) c(m21) e(dx)\n\nb(m12) d(m22) f(dy)\n\n0   0   1   \n````\n\n假設今天我們要透過改寫CTM來引導Canvas的變形，則CTM與任意一個像素(Xi,Yi)的關係就如下圖：\n\n> 舊像素座標陣列  =  CTM * 新像素座標陣列\n\n![img](https://i.imgur.com/6jP31jy.png)\n\n這邊我們可以發現一個有趣的點，那就是CTM竟然是放在等號後面的，這意味著若我們已知變形前座標和CTM的陣列值，我們其實就可以透過解二元一次聯立方程式來取得變形後座標。\n\n就像這樣:\n\n````\nXin*a+Yin*c+dx = Xip\nXin*b+Yin*d+dy = Yip\n````\n## 當前變形矩陣(CTM)與變形的計算方法\n\n我們前面有提到過Canvas的變形運算其實就是簡單的矩陣乘法，假設我們今天令一個canvas先後做了兩次Transform\n\nCTM的初始值:\n\n````\n1 0 0\n0 1 0\n0 0 1\n````\n\n第一次Transform使用的a,b,c,d,e,f 值：\n\n````\n1  -0.5  30\n0.5  1  10\n0    0   1\n````\n\n第二次Transform使用的a,b,c,d,e,f 值：\n\n````\n1  -0.5  30\n0.5  1  10\n0    0   1\n````\n\n則最終CTM將會變成一二兩次Transform陣列的乘積：\n\n````\n0.75 -1  55\n\n1   0.75  35\n\n0    0    1\n````\n\n# 小結\n\n雖然說大部分人可能會覺得變形只是一種稀鬆平常的電腦繪圖操作，但是我覺得它背後的數學運算相當的有趣。  \n\n除此之外，雖然這次介紹的部分可能稍微比較需要花時間理解，而且在大部分的2D渲染案例，我們也比較少會需要理解到這麼深，但是未來若是要學習webgl環境的渲染編程，陣列運算會是相當重要的一環。  \n\n所以還是老話一句『學了不虧』～\n\n\n\n\n\n","source":"_posts/2D渲染環境基礎篇 III[ 變形與陣列運算 ]  -  成為Canvas Ninja ~ 理解2D渲染的精髓.md","raw":"---\ntitle: Day7 - 2D渲染環境基礎篇 III[ 變形與陣列運算 ] -  成為Canvas Ninja ～ 理解2D渲染的精髓\ncategories: \n- 前端技術學習心得\ntags:\n- 2021鐵人賽\n---\n\n之前我們有提到過，canvas其實本身可以看做一群像素形成的2維陣列，而Canvas的圖像變形，其實就是對canvas自身做的一種陣列運算。  \n\n高中讀理組的同學可能還記得數學課學過的『旋轉矩陣』、『平移矩陣』...之類的東西~沒有錯，其實Canvas的變形API背後的原理就是矩陣運算～而第一次聽到這些名詞的人也不用太擔心如何理解這些數理常識，因為在2D渲染環境的case中，其實光靠API就已經可以處理絕大部分的變形問題。\n\n接下來我們就直接看看變形相關的API都有哪些～\n# Rotate/Translate/scale\n之所以把這三個放在一起介紹，是因為這三個API常常會一同使用。\n\n有些人可能會想像canvas的旋轉應該就是旋轉當前畫好的圖像，但是實際上不是的。  \nCanvas的旋轉是固定以**座標軸原點**(0,0)為旋轉中心轉動整張canvas。\n\n就像MDN上面的這張圖片一樣\n\n![img](https://i.imgur.com/WWyvfm7.png)\n\n到這邊一定會有人問~那如果說我需要以某個座標作為旋轉中心, 要怎麼辦？\n這時候就會用到ctx.translate。ctx.translate的用途是把座標軸中心移動到指定新座標，這樣我們就可以透過移動**座標軸原點**來滿足移動旋轉中心的需求\n\n![img](https://i.imgur.com/QAUyriB.png)\n\n而最後scale其實就跟rotate差不多，比較不同的是scale可以輸入兩個參數，一個參數是for X軸，另一個for Y軸(分別是兩個方向的縮放變形)，而當然因為縮放也同樣會有所謂的\"變形中心\"，變形中心也就跟rotate一樣固定默認為座標軸原點，所以要移動變形中心也是必須要依賴ctx.translate\n# Transform/setTransform/getTransform\n\n之所以把Transform系列的API 獨立出來講，是因為Transform的參數稍多，一條一條拉出來講解比較清楚些。\n而且因為這個API會牽涉到一點點矩陣運算的常識，所以我想也可以稍微提到點這部分背後的運算邏輯(其實還蠻有趣的)～\n\n> 由於這邊我們不會另外講解一般矩陣運算的做法，高中沒有學過或已經還給老師的人可以看[這邊](https://highscope.ch.ntu.edu.tw/wordpress/?p=50848)\n\n## ctx.transform() 的用法\n\n````javascript  \nvoid ctx.transform(a, b, c, d, e, f); //一共會有六個參數\n\n//a (m11): 水平scale參數, 最小值為1\n\n//b (m12): Y軸傾斜參數(skewY) , 最小值為0\n\n//c (m21): X軸傾斜參數(skewX) , 最小值為0\n\n//d (m22): 垂直scale參數 , 最小值為1\n\n//e (dx): X軸平移參數 , 最小值為0\n\n//f (dy): Y軸平移參數 , 最小值為0\n\n````\n\n在這邊我們可以看到這些m11、m12..,etc.這些奇怪的代號，這邊m11,m12,m21,m22指的是**當前變形矩陣**(Current Transform Matrix, 簡稱CTM)的四個子項名稱(例如m11意思就是CTM的第一行第一列的元素)。\n\n所謂的**當前變形矩陣**(CTM)是一個3x3矩陣，用途是用來表示canvas元素當前的變形狀態，而當我們每次去使用ctx.scale/ctx.translate/ctx.transform/ctx.rotate 最終都會導致CTM產生變化。  \n\n仔細觀察上面a,b,c,d,e,f 這幾個參數，會發現一個有趣的地方，那就是這些參數似乎沒有跟Rotate相關的數值(例如角度)，這是因為~ Canvas的旋轉，其實是SkewX/SkewY 合併運用而產生的結果，所以這邊我們可以看到SkewX/SkewY相關的參數，但卻看不到Rotate的Degree值。\n\n## ctx.getTransform()/ctx.setTransform() 的用法\n\n首先，這兩個方法其實就是直接去 取得/設定 CTM。  \ngetTransform 本身並沒有參數，他會回傳當前渲染環境的CTM陣列值。  \n\n````javascript\nlet storedTransform = ctx.getTransform();\n````\n\nsetTransform 本身的參數則和transform一模一樣，但是他和transform的差別就在於setTransform是直接賦予CTM指定的新陣列值，而transform的陣列值則會透過矩陣乘積的方式累計到當前的CTM上(後面會提到)\n\n````javascript  \nvoid ctx.transform(a, b, c, d, e, f); //一共會有六個參數\n````\n\n## 當前變形矩陣(CTM)與變形前後向量座標的關係\n\n這邊我們實際用矩陣來表示CTM的組成:\n\n````\na(m11) c(m21) e(dx)\n\nb(m12) d(m22) f(dy)\n\n0   0   1   \n````\n\n假設今天我們要透過改寫CTM來引導Canvas的變形，則CTM與任意一個像素(Xi,Yi)的關係就如下圖：\n\n> 舊像素座標陣列  =  CTM * 新像素座標陣列\n\n![img](https://i.imgur.com/6jP31jy.png)\n\n這邊我們可以發現一個有趣的點，那就是CTM竟然是放在等號後面的，這意味著若我們已知變形前座標和CTM的陣列值，我們其實就可以透過解二元一次聯立方程式來取得變形後座標。\n\n就像這樣:\n\n````\nXin*a+Yin*c+dx = Xip\nXin*b+Yin*d+dy = Yip\n````\n## 當前變形矩陣(CTM)與變形的計算方法\n\n我們前面有提到過Canvas的變形運算其實就是簡單的矩陣乘法，假設我們今天令一個canvas先後做了兩次Transform\n\nCTM的初始值:\n\n````\n1 0 0\n0 1 0\n0 0 1\n````\n\n第一次Transform使用的a,b,c,d,e,f 值：\n\n````\n1  -0.5  30\n0.5  1  10\n0    0   1\n````\n\n第二次Transform使用的a,b,c,d,e,f 值：\n\n````\n1  -0.5  30\n0.5  1  10\n0    0   1\n````\n\n則最終CTM將會變成一二兩次Transform陣列的乘積：\n\n````\n0.75 -1  55\n\n1   0.75  35\n\n0    0    1\n````\n\n# 小結\n\n雖然說大部分人可能會覺得變形只是一種稀鬆平常的電腦繪圖操作，但是我覺得它背後的數學運算相當的有趣。  \n\n除此之外，雖然這次介紹的部分可能稍微比較需要花時間理解，而且在大部分的2D渲染案例，我們也比較少會需要理解到這麼深，但是未來若是要學習webgl環境的渲染編程，陣列運算會是相當重要的一環。  \n\n所以還是老話一句『學了不虧』～\n\n\n\n\n\n","slug":"2D渲染環境基礎篇 III[ 變形與陣列運算 ]  -  成為Canvas Ninja ~ 理解2D渲染的精髓","published":1,"date":"2021-09-13T17:43:16.137Z","updated":"2021-09-21T10:08:37.736Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktx1vyxv0009tay2ebe62s73","content":"<p>之前我們有提到過，canvas其實本身可以看做一群像素形成的2維陣列，而Canvas的圖像變形，其實就是對canvas自身做的一種陣列運算。  </p>\n<p>高中讀理組的同學可能還記得數學課學過的『旋轉矩陣』、『平移矩陣』…之類的東西~沒有錯，其實Canvas的變形API背後的原理就是矩陣運算～而第一次聽到這些名詞的人也不用太擔心如何理解這些數理常識，因為在2D渲染環境的case中，其實光靠API就已經可以處理絕大部分的變形問題。</p>\n<p>接下來我們就直接看看變形相關的API都有哪些～</p>\n<h1 id=\"Rotate-Translate-scale\"><a href=\"#Rotate-Translate-scale\" class=\"headerlink\" title=\"Rotate/Translate/scale\"></a>Rotate/Translate/scale</h1><p>之所以把這三個放在一起介紹，是因為這三個API常常會一同使用。</p>\n<p>有些人可能會想像canvas的旋轉應該就是旋轉當前畫好的圖像，但是實際上不是的。<br>Canvas的旋轉是固定以<strong>座標軸原點</strong>(0,0)為旋轉中心轉動整張canvas。</p>\n<p>就像MDN上面的這張圖片一樣</p>\n<p><img src=\"https://i.imgur.com/WWyvfm7.png\" alt=\"img\"></p>\n<p>到這邊一定會有人問~那如果說我需要以某個座標作為旋轉中心, 要怎麼辦？<br>這時候就會用到ctx.translate。ctx.translate的用途是把座標軸中心移動到指定新座標，這樣我們就可以透過移動<strong>座標軸原點</strong>來滿足移動旋轉中心的需求</p>\n<p><img src=\"https://i.imgur.com/QAUyriB.png\" alt=\"img\"></p>\n<p>而最後scale其實就跟rotate差不多，比較不同的是scale可以輸入兩個參數，一個參數是for X軸，另一個for Y軸(分別是兩個方向的縮放變形)，而當然因為縮放也同樣會有所謂的”變形中心”，變形中心也就跟rotate一樣固定默認為座標軸原點，所以要移動變形中心也是必須要依賴ctx.translate</p>\n<h1 id=\"Transform-setTransform-getTransform\"><a href=\"#Transform-setTransform-getTransform\" class=\"headerlink\" title=\"Transform/setTransform/getTransform\"></a>Transform/setTransform/getTransform</h1><p>之所以把Transform系列的API 獨立出來講，是因為Transform的參數稍多，一條一條拉出來講解比較清楚些。<br>而且因為這個API會牽涉到一點點矩陣運算的常識，所以我想也可以稍微提到點這部分背後的運算邏輯(其實還蠻有趣的)～</p>\n<blockquote>\n<p>由於這邊我們不會另外講解一般矩陣運算的做法，高中沒有學過或已經還給老師的人可以看<a href=\"https://highscope.ch.ntu.edu.tw/wordpress/?p=50848\">這邊</a></p>\n</blockquote>\n<h2 id=\"ctx-transform-的用法\"><a href=\"#ctx-transform-的用法\" class=\"headerlink\" title=\"ctx.transform() 的用法\"></a>ctx.transform() 的用法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> ctx.transform(a, b, c, d, e, f); <span class=\"comment\">//一共會有六個參數</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//a (m11): 水平scale參數, 最小值為1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//b (m12): Y軸傾斜參數(skewY) , 最小值為0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//c (m21): X軸傾斜參數(skewX) , 最小值為0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//d (m22): 垂直scale參數 , 最小值為1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//e (dx): X軸平移參數 , 最小值為0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//f (dy): Y軸平移參數 , 最小值為0</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在這邊我們可以看到這些m11、m12..,etc.這些奇怪的代號，這邊m11,m12,m21,m22指的是<strong>當前變形矩陣</strong>(Current Transform Matrix, 簡稱CTM)的四個子項名稱(例如m11意思就是CTM的第一行第一列的元素)。</p>\n<p>所謂的<strong>當前變形矩陣</strong>(CTM)是一個3x3矩陣，用途是用來表示canvas元素當前的變形狀態，而當我們每次去使用ctx.scale/ctx.translate/ctx.transform/ctx.rotate 最終都會導致CTM產生變化。  </p>\n<p>仔細觀察上面a,b,c,d,e,f 這幾個參數，會發現一個有趣的地方，那就是這些參數似乎沒有跟Rotate相關的數值(例如角度)，這是因為~ Canvas的旋轉，其實是SkewX/SkewY 合併運用而產生的結果，所以這邊我們可以看到SkewX/SkewY相關的參數，但卻看不到Rotate的Degree值。</p>\n<h2 id=\"ctx-getTransform-ctx-setTransform-的用法\"><a href=\"#ctx-getTransform-ctx-setTransform-的用法\" class=\"headerlink\" title=\"ctx.getTransform()/ctx.setTransform() 的用法\"></a>ctx.getTransform()/ctx.setTransform() 的用法</h2><p>首先，這兩個方法其實就是直接去 取得/設定 CTM。<br>getTransform 本身並沒有參數，他會回傳當前渲染環境的CTM陣列值。  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> storedTransform = ctx.getTransform();</span><br></pre></td></tr></table></figure>\n\n<p>setTransform 本身的參數則和transform一模一樣，但是他和transform的差別就在於setTransform是直接賦予CTM指定的新陣列值，而transform的陣列值則會透過矩陣乘積的方式累計到當前的CTM上(後面會提到)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> ctx.transform(a, b, c, d, e, f); <span class=\"comment\">//一共會有六個參數</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"當前變形矩陣-CTM-與變形前後向量座標的關係\"><a href=\"#當前變形矩陣-CTM-與變形前後向量座標的關係\" class=\"headerlink\" title=\"當前變形矩陣(CTM)與變形前後向量座標的關係\"></a>當前變形矩陣(CTM)與變形前後向量座標的關係</h2><p>這邊我們實際用矩陣來表示CTM的組成:</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a(<span class=\"name\">m11</span>) c(<span class=\"name\">m21</span>) e(<span class=\"name\">dx</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">b(<span class=\"name\">m12</span>) d(<span class=\"name\">m22</span>) f(<span class=\"name\">dy</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0</span>   <span class=\"number\">0</span>   <span class=\"number\">1</span>   </span><br></pre></td></tr></table></figure>\n\n<p>假設今天我們要透過改寫CTM來引導Canvas的變形，則CTM與任意一個像素(Xi,Yi)的關係就如下圖：</p>\n<blockquote>\n<p>舊像素座標陣列  =  CTM * 新像素座標陣列</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/6jP31jy.png\" alt=\"img\"></p>\n<p>這邊我們可以發現一個有趣的點，那就是CTM竟然是放在等號後面的，這意味著若我們已知變形前座標和CTM的陣列值，我們其實就可以透過解二元一次聯立方程式來取得變形後座標。</p>\n<p>就像這樣:</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Xin<span class=\"number\">*a</span>+Yin<span class=\"number\">*c</span>+dx = Xip</span><br><span class=\"line\">Xin<span class=\"number\">*b</span>+Yin<span class=\"number\">*d</span>+dy = Yip</span><br></pre></td></tr></table></figure>\n<h2 id=\"當前變形矩陣-CTM-與變形的計算方法\"><a href=\"#當前變形矩陣-CTM-與變形的計算方法\" class=\"headerlink\" title=\"當前變形矩陣(CTM)與變形的計算方法\"></a>當前變形矩陣(CTM)與變形的計算方法</h2><p>我們前面有提到過Canvas的變形運算其實就是簡單的矩陣乘法，假設我們今天令一個canvas先後做了兩次Transform</p>\n<p>CTM的初始值:</p>\n<figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">1 </span><span class=\"number\">0</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"symbol\">0 </span><span class=\"number\">1</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"symbol\">0 </span><span class=\"number\">0</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>第一次Transform使用的a,b,c,d,e,f 值：</p>\n<figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">1 </span> -<span class=\"number\">0.5</span>  <span class=\"number\">30</span></span><br><span class=\"line\"><span class=\"number\">0.5</span>  <span class=\"number\">1</span>  <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"symbol\">0 </span>   <span class=\"number\">0</span>   <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>第二次Transform使用的a,b,c,d,e,f 值：</p>\n<figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">1 </span> -<span class=\"number\">0.5</span>  <span class=\"number\">30</span></span><br><span class=\"line\"><span class=\"number\">0.5</span>  <span class=\"number\">1</span>  <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"symbol\">0 </span>   <span class=\"number\">0</span>   <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>則最終CTM將會變成一二兩次Transform陣列的乘積：</p>\n<figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0.75</span> -<span class=\"number\">1</span>  <span class=\"number\">55</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">1 </span>  <span class=\"number\">0.75</span>  <span class=\"number\">35</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">0 </span>   <span class=\"number\">0</span>    <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"小結\"><a href=\"#小結\" class=\"headerlink\" title=\"小結\"></a>小結</h1><p>雖然說大部分人可能會覺得變形只是一種稀鬆平常的電腦繪圖操作，但是我覺得它背後的數學運算相當的有趣。  </p>\n<p>除此之外，雖然這次介紹的部分可能稍微比較需要花時間理解，而且在大部分的2D渲染案例，我們也比較少會需要理解到這麼深，但是未來若是要學習webgl環境的渲染編程，陣列運算會是相當重要的一環。  </p>\n<p>所以還是老話一句『學了不虧』～</p>\n","site":{"data":{"css/variables":"","languages":{"zh-TW":{"title":{"archive":"時間線","category":"分類","tag":"標籤","schedule":"時間表"},"menu":{"home":"首頁","archives":"時間線","categories":"分類","tags":"標籤","about":"關於","search":"搜尋","schedule":"時間表","sitemap":"網站地圖","commonweal":"公益 404"},"sidebar":{"overview":"本站概要","toc":"文章目錄"},"post":{"posted":"發表於","edited":"更新於","created":"創建時間","modified":"修改時間","edit":"編輯","in":"分類於","read_more":"閱讀全文","untitled":"未命名","sticky":"置頂文","views":"閱讀次數","related_posts":"相關文章","copyright":{"author":"作者","link":"文章連結","post_author":"Written by","post_link":"This article originally appeared on","license_title":"版權聲明","license_content":"本網誌所有文章除特別聲明外，均採用 %s 許可協議。轉載請註明出處！"}},"footer":{"powered":"","total_views":"總瀏覽次數","total_visitors":"訪客總數"},"counter":{"tag_cloud":{"zero":"目前還沒有任何標籤","one":"目前共有 1 個標籤","other":"目前共有 %d 個標籤"},"categories":{"zero":"目前還沒有任何分類","one":"目前共有 1 個分類","other":"目前共有 %d 個分類"},"archive_posts":{"zero":"目前還沒有任何文章。","one":"目前共有 1 篇文章。","other":"目前共有 %d 篇文章。"}},"state":{"posts":"文章","tags":"標籤","categories":"分類"},"search":{"placeholder":"搜尋...","empty":"We didn't find any results for the search: %s","hits_time":"%s results found in %s ms","hits":"%s results found"},"cheers":{"um":"嗯..","ok":"還不錯","nice":"好","good":"很好","great":"非常好","excellent":"棒棒Der"},"keep_on":"繼續努力。","symbol":{"comma":"，","period":"。","colon":"："},"reward":{"donate":"捐贈","wechatpay":"微信支付","alipay":"支付寶","paypal":"貝寶","bitcoin":"比特幣"},"follow_me":{"welcome":"歡迎關注我的其它站點"},"accessibility":{"nav_toggle":"切換導航欄","prev_page":"上一頁","next_page":"下一頁"},"symbols_count_time":{"count":"文章字數","count_total":"總字數","time":"所需閱讀時間","time_total":"所需總閱讀時間","time_minutes":"分鐘"}}},"css/mixins":"","css/styles":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","template/head":"<script src=\"//js/tool/canvas-fx-base.js\"></script>\n\n<script src=\"//js/ripple-logo.js\"></script>\n<script src=\"//js/silk-wave.js\"></script>\n\n<style>\n  @font-face {\n  font-family: \"Roboto\";\n  src: url(//font/Roboto.ttf) format(\"truetype\");\n}\n</style>","css/styl-plugin/grid-post-layout/main":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","css/styl-plugin/grid-post-layout/mixins":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n","css/styl-plugin/grid-post-layout/variables":""}},"excerpt":"","more":"<p>之前我們有提到過，canvas其實本身可以看做一群像素形成的2維陣列，而Canvas的圖像變形，其實就是對canvas自身做的一種陣列運算。  </p>\n<p>高中讀理組的同學可能還記得數學課學過的『旋轉矩陣』、『平移矩陣』…之類的東西~沒有錯，其實Canvas的變形API背後的原理就是矩陣運算～而第一次聽到這些名詞的人也不用太擔心如何理解這些數理常識，因為在2D渲染環境的case中，其實光靠API就已經可以處理絕大部分的變形問題。</p>\n<p>接下來我們就直接看看變形相關的API都有哪些～</p>\n<h1 id=\"Rotate-Translate-scale\"><a href=\"#Rotate-Translate-scale\" class=\"headerlink\" title=\"Rotate/Translate/scale\"></a>Rotate/Translate/scale</h1><p>之所以把這三個放在一起介紹，是因為這三個API常常會一同使用。</p>\n<p>有些人可能會想像canvas的旋轉應該就是旋轉當前畫好的圖像，但是實際上不是的。<br>Canvas的旋轉是固定以<strong>座標軸原點</strong>(0,0)為旋轉中心轉動整張canvas。</p>\n<p>就像MDN上面的這張圖片一樣</p>\n<p><img src=\"https://i.imgur.com/WWyvfm7.png\" alt=\"img\"></p>\n<p>到這邊一定會有人問~那如果說我需要以某個座標作為旋轉中心, 要怎麼辦？<br>這時候就會用到ctx.translate。ctx.translate的用途是把座標軸中心移動到指定新座標，這樣我們就可以透過移動<strong>座標軸原點</strong>來滿足移動旋轉中心的需求</p>\n<p><img src=\"https://i.imgur.com/QAUyriB.png\" alt=\"img\"></p>\n<p>而最後scale其實就跟rotate差不多，比較不同的是scale可以輸入兩個參數，一個參數是for X軸，另一個for Y軸(分別是兩個方向的縮放變形)，而當然因為縮放也同樣會有所謂的”變形中心”，變形中心也就跟rotate一樣固定默認為座標軸原點，所以要移動變形中心也是必須要依賴ctx.translate</p>\n<h1 id=\"Transform-setTransform-getTransform\"><a href=\"#Transform-setTransform-getTransform\" class=\"headerlink\" title=\"Transform/setTransform/getTransform\"></a>Transform/setTransform/getTransform</h1><p>之所以把Transform系列的API 獨立出來講，是因為Transform的參數稍多，一條一條拉出來講解比較清楚些。<br>而且因為這個API會牽涉到一點點矩陣運算的常識，所以我想也可以稍微提到點這部分背後的運算邏輯(其實還蠻有趣的)～</p>\n<blockquote>\n<p>由於這邊我們不會另外講解一般矩陣運算的做法，高中沒有學過或已經還給老師的人可以看<a href=\"https://highscope.ch.ntu.edu.tw/wordpress/?p=50848\">這邊</a></p>\n</blockquote>\n<h2 id=\"ctx-transform-的用法\"><a href=\"#ctx-transform-的用法\" class=\"headerlink\" title=\"ctx.transform() 的用法\"></a>ctx.transform() 的用法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> ctx.transform(a, b, c, d, e, f); <span class=\"comment\">//一共會有六個參數</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//a (m11): 水平scale參數, 最小值為1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//b (m12): Y軸傾斜參數(skewY) , 最小值為0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//c (m21): X軸傾斜參數(skewX) , 最小值為0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//d (m22): 垂直scale參數 , 最小值為1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//e (dx): X軸平移參數 , 最小值為0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//f (dy): Y軸平移參數 , 最小值為0</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在這邊我們可以看到這些m11、m12..,etc.這些奇怪的代號，這邊m11,m12,m21,m22指的是<strong>當前變形矩陣</strong>(Current Transform Matrix, 簡稱CTM)的四個子項名稱(例如m11意思就是CTM的第一行第一列的元素)。</p>\n<p>所謂的<strong>當前變形矩陣</strong>(CTM)是一個3x3矩陣，用途是用來表示canvas元素當前的變形狀態，而當我們每次去使用ctx.scale/ctx.translate/ctx.transform/ctx.rotate 最終都會導致CTM產生變化。  </p>\n<p>仔細觀察上面a,b,c,d,e,f 這幾個參數，會發現一個有趣的地方，那就是這些參數似乎沒有跟Rotate相關的數值(例如角度)，這是因為~ Canvas的旋轉，其實是SkewX/SkewY 合併運用而產生的結果，所以這邊我們可以看到SkewX/SkewY相關的參數，但卻看不到Rotate的Degree值。</p>\n<h2 id=\"ctx-getTransform-ctx-setTransform-的用法\"><a href=\"#ctx-getTransform-ctx-setTransform-的用法\" class=\"headerlink\" title=\"ctx.getTransform()/ctx.setTransform() 的用法\"></a>ctx.getTransform()/ctx.setTransform() 的用法</h2><p>首先，這兩個方法其實就是直接去 取得/設定 CTM。<br>getTransform 本身並沒有參數，他會回傳當前渲染環境的CTM陣列值。  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> storedTransform = ctx.getTransform();</span><br></pre></td></tr></table></figure>\n\n<p>setTransform 本身的參數則和transform一模一樣，但是他和transform的差別就在於setTransform是直接賦予CTM指定的新陣列值，而transform的陣列值則會透過矩陣乘積的方式累計到當前的CTM上(後面會提到)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> ctx.transform(a, b, c, d, e, f); <span class=\"comment\">//一共會有六個參數</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"當前變形矩陣-CTM-與變形前後向量座標的關係\"><a href=\"#當前變形矩陣-CTM-與變形前後向量座標的關係\" class=\"headerlink\" title=\"當前變形矩陣(CTM)與變形前後向量座標的關係\"></a>當前變形矩陣(CTM)與變形前後向量座標的關係</h2><p>這邊我們實際用矩陣來表示CTM的組成:</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a(<span class=\"name\">m11</span>) c(<span class=\"name\">m21</span>) e(<span class=\"name\">dx</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">b(<span class=\"name\">m12</span>) d(<span class=\"name\">m22</span>) f(<span class=\"name\">dy</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0</span>   <span class=\"number\">0</span>   <span class=\"number\">1</span>   </span><br></pre></td></tr></table></figure>\n\n<p>假設今天我們要透過改寫CTM來引導Canvas的變形，則CTM與任意一個像素(Xi,Yi)的關係就如下圖：</p>\n<blockquote>\n<p>舊像素座標陣列  =  CTM * 新像素座標陣列</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/6jP31jy.png\" alt=\"img\"></p>\n<p>這邊我們可以發現一個有趣的點，那就是CTM竟然是放在等號後面的，這意味著若我們已知變形前座標和CTM的陣列值，我們其實就可以透過解二元一次聯立方程式來取得變形後座標。</p>\n<p>就像這樣:</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Xin<span class=\"number\">*a</span>+Yin<span class=\"number\">*c</span>+dx = Xip</span><br><span class=\"line\">Xin<span class=\"number\">*b</span>+Yin<span class=\"number\">*d</span>+dy = Yip</span><br></pre></td></tr></table></figure>\n<h2 id=\"當前變形矩陣-CTM-與變形的計算方法\"><a href=\"#當前變形矩陣-CTM-與變形的計算方法\" class=\"headerlink\" title=\"當前變形矩陣(CTM)與變形的計算方法\"></a>當前變形矩陣(CTM)與變形的計算方法</h2><p>我們前面有提到過Canvas的變形運算其實就是簡單的矩陣乘法，假設我們今天令一個canvas先後做了兩次Transform</p>\n<p>CTM的初始值:</p>\n<figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">1 </span><span class=\"number\">0</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"symbol\">0 </span><span class=\"number\">1</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"symbol\">0 </span><span class=\"number\">0</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>第一次Transform使用的a,b,c,d,e,f 值：</p>\n<figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">1 </span> -<span class=\"number\">0.5</span>  <span class=\"number\">30</span></span><br><span class=\"line\"><span class=\"number\">0.5</span>  <span class=\"number\">1</span>  <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"symbol\">0 </span>   <span class=\"number\">0</span>   <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>第二次Transform使用的a,b,c,d,e,f 值：</p>\n<figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">1 </span> -<span class=\"number\">0.5</span>  <span class=\"number\">30</span></span><br><span class=\"line\"><span class=\"number\">0.5</span>  <span class=\"number\">1</span>  <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"symbol\">0 </span>   <span class=\"number\">0</span>   <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>則最終CTM將會變成一二兩次Transform陣列的乘積：</p>\n<figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0.75</span> -<span class=\"number\">1</span>  <span class=\"number\">55</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">1 </span>  <span class=\"number\">0.75</span>  <span class=\"number\">35</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">0 </span>   <span class=\"number\">0</span>    <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"小結\"><a href=\"#小結\" class=\"headerlink\" title=\"小結\"></a>小結</h1><p>雖然說大部分人可能會覺得變形只是一種稀鬆平常的電腦繪圖操作，但是我覺得它背後的數學運算相當的有趣。  </p>\n<p>除此之外，雖然這次介紹的部分可能稍微比較需要花時間理解，而且在大部分的2D渲染案例，我們也比較少會需要理解到這麼深，但是未來若是要學習webgl環境的渲染編程，陣列運算會是相當重要的一環。  </p>\n<p>所以還是老話一句『學了不虧』～</p>\n"},{"title":"Day8 - 2D渲染環境基礎篇 IV[像素操作概論] -  成為Canvas Ninja ～ 理解2D渲染的精髓","_content":"\n『像素操作(Pixel Manipulation)』 顧名思義就是要去以單一像素為最小單位來進行操作，就像我們透過JS改變DOM結構所進行的『DOM操作』必須要先取得被操作元素一樣。  \n\n# canvas 像素操作起手式\n\n上面我們提到了要做像素操作，就必須先取得像素。\n\n就像DOM操作一樣，在操作DOM的時候我們通常要先抓取(`query`)到目標元素，然後才可以接著做`append`/`prepend`/`setAttribute`之類的事情。  \n\n而像素操作的第一步就是要先取得canvas的像素數據(Image Data)。\n\n````javascript\nlet imageData = ctx.getImageData(sx, sy, sw, sh);\n// sx: 想要取得的圖像區域的左上角x軸座標值\n// sy: 想要取得的圖像區域的左上角y軸座標值\n// sw: 想要取得的圖像區域的寬度\n// sh: 想要取得的圖像區域的高度\n````\n\n# 何謂像素數據(Image Data)\n\n我們在前面有提到過，canvas可以被視為一群像素的集合體，而每一個像素本身是由4個channel值所組成的。  \n\n> 『一張寬度100px, 高度100px的canvas，它實際上就是100\\*100 = 10000個像素的集合體，而同時在程序上我們則可以把它轉換成一個長度為100\\*100\\*4的陣列(也就是一共40000個channel值)。』  --- 來自我們前面提過的內容\n\n當我們用ctx.getImageData去取得完整一張canvas(sx,sy定為0, sw, sh定為canvas寬高)的imageData時，我們實際上會取得一個含有全部像素channel值的Uint8ClampedArray（8位元無符號整型固定陣列）\n\n這邊我們透過console.log去檢驗一組由100px x 100px 大小canvas所提取的imageData\n\n![img](https://i.imgur.com/8bzGT1G.png)\n> codepen連結: https://codepen.io/mizok_contest/pen/powKopj\n\n簡單觀察一下首先可以發現, Uint8ClampedArray其實只是imageData的一部分(imageData.data)，其餘還會有height/width等屬性，imageData本身具備獨立的型別，就像String/Array 那樣，他不只單純是個物件而已。\n\n> 有關於ImageData這個型別相關的資訊可以看[這邊](https://developer.mozilla.org/en-US/docs/Web/API/ImageData)\n\n然後接著看看Uint8ClampedArray的部分，可以發現他確實就是由全部像素的channel值所組成;由於我們填入的顏色是紅色(255,0,0,1)，所以channel值的分佈會是255,0,0,255這樣四個一組持續到結束的組合.....，這邊值得注意的一點是Uint8ClampedArray是以0到255來表示alpha channel的值，而不是0到1，那是因為8位元的關係(2的8次方是256, 而0~255剛好是256個數字)。  \n\n> 人類的眼睛大約只可分辨 1,000 萬種顏色，之所以channel值是用8位元陣列來表示，是因為256的3次方(rgb三原色)為16,777,216 , 這個數字恰好落在1000萬的level。\n\n理解了ImageData的資料格式之後，接著可能就會有人問:  \n\n> 我們有沒有辦法從零自己建立一組新的ImageData?\n\nSure, 當然是可以的，而且方法還不只一種。\n\n一般要自己create 新的ImageData，可以依靠:  \n- 2D渲染環境底下的createImageData方法（ctx.createImageData）\n- ImageData class的 constructor (支援性低)\n\n這兩種方法的最大差別就在於前者需要編譯環境下有2DContext存在，但是後者就是可以直接New一個物件出來(適用在部分非瀏覽器環境，另外IE不支援這方法)。  \n\n自己建立出來一個ImageData物件之後，接著可能就會有人再問：\n\n> 那要怎麼把建立出來的ImageData 放到Canvas渲染出來？\n\n這時候就該ctx.putImageData登場了～\n\n````javascript\nvoid ctx.putImageData(imageData, dx, dy);\nvoid ctx.putImageData(imageData, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight);\n// dx: 置放該ImageData渲染區的座標X值(置放在目標canvas上的位置)\n// dy: 置放該ImageData渲染區的座標Y值(置放在目標canvas上的位置)\n// dirtyX: 可以只渲染該ImageData的一部分, 這個值就是用來定義渲染區的起始座標X值(這個值是相對於該ImageData的0,0圓點而言)\n// dirtyY: 可以只渲染該ImageData的一部分, 這個值就是用來定義渲染區的起始座標Y值(這個值是相對於該ImageData的0,0圓點而言)\n// dirtyWidth: 可以只渲染該ImageData的一部分, 這個值就是用來定義渲染區的寬度\n// dirtyHeight: 可以只渲染該ImageData的一部分, 這個值就是用來定義渲染區的高度\n````\n\n介紹完基本的ImageData API，我們接著來看一個蠻經典的像素操作案例～\n\n# 經典的像素操作案例解析 - 拼字圖畫(Image To Ascii)\n\n所謂的拼字圖畫就是像下圖這種，把圖像變成不同符號所形成的一幅圖\n\n![img](https://i.imgur.com/nhxwsL9.jpg)\n\n這邊我分成幾個主要步驟稍微描述一下拼字圖畫的程序邏輯\n\n- 用ctx.drawImage() 先把指定的圖片繪製到canvas上\n\n- 從繪製好圖像的canvas上取得imageData\n\n- 透過把imageData的每個像素點channel值總合取平均來將圖像轉為灰階\n\n- 根據灰階圖像的imageData來把不同的灰階值(例如0~50以@代替,51~100以#代替)轉換為特定符號，然後把這些符號作為字串植入pre元素\n\n接著是源碼：\n\n````javascript\n// 取得圖像載入promise\nfunction loadImage(src){\n    let img = new Image();\n    // 把resolve暴露給外部變數\n    let resolve;\n    let loadPromise = new Promise((res)=>{\n         resolve = res;\n    })\n    // 這一步cross-origin是因為我們的圖片是外部來源\n    // 如果沒有把外部來源設置為\"Anonymous\",drawImage方法會排除掉非本地來源的圖片資訊, 導致無法進行下一步繪圖\n    img.crossOrigin = \"Anonymous\";\n    img.onload = ()=>{\n       resolve(img);\n    }\n    img.src = src;\n  \n    return loadPromise;\n}\n\nasync function getImageDataFromImage(src,ratio = 0.5){\n  // 這邊有一個ratio參數是因為我讀取的圖片稍微有點大張\n  // 所以我補一個參數讓我可以自己決定要把圖片縮小多少倍率\n  let img = await loadImage(src);\n  let width = img.width * ratio;\n  let height = img.height * ratio;\n  // 把外部圖源繪製到架空的canvas上面然後取得imageData\n  let cvs = document.createElement('canvas');\n  let ctx = cvs.getContext('2d');\n      cvs.width = width;\n      cvs.height = height;\n      ctx.drawImage(img,0,0,width,height);\n  let imageData = ctx.getImageData(0,0,width,height);\n  \n  return imageData;\n}\n\nasync function turnImageDataIntoGrayscale(src){\n   let imageData = await getImageDataFromImage(src);\n   let data = imageData.data;\n  // 這邊這個loop的用意就在於把channel值依像素順序來執行程序\n   for(let i=0;i<data.length;i = i+4){\n     let r = data[i];\n     let g = data[i+1];\n     let b = data[i+2];\n     //取得rgb值得平均, 如此一來因為rgb都變成同一個數值\n     // 圖像就會變成灰階圖\n     let average = (r+g+b)/3\n     data[i] = data[i+1] = data[i+2] = average;\n   }\n  return imageData;\n}\n\nasync function redrawAsASCII(src){\n  let grayscaleImageData = await turnImageDataIntoGrayscale(src);\n  // 取用的樣版字元\n  let glyphSource = \"＄＠＃＊。\";\n  let stringOutput = '';\n  for(let i = 0;i<grayscaleImageData.data.length;i = i+4){\n     \n     let pixelIndex = Math.ceil(i/4);\n     // 從像素的次序來判斷該像素是否為右邊緣像素\n     let pixelIsRightRimPixel = (pixelIndex + 1) % grayscaleImageData.width === 0;\n     // 根據像素的灰階值, 用內插的方式來決定要使用哪一個樣版字元來代表該像素\n     let glyphIndex = \n       Math.floor(grayscaleImageData.data[i] / 255 * (glyphSource.length-1));\n       \n       stringOutput+=glyphSource[glyphIndex];\n    \n     if(pixelIsRightRimPixel){\n       // 如果是最右邊緣像素, 則另外補一個換行符號\n        stringOutput+='\\n';\n     }\n  }\n  // 把字串填入pre tag\n  let text = document.querySelector('pre');\n  text.innerHTML = stringOutput;\n}\n\n\n\n\n(()=>{\n  redrawAsASCII('https://i.imgur.com/52TLlOk.png');\n})()\n````\n\ncodepen連結：https://codepen.io/mizok_contest/pen/vYZrXYP\n\n# 小結\n\n老實說我在挑選展示像素操作案例的時候猶豫了很久，最後還是決定要拿拼字圖畫來作為案例介紹。  \n主要是因為我覺得這個案例相較於其他的例子似乎更能讓人提起興趣(雖然對初學者來說可能有點小複雜)。  \n\n在上面這個案例中，其實可以學到很多的小技巧，包括：\n\n- canvas載入圖片的機制\n- imageData的邊緣像素處理\n- 將channel值依像素順序來執行迴圈程序\n- ...\n\n這些小技巧在這個系列文的中後段都會持續用到，所以建議可以仔細讀一下源碼裡面的註解～\n\n這邊我們介紹的『拼字圖畫』其實還只是很基本的一種像素操作運用案例，像素操作真正被廣泛運用(同時也更複雜)的地方實際上在於影像處理(Image Processing)領域，我們將會在稍後的篇章再繼續提到這部分，敬請期待~。\n","source":"_posts/2D渲染環境基礎篇 IV [像素操作概論] -  成為Canvas Ninja ~ 理解2D渲染的精髓.md","raw":"---\ntitle: Day8 - 2D渲染環境基礎篇 IV[像素操作概論] -  成為Canvas Ninja ～ 理解2D渲染的精髓\ncategories: \n- 前端技術學習心得\ntags:\n- 2021鐵人賽\n---\n\n『像素操作(Pixel Manipulation)』 顧名思義就是要去以單一像素為最小單位來進行操作，就像我們透過JS改變DOM結構所進行的『DOM操作』必須要先取得被操作元素一樣。  \n\n# canvas 像素操作起手式\n\n上面我們提到了要做像素操作，就必須先取得像素。\n\n就像DOM操作一樣，在操作DOM的時候我們通常要先抓取(`query`)到目標元素，然後才可以接著做`append`/`prepend`/`setAttribute`之類的事情。  \n\n而像素操作的第一步就是要先取得canvas的像素數據(Image Data)。\n\n````javascript\nlet imageData = ctx.getImageData(sx, sy, sw, sh);\n// sx: 想要取得的圖像區域的左上角x軸座標值\n// sy: 想要取得的圖像區域的左上角y軸座標值\n// sw: 想要取得的圖像區域的寬度\n// sh: 想要取得的圖像區域的高度\n````\n\n# 何謂像素數據(Image Data)\n\n我們在前面有提到過，canvas可以被視為一群像素的集合體，而每一個像素本身是由4個channel值所組成的。  \n\n> 『一張寬度100px, 高度100px的canvas，它實際上就是100\\*100 = 10000個像素的集合體，而同時在程序上我們則可以把它轉換成一個長度為100\\*100\\*4的陣列(也就是一共40000個channel值)。』  --- 來自我們前面提過的內容\n\n當我們用ctx.getImageData去取得完整一張canvas(sx,sy定為0, sw, sh定為canvas寬高)的imageData時，我們實際上會取得一個含有全部像素channel值的Uint8ClampedArray（8位元無符號整型固定陣列）\n\n這邊我們透過console.log去檢驗一組由100px x 100px 大小canvas所提取的imageData\n\n![img](https://i.imgur.com/8bzGT1G.png)\n> codepen連結: https://codepen.io/mizok_contest/pen/powKopj\n\n簡單觀察一下首先可以發現, Uint8ClampedArray其實只是imageData的一部分(imageData.data)，其餘還會有height/width等屬性，imageData本身具備獨立的型別，就像String/Array 那樣，他不只單純是個物件而已。\n\n> 有關於ImageData這個型別相關的資訊可以看[這邊](https://developer.mozilla.org/en-US/docs/Web/API/ImageData)\n\n然後接著看看Uint8ClampedArray的部分，可以發現他確實就是由全部像素的channel值所組成;由於我們填入的顏色是紅色(255,0,0,1)，所以channel值的分佈會是255,0,0,255這樣四個一組持續到結束的組合.....，這邊值得注意的一點是Uint8ClampedArray是以0到255來表示alpha channel的值，而不是0到1，那是因為8位元的關係(2的8次方是256, 而0~255剛好是256個數字)。  \n\n> 人類的眼睛大約只可分辨 1,000 萬種顏色，之所以channel值是用8位元陣列來表示，是因為256的3次方(rgb三原色)為16,777,216 , 這個數字恰好落在1000萬的level。\n\n理解了ImageData的資料格式之後，接著可能就會有人問:  \n\n> 我們有沒有辦法從零自己建立一組新的ImageData?\n\nSure, 當然是可以的，而且方法還不只一種。\n\n一般要自己create 新的ImageData，可以依靠:  \n- 2D渲染環境底下的createImageData方法（ctx.createImageData）\n- ImageData class的 constructor (支援性低)\n\n這兩種方法的最大差別就在於前者需要編譯環境下有2DContext存在，但是後者就是可以直接New一個物件出來(適用在部分非瀏覽器環境，另外IE不支援這方法)。  \n\n自己建立出來一個ImageData物件之後，接著可能就會有人再問：\n\n> 那要怎麼把建立出來的ImageData 放到Canvas渲染出來？\n\n這時候就該ctx.putImageData登場了～\n\n````javascript\nvoid ctx.putImageData(imageData, dx, dy);\nvoid ctx.putImageData(imageData, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight);\n// dx: 置放該ImageData渲染區的座標X值(置放在目標canvas上的位置)\n// dy: 置放該ImageData渲染區的座標Y值(置放在目標canvas上的位置)\n// dirtyX: 可以只渲染該ImageData的一部分, 這個值就是用來定義渲染區的起始座標X值(這個值是相對於該ImageData的0,0圓點而言)\n// dirtyY: 可以只渲染該ImageData的一部分, 這個值就是用來定義渲染區的起始座標Y值(這個值是相對於該ImageData的0,0圓點而言)\n// dirtyWidth: 可以只渲染該ImageData的一部分, 這個值就是用來定義渲染區的寬度\n// dirtyHeight: 可以只渲染該ImageData的一部分, 這個值就是用來定義渲染區的高度\n````\n\n介紹完基本的ImageData API，我們接著來看一個蠻經典的像素操作案例～\n\n# 經典的像素操作案例解析 - 拼字圖畫(Image To Ascii)\n\n所謂的拼字圖畫就是像下圖這種，把圖像變成不同符號所形成的一幅圖\n\n![img](https://i.imgur.com/nhxwsL9.jpg)\n\n這邊我分成幾個主要步驟稍微描述一下拼字圖畫的程序邏輯\n\n- 用ctx.drawImage() 先把指定的圖片繪製到canvas上\n\n- 從繪製好圖像的canvas上取得imageData\n\n- 透過把imageData的每個像素點channel值總合取平均來將圖像轉為灰階\n\n- 根據灰階圖像的imageData來把不同的灰階值(例如0~50以@代替,51~100以#代替)轉換為特定符號，然後把這些符號作為字串植入pre元素\n\n接著是源碼：\n\n````javascript\n// 取得圖像載入promise\nfunction loadImage(src){\n    let img = new Image();\n    // 把resolve暴露給外部變數\n    let resolve;\n    let loadPromise = new Promise((res)=>{\n         resolve = res;\n    })\n    // 這一步cross-origin是因為我們的圖片是外部來源\n    // 如果沒有把外部來源設置為\"Anonymous\",drawImage方法會排除掉非本地來源的圖片資訊, 導致無法進行下一步繪圖\n    img.crossOrigin = \"Anonymous\";\n    img.onload = ()=>{\n       resolve(img);\n    }\n    img.src = src;\n  \n    return loadPromise;\n}\n\nasync function getImageDataFromImage(src,ratio = 0.5){\n  // 這邊有一個ratio參數是因為我讀取的圖片稍微有點大張\n  // 所以我補一個參數讓我可以自己決定要把圖片縮小多少倍率\n  let img = await loadImage(src);\n  let width = img.width * ratio;\n  let height = img.height * ratio;\n  // 把外部圖源繪製到架空的canvas上面然後取得imageData\n  let cvs = document.createElement('canvas');\n  let ctx = cvs.getContext('2d');\n      cvs.width = width;\n      cvs.height = height;\n      ctx.drawImage(img,0,0,width,height);\n  let imageData = ctx.getImageData(0,0,width,height);\n  \n  return imageData;\n}\n\nasync function turnImageDataIntoGrayscale(src){\n   let imageData = await getImageDataFromImage(src);\n   let data = imageData.data;\n  // 這邊這個loop的用意就在於把channel值依像素順序來執行程序\n   for(let i=0;i<data.length;i = i+4){\n     let r = data[i];\n     let g = data[i+1];\n     let b = data[i+2];\n     //取得rgb值得平均, 如此一來因為rgb都變成同一個數值\n     // 圖像就會變成灰階圖\n     let average = (r+g+b)/3\n     data[i] = data[i+1] = data[i+2] = average;\n   }\n  return imageData;\n}\n\nasync function redrawAsASCII(src){\n  let grayscaleImageData = await turnImageDataIntoGrayscale(src);\n  // 取用的樣版字元\n  let glyphSource = \"＄＠＃＊。\";\n  let stringOutput = '';\n  for(let i = 0;i<grayscaleImageData.data.length;i = i+4){\n     \n     let pixelIndex = Math.ceil(i/4);\n     // 從像素的次序來判斷該像素是否為右邊緣像素\n     let pixelIsRightRimPixel = (pixelIndex + 1) % grayscaleImageData.width === 0;\n     // 根據像素的灰階值, 用內插的方式來決定要使用哪一個樣版字元來代表該像素\n     let glyphIndex = \n       Math.floor(grayscaleImageData.data[i] / 255 * (glyphSource.length-1));\n       \n       stringOutput+=glyphSource[glyphIndex];\n    \n     if(pixelIsRightRimPixel){\n       // 如果是最右邊緣像素, 則另外補一個換行符號\n        stringOutput+='\\n';\n     }\n  }\n  // 把字串填入pre tag\n  let text = document.querySelector('pre');\n  text.innerHTML = stringOutput;\n}\n\n\n\n\n(()=>{\n  redrawAsASCII('https://i.imgur.com/52TLlOk.png');\n})()\n````\n\ncodepen連結：https://codepen.io/mizok_contest/pen/vYZrXYP\n\n# 小結\n\n老實說我在挑選展示像素操作案例的時候猶豫了很久，最後還是決定要拿拼字圖畫來作為案例介紹。  \n主要是因為我覺得這個案例相較於其他的例子似乎更能讓人提起興趣(雖然對初學者來說可能有點小複雜)。  \n\n在上面這個案例中，其實可以學到很多的小技巧，包括：\n\n- canvas載入圖片的機制\n- imageData的邊緣像素處理\n- 將channel值依像素順序來執行迴圈程序\n- ...\n\n這些小技巧在這個系列文的中後段都會持續用到，所以建議可以仔細讀一下源碼裡面的註解～\n\n這邊我們介紹的『拼字圖畫』其實還只是很基本的一種像素操作運用案例，像素操作真正被廣泛運用(同時也更複雜)的地方實際上在於影像處理(Image Processing)領域，我們將會在稍後的篇章再繼續提到這部分，敬請期待~。\n","slug":"2D渲染環境基礎篇 IV [像素操作概論] -  成為Canvas Ninja ~ 理解2D渲染的精髓","published":1,"date":"2021-09-21T04:15:09.740Z","updated":"2021-09-22T16:58:03.734Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktx1vyxx000btay21dm829lm","content":"<p>『像素操作(Pixel Manipulation)』 顧名思義就是要去以單一像素為最小單位來進行操作，就像我們透過JS改變DOM結構所進行的『DOM操作』必須要先取得被操作元素一樣。  </p>\n<h1 id=\"canvas-像素操作起手式\"><a href=\"#canvas-像素操作起手式\" class=\"headerlink\" title=\"canvas 像素操作起手式\"></a>canvas 像素操作起手式</h1><p>上面我們提到了要做像素操作，就必須先取得像素。</p>\n<p>就像DOM操作一樣，在操作DOM的時候我們通常要先抓取(<code>query</code>)到目標元素，然後才可以接著做<code>append</code>/<code>prepend</code>/<code>setAttribute</code>之類的事情。  </p>\n<p>而像素操作的第一步就是要先取得canvas的像素數據(Image Data)。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> imageData = ctx.getImageData(sx, sy, sw, sh);</span><br><span class=\"line\"><span class=\"comment\">// sx: 想要取得的圖像區域的左上角x軸座標值</span></span><br><span class=\"line\"><span class=\"comment\">// sy: 想要取得的圖像區域的左上角y軸座標值</span></span><br><span class=\"line\"><span class=\"comment\">// sw: 想要取得的圖像區域的寬度</span></span><br><span class=\"line\"><span class=\"comment\">// sh: 想要取得的圖像區域的高度</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"何謂像素數據-Image-Data\"><a href=\"#何謂像素數據-Image-Data\" class=\"headerlink\" title=\"何謂像素數據(Image Data)\"></a>何謂像素數據(Image Data)</h1><p>我們在前面有提到過，canvas可以被視為一群像素的集合體，而每一個像素本身是由4個channel值所組成的。  </p>\n<blockquote>\n<p>『一張寬度100px, 高度100px的canvas，它實際上就是100*100 = 10000個像素的集合體，而同時在程序上我們則可以把它轉換成一個長度為100*100*4的陣列(也就是一共40000個channel值)。』  — 來自我們前面提過的內容</p>\n</blockquote>\n<p>當我們用ctx.getImageData去取得完整一張canvas(sx,sy定為0, sw, sh定為canvas寬高)的imageData時，我們實際上會取得一個含有全部像素channel值的Uint8ClampedArray（8位元無符號整型固定陣列）</p>\n<p>這邊我們透過console.log去檢驗一組由100px x 100px 大小canvas所提取的imageData</p>\n<p><img src=\"https://i.imgur.com/8bzGT1G.png\" alt=\"img\"></p>\n<blockquote>\n<p>codepen連結: <a href=\"https://codepen.io/mizok_contest/pen/powKopj\">https://codepen.io/mizok_contest/pen/powKopj</a></p>\n</blockquote>\n<p>簡單觀察一下首先可以發現, Uint8ClampedArray其實只是imageData的一部分(imageData.data)，其餘還會有height/width等屬性，imageData本身具備獨立的型別，就像String/Array 那樣，他不只單純是個物件而已。</p>\n<blockquote>\n<p>有關於ImageData這個型別相關的資訊可以看<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ImageData\">這邊</a></p>\n</blockquote>\n<p>然後接著看看Uint8ClampedArray的部分，可以發現他確實就是由全部像素的channel值所組成;由於我們填入的顏色是紅色(255,0,0,1)，所以channel值的分佈會是255,0,0,255這樣四個一組持續到結束的組合…..，這邊值得注意的一點是Uint8ClampedArray是以0到255來表示alpha channel的值，而不是0到1，那是因為8位元的關係(2的8次方是256, 而0~255剛好是256個數字)。  </p>\n<blockquote>\n<p>人類的眼睛大約只可分辨 1,000 萬種顏色，之所以channel值是用8位元陣列來表示，是因為256的3次方(rgb三原色)為16,777,216 , 這個數字恰好落在1000萬的level。</p>\n</blockquote>\n<p>理解了ImageData的資料格式之後，接著可能就會有人問:  </p>\n<blockquote>\n<p>我們有沒有辦法從零自己建立一組新的ImageData?</p>\n</blockquote>\n<p>Sure, 當然是可以的，而且方法還不只一種。</p>\n<p>一般要自己create 新的ImageData，可以依靠:  </p>\n<ul>\n<li>2D渲染環境底下的createImageData方法（ctx.createImageData）</li>\n<li>ImageData class的 constructor (支援性低)</li>\n</ul>\n<p>這兩種方法的最大差別就在於前者需要編譯環境下有2DContext存在，但是後者就是可以直接New一個物件出來(適用在部分非瀏覽器環境，另外IE不支援這方法)。  </p>\n<p>自己建立出來一個ImageData物件之後，接著可能就會有人再問：</p>\n<blockquote>\n<p>那要怎麼把建立出來的ImageData 放到Canvas渲染出來？</p>\n</blockquote>\n<p>這時候就該ctx.putImageData登場了～</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> ctx.putImageData(imageData, dx, dy);</span><br><span class=\"line\"><span class=\"keyword\">void</span> ctx.putImageData(imageData, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight);</span><br><span class=\"line\"><span class=\"comment\">// dx: 置放該ImageData渲染區的座標X值(置放在目標canvas上的位置)</span></span><br><span class=\"line\"><span class=\"comment\">// dy: 置放該ImageData渲染區的座標Y值(置放在目標canvas上的位置)</span></span><br><span class=\"line\"><span class=\"comment\">// dirtyX: 可以只渲染該ImageData的一部分, 這個值就是用來定義渲染區的起始座標X值(這個值是相對於該ImageData的0,0圓點而言)</span></span><br><span class=\"line\"><span class=\"comment\">// dirtyY: 可以只渲染該ImageData的一部分, 這個值就是用來定義渲染區的起始座標Y值(這個值是相對於該ImageData的0,0圓點而言)</span></span><br><span class=\"line\"><span class=\"comment\">// dirtyWidth: 可以只渲染該ImageData的一部分, 這個值就是用來定義渲染區的寬度</span></span><br><span class=\"line\"><span class=\"comment\">// dirtyHeight: 可以只渲染該ImageData的一部分, 這個值就是用來定義渲染區的高度</span></span><br></pre></td></tr></table></figure>\n\n<p>介紹完基本的ImageData API，我們接著來看一個蠻經典的像素操作案例～</p>\n<h1 id=\"經典的像素操作案例解析-拼字圖畫-Image-To-Ascii\"><a href=\"#經典的像素操作案例解析-拼字圖畫-Image-To-Ascii\" class=\"headerlink\" title=\"經典的像素操作案例解析 - 拼字圖畫(Image To Ascii)\"></a>經典的像素操作案例解析 - 拼字圖畫(Image To Ascii)</h1><p>所謂的拼字圖畫就是像下圖這種，把圖像變成不同符號所形成的一幅圖</p>\n<p><img src=\"https://i.imgur.com/nhxwsL9.jpg\" alt=\"img\"></p>\n<p>這邊我分成幾個主要步驟稍微描述一下拼字圖畫的程序邏輯</p>\n<ul>\n<li><p>用ctx.drawImage() 先把指定的圖片繪製到canvas上</p>\n</li>\n<li><p>從繪製好圖像的canvas上取得imageData</p>\n</li>\n<li><p>透過把imageData的每個像素點channel值總合取平均來將圖像轉為灰階</p>\n</li>\n<li><p>根據灰階圖像的imageData來把不同的灰階值(例如0<del>50以@代替,51</del>100以#代替)轉換為特定符號，然後把這些符號作為字串植入pre元素</p>\n</li>\n</ul>\n<p>接著是源碼：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 取得圖像載入promise</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadImage</span>(<span class=\"params\">src</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">    <span class=\"comment\">// 把resolve暴露給外部變數</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> resolve;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> loadPromise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">         resolve = res;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 這一步cross-origin是因為我們的圖片是外部來源</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果沒有把外部來源設置為&quot;Anonymous&quot;,drawImage方法會排除掉非本地來源的圖片資訊, 導致無法進行下一步繪圖</span></span><br><span class=\"line\">    img.crossOrigin = <span class=\"string\">&quot;Anonymous&quot;</span>;</span><br><span class=\"line\">    img.onload = <span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">       resolve(img);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    img.src = src;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> loadPromise;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getImageDataFromImage</span>(<span class=\"params\">src,ratio = <span class=\"number\">0.5</span></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 這邊有一個ratio參數是因為我讀取的圖片稍微有點大張</span></span><br><span class=\"line\">  <span class=\"comment\">// 所以我補一個參數讓我可以自己決定要把圖片縮小多少倍率</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> img = <span class=\"keyword\">await</span> loadImage(src);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> width = img.width * ratio;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> height = img.height * ratio;</span><br><span class=\"line\">  <span class=\"comment\">// 把外部圖源繪製到架空的canvas上面然後取得imageData</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> cvs = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;canvas&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ctx = cvs.getContext(<span class=\"string\">&#x27;2d&#x27;</span>);</span><br><span class=\"line\">      cvs.width = width;</span><br><span class=\"line\">      cvs.height = height;</span><br><span class=\"line\">      ctx.drawImage(img,<span class=\"number\">0</span>,<span class=\"number\">0</span>,width,height);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> imageData = ctx.getImageData(<span class=\"number\">0</span>,<span class=\"number\">0</span>,width,height);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> imageData;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">turnImageDataIntoGrayscale</span>(<span class=\"params\">src</span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> imageData = <span class=\"keyword\">await</span> getImageDataFromImage(src);</span><br><span class=\"line\">   <span class=\"keyword\">let</span> data = imageData.data;</span><br><span class=\"line\">  <span class=\"comment\">// 這邊這個loop的用意就在於把channel值依像素順序來執行程序</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"title\">for</span>(<span class=\"params\"><span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;data.length;i = i+<span class=\"number\">4</span></span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> r = data[i];</span><br><span class=\"line\">     <span class=\"keyword\">let</span> g = data[i+<span class=\"number\">1</span>];</span><br><span class=\"line\">     <span class=\"keyword\">let</span> b = data[i+<span class=\"number\">2</span>];</span><br><span class=\"line\">     <span class=\"comment\">//取得rgb值得平均, 如此一來因為rgb都變成同一個數值</span></span><br><span class=\"line\">     <span class=\"comment\">// 圖像就會變成灰階圖</span></span><br><span class=\"line\">     <span class=\"keyword\">let</span> average = (r+g+b)/<span class=\"number\">3</span></span><br><span class=\"line\">     data[i] = data[i+<span class=\"number\">1</span>] = data[i+<span class=\"number\">2</span>] = average;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> imageData;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">redrawAsASCII</span>(<span class=\"params\">src</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> grayscaleImageData = <span class=\"keyword\">await</span> turnImageDataIntoGrayscale(src);</span><br><span class=\"line\">  <span class=\"comment\">// 取用的樣版字元</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> glyphSource = <span class=\"string\">&quot;＄＠＃＊。&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> stringOutput = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">for</span>(<span class=\"params\"><span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;grayscaleImageData.data.length;i = i+<span class=\"number\">4</span></span>)</span>&#123;</span><br><span class=\"line\">     </span><br><span class=\"line\">     <span class=\"keyword\">let</span> pixelIndex = <span class=\"built_in\">Math</span>.ceil(i/<span class=\"number\">4</span>);</span><br><span class=\"line\">     <span class=\"comment\">// 從像素的次序來判斷該像素是否為右邊緣像素</span></span><br><span class=\"line\">     <span class=\"keyword\">let</span> pixelIsRightRimPixel = (pixelIndex + <span class=\"number\">1</span>) % grayscaleImageData.width === <span class=\"number\">0</span>;</span><br><span class=\"line\">     <span class=\"comment\">// 根據像素的灰階值, 用內插的方式來決定要使用哪一個樣版字元來代表該像素</span></span><br><span class=\"line\">     <span class=\"keyword\">let</span> glyphIndex = </span><br><span class=\"line\">       <span class=\"built_in\">Math</span>.floor(grayscaleImageData.data[i] / <span class=\"number\">255</span> * (glyphSource.length-<span class=\"number\">1</span>));</span><br><span class=\"line\">       </span><br><span class=\"line\">       stringOutput+=glyphSource[glyphIndex];</span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\">pixelIsRightRimPixel</span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">// 如果是最右邊緣像素, 則另外補一個換行符號</span></span><br><span class=\"line\">        stringOutput+=<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 把字串填入pre tag</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> text = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;pre&#x27;</span>);</span><br><span class=\"line\">  text.innerHTML = stringOutput;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">  redrawAsASCII(<span class=\"string\">&#x27;https://i.imgur.com/52TLlOk.png&#x27;</span>);</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n<p>codepen連結：<a href=\"https://codepen.io/mizok_contest/pen/vYZrXYP\">https://codepen.io/mizok_contest/pen/vYZrXYP</a></p>\n<h1 id=\"小結\"><a href=\"#小結\" class=\"headerlink\" title=\"小結\"></a>小結</h1><p>老實說我在挑選展示像素操作案例的時候猶豫了很久，最後還是決定要拿拼字圖畫來作為案例介紹。<br>主要是因為我覺得這個案例相較於其他的例子似乎更能讓人提起興趣(雖然對初學者來說可能有點小複雜)。  </p>\n<p>在上面這個案例中，其實可以學到很多的小技巧，包括：</p>\n<ul>\n<li>canvas載入圖片的機制</li>\n<li>imageData的邊緣像素處理</li>\n<li>將channel值依像素順序來執行迴圈程序</li>\n<li>…</li>\n</ul>\n<p>這些小技巧在這個系列文的中後段都會持續用到，所以建議可以仔細讀一下源碼裡面的註解～</p>\n<p>這邊我們介紹的『拼字圖畫』其實還只是很基本的一種像素操作運用案例，像素操作真正被廣泛運用(同時也更複雜)的地方實際上在於影像處理(Image Processing)領域，我們將會在稍後的篇章再繼續提到這部分，敬請期待~。</p>\n","site":{"data":{"css/variables":"","languages":{"zh-TW":{"title":{"archive":"時間線","category":"分類","tag":"標籤","schedule":"時間表"},"menu":{"home":"首頁","archives":"時間線","categories":"分類","tags":"標籤","about":"關於","search":"搜尋","schedule":"時間表","sitemap":"網站地圖","commonweal":"公益 404"},"sidebar":{"overview":"本站概要","toc":"文章目錄"},"post":{"posted":"發表於","edited":"更新於","created":"創建時間","modified":"修改時間","edit":"編輯","in":"分類於","read_more":"閱讀全文","untitled":"未命名","sticky":"置頂文","views":"閱讀次數","related_posts":"相關文章","copyright":{"author":"作者","link":"文章連結","post_author":"Written by","post_link":"This article originally appeared on","license_title":"版權聲明","license_content":"本網誌所有文章除特別聲明外，均採用 %s 許可協議。轉載請註明出處！"}},"footer":{"powered":"","total_views":"總瀏覽次數","total_visitors":"訪客總數"},"counter":{"tag_cloud":{"zero":"目前還沒有任何標籤","one":"目前共有 1 個標籤","other":"目前共有 %d 個標籤"},"categories":{"zero":"目前還沒有任何分類","one":"目前共有 1 個分類","other":"目前共有 %d 個分類"},"archive_posts":{"zero":"目前還沒有任何文章。","one":"目前共有 1 篇文章。","other":"目前共有 %d 篇文章。"}},"state":{"posts":"文章","tags":"標籤","categories":"分類"},"search":{"placeholder":"搜尋...","empty":"We didn't find any results for the search: %s","hits_time":"%s results found in %s ms","hits":"%s results found"},"cheers":{"um":"嗯..","ok":"還不錯","nice":"好","good":"很好","great":"非常好","excellent":"棒棒Der"},"keep_on":"繼續努力。","symbol":{"comma":"，","period":"。","colon":"："},"reward":{"donate":"捐贈","wechatpay":"微信支付","alipay":"支付寶","paypal":"貝寶","bitcoin":"比特幣"},"follow_me":{"welcome":"歡迎關注我的其它站點"},"accessibility":{"nav_toggle":"切換導航欄","prev_page":"上一頁","next_page":"下一頁"},"symbols_count_time":{"count":"文章字數","count_total":"總字數","time":"所需閱讀時間","time_total":"所需總閱讀時間","time_minutes":"分鐘"}}},"css/mixins":"","css/styles":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","template/head":"<script src=\"//js/tool/canvas-fx-base.js\"></script>\n\n<script src=\"//js/ripple-logo.js\"></script>\n<script src=\"//js/silk-wave.js\"></script>\n\n<style>\n  @font-face {\n  font-family: \"Roboto\";\n  src: url(//font/Roboto.ttf) format(\"truetype\");\n}\n</style>","css/styl-plugin/grid-post-layout/main":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","css/styl-plugin/grid-post-layout/mixins":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n","css/styl-plugin/grid-post-layout/variables":""}},"excerpt":"","more":"<p>『像素操作(Pixel Manipulation)』 顧名思義就是要去以單一像素為最小單位來進行操作，就像我們透過JS改變DOM結構所進行的『DOM操作』必須要先取得被操作元素一樣。  </p>\n<h1 id=\"canvas-像素操作起手式\"><a href=\"#canvas-像素操作起手式\" class=\"headerlink\" title=\"canvas 像素操作起手式\"></a>canvas 像素操作起手式</h1><p>上面我們提到了要做像素操作，就必須先取得像素。</p>\n<p>就像DOM操作一樣，在操作DOM的時候我們通常要先抓取(<code>query</code>)到目標元素，然後才可以接著做<code>append</code>/<code>prepend</code>/<code>setAttribute</code>之類的事情。  </p>\n<p>而像素操作的第一步就是要先取得canvas的像素數據(Image Data)。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> imageData = ctx.getImageData(sx, sy, sw, sh);</span><br><span class=\"line\"><span class=\"comment\">// sx: 想要取得的圖像區域的左上角x軸座標值</span></span><br><span class=\"line\"><span class=\"comment\">// sy: 想要取得的圖像區域的左上角y軸座標值</span></span><br><span class=\"line\"><span class=\"comment\">// sw: 想要取得的圖像區域的寬度</span></span><br><span class=\"line\"><span class=\"comment\">// sh: 想要取得的圖像區域的高度</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"何謂像素數據-Image-Data\"><a href=\"#何謂像素數據-Image-Data\" class=\"headerlink\" title=\"何謂像素數據(Image Data)\"></a>何謂像素數據(Image Data)</h1><p>我們在前面有提到過，canvas可以被視為一群像素的集合體，而每一個像素本身是由4個channel值所組成的。  </p>\n<blockquote>\n<p>『一張寬度100px, 高度100px的canvas，它實際上就是100*100 = 10000個像素的集合體，而同時在程序上我們則可以把它轉換成一個長度為100*100*4的陣列(也就是一共40000個channel值)。』  — 來自我們前面提過的內容</p>\n</blockquote>\n<p>當我們用ctx.getImageData去取得完整一張canvas(sx,sy定為0, sw, sh定為canvas寬高)的imageData時，我們實際上會取得一個含有全部像素channel值的Uint8ClampedArray（8位元無符號整型固定陣列）</p>\n<p>這邊我們透過console.log去檢驗一組由100px x 100px 大小canvas所提取的imageData</p>\n<p><img src=\"https://i.imgur.com/8bzGT1G.png\" alt=\"img\"></p>\n<blockquote>\n<p>codepen連結: <a href=\"https://codepen.io/mizok_contest/pen/powKopj\">https://codepen.io/mizok_contest/pen/powKopj</a></p>\n</blockquote>\n<p>簡單觀察一下首先可以發現, Uint8ClampedArray其實只是imageData的一部分(imageData.data)，其餘還會有height/width等屬性，imageData本身具備獨立的型別，就像String/Array 那樣，他不只單純是個物件而已。</p>\n<blockquote>\n<p>有關於ImageData這個型別相關的資訊可以看<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ImageData\">這邊</a></p>\n</blockquote>\n<p>然後接著看看Uint8ClampedArray的部分，可以發現他確實就是由全部像素的channel值所組成;由於我們填入的顏色是紅色(255,0,0,1)，所以channel值的分佈會是255,0,0,255這樣四個一組持續到結束的組合…..，這邊值得注意的一點是Uint8ClampedArray是以0到255來表示alpha channel的值，而不是0到1，那是因為8位元的關係(2的8次方是256, 而0~255剛好是256個數字)。  </p>\n<blockquote>\n<p>人類的眼睛大約只可分辨 1,000 萬種顏色，之所以channel值是用8位元陣列來表示，是因為256的3次方(rgb三原色)為16,777,216 , 這個數字恰好落在1000萬的level。</p>\n</blockquote>\n<p>理解了ImageData的資料格式之後，接著可能就會有人問:  </p>\n<blockquote>\n<p>我們有沒有辦法從零自己建立一組新的ImageData?</p>\n</blockquote>\n<p>Sure, 當然是可以的，而且方法還不只一種。</p>\n<p>一般要自己create 新的ImageData，可以依靠:  </p>\n<ul>\n<li>2D渲染環境底下的createImageData方法（ctx.createImageData）</li>\n<li>ImageData class的 constructor (支援性低)</li>\n</ul>\n<p>這兩種方法的最大差別就在於前者需要編譯環境下有2DContext存在，但是後者就是可以直接New一個物件出來(適用在部分非瀏覽器環境，另外IE不支援這方法)。  </p>\n<p>自己建立出來一個ImageData物件之後，接著可能就會有人再問：</p>\n<blockquote>\n<p>那要怎麼把建立出來的ImageData 放到Canvas渲染出來？</p>\n</blockquote>\n<p>這時候就該ctx.putImageData登場了～</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> ctx.putImageData(imageData, dx, dy);</span><br><span class=\"line\"><span class=\"keyword\">void</span> ctx.putImageData(imageData, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight);</span><br><span class=\"line\"><span class=\"comment\">// dx: 置放該ImageData渲染區的座標X值(置放在目標canvas上的位置)</span></span><br><span class=\"line\"><span class=\"comment\">// dy: 置放該ImageData渲染區的座標Y值(置放在目標canvas上的位置)</span></span><br><span class=\"line\"><span class=\"comment\">// dirtyX: 可以只渲染該ImageData的一部分, 這個值就是用來定義渲染區的起始座標X值(這個值是相對於該ImageData的0,0圓點而言)</span></span><br><span class=\"line\"><span class=\"comment\">// dirtyY: 可以只渲染該ImageData的一部分, 這個值就是用來定義渲染區的起始座標Y值(這個值是相對於該ImageData的0,0圓點而言)</span></span><br><span class=\"line\"><span class=\"comment\">// dirtyWidth: 可以只渲染該ImageData的一部分, 這個值就是用來定義渲染區的寬度</span></span><br><span class=\"line\"><span class=\"comment\">// dirtyHeight: 可以只渲染該ImageData的一部分, 這個值就是用來定義渲染區的高度</span></span><br></pre></td></tr></table></figure>\n\n<p>介紹完基本的ImageData API，我們接著來看一個蠻經典的像素操作案例～</p>\n<h1 id=\"經典的像素操作案例解析-拼字圖畫-Image-To-Ascii\"><a href=\"#經典的像素操作案例解析-拼字圖畫-Image-To-Ascii\" class=\"headerlink\" title=\"經典的像素操作案例解析 - 拼字圖畫(Image To Ascii)\"></a>經典的像素操作案例解析 - 拼字圖畫(Image To Ascii)</h1><p>所謂的拼字圖畫就是像下圖這種，把圖像變成不同符號所形成的一幅圖</p>\n<p><img src=\"https://i.imgur.com/nhxwsL9.jpg\" alt=\"img\"></p>\n<p>這邊我分成幾個主要步驟稍微描述一下拼字圖畫的程序邏輯</p>\n<ul>\n<li><p>用ctx.drawImage() 先把指定的圖片繪製到canvas上</p>\n</li>\n<li><p>從繪製好圖像的canvas上取得imageData</p>\n</li>\n<li><p>透過把imageData的每個像素點channel值總合取平均來將圖像轉為灰階</p>\n</li>\n<li><p>根據灰階圖像的imageData來把不同的灰階值(例如0<del>50以@代替,51</del>100以#代替)轉換為特定符號，然後把這些符號作為字串植入pre元素</p>\n</li>\n</ul>\n<p>接著是源碼：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 取得圖像載入promise</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadImage</span>(<span class=\"params\">src</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">    <span class=\"comment\">// 把resolve暴露給外部變數</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> resolve;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> loadPromise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">         resolve = res;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 這一步cross-origin是因為我們的圖片是外部來源</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果沒有把外部來源設置為&quot;Anonymous&quot;,drawImage方法會排除掉非本地來源的圖片資訊, 導致無法進行下一步繪圖</span></span><br><span class=\"line\">    img.crossOrigin = <span class=\"string\">&quot;Anonymous&quot;</span>;</span><br><span class=\"line\">    img.onload = <span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">       resolve(img);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    img.src = src;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> loadPromise;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getImageDataFromImage</span>(<span class=\"params\">src,ratio = <span class=\"number\">0.5</span></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 這邊有一個ratio參數是因為我讀取的圖片稍微有點大張</span></span><br><span class=\"line\">  <span class=\"comment\">// 所以我補一個參數讓我可以自己決定要把圖片縮小多少倍率</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> img = <span class=\"keyword\">await</span> loadImage(src);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> width = img.width * ratio;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> height = img.height * ratio;</span><br><span class=\"line\">  <span class=\"comment\">// 把外部圖源繪製到架空的canvas上面然後取得imageData</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> cvs = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;canvas&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ctx = cvs.getContext(<span class=\"string\">&#x27;2d&#x27;</span>);</span><br><span class=\"line\">      cvs.width = width;</span><br><span class=\"line\">      cvs.height = height;</span><br><span class=\"line\">      ctx.drawImage(img,<span class=\"number\">0</span>,<span class=\"number\">0</span>,width,height);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> imageData = ctx.getImageData(<span class=\"number\">0</span>,<span class=\"number\">0</span>,width,height);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> imageData;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">turnImageDataIntoGrayscale</span>(<span class=\"params\">src</span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> imageData = <span class=\"keyword\">await</span> getImageDataFromImage(src);</span><br><span class=\"line\">   <span class=\"keyword\">let</span> data = imageData.data;</span><br><span class=\"line\">  <span class=\"comment\">// 這邊這個loop的用意就在於把channel值依像素順序來執行程序</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"title\">for</span>(<span class=\"params\"><span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;data.length;i = i+<span class=\"number\">4</span></span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> r = data[i];</span><br><span class=\"line\">     <span class=\"keyword\">let</span> g = data[i+<span class=\"number\">1</span>];</span><br><span class=\"line\">     <span class=\"keyword\">let</span> b = data[i+<span class=\"number\">2</span>];</span><br><span class=\"line\">     <span class=\"comment\">//取得rgb值得平均, 如此一來因為rgb都變成同一個數值</span></span><br><span class=\"line\">     <span class=\"comment\">// 圖像就會變成灰階圖</span></span><br><span class=\"line\">     <span class=\"keyword\">let</span> average = (r+g+b)/<span class=\"number\">3</span></span><br><span class=\"line\">     data[i] = data[i+<span class=\"number\">1</span>] = data[i+<span class=\"number\">2</span>] = average;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> imageData;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">redrawAsASCII</span>(<span class=\"params\">src</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> grayscaleImageData = <span class=\"keyword\">await</span> turnImageDataIntoGrayscale(src);</span><br><span class=\"line\">  <span class=\"comment\">// 取用的樣版字元</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> glyphSource = <span class=\"string\">&quot;＄＠＃＊。&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> stringOutput = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">for</span>(<span class=\"params\"><span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;grayscaleImageData.data.length;i = i+<span class=\"number\">4</span></span>)</span>&#123;</span><br><span class=\"line\">     </span><br><span class=\"line\">     <span class=\"keyword\">let</span> pixelIndex = <span class=\"built_in\">Math</span>.ceil(i/<span class=\"number\">4</span>);</span><br><span class=\"line\">     <span class=\"comment\">// 從像素的次序來判斷該像素是否為右邊緣像素</span></span><br><span class=\"line\">     <span class=\"keyword\">let</span> pixelIsRightRimPixel = (pixelIndex + <span class=\"number\">1</span>) % grayscaleImageData.width === <span class=\"number\">0</span>;</span><br><span class=\"line\">     <span class=\"comment\">// 根據像素的灰階值, 用內插的方式來決定要使用哪一個樣版字元來代表該像素</span></span><br><span class=\"line\">     <span class=\"keyword\">let</span> glyphIndex = </span><br><span class=\"line\">       <span class=\"built_in\">Math</span>.floor(grayscaleImageData.data[i] / <span class=\"number\">255</span> * (glyphSource.length-<span class=\"number\">1</span>));</span><br><span class=\"line\">       </span><br><span class=\"line\">       stringOutput+=glyphSource[glyphIndex];</span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\">pixelIsRightRimPixel</span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">// 如果是最右邊緣像素, 則另外補一個換行符號</span></span><br><span class=\"line\">        stringOutput+=<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 把字串填入pre tag</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> text = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;pre&#x27;</span>);</span><br><span class=\"line\">  text.innerHTML = stringOutput;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">  redrawAsASCII(<span class=\"string\">&#x27;https://i.imgur.com/52TLlOk.png&#x27;</span>);</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n<p>codepen連結：<a href=\"https://codepen.io/mizok_contest/pen/vYZrXYP\">https://codepen.io/mizok_contest/pen/vYZrXYP</a></p>\n<h1 id=\"小結\"><a href=\"#小結\" class=\"headerlink\" title=\"小結\"></a>小結</h1><p>老實說我在挑選展示像素操作案例的時候猶豫了很久，最後還是決定要拿拼字圖畫來作為案例介紹。<br>主要是因為我覺得這個案例相較於其他的例子似乎更能讓人提起興趣(雖然對初學者來說可能有點小複雜)。  </p>\n<p>在上面這個案例中，其實可以學到很多的小技巧，包括：</p>\n<ul>\n<li>canvas載入圖片的機制</li>\n<li>imageData的邊緣像素處理</li>\n<li>將channel值依像素順序來執行迴圈程序</li>\n<li>…</li>\n</ul>\n<p>這些小技巧在這個系列文的中後段都會持續用到，所以建議可以仔細讀一下源碼裡面的註解～</p>\n<p>這邊我們介紹的『拼字圖畫』其實還只是很基本的一種像素操作運用案例，像素操作真正被廣泛運用(同時也更複雜)的地方實際上在於影像處理(Image Processing)領域，我們將會在稍後的篇章再繼續提到這部分，敬請期待~。</p>\n"},{"title":"Day9 - 2D渲染環境基礎篇 IV[Canvas動畫概論] -  成為Canvas Ninja ～ 理解2D渲染的精髓","_content":"\nOK, 我們終於來到了基礎篇最後的部分，也就是Canvas動畫~!(撒花)  \n在這個部分，我們會介紹：\n- `canvas`實作動畫的原理\n- 一個簡易動畫的實作案例\n\n# Canvas動畫原理\n\n我們都知道，在現實生活中動畫(Animation)的原理其實是透過繪製很多不同但連貫的圖片，然後把這些圖片依序播放出來。  \n`canvas`實作動畫的原理其實也是一模一樣。\n\n假設今天有一個60FPS(Frame Per Second, 意思就是每秒60幀)的動畫，如果我們要用Canvas來實作，那麼在動畫第一秒內的流程大約會是：  \n\n- 在canvas上面繪製第一幀的樣子\n- 在1/60 秒後清除畫面\n- 在canvas上面繪製第二幀的樣子\n- 持續重複上面的做法, 一直做到第60幀\n- ...\n\n原理面的部分大致上就這樣，雖然看起來很簡單，但是在實作的時候才真的會遭遇到各種問題。\n\n# 什麼是幀率（FPS）?\n\n> 你前面提到了`FPS`這個詞，那是一個什麼樣的概念？\n\n所謂的幀率就是『每秒被播出的圖像數量』。  \n\n> 延伸資源：[不同幀率所帶來的視覺效果差](https://www.youtube.com/watch?v=npMreLeVD6o)\n\n在過去的年代，製作一部手繪卡通其實所費不貲，最主要的原因就是因為圖像需要逐幀人工繪製，而專案限期內能繪製的圖像有限，所以一般來說手繪動畫的幀率相對來講會比較低。\n以常見的日式動畫來講，日式動畫的幀率平均落在`23.976幀/秒`, 這也就是我們常聽到的`24幀`。\n\n> 在現代則出現了更方便的AI中割模擬，大幅減少了人力成本，不過那是題外話了 。 BTW -- 有看**咒術迴戰**的朋友可能對`24幀`這詞蠻熟悉的XD(投射咒法~!)\n\n而在科技進步之後，來到網頁 / 遊戲的領域，基本幀率則最少也會有`60幀/秒`（因為畫面是交由機器繪製）。  \n\n這邊有人可能會開始覺得很疑惑，網頁在沒有動畫時，本身不是靜態的圖像嗎？為什麼還會提到幀率？  \n\n這你就不懂了~  \n\n瀏覽器視窗本身可以其實可以看作一個大型且複雜的canvas，你在一秒內所看到的畫面，其實實際上是瀏覽器渲染引擎以極快的速度逐幀繪製出來的(就算是靜態畫面也是一樣)\n\n渲染引擎本身的繪製速度其實會受到編譯的速度，還有程序邏輯的複雜度等多重原因影響，而當渲染引擎的繪製速度被拖慢(或者說不夠快)，這時候就會出現所謂的`渲染延遲`，或`掉幀`的現象。\n\n舉個常見的`渲染延遲`案例 ~ 大家在菜鳥時期一定都有碰過。當有一個網頁具備一卡車的動態特效(尤其是onScroll Animation) ，使用者在網頁載入完畢的同時快速把scrollbar往下拉，這時候畫面會有很大的機率會白掉一大半，這個就是『渲染速度』跟不上『使用者操作UI速度』的典型案例。\n\n> 通常這種狀況的解決方式都是比較硬核的，需要深入程序修改細節以解決效能上的問題。\n\n而所謂的`掉幀`，其實就是我們常說的動畫卡頓問題，網頁的`掉幀`問題有大有小，大的例如畫面卡頓卡到跟靜態圖像一樣，小的則像是某些時候畫面會有微妙的停頓感(一般人可能分辨不出來這個XD)\n\n接下來我們會用實際範例來演示怎麼在Canvas環境下實現一個方塊移動的簡易動畫。\n\n# 實際動畫案例演示 - 方塊移動\n\n````javascript\nconst startTime = performance.now();\nconst durationTotal = 5000;\n\nfunction drawRect(ctx,x,y){\n  // 這就是很普通的畫一個方塊在指定座標的位置上\n  // 假設長寬都是40\n  const size = 20;\n   // 設定填充色\n  ctx.fillStyle=\"#fff\";\n  ctx.fillRect(x,y,size*2,size*2);\n \n}\n\nfunction animate(ctx){\n  // 預設都先清除舊畫面然後重新畫一個方塊在新位置\n  let timeNow = performance.now() - startTime;\n  //\n  const speed = 0.05; //假設速度是0.05px/毫秒\n  \n  ctx.clearRect(0,0,ctx.canvas.width,ctx.canvas.height)\n  drawRect(ctx,speed*timeNow,50);\n  \n  // 在目前花費時間還沒超過總預設花費時間的狀況下就持續動作\n  if(timeNow<durationTotal){\n    // 告訴瀏覽器下一幀要做的動作, 可以想像成一個極短的setTimeout, delay時間大約是1/60秒\n    // 這邊我們透過遞迴執行animate來繪製下一幀的畫面\n     requestAnimationFrame(()=>{animate(ctx)})\n  }\n  else{\n    return\n  }\n}\n\n\nfunction draw(){\n  const cvs = document.querySelector('canvas');\n  const ctx = cvs.getContext('2d');\n  animate(ctx);\n}\n\n\n(()=>{\n  draw();\n})()\n````\n\n> codepen連結： https://codepen.io/mizok_contest/pen/qBjyVaa\n\n\n在上面這個看似簡單的範例中其實隱藏著兩個重點。\n\n- 用requestAnimationFrame(RAF)來告訴瀏覽器進行下一幀圖像的繪製\n- 用performance.now()來追蹤動畫進行時間\n\n接下來我們會就這兩個重點講解背後的原因。\n\n# 為什麼要使用requestAnimationFrame()?\n\n如果去找一些比較早期的Canvas教程，可能會發現它裡面都是用SetTimeOut 或是SetInterval去計算幀間時差(將時間設置為1000/60 毫秒) 。\n雖然說用setTimeOut/setInterval 來計算幀間時差並不算錯，但是就是比較粗糙。\n使用requestAnimationFrame(以下簡稱RAF)的優點有二：\n- 不像setTimeOut/setInterval是固定給一個固定的時間差，RAF可以視為一個動畫幀結束之後的callback，所以相對的他比較不會受到幀率誤差的影響\n- 不像setTimeOut/setInterval，RAF並不會在背景運作，當你把分頁切換到別的分頁，RAF就會被中斷，這個設計改善了瀏覽器運作的效能，同時也減少電源的消耗\n\n# 為什麼要使用performance.now()?\n\n我們先來說說`performance.now()`在這個案例裡面用途是什麼，還有他是一個什麼樣的api。\n\n`performance.now()`簡單來說就是一個用來計算`document`生命週期的方法，他會在`document`物件被載入的時候開始計時。\n\n有些人接著可能會問:\n\n> 那他跟`Date.now()`差別差在哪？不能用`Date.now()`就好嗎?\n\n`performance.now()`作為一個比較年輕的api，跟`Date.now()`比起來其實有更多適用的場景，原因有二：\n\n- performance.now() 能夠提供超越毫秒的精準度，他所計算出來的時間會是附帶浮點數的毫秒，所以他更適合用在遊戲或動畫這種需要高精確度的運算場景\n- Date.now()實際上是從1970年1月1日0分0秒開始估算(也就是所謂的Unix時間)，然而現今的年代其實很少需要一個從1970年開始計時的功能。而且Date實際上是會Base on 裝置的系統時間，當系統時間在某種狀況下受到變動，運用Date.now去計算時間差的Web APP 可能會出現誤差。\n\n根據developers.google.com的解釋，Date.now比較適用在確認絕對時間的場景，而performance.now則適用於計算相對時間的情境。\n\n> developers.google.com上關於performance.now的解釋可以看[這邊](https://developers.google.com/web/updates/2012/08/When-milliseconds-are-not-enough-performance-now)\n\n看到這邊大家應該已經很能理解使用performance.now的諸多好處～\n\n但是接著可能就又會有人再問：\n\n> 那為什麼不能直接用經過的幀數作計算？例如預設一個變數給定總幀數，然後每一圈RAF就-1，扣到0的時候就停止運動?\n\n原因很簡單～還記得我們前面有介紹過瀏覽器的FPS數字其實會受到其他因素的影響嗎？有時候如果FPS偏低，那麼就意味著可能有某幾幀的耗時比較長，這麼一來，如果用幀數來判斷移動距離，就會出現運動速度不均勻的狀況。  \n\n雖然說在過去這種誤差可能不容易被察覺，但是在現代，尤其是在開發遊戲的場景，物件移動的精確度其實越來越重要，所以相對的也要求開發人員不能隨便用舊方法交差。\n\n\n# 小結\n\n這次我們介紹了如何在Canvas上實作動畫，但是這其實還是非常基本的部分，我們接下來即將要脫離基礎篇，正式來介紹一些比較複雜的Canvas應用場景~","source":"_posts/2D渲染環境基礎篇 V [Canvas動畫概論] -  成為Canvas Ninja ~ 理解2D渲染的精髓.md","raw":"---\ntitle: Day9 - 2D渲染環境基礎篇 IV[Canvas動畫概論] -  成為Canvas Ninja ～ 理解2D渲染的精髓\ncategories: \n- 前端技術學習心得\ntags:\n- 2021鐵人賽\n---\n\nOK, 我們終於來到了基礎篇最後的部分，也就是Canvas動畫~!(撒花)  \n在這個部分，我們會介紹：\n- `canvas`實作動畫的原理\n- 一個簡易動畫的實作案例\n\n# Canvas動畫原理\n\n我們都知道，在現實生活中動畫(Animation)的原理其實是透過繪製很多不同但連貫的圖片，然後把這些圖片依序播放出來。  \n`canvas`實作動畫的原理其實也是一模一樣。\n\n假設今天有一個60FPS(Frame Per Second, 意思就是每秒60幀)的動畫，如果我們要用Canvas來實作，那麼在動畫第一秒內的流程大約會是：  \n\n- 在canvas上面繪製第一幀的樣子\n- 在1/60 秒後清除畫面\n- 在canvas上面繪製第二幀的樣子\n- 持續重複上面的做法, 一直做到第60幀\n- ...\n\n原理面的部分大致上就這樣，雖然看起來很簡單，但是在實作的時候才真的會遭遇到各種問題。\n\n# 什麼是幀率（FPS）?\n\n> 你前面提到了`FPS`這個詞，那是一個什麼樣的概念？\n\n所謂的幀率就是『每秒被播出的圖像數量』。  \n\n> 延伸資源：[不同幀率所帶來的視覺效果差](https://www.youtube.com/watch?v=npMreLeVD6o)\n\n在過去的年代，製作一部手繪卡通其實所費不貲，最主要的原因就是因為圖像需要逐幀人工繪製，而專案限期內能繪製的圖像有限，所以一般來說手繪動畫的幀率相對來講會比較低。\n以常見的日式動畫來講，日式動畫的幀率平均落在`23.976幀/秒`, 這也就是我們常聽到的`24幀`。\n\n> 在現代則出現了更方便的AI中割模擬，大幅減少了人力成本，不過那是題外話了 。 BTW -- 有看**咒術迴戰**的朋友可能對`24幀`這詞蠻熟悉的XD(投射咒法~!)\n\n而在科技進步之後，來到網頁 / 遊戲的領域，基本幀率則最少也會有`60幀/秒`（因為畫面是交由機器繪製）。  \n\n這邊有人可能會開始覺得很疑惑，網頁在沒有動畫時，本身不是靜態的圖像嗎？為什麼還會提到幀率？  \n\n這你就不懂了~  \n\n瀏覽器視窗本身可以其實可以看作一個大型且複雜的canvas，你在一秒內所看到的畫面，其實實際上是瀏覽器渲染引擎以極快的速度逐幀繪製出來的(就算是靜態畫面也是一樣)\n\n渲染引擎本身的繪製速度其實會受到編譯的速度，還有程序邏輯的複雜度等多重原因影響，而當渲染引擎的繪製速度被拖慢(或者說不夠快)，這時候就會出現所謂的`渲染延遲`，或`掉幀`的現象。\n\n舉個常見的`渲染延遲`案例 ~ 大家在菜鳥時期一定都有碰過。當有一個網頁具備一卡車的動態特效(尤其是onScroll Animation) ，使用者在網頁載入完畢的同時快速把scrollbar往下拉，這時候畫面會有很大的機率會白掉一大半，這個就是『渲染速度』跟不上『使用者操作UI速度』的典型案例。\n\n> 通常這種狀況的解決方式都是比較硬核的，需要深入程序修改細節以解決效能上的問題。\n\n而所謂的`掉幀`，其實就是我們常說的動畫卡頓問題，網頁的`掉幀`問題有大有小，大的例如畫面卡頓卡到跟靜態圖像一樣，小的則像是某些時候畫面會有微妙的停頓感(一般人可能分辨不出來這個XD)\n\n接下來我們會用實際範例來演示怎麼在Canvas環境下實現一個方塊移動的簡易動畫。\n\n# 實際動畫案例演示 - 方塊移動\n\n````javascript\nconst startTime = performance.now();\nconst durationTotal = 5000;\n\nfunction drawRect(ctx,x,y){\n  // 這就是很普通的畫一個方塊在指定座標的位置上\n  // 假設長寬都是40\n  const size = 20;\n   // 設定填充色\n  ctx.fillStyle=\"#fff\";\n  ctx.fillRect(x,y,size*2,size*2);\n \n}\n\nfunction animate(ctx){\n  // 預設都先清除舊畫面然後重新畫一個方塊在新位置\n  let timeNow = performance.now() - startTime;\n  //\n  const speed = 0.05; //假設速度是0.05px/毫秒\n  \n  ctx.clearRect(0,0,ctx.canvas.width,ctx.canvas.height)\n  drawRect(ctx,speed*timeNow,50);\n  \n  // 在目前花費時間還沒超過總預設花費時間的狀況下就持續動作\n  if(timeNow<durationTotal){\n    // 告訴瀏覽器下一幀要做的動作, 可以想像成一個極短的setTimeout, delay時間大約是1/60秒\n    // 這邊我們透過遞迴執行animate來繪製下一幀的畫面\n     requestAnimationFrame(()=>{animate(ctx)})\n  }\n  else{\n    return\n  }\n}\n\n\nfunction draw(){\n  const cvs = document.querySelector('canvas');\n  const ctx = cvs.getContext('2d');\n  animate(ctx);\n}\n\n\n(()=>{\n  draw();\n})()\n````\n\n> codepen連結： https://codepen.io/mizok_contest/pen/qBjyVaa\n\n\n在上面這個看似簡單的範例中其實隱藏著兩個重點。\n\n- 用requestAnimationFrame(RAF)來告訴瀏覽器進行下一幀圖像的繪製\n- 用performance.now()來追蹤動畫進行時間\n\n接下來我們會就這兩個重點講解背後的原因。\n\n# 為什麼要使用requestAnimationFrame()?\n\n如果去找一些比較早期的Canvas教程，可能會發現它裡面都是用SetTimeOut 或是SetInterval去計算幀間時差(將時間設置為1000/60 毫秒) 。\n雖然說用setTimeOut/setInterval 來計算幀間時差並不算錯，但是就是比較粗糙。\n使用requestAnimationFrame(以下簡稱RAF)的優點有二：\n- 不像setTimeOut/setInterval是固定給一個固定的時間差，RAF可以視為一個動畫幀結束之後的callback，所以相對的他比較不會受到幀率誤差的影響\n- 不像setTimeOut/setInterval，RAF並不會在背景運作，當你把分頁切換到別的分頁，RAF就會被中斷，這個設計改善了瀏覽器運作的效能，同時也減少電源的消耗\n\n# 為什麼要使用performance.now()?\n\n我們先來說說`performance.now()`在這個案例裡面用途是什麼，還有他是一個什麼樣的api。\n\n`performance.now()`簡單來說就是一個用來計算`document`生命週期的方法，他會在`document`物件被載入的時候開始計時。\n\n有些人接著可能會問:\n\n> 那他跟`Date.now()`差別差在哪？不能用`Date.now()`就好嗎?\n\n`performance.now()`作為一個比較年輕的api，跟`Date.now()`比起來其實有更多適用的場景，原因有二：\n\n- performance.now() 能夠提供超越毫秒的精準度，他所計算出來的時間會是附帶浮點數的毫秒，所以他更適合用在遊戲或動畫這種需要高精確度的運算場景\n- Date.now()實際上是從1970年1月1日0分0秒開始估算(也就是所謂的Unix時間)，然而現今的年代其實很少需要一個從1970年開始計時的功能。而且Date實際上是會Base on 裝置的系統時間，當系統時間在某種狀況下受到變動，運用Date.now去計算時間差的Web APP 可能會出現誤差。\n\n根據developers.google.com的解釋，Date.now比較適用在確認絕對時間的場景，而performance.now則適用於計算相對時間的情境。\n\n> developers.google.com上關於performance.now的解釋可以看[這邊](https://developers.google.com/web/updates/2012/08/When-milliseconds-are-not-enough-performance-now)\n\n看到這邊大家應該已經很能理解使用performance.now的諸多好處～\n\n但是接著可能就又會有人再問：\n\n> 那為什麼不能直接用經過的幀數作計算？例如預設一個變數給定總幀數，然後每一圈RAF就-1，扣到0的時候就停止運動?\n\n原因很簡單～還記得我們前面有介紹過瀏覽器的FPS數字其實會受到其他因素的影響嗎？有時候如果FPS偏低，那麼就意味著可能有某幾幀的耗時比較長，這麼一來，如果用幀數來判斷移動距離，就會出現運動速度不均勻的狀況。  \n\n雖然說在過去這種誤差可能不容易被察覺，但是在現代，尤其是在開發遊戲的場景，物件移動的精確度其實越來越重要，所以相對的也要求開發人員不能隨便用舊方法交差。\n\n\n# 小結\n\n這次我們介紹了如何在Canvas上實作動畫，但是這其實還是非常基本的部分，我們接下來即將要脫離基礎篇，正式來介紹一些比較複雜的Canvas應用場景~","slug":"2D渲染環境基礎篇 V [Canvas動畫概論] -  成為Canvas Ninja ~ 理解2D渲染的精髓","published":1,"date":"2021-09-21T03:49:28.885Z","updated":"2021-09-23T14:47:21.295Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktx1vyxz000ftay2a0072il5","content":"<p>OK, 我們終於來到了基礎篇最後的部分，也就是Canvas動畫~!(撒花)<br>在這個部分，我們會介紹：</p>\n<ul>\n<li><code>canvas</code>實作動畫的原理</li>\n<li>一個簡易動畫的實作案例</li>\n</ul>\n<h1 id=\"Canvas動畫原理\"><a href=\"#Canvas動畫原理\" class=\"headerlink\" title=\"Canvas動畫原理\"></a>Canvas動畫原理</h1><p>我們都知道，在現實生活中動畫(Animation)的原理其實是透過繪製很多不同但連貫的圖片，然後把這些圖片依序播放出來。<br><code>canvas</code>實作動畫的原理其實也是一模一樣。</p>\n<p>假設今天有一個60FPS(Frame Per Second, 意思就是每秒60幀)的動畫，如果我們要用Canvas來實作，那麼在動畫第一秒內的流程大約會是：  </p>\n<ul>\n<li>在canvas上面繪製第一幀的樣子</li>\n<li>在1/60 秒後清除畫面</li>\n<li>在canvas上面繪製第二幀的樣子</li>\n<li>持續重複上面的做法, 一直做到第60幀</li>\n<li>…</li>\n</ul>\n<p>原理面的部分大致上就這樣，雖然看起來很簡單，但是在實作的時候才真的會遭遇到各種問題。</p>\n<h1 id=\"什麼是幀率（FPS）\"><a href=\"#什麼是幀率（FPS）\" class=\"headerlink\" title=\"什麼是幀率（FPS）?\"></a>什麼是幀率（FPS）?</h1><blockquote>\n<p>你前面提到了<code>FPS</code>這個詞，那是一個什麼樣的概念？</p>\n</blockquote>\n<p>所謂的幀率就是『每秒被播出的圖像數量』。  </p>\n<blockquote>\n<p>延伸資源：<a href=\"https://www.youtube.com/watch?v=npMreLeVD6o\">不同幀率所帶來的視覺效果差</a></p>\n</blockquote>\n<p>在過去的年代，製作一部手繪卡通其實所費不貲，最主要的原因就是因為圖像需要逐幀人工繪製，而專案限期內能繪製的圖像有限，所以一般來說手繪動畫的幀率相對來講會比較低。<br>以常見的日式動畫來講，日式動畫的幀率平均落在<code>23.976幀/秒</code>, 這也就是我們常聽到的<code>24幀</code>。</p>\n<blockquote>\n<p>在現代則出現了更方便的AI中割模擬，大幅減少了人力成本，不過那是題外話了 。 BTW – 有看<strong>咒術迴戰</strong>的朋友可能對<code>24幀</code>這詞蠻熟悉的XD(投射咒法~!)</p>\n</blockquote>\n<p>而在科技進步之後，來到網頁 / 遊戲的領域，基本幀率則最少也會有<code>60幀/秒</code>（因為畫面是交由機器繪製）。  </p>\n<p>這邊有人可能會開始覺得很疑惑，網頁在沒有動畫時，本身不是靜態的圖像嗎？為什麼還會提到幀率？  </p>\n<p>這你就不懂了~  </p>\n<p>瀏覽器視窗本身可以其實可以看作一個大型且複雜的canvas，你在一秒內所看到的畫面，其實實際上是瀏覽器渲染引擎以極快的速度逐幀繪製出來的(就算是靜態畫面也是一樣)</p>\n<p>渲染引擎本身的繪製速度其實會受到編譯的速度，還有程序邏輯的複雜度等多重原因影響，而當渲染引擎的繪製速度被拖慢(或者說不夠快)，這時候就會出現所謂的<code>渲染延遲</code>，或<code>掉幀</code>的現象。</p>\n<p>舉個常見的<code>渲染延遲</code>案例 ~ 大家在菜鳥時期一定都有碰過。當有一個網頁具備一卡車的動態特效(尤其是onScroll Animation) ，使用者在網頁載入完畢的同時快速把scrollbar往下拉，這時候畫面會有很大的機率會白掉一大半，這個就是『渲染速度』跟不上『使用者操作UI速度』的典型案例。</p>\n<blockquote>\n<p>通常這種狀況的解決方式都是比較硬核的，需要深入程序修改細節以解決效能上的問題。</p>\n</blockquote>\n<p>而所謂的<code>掉幀</code>，其實就是我們常說的動畫卡頓問題，網頁的<code>掉幀</code>問題有大有小，大的例如畫面卡頓卡到跟靜態圖像一樣，小的則像是某些時候畫面會有微妙的停頓感(一般人可能分辨不出來這個XD)</p>\n<p>接下來我們會用實際範例來演示怎麼在Canvas環境下實現一個方塊移動的簡易動畫。</p>\n<h1 id=\"實際動畫案例演示-方塊移動\"><a href=\"#實際動畫案例演示-方塊移動\" class=\"headerlink\" title=\"實際動畫案例演示 - 方塊移動\"></a>實際動畫案例演示 - 方塊移動</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> startTime = performance.now();</span><br><span class=\"line\"><span class=\"keyword\">const</span> durationTotal = <span class=\"number\">5000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">drawRect</span>(<span class=\"params\">ctx,x,y</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 這就是很普通的畫一個方塊在指定座標的位置上</span></span><br><span class=\"line\">  <span class=\"comment\">// 假設長寬都是40</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> size = <span class=\"number\">20</span>;</span><br><span class=\"line\">   <span class=\"comment\">// 設定填充色</span></span><br><span class=\"line\">  ctx.fillStyle=<span class=\"string\">&quot;#fff&quot;</span>;</span><br><span class=\"line\">  ctx.fillRect(x,y,size*<span class=\"number\">2</span>,size*<span class=\"number\">2</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">animate</span>(<span class=\"params\">ctx</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 預設都先清除舊畫面然後重新畫一個方塊在新位置</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> timeNow = performance.now() - startTime;</span><br><span class=\"line\">  <span class=\"comment\">//</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> speed = <span class=\"number\">0.05</span>; <span class=\"comment\">//假設速度是0.05px/毫秒</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  ctx.clearRect(<span class=\"number\">0</span>,<span class=\"number\">0</span>,ctx.canvas.width,ctx.canvas.height)</span><br><span class=\"line\">  drawRect(ctx,speed*timeNow,<span class=\"number\">50</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 在目前花費時間還沒超過總預設花費時間的狀況下就持續動作</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\">timeNow&lt;durationTotal</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 告訴瀏覽器下一幀要做的動作, 可以想像成一個極短的setTimeout, delay時間大約是1/60秒</span></span><br><span class=\"line\">    <span class=\"comment\">// 這邊我們透過遞迴執行animate來繪製下一幀的畫面</span></span><br><span class=\"line\">     requestAnimationFrame(<span class=\"function\">()=&gt;</span>&#123;animate(ctx)&#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">draw</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> cvs = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;canvas&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ctx = cvs.getContext(<span class=\"string\">&#x27;2d&#x27;</span>);</span><br><span class=\"line\">  animate(ctx);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">  draw();</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>codepen連結： <a href=\"https://codepen.io/mizok_contest/pen/qBjyVaa\">https://codepen.io/mizok_contest/pen/qBjyVaa</a></p>\n</blockquote>\n<p>在上面這個看似簡單的範例中其實隱藏著兩個重點。</p>\n<ul>\n<li>用requestAnimationFrame(RAF)來告訴瀏覽器進行下一幀圖像的繪製</li>\n<li>用performance.now()來追蹤動畫進行時間</li>\n</ul>\n<p>接下來我們會就這兩個重點講解背後的原因。</p>\n<h1 id=\"為什麼要使用requestAnimationFrame\"><a href=\"#為什麼要使用requestAnimationFrame\" class=\"headerlink\" title=\"為什麼要使用requestAnimationFrame()?\"></a>為什麼要使用requestAnimationFrame()?</h1><p>如果去找一些比較早期的Canvas教程，可能會發現它裡面都是用SetTimeOut 或是SetInterval去計算幀間時差(將時間設置為1000/60 毫秒) 。<br>雖然說用setTimeOut/setInterval 來計算幀間時差並不算錯，但是就是比較粗糙。<br>使用requestAnimationFrame(以下簡稱RAF)的優點有二：</p>\n<ul>\n<li>不像setTimeOut/setInterval是固定給一個固定的時間差，RAF可以視為一個動畫幀結束之後的callback，所以相對的他比較不會受到幀率誤差的影響</li>\n<li>不像setTimeOut/setInterval，RAF並不會在背景運作，當你把分頁切換到別的分頁，RAF就會被中斷，這個設計改善了瀏覽器運作的效能，同時也減少電源的消耗</li>\n</ul>\n<h1 id=\"為什麼要使用performance-now\"><a href=\"#為什麼要使用performance-now\" class=\"headerlink\" title=\"為什麼要使用performance.now()?\"></a>為什麼要使用performance.now()?</h1><p>我們先來說說<code>performance.now()</code>在這個案例裡面用途是什麼，還有他是一個什麼樣的api。</p>\n<p><code>performance.now()</code>簡單來說就是一個用來計算<code>document</code>生命週期的方法，他會在<code>document</code>物件被載入的時候開始計時。</p>\n<p>有些人接著可能會問:</p>\n<blockquote>\n<p>那他跟<code>Date.now()</code>差別差在哪？不能用<code>Date.now()</code>就好嗎?</p>\n</blockquote>\n<p><code>performance.now()</code>作為一個比較年輕的api，跟<code>Date.now()</code>比起來其實有更多適用的場景，原因有二：</p>\n<ul>\n<li>performance.now() 能夠提供超越毫秒的精準度，他所計算出來的時間會是附帶浮點數的毫秒，所以他更適合用在遊戲或動畫這種需要高精確度的運算場景</li>\n<li>Date.now()實際上是從1970年1月1日0分0秒開始估算(也就是所謂的Unix時間)，然而現今的年代其實很少需要一個從1970年開始計時的功能。而且Date實際上是會Base on 裝置的系統時間，當系統時間在某種狀況下受到變動，運用Date.now去計算時間差的Web APP 可能會出現誤差。</li>\n</ul>\n<p>根據developers.google.com的解釋，Date.now比較適用在確認絕對時間的場景，而performance.now則適用於計算相對時間的情境。</p>\n<blockquote>\n<p>developers.google.com上關於performance.now的解釋可以看<a href=\"https://developers.google.com/web/updates/2012/08/When-milliseconds-are-not-enough-performance-now\">這邊</a></p>\n</blockquote>\n<p>看到這邊大家應該已經很能理解使用performance.now的諸多好處～</p>\n<p>但是接著可能就又會有人再問：</p>\n<blockquote>\n<p>那為什麼不能直接用經過的幀數作計算？例如預設一個變數給定總幀數，然後每一圈RAF就-1，扣到0的時候就停止運動?</p>\n</blockquote>\n<p>原因很簡單～還記得我們前面有介紹過瀏覽器的FPS數字其實會受到其他因素的影響嗎？有時候如果FPS偏低，那麼就意味著可能有某幾幀的耗時比較長，這麼一來，如果用幀數來判斷移動距離，就會出現運動速度不均勻的狀況。  </p>\n<p>雖然說在過去這種誤差可能不容易被察覺，但是在現代，尤其是在開發遊戲的場景，物件移動的精確度其實越來越重要，所以相對的也要求開發人員不能隨便用舊方法交差。</p>\n<h1 id=\"小結\"><a href=\"#小結\" class=\"headerlink\" title=\"小結\"></a>小結</h1><p>這次我們介紹了如何在Canvas上實作動畫，但是這其實還是非常基本的部分，我們接下來即將要脫離基礎篇，正式來介紹一些比較複雜的Canvas應用場景~</p>\n","site":{"data":{"css/variables":"","languages":{"zh-TW":{"title":{"archive":"時間線","category":"分類","tag":"標籤","schedule":"時間表"},"menu":{"home":"首頁","archives":"時間線","categories":"分類","tags":"標籤","about":"關於","search":"搜尋","schedule":"時間表","sitemap":"網站地圖","commonweal":"公益 404"},"sidebar":{"overview":"本站概要","toc":"文章目錄"},"post":{"posted":"發表於","edited":"更新於","created":"創建時間","modified":"修改時間","edit":"編輯","in":"分類於","read_more":"閱讀全文","untitled":"未命名","sticky":"置頂文","views":"閱讀次數","related_posts":"相關文章","copyright":{"author":"作者","link":"文章連結","post_author":"Written by","post_link":"This article originally appeared on","license_title":"版權聲明","license_content":"本網誌所有文章除特別聲明外，均採用 %s 許可協議。轉載請註明出處！"}},"footer":{"powered":"","total_views":"總瀏覽次數","total_visitors":"訪客總數"},"counter":{"tag_cloud":{"zero":"目前還沒有任何標籤","one":"目前共有 1 個標籤","other":"目前共有 %d 個標籤"},"categories":{"zero":"目前還沒有任何分類","one":"目前共有 1 個分類","other":"目前共有 %d 個分類"},"archive_posts":{"zero":"目前還沒有任何文章。","one":"目前共有 1 篇文章。","other":"目前共有 %d 篇文章。"}},"state":{"posts":"文章","tags":"標籤","categories":"分類"},"search":{"placeholder":"搜尋...","empty":"We didn't find any results for the search: %s","hits_time":"%s results found in %s ms","hits":"%s results found"},"cheers":{"um":"嗯..","ok":"還不錯","nice":"好","good":"很好","great":"非常好","excellent":"棒棒Der"},"keep_on":"繼續努力。","symbol":{"comma":"，","period":"。","colon":"："},"reward":{"donate":"捐贈","wechatpay":"微信支付","alipay":"支付寶","paypal":"貝寶","bitcoin":"比特幣"},"follow_me":{"welcome":"歡迎關注我的其它站點"},"accessibility":{"nav_toggle":"切換導航欄","prev_page":"上一頁","next_page":"下一頁"},"symbols_count_time":{"count":"文章字數","count_total":"總字數","time":"所需閱讀時間","time_total":"所需總閱讀時間","time_minutes":"分鐘"}}},"css/mixins":"","css/styles":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","template/head":"<script src=\"//js/tool/canvas-fx-base.js\"></script>\n\n<script src=\"//js/ripple-logo.js\"></script>\n<script src=\"//js/silk-wave.js\"></script>\n\n<style>\n  @font-face {\n  font-family: \"Roboto\";\n  src: url(//font/Roboto.ttf) format(\"truetype\");\n}\n</style>","css/styl-plugin/grid-post-layout/main":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","css/styl-plugin/grid-post-layout/mixins":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n","css/styl-plugin/grid-post-layout/variables":""}},"excerpt":"","more":"<p>OK, 我們終於來到了基礎篇最後的部分，也就是Canvas動畫~!(撒花)<br>在這個部分，我們會介紹：</p>\n<ul>\n<li><code>canvas</code>實作動畫的原理</li>\n<li>一個簡易動畫的實作案例</li>\n</ul>\n<h1 id=\"Canvas動畫原理\"><a href=\"#Canvas動畫原理\" class=\"headerlink\" title=\"Canvas動畫原理\"></a>Canvas動畫原理</h1><p>我們都知道，在現實生活中動畫(Animation)的原理其實是透過繪製很多不同但連貫的圖片，然後把這些圖片依序播放出來。<br><code>canvas</code>實作動畫的原理其實也是一模一樣。</p>\n<p>假設今天有一個60FPS(Frame Per Second, 意思就是每秒60幀)的動畫，如果我們要用Canvas來實作，那麼在動畫第一秒內的流程大約會是：  </p>\n<ul>\n<li>在canvas上面繪製第一幀的樣子</li>\n<li>在1/60 秒後清除畫面</li>\n<li>在canvas上面繪製第二幀的樣子</li>\n<li>持續重複上面的做法, 一直做到第60幀</li>\n<li>…</li>\n</ul>\n<p>原理面的部分大致上就這樣，雖然看起來很簡單，但是在實作的時候才真的會遭遇到各種問題。</p>\n<h1 id=\"什麼是幀率（FPS）\"><a href=\"#什麼是幀率（FPS）\" class=\"headerlink\" title=\"什麼是幀率（FPS）?\"></a>什麼是幀率（FPS）?</h1><blockquote>\n<p>你前面提到了<code>FPS</code>這個詞，那是一個什麼樣的概念？</p>\n</blockquote>\n<p>所謂的幀率就是『每秒被播出的圖像數量』。  </p>\n<blockquote>\n<p>延伸資源：<a href=\"https://www.youtube.com/watch?v=npMreLeVD6o\">不同幀率所帶來的視覺效果差</a></p>\n</blockquote>\n<p>在過去的年代，製作一部手繪卡通其實所費不貲，最主要的原因就是因為圖像需要逐幀人工繪製，而專案限期內能繪製的圖像有限，所以一般來說手繪動畫的幀率相對來講會比較低。<br>以常見的日式動畫來講，日式動畫的幀率平均落在<code>23.976幀/秒</code>, 這也就是我們常聽到的<code>24幀</code>。</p>\n<blockquote>\n<p>在現代則出現了更方便的AI中割模擬，大幅減少了人力成本，不過那是題外話了 。 BTW – 有看<strong>咒術迴戰</strong>的朋友可能對<code>24幀</code>這詞蠻熟悉的XD(投射咒法~!)</p>\n</blockquote>\n<p>而在科技進步之後，來到網頁 / 遊戲的領域，基本幀率則最少也會有<code>60幀/秒</code>（因為畫面是交由機器繪製）。  </p>\n<p>這邊有人可能會開始覺得很疑惑，網頁在沒有動畫時，本身不是靜態的圖像嗎？為什麼還會提到幀率？  </p>\n<p>這你就不懂了~  </p>\n<p>瀏覽器視窗本身可以其實可以看作一個大型且複雜的canvas，你在一秒內所看到的畫面，其實實際上是瀏覽器渲染引擎以極快的速度逐幀繪製出來的(就算是靜態畫面也是一樣)</p>\n<p>渲染引擎本身的繪製速度其實會受到編譯的速度，還有程序邏輯的複雜度等多重原因影響，而當渲染引擎的繪製速度被拖慢(或者說不夠快)，這時候就會出現所謂的<code>渲染延遲</code>，或<code>掉幀</code>的現象。</p>\n<p>舉個常見的<code>渲染延遲</code>案例 ~ 大家在菜鳥時期一定都有碰過。當有一個網頁具備一卡車的動態特效(尤其是onScroll Animation) ，使用者在網頁載入完畢的同時快速把scrollbar往下拉，這時候畫面會有很大的機率會白掉一大半，這個就是『渲染速度』跟不上『使用者操作UI速度』的典型案例。</p>\n<blockquote>\n<p>通常這種狀況的解決方式都是比較硬核的，需要深入程序修改細節以解決效能上的問題。</p>\n</blockquote>\n<p>而所謂的<code>掉幀</code>，其實就是我們常說的動畫卡頓問題，網頁的<code>掉幀</code>問題有大有小，大的例如畫面卡頓卡到跟靜態圖像一樣，小的則像是某些時候畫面會有微妙的停頓感(一般人可能分辨不出來這個XD)</p>\n<p>接下來我們會用實際範例來演示怎麼在Canvas環境下實現一個方塊移動的簡易動畫。</p>\n<h1 id=\"實際動畫案例演示-方塊移動\"><a href=\"#實際動畫案例演示-方塊移動\" class=\"headerlink\" title=\"實際動畫案例演示 - 方塊移動\"></a>實際動畫案例演示 - 方塊移動</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> startTime = performance.now();</span><br><span class=\"line\"><span class=\"keyword\">const</span> durationTotal = <span class=\"number\">5000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">drawRect</span>(<span class=\"params\">ctx,x,y</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 這就是很普通的畫一個方塊在指定座標的位置上</span></span><br><span class=\"line\">  <span class=\"comment\">// 假設長寬都是40</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> size = <span class=\"number\">20</span>;</span><br><span class=\"line\">   <span class=\"comment\">// 設定填充色</span></span><br><span class=\"line\">  ctx.fillStyle=<span class=\"string\">&quot;#fff&quot;</span>;</span><br><span class=\"line\">  ctx.fillRect(x,y,size*<span class=\"number\">2</span>,size*<span class=\"number\">2</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">animate</span>(<span class=\"params\">ctx</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 預設都先清除舊畫面然後重新畫一個方塊在新位置</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> timeNow = performance.now() - startTime;</span><br><span class=\"line\">  <span class=\"comment\">//</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> speed = <span class=\"number\">0.05</span>; <span class=\"comment\">//假設速度是0.05px/毫秒</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  ctx.clearRect(<span class=\"number\">0</span>,<span class=\"number\">0</span>,ctx.canvas.width,ctx.canvas.height)</span><br><span class=\"line\">  drawRect(ctx,speed*timeNow,<span class=\"number\">50</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 在目前花費時間還沒超過總預設花費時間的狀況下就持續動作</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">if</span>(<span class=\"params\">timeNow&lt;durationTotal</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 告訴瀏覽器下一幀要做的動作, 可以想像成一個極短的setTimeout, delay時間大約是1/60秒</span></span><br><span class=\"line\">    <span class=\"comment\">// 這邊我們透過遞迴執行animate來繪製下一幀的畫面</span></span><br><span class=\"line\">     requestAnimationFrame(<span class=\"function\">()=&gt;</span>&#123;animate(ctx)&#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">draw</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> cvs = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;canvas&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ctx = cvs.getContext(<span class=\"string\">&#x27;2d&#x27;</span>);</span><br><span class=\"line\">  animate(ctx);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">  draw();</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>codepen連結： <a href=\"https://codepen.io/mizok_contest/pen/qBjyVaa\">https://codepen.io/mizok_contest/pen/qBjyVaa</a></p>\n</blockquote>\n<p>在上面這個看似簡單的範例中其實隱藏著兩個重點。</p>\n<ul>\n<li>用requestAnimationFrame(RAF)來告訴瀏覽器進行下一幀圖像的繪製</li>\n<li>用performance.now()來追蹤動畫進行時間</li>\n</ul>\n<p>接下來我們會就這兩個重點講解背後的原因。</p>\n<h1 id=\"為什麼要使用requestAnimationFrame\"><a href=\"#為什麼要使用requestAnimationFrame\" class=\"headerlink\" title=\"為什麼要使用requestAnimationFrame()?\"></a>為什麼要使用requestAnimationFrame()?</h1><p>如果去找一些比較早期的Canvas教程，可能會發現它裡面都是用SetTimeOut 或是SetInterval去計算幀間時差(將時間設置為1000/60 毫秒) 。<br>雖然說用setTimeOut/setInterval 來計算幀間時差並不算錯，但是就是比較粗糙。<br>使用requestAnimationFrame(以下簡稱RAF)的優點有二：</p>\n<ul>\n<li>不像setTimeOut/setInterval是固定給一個固定的時間差，RAF可以視為一個動畫幀結束之後的callback，所以相對的他比較不會受到幀率誤差的影響</li>\n<li>不像setTimeOut/setInterval，RAF並不會在背景運作，當你把分頁切換到別的分頁，RAF就會被中斷，這個設計改善了瀏覽器運作的效能，同時也減少電源的消耗</li>\n</ul>\n<h1 id=\"為什麼要使用performance-now\"><a href=\"#為什麼要使用performance-now\" class=\"headerlink\" title=\"為什麼要使用performance.now()?\"></a>為什麼要使用performance.now()?</h1><p>我們先來說說<code>performance.now()</code>在這個案例裡面用途是什麼，還有他是一個什麼樣的api。</p>\n<p><code>performance.now()</code>簡單來說就是一個用來計算<code>document</code>生命週期的方法，他會在<code>document</code>物件被載入的時候開始計時。</p>\n<p>有些人接著可能會問:</p>\n<blockquote>\n<p>那他跟<code>Date.now()</code>差別差在哪？不能用<code>Date.now()</code>就好嗎?</p>\n</blockquote>\n<p><code>performance.now()</code>作為一個比較年輕的api，跟<code>Date.now()</code>比起來其實有更多適用的場景，原因有二：</p>\n<ul>\n<li>performance.now() 能夠提供超越毫秒的精準度，他所計算出來的時間會是附帶浮點數的毫秒，所以他更適合用在遊戲或動畫這種需要高精確度的運算場景</li>\n<li>Date.now()實際上是從1970年1月1日0分0秒開始估算(也就是所謂的Unix時間)，然而現今的年代其實很少需要一個從1970年開始計時的功能。而且Date實際上是會Base on 裝置的系統時間，當系統時間在某種狀況下受到變動，運用Date.now去計算時間差的Web APP 可能會出現誤差。</li>\n</ul>\n<p>根據developers.google.com的解釋，Date.now比較適用在確認絕對時間的場景，而performance.now則適用於計算相對時間的情境。</p>\n<blockquote>\n<p>developers.google.com上關於performance.now的解釋可以看<a href=\"https://developers.google.com/web/updates/2012/08/When-milliseconds-are-not-enough-performance-now\">這邊</a></p>\n</blockquote>\n<p>看到這邊大家應該已經很能理解使用performance.now的諸多好處～</p>\n<p>但是接著可能就又會有人再問：</p>\n<blockquote>\n<p>那為什麼不能直接用經過的幀數作計算？例如預設一個變數給定總幀數，然後每一圈RAF就-1，扣到0的時候就停止運動?</p>\n</blockquote>\n<p>原因很簡單～還記得我們前面有介紹過瀏覽器的FPS數字其實會受到其他因素的影響嗎？有時候如果FPS偏低，那麼就意味著可能有某幾幀的耗時比較長，這麼一來，如果用幀數來判斷移動距離，就會出現運動速度不均勻的狀況。  </p>\n<p>雖然說在過去這種誤差可能不容易被察覺，但是在現代，尤其是在開發遊戲的場景，物件移動的精確度其實越來越重要，所以相對的也要求開發人員不能隨便用舊方法交差。</p>\n<h1 id=\"小結\"><a href=\"#小結\" class=\"headerlink\" title=\"小結\"></a>小結</h1><p>這次我們介紹了如何在Canvas上實作動畫，但是這其實還是非常基本的部分，我們接下來即將要脫離基礎篇，正式來介紹一些比較複雜的Canvas應用場景~</p>\n"},{"title":"Day7 - Canvas動畫概論 -  成為Canvas Ninja ～ 理解2D渲染的精髓","_content":"\n## canvas動畫\n\n","source":"_posts/Canvas 動畫概論 -  成為Canvas Ninja - 理解2D渲染的精髓.md","raw":"---\ntitle: Day7 - Canvas動畫概論 -  成為Canvas Ninja ～ 理解2D渲染的精髓\ncategories: \n- 前端技術學習心得\ntags:\n- 2021鐵人賽\n---\n\n## canvas動畫\n\n","slug":"Canvas 動畫概論 -  成為Canvas Ninja - 理解2D渲染的精髓","published":1,"date":"2021-09-14T17:19:39.582Z","updated":"2021-09-14T17:19:51.358Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktx1vyy0000htay2cmzq770k","content":"<h2 id=\"canvas動畫\"><a href=\"#canvas動畫\" class=\"headerlink\" title=\"canvas動畫\"></a>canvas動畫</h2>","site":{"data":{"css/variables":"","languages":{"zh-TW":{"title":{"archive":"時間線","category":"分類","tag":"標籤","schedule":"時間表"},"menu":{"home":"首頁","archives":"時間線","categories":"分類","tags":"標籤","about":"關於","search":"搜尋","schedule":"時間表","sitemap":"網站地圖","commonweal":"公益 404"},"sidebar":{"overview":"本站概要","toc":"文章目錄"},"post":{"posted":"發表於","edited":"更新於","created":"創建時間","modified":"修改時間","edit":"編輯","in":"分類於","read_more":"閱讀全文","untitled":"未命名","sticky":"置頂文","views":"閱讀次數","related_posts":"相關文章","copyright":{"author":"作者","link":"文章連結","post_author":"Written by","post_link":"This article originally appeared on","license_title":"版權聲明","license_content":"本網誌所有文章除特別聲明外，均採用 %s 許可協議。轉載請註明出處！"}},"footer":{"powered":"","total_views":"總瀏覽次數","total_visitors":"訪客總數"},"counter":{"tag_cloud":{"zero":"目前還沒有任何標籤","one":"目前共有 1 個標籤","other":"目前共有 %d 個標籤"},"categories":{"zero":"目前還沒有任何分類","one":"目前共有 1 個分類","other":"目前共有 %d 個分類"},"archive_posts":{"zero":"目前還沒有任何文章。","one":"目前共有 1 篇文章。","other":"目前共有 %d 篇文章。"}},"state":{"posts":"文章","tags":"標籤","categories":"分類"},"search":{"placeholder":"搜尋...","empty":"We didn't find any results for the search: %s","hits_time":"%s results found in %s ms","hits":"%s results found"},"cheers":{"um":"嗯..","ok":"還不錯","nice":"好","good":"很好","great":"非常好","excellent":"棒棒Der"},"keep_on":"繼續努力。","symbol":{"comma":"，","period":"。","colon":"："},"reward":{"donate":"捐贈","wechatpay":"微信支付","alipay":"支付寶","paypal":"貝寶","bitcoin":"比特幣"},"follow_me":{"welcome":"歡迎關注我的其它站點"},"accessibility":{"nav_toggle":"切換導航欄","prev_page":"上一頁","next_page":"下一頁"},"symbols_count_time":{"count":"文章字數","count_total":"總字數","time":"所需閱讀時間","time_total":"所需總閱讀時間","time_minutes":"分鐘"}}},"css/mixins":"","css/styles":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","template/head":"<script src=\"//js/tool/canvas-fx-base.js\"></script>\n\n<script src=\"//js/ripple-logo.js\"></script>\n<script src=\"//js/silk-wave.js\"></script>\n\n<style>\n  @font-face {\n  font-family: \"Roboto\";\n  src: url(//font/Roboto.ttf) format(\"truetype\");\n}\n</style>","css/styl-plugin/grid-post-layout/main":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","css/styl-plugin/grid-post-layout/mixins":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n","css/styl-plugin/grid-post-layout/variables":""}},"excerpt":"","more":"<h2 id=\"canvas動畫\"><a href=\"#canvas動畫\" class=\"headerlink\" title=\"canvas動畫\"></a>canvas動畫</h2>"},{"title":"Day9 - Canvas與使用者互動 -  成為Canvas Ninja ～ 理解2D渲染的精髓","_content":"\n## canvas動畫\n\n","source":"_posts/Canvas 與使用者互動 -  成為Canvas Ninja - 理解2D渲染的精髓.md","raw":"---\ntitle: Day9 - Canvas與使用者互動 -  成為Canvas Ninja ～ 理解2D渲染的精髓\ncategories: \n- 前端技術學習心得\ntags:\n- 2021鐵人賽\n---\n\n## canvas動畫\n\n","slug":"Canvas 與使用者互動 -  成為Canvas Ninja - 理解2D渲染的精髓","published":1,"date":"2021-09-13T18:39:07.434Z","updated":"2021-09-14T17:20:38.888Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktx1vyy4000mtay20391c6cq","content":"<h2 id=\"canvas動畫\"><a href=\"#canvas動畫\" class=\"headerlink\" title=\"canvas動畫\"></a>canvas動畫</h2>","site":{"data":{"css/variables":"","languages":{"zh-TW":{"title":{"archive":"時間線","category":"分類","tag":"標籤","schedule":"時間表"},"menu":{"home":"首頁","archives":"時間線","categories":"分類","tags":"標籤","about":"關於","search":"搜尋","schedule":"時間表","sitemap":"網站地圖","commonweal":"公益 404"},"sidebar":{"overview":"本站概要","toc":"文章目錄"},"post":{"posted":"發表於","edited":"更新於","created":"創建時間","modified":"修改時間","edit":"編輯","in":"分類於","read_more":"閱讀全文","untitled":"未命名","sticky":"置頂文","views":"閱讀次數","related_posts":"相關文章","copyright":{"author":"作者","link":"文章連結","post_author":"Written by","post_link":"This article originally appeared on","license_title":"版權聲明","license_content":"本網誌所有文章除特別聲明外，均採用 %s 許可協議。轉載請註明出處！"}},"footer":{"powered":"","total_views":"總瀏覽次數","total_visitors":"訪客總數"},"counter":{"tag_cloud":{"zero":"目前還沒有任何標籤","one":"目前共有 1 個標籤","other":"目前共有 %d 個標籤"},"categories":{"zero":"目前還沒有任何分類","one":"目前共有 1 個分類","other":"目前共有 %d 個分類"},"archive_posts":{"zero":"目前還沒有任何文章。","one":"目前共有 1 篇文章。","other":"目前共有 %d 篇文章。"}},"state":{"posts":"文章","tags":"標籤","categories":"分類"},"search":{"placeholder":"搜尋...","empty":"We didn't find any results for the search: %s","hits_time":"%s results found in %s ms","hits":"%s results found"},"cheers":{"um":"嗯..","ok":"還不錯","nice":"好","good":"很好","great":"非常好","excellent":"棒棒Der"},"keep_on":"繼續努力。","symbol":{"comma":"，","period":"。","colon":"："},"reward":{"donate":"捐贈","wechatpay":"微信支付","alipay":"支付寶","paypal":"貝寶","bitcoin":"比特幣"},"follow_me":{"welcome":"歡迎關注我的其它站點"},"accessibility":{"nav_toggle":"切換導航欄","prev_page":"上一頁","next_page":"下一頁"},"symbols_count_time":{"count":"文章字數","count_total":"總字數","time":"所需閱讀時間","time_total":"所需總閱讀時間","time_minutes":"分鐘"}}},"css/mixins":"","css/styles":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","template/head":"<script src=\"//js/tool/canvas-fx-base.js\"></script>\n\n<script src=\"//js/ripple-logo.js\"></script>\n<script src=\"//js/silk-wave.js\"></script>\n\n<style>\n  @font-face {\n  font-family: \"Roboto\";\n  src: url(//font/Roboto.ttf) format(\"truetype\");\n}\n</style>","css/styl-plugin/grid-post-layout/main":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","css/styl-plugin/grid-post-layout/mixins":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n","css/styl-plugin/grid-post-layout/variables":""}},"excerpt":"","more":"<h2 id=\"canvas動畫\"><a href=\"#canvas動畫\" class=\"headerlink\" title=\"canvas動畫\"></a>canvas動畫</h2>"},{"title":"Day2 - Canvas基礎概論 I - 成為Canvas Ninja ～ 理解2D渲染的精髓","_content":"\n## Let's Start From Scratch\n\n本系列文章的頭幾篇我決定還是帶點基礎的東西，所以首先，我打算介紹一些不常被一般教學提到的資料來當熱身。\n\n> The HTMLCanvasElement interface provides properties and methods for manipulating the layout and presentation of `<canvas>` elements. The HTMLCanvasElement interface also inherits the properties and methods of the HTMLElement interface.  --- from MDN\n> The HTML `<canvas>` element is used to draw graphics on a web page. --- from www.w3schools.com\n\n上述是在MDN還有W3school上關於`canvas` 元素 的解釋。簡單來說`canvas`就是一種自帶複數api, 然後可以用來在網頁上做動態繪圖的元素。  \n簡單的介紹就到這邊，接下來是疑問時間。  \n有些人看到上述的解釋，可能會覺得很疑惑，例如：\n\n> 那麼我們平常在用的CSS和html基礎元素，那樣子的東西難道不也是一種繪圖嗎? 差別在哪裡?\n\n接下來我們將針對這個問題做一系列的說明。\n\n## Canvas 與 一般 Dom元素的差異一：編譯流程\n\n通常在80%以上的web專案內容中，我們都是使用普通的Dom元素來對頁面進行版面規劃。  \n所謂『普通』的Dom元素指的就是 `div`、`span`、`ul`、`li`...,etc. 而我們都知道，`HTML`本身是一種標記語言，  \n一篇完整的標記語言範本其實就有點像某種**願望清單**，為什麼說是願望清單呢? 那是因為瀏覽器在接收到一份HTML時，他做的事其實就是根據這份文件，上面提到的: 這份文件有多少元素? 元素個別是哪些？ 元素的先後排列順序、元素的巢狀化邏輯...etc. 去生成各個元素的物件實例，然後再透過瀏覽器的渲染引擎去把這些元素渲染在畫面上。\n\n![retain mode](https://i.imgur.com/Ta8eGWm.png)\n\n\n像這樣子先確認頁面需求模型(也就是我們提到的願望清單)，然後將模型中的細節一一轉譯實現的這種行為模式，我們把它稱為`Retained Mode`(保留模式)。  \n接著一定就會有人問：  \n\n> 那麼是不是還有別的模式呢？\n\nOf course.  \n當瀏覽器需要做這類把文字邏輯轉化成視覺的工作時(我們把這種行為稱為轉譯)，會有兩種固定模式，其一是`Retained Mode`(保留模式), 然後再來就是與`Canvas`密切相關的`Immediate Mode`(立即模式)。  \n\n![img](https://i.imgur.com/d7l62h9.png)\n\n從上面這張圖片我們可以發現，`Canvas` 元素和`Dom`元素最大的區別就是創建模型的這一個環節。  \n所謂的模型指的其實就是彼此之間具有**關聯**的物件(`Object`)的群集。  \n一個使用Canvas 畫一個藍色方塊，和一個使用`div`搭配`css`樣式做出的紅色方塊，本質上最大的區別除了顏色之外，就是這個方塊背後物件的內容差。  \n\n舉個簡單的例子，我們在做網頁動畫的時候，常常會需要用到`getBoundingClientRect` 這個`api` 來獲取一個區塊的大小、座標等。  \n而我們在使用這個api的時候，一般就是先去抓取(`query`)這個元素，然後就可以用這個元素實例底下的`api`。\n\n````javascript\n  // ele 本身是透過selector 字串所抓到的元素實例(instance), 這個實例其實是在瀏覽器創建Dom模型的時候new出來的\n let ele = document.querySelecor('div'); \n // getBoundingClientRect 則是ele 這個實例物件的一個方法\n let divWidth = ele.getBoundingClientRect().width; \n````\n上述對大部分人來說應該都是一個稀鬆平常的操作。\n但是當我們用Canvas 繪製一個方塊時，我們所創建的實例並不是透過去`new` 瀏覽器內建的`Element` 類(`class`)所建立出來的，而是透過我們自己定義的一個具有客製化方法的類，例如:\n\n```javascript\n class block{\n   constructor(ctx){\n     this.ctx = ctx;\n   }\n   draw(x, y, width, height){\n     this.ctx.fillRect(x, y, width, height);\n   }\n }\n```\n當我們用這樣的一個客製類`Block`去產生一個方塊的實例時，這個實例底下所有的方法，都是來自於這個客製類`Block`的定義（所以當然也就沒有`getBoundingClientRect`這麼方便的api可以用）。  \n但是相對的，因為產生實例的類可以自己定義，自由度也當然就跟著大幅提高，平常一些不能用基礎Dom元素做到的操作，甚至都變得有可能了（ex：繪製不規則圖形、創作複雜動畫）\n\n## Canvas 與 一般 Dom元素的差異二：使用情境\n\n前面我們有提到, Canvas 相較於 基礎Dom元素而言，具有相對高（不只高! 而是非常高！）的自由度。  \n用一個簡單的例子來描述，就好比**訂製手工賽車**和**國產普通轎車** 的區別，這邊絕對不是要說國產貨不好，畢竟我也沒有說訂製的手工賽車的來源是哪一家廠商XD  \n\n講到這邊應該就可以理解到兩種繪圖方式的使用情境其分野：\n\n#### 1. Dom元素適合的情境\n  - 快速/大量生產的需求\n  - 不想花費過多時間處理效能問題\n  - 有大量的互動操作行為, 例如UI/UX\n\n#### 2. Canvas渲染適合的情境\n  - 當有天馬行空的創意\n  - 較少的時間壓力，且能夠自行處理圖形重繪/ 效能問題\n  - 像素操作（這個後面的章節會提到）\n\n就像我們前面提到的，以現階段來講，前端工程師80%的職業生涯中面對到的多半是第一種情境(當然也有少數人不是)，  \n而我們需要為了這20%的狀況去學習的原因，除了要應對未來的不時之需以外，當然就是有挑戰自我創作的意義存在。\n\n那麼話就說到這邊。  \n在接下來的章節，我們將會進入下一階段基礎的講解，然後再逐漸的解釋Canvas繪圖的實作，還請各位拭目以待～。","source":"_posts/Canvas基礎概論 I  - 成為Canvas Ninja ~ 理解2D渲染的精髓 .md","raw":"---\ntitle: Day2 - Canvas基礎概論 I - 成為Canvas Ninja ～ 理解2D渲染的精髓\ncategories: \n- 前端技術學習心得\ntags:\n- 2021鐵人賽\n---\n\n## Let's Start From Scratch\n\n本系列文章的頭幾篇我決定還是帶點基礎的東西，所以首先，我打算介紹一些不常被一般教學提到的資料來當熱身。\n\n> The HTMLCanvasElement interface provides properties and methods for manipulating the layout and presentation of `<canvas>` elements. The HTMLCanvasElement interface also inherits the properties and methods of the HTMLElement interface.  --- from MDN\n> The HTML `<canvas>` element is used to draw graphics on a web page. --- from www.w3schools.com\n\n上述是在MDN還有W3school上關於`canvas` 元素 的解釋。簡單來說`canvas`就是一種自帶複數api, 然後可以用來在網頁上做動態繪圖的元素。  \n簡單的介紹就到這邊，接下來是疑問時間。  \n有些人看到上述的解釋，可能會覺得很疑惑，例如：\n\n> 那麼我們平常在用的CSS和html基礎元素，那樣子的東西難道不也是一種繪圖嗎? 差別在哪裡?\n\n接下來我們將針對這個問題做一系列的說明。\n\n## Canvas 與 一般 Dom元素的差異一：編譯流程\n\n通常在80%以上的web專案內容中，我們都是使用普通的Dom元素來對頁面進行版面規劃。  \n所謂『普通』的Dom元素指的就是 `div`、`span`、`ul`、`li`...,etc. 而我們都知道，`HTML`本身是一種標記語言，  \n一篇完整的標記語言範本其實就有點像某種**願望清單**，為什麼說是願望清單呢? 那是因為瀏覽器在接收到一份HTML時，他做的事其實就是根據這份文件，上面提到的: 這份文件有多少元素? 元素個別是哪些？ 元素的先後排列順序、元素的巢狀化邏輯...etc. 去生成各個元素的物件實例，然後再透過瀏覽器的渲染引擎去把這些元素渲染在畫面上。\n\n![retain mode](https://i.imgur.com/Ta8eGWm.png)\n\n\n像這樣子先確認頁面需求模型(也就是我們提到的願望清單)，然後將模型中的細節一一轉譯實現的這種行為模式，我們把它稱為`Retained Mode`(保留模式)。  \n接著一定就會有人問：  \n\n> 那麼是不是還有別的模式呢？\n\nOf course.  \n當瀏覽器需要做這類把文字邏輯轉化成視覺的工作時(我們把這種行為稱為轉譯)，會有兩種固定模式，其一是`Retained Mode`(保留模式), 然後再來就是與`Canvas`密切相關的`Immediate Mode`(立即模式)。  \n\n![img](https://i.imgur.com/d7l62h9.png)\n\n從上面這張圖片我們可以發現，`Canvas` 元素和`Dom`元素最大的區別就是創建模型的這一個環節。  \n所謂的模型指的其實就是彼此之間具有**關聯**的物件(`Object`)的群集。  \n一個使用Canvas 畫一個藍色方塊，和一個使用`div`搭配`css`樣式做出的紅色方塊，本質上最大的區別除了顏色之外，就是這個方塊背後物件的內容差。  \n\n舉個簡單的例子，我們在做網頁動畫的時候，常常會需要用到`getBoundingClientRect` 這個`api` 來獲取一個區塊的大小、座標等。  \n而我們在使用這個api的時候，一般就是先去抓取(`query`)這個元素，然後就可以用這個元素實例底下的`api`。\n\n````javascript\n  // ele 本身是透過selector 字串所抓到的元素實例(instance), 這個實例其實是在瀏覽器創建Dom模型的時候new出來的\n let ele = document.querySelecor('div'); \n // getBoundingClientRect 則是ele 這個實例物件的一個方法\n let divWidth = ele.getBoundingClientRect().width; \n````\n上述對大部分人來說應該都是一個稀鬆平常的操作。\n但是當我們用Canvas 繪製一個方塊時，我們所創建的實例並不是透過去`new` 瀏覽器內建的`Element` 類(`class`)所建立出來的，而是透過我們自己定義的一個具有客製化方法的類，例如:\n\n```javascript\n class block{\n   constructor(ctx){\n     this.ctx = ctx;\n   }\n   draw(x, y, width, height){\n     this.ctx.fillRect(x, y, width, height);\n   }\n }\n```\n當我們用這樣的一個客製類`Block`去產生一個方塊的實例時，這個實例底下所有的方法，都是來自於這個客製類`Block`的定義（所以當然也就沒有`getBoundingClientRect`這麼方便的api可以用）。  \n但是相對的，因為產生實例的類可以自己定義，自由度也當然就跟著大幅提高，平常一些不能用基礎Dom元素做到的操作，甚至都變得有可能了（ex：繪製不規則圖形、創作複雜動畫）\n\n## Canvas 與 一般 Dom元素的差異二：使用情境\n\n前面我們有提到, Canvas 相較於 基礎Dom元素而言，具有相對高（不只高! 而是非常高！）的自由度。  \n用一個簡單的例子來描述，就好比**訂製手工賽車**和**國產普通轎車** 的區別，這邊絕對不是要說國產貨不好，畢竟我也沒有說訂製的手工賽車的來源是哪一家廠商XD  \n\n講到這邊應該就可以理解到兩種繪圖方式的使用情境其分野：\n\n#### 1. Dom元素適合的情境\n  - 快速/大量生產的需求\n  - 不想花費過多時間處理效能問題\n  - 有大量的互動操作行為, 例如UI/UX\n\n#### 2. Canvas渲染適合的情境\n  - 當有天馬行空的創意\n  - 較少的時間壓力，且能夠自行處理圖形重繪/ 效能問題\n  - 像素操作（這個後面的章節會提到）\n\n就像我們前面提到的，以現階段來講，前端工程師80%的職業生涯中面對到的多半是第一種情境(當然也有少數人不是)，  \n而我們需要為了這20%的狀況去學習的原因，除了要應對未來的不時之需以外，當然就是有挑戰自我創作的意義存在。\n\n那麼話就說到這邊。  \n在接下來的章節，我們將會進入下一階段基礎的講解，然後再逐漸的解釋Canvas繪圖的實作，還請各位拭目以待～。","slug":"Canvas基礎概論 I  - 成為Canvas Ninja ~ 理解2D渲染的精髓 ","published":1,"date":"2021-09-09T13:42:59.166Z","updated":"2021-09-14T17:15:25.870Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktx1vyyb000ptay2ai09hwvr","content":"<h2 id=\"Let’s-Start-From-Scratch\"><a href=\"#Let’s-Start-From-Scratch\" class=\"headerlink\" title=\"Let’s Start From Scratch\"></a>Let’s Start From Scratch</h2><p>本系列文章的頭幾篇我決定還是帶點基礎的東西，所以首先，我打算介紹一些不常被一般教學提到的資料來當熱身。</p>\n<blockquote>\n<p>The HTMLCanvasElement interface provides properties and methods for manipulating the layout and presentation of <code>&lt;canvas&gt;</code> elements. The HTMLCanvasElement interface also inherits the properties and methods of the HTMLElement interface.  — from MDN<br>The HTML <code>&lt;canvas&gt;</code> element is used to draw graphics on a web page. — from <a href=\"http://www.w3schools.com/\">www.w3schools.com</a></p>\n</blockquote>\n<p>上述是在MDN還有W3school上關於<code>canvas</code> 元素 的解釋。簡單來說<code>canvas</code>就是一種自帶複數api, 然後可以用來在網頁上做動態繪圖的元素。<br>簡單的介紹就到這邊，接下來是疑問時間。<br>有些人看到上述的解釋，可能會覺得很疑惑，例如：</p>\n<blockquote>\n<p>那麼我們平常在用的CSS和html基礎元素，那樣子的東西難道不也是一種繪圖嗎? 差別在哪裡?</p>\n</blockquote>\n<p>接下來我們將針對這個問題做一系列的說明。</p>\n<h2 id=\"Canvas-與-一般-Dom元素的差異一：編譯流程\"><a href=\"#Canvas-與-一般-Dom元素的差異一：編譯流程\" class=\"headerlink\" title=\"Canvas 與 一般 Dom元素的差異一：編譯流程\"></a>Canvas 與 一般 Dom元素的差異一：編譯流程</h2><p>通常在80%以上的web專案內容中，我們都是使用普通的Dom元素來對頁面進行版面規劃。<br>所謂『普通』的Dom元素指的就是 <code>div</code>、<code>span</code>、<code>ul</code>、<code>li</code>…,etc. 而我們都知道，<code>HTML</code>本身是一種標記語言，<br>一篇完整的標記語言範本其實就有點像某種<strong>願望清單</strong>，為什麼說是願望清單呢? 那是因為瀏覽器在接收到一份HTML時，他做的事其實就是根據這份文件，上面提到的: 這份文件有多少元素? 元素個別是哪些？ 元素的先後排列順序、元素的巢狀化邏輯…etc. 去生成各個元素的物件實例，然後再透過瀏覽器的渲染引擎去把這些元素渲染在畫面上。</p>\n<p><img src=\"https://i.imgur.com/Ta8eGWm.png\" alt=\"retain mode\"></p>\n<p>像這樣子先確認頁面需求模型(也就是我們提到的願望清單)，然後將模型中的細節一一轉譯實現的這種行為模式，我們把它稱為<code>Retained Mode</code>(保留模式)。<br>接著一定就會有人問：  </p>\n<blockquote>\n<p>那麼是不是還有別的模式呢？</p>\n</blockquote>\n<p>Of course.<br>當瀏覽器需要做這類把文字邏輯轉化成視覺的工作時(我們把這種行為稱為轉譯)，會有兩種固定模式，其一是<code>Retained Mode</code>(保留模式), 然後再來就是與<code>Canvas</code>密切相關的<code>Immediate Mode</code>(立即模式)。  </p>\n<p><img src=\"https://i.imgur.com/d7l62h9.png\" alt=\"img\"></p>\n<p>從上面這張圖片我們可以發現，<code>Canvas</code> 元素和<code>Dom</code>元素最大的區別就是創建模型的這一個環節。<br>所謂的模型指的其實就是彼此之間具有<strong>關聯</strong>的物件(<code>Object</code>)的群集。<br>一個使用Canvas 畫一個藍色方塊，和一個使用<code>div</code>搭配<code>css</code>樣式做出的紅色方塊，本質上最大的區別除了顏色之外，就是這個方塊背後物件的內容差。  </p>\n<p>舉個簡單的例子，我們在做網頁動畫的時候，常常會需要用到<code>getBoundingClientRect</code> 這個<code>api</code> 來獲取一個區塊的大小、座標等。<br>而我們在使用這個api的時候，一般就是先去抓取(<code>query</code>)這個元素，然後就可以用這個元素實例底下的<code>api</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">// ele 本身是透過selector 字串所抓到的元素實例(instance), 這個實例其實是在瀏覽器創建Dom模型的時候new出來的</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ele = <span class=\"built_in\">document</span>.querySelecor(<span class=\"string\">&#x27;div&#x27;</span>); </span><br><span class=\"line\"><span class=\"comment\">// getBoundingClientRect 則是ele 這個實例物件的一個方法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> divWidth = ele.getBoundingClientRect().width; </span><br></pre></td></tr></table></figure>\n<p>上述對大部分人來說應該都是一個稀鬆平常的操作。<br>但是當我們用Canvas 繪製一個方塊時，我們所創建的實例並不是透過去<code>new</code> 瀏覽器內建的<code>Element</code> 類(<code>class</code>)所建立出來的，而是透過我們自己定義的一個具有客製化方法的類，例如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">block</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">ctx</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.ctx = ctx;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">draw</span>(<span class=\"params\">x, y, width, height</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.ctx.fillRect(x, y, width, height);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>當我們用這樣的一個客製類<code>Block</code>去產生一個方塊的實例時，這個實例底下所有的方法，都是來自於這個客製類<code>Block</code>的定義（所以當然也就沒有<code>getBoundingClientRect</code>這麼方便的api可以用）。<br>但是相對的，因為產生實例的類可以自己定義，自由度也當然就跟著大幅提高，平常一些不能用基礎Dom元素做到的操作，甚至都變得有可能了（ex：繪製不規則圖形、創作複雜動畫）</p>\n<h2 id=\"Canvas-與-一般-Dom元素的差異二：使用情境\"><a href=\"#Canvas-與-一般-Dom元素的差異二：使用情境\" class=\"headerlink\" title=\"Canvas 與 一般 Dom元素的差異二：使用情境\"></a>Canvas 與 一般 Dom元素的差異二：使用情境</h2><p>前面我們有提到, Canvas 相較於 基礎Dom元素而言，具有相對高（不只高! 而是非常高！）的自由度。<br>用一個簡單的例子來描述，就好比<strong>訂製手工賽車</strong>和<strong>國產普通轎車</strong> 的區別，這邊絕對不是要說國產貨不好，畢竟我也沒有說訂製的手工賽車的來源是哪一家廠商XD  </p>\n<p>講到這邊應該就可以理解到兩種繪圖方式的使用情境其分野：</p>\n<h4 id=\"1-Dom元素適合的情境\"><a href=\"#1-Dom元素適合的情境\" class=\"headerlink\" title=\"1. Dom元素適合的情境\"></a>1. Dom元素適合的情境</h4><ul>\n<li>快速/大量生產的需求</li>\n<li>不想花費過多時間處理效能問題</li>\n<li>有大量的互動操作行為, 例如UI/UX</li>\n</ul>\n<h4 id=\"2-Canvas渲染適合的情境\"><a href=\"#2-Canvas渲染適合的情境\" class=\"headerlink\" title=\"2. Canvas渲染適合的情境\"></a>2. Canvas渲染適合的情境</h4><ul>\n<li>當有天馬行空的創意</li>\n<li>較少的時間壓力，且能夠自行處理圖形重繪/ 效能問題</li>\n<li>像素操作（這個後面的章節會提到）</li>\n</ul>\n<p>就像我們前面提到的，以現階段來講，前端工程師80%的職業生涯中面對到的多半是第一種情境(當然也有少數人不是)，<br>而我們需要為了這20%的狀況去學習的原因，除了要應對未來的不時之需以外，當然就是有挑戰自我創作的意義存在。</p>\n<p>那麼話就說到這邊。<br>在接下來的章節，我們將會進入下一階段基礎的講解，然後再逐漸的解釋Canvas繪圖的實作，還請各位拭目以待～。</p>\n","site":{"data":{"css/variables":"","languages":{"zh-TW":{"title":{"archive":"時間線","category":"分類","tag":"標籤","schedule":"時間表"},"menu":{"home":"首頁","archives":"時間線","categories":"分類","tags":"標籤","about":"關於","search":"搜尋","schedule":"時間表","sitemap":"網站地圖","commonweal":"公益 404"},"sidebar":{"overview":"本站概要","toc":"文章目錄"},"post":{"posted":"發表於","edited":"更新於","created":"創建時間","modified":"修改時間","edit":"編輯","in":"分類於","read_more":"閱讀全文","untitled":"未命名","sticky":"置頂文","views":"閱讀次數","related_posts":"相關文章","copyright":{"author":"作者","link":"文章連結","post_author":"Written by","post_link":"This article originally appeared on","license_title":"版權聲明","license_content":"本網誌所有文章除特別聲明外，均採用 %s 許可協議。轉載請註明出處！"}},"footer":{"powered":"","total_views":"總瀏覽次數","total_visitors":"訪客總數"},"counter":{"tag_cloud":{"zero":"目前還沒有任何標籤","one":"目前共有 1 個標籤","other":"目前共有 %d 個標籤"},"categories":{"zero":"目前還沒有任何分類","one":"目前共有 1 個分類","other":"目前共有 %d 個分類"},"archive_posts":{"zero":"目前還沒有任何文章。","one":"目前共有 1 篇文章。","other":"目前共有 %d 篇文章。"}},"state":{"posts":"文章","tags":"標籤","categories":"分類"},"search":{"placeholder":"搜尋...","empty":"We didn't find any results for the search: %s","hits_time":"%s results found in %s ms","hits":"%s results found"},"cheers":{"um":"嗯..","ok":"還不錯","nice":"好","good":"很好","great":"非常好","excellent":"棒棒Der"},"keep_on":"繼續努力。","symbol":{"comma":"，","period":"。","colon":"："},"reward":{"donate":"捐贈","wechatpay":"微信支付","alipay":"支付寶","paypal":"貝寶","bitcoin":"比特幣"},"follow_me":{"welcome":"歡迎關注我的其它站點"},"accessibility":{"nav_toggle":"切換導航欄","prev_page":"上一頁","next_page":"下一頁"},"symbols_count_time":{"count":"文章字數","count_total":"總字數","time":"所需閱讀時間","time_total":"所需總閱讀時間","time_minutes":"分鐘"}}},"css/mixins":"","css/styles":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","template/head":"<script src=\"//js/tool/canvas-fx-base.js\"></script>\n\n<script src=\"//js/ripple-logo.js\"></script>\n<script src=\"//js/silk-wave.js\"></script>\n\n<style>\n  @font-face {\n  font-family: \"Roboto\";\n  src: url(//font/Roboto.ttf) format(\"truetype\");\n}\n</style>","css/styl-plugin/grid-post-layout/main":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","css/styl-plugin/grid-post-layout/mixins":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n","css/styl-plugin/grid-post-layout/variables":""}},"excerpt":"","more":"<h2 id=\"Let’s-Start-From-Scratch\"><a href=\"#Let’s-Start-From-Scratch\" class=\"headerlink\" title=\"Let’s Start From Scratch\"></a>Let’s Start From Scratch</h2><p>本系列文章的頭幾篇我決定還是帶點基礎的東西，所以首先，我打算介紹一些不常被一般教學提到的資料來當熱身。</p>\n<blockquote>\n<p>The HTMLCanvasElement interface provides properties and methods for manipulating the layout and presentation of <code>&lt;canvas&gt;</code> elements. The HTMLCanvasElement interface also inherits the properties and methods of the HTMLElement interface.  — from MDN<br>The HTML <code>&lt;canvas&gt;</code> element is used to draw graphics on a web page. — from <a href=\"http://www.w3schools.com/\">www.w3schools.com</a></p>\n</blockquote>\n<p>上述是在MDN還有W3school上關於<code>canvas</code> 元素 的解釋。簡單來說<code>canvas</code>就是一種自帶複數api, 然後可以用來在網頁上做動態繪圖的元素。<br>簡單的介紹就到這邊，接下來是疑問時間。<br>有些人看到上述的解釋，可能會覺得很疑惑，例如：</p>\n<blockquote>\n<p>那麼我們平常在用的CSS和html基礎元素，那樣子的東西難道不也是一種繪圖嗎? 差別在哪裡?</p>\n</blockquote>\n<p>接下來我們將針對這個問題做一系列的說明。</p>\n<h2 id=\"Canvas-與-一般-Dom元素的差異一：編譯流程\"><a href=\"#Canvas-與-一般-Dom元素的差異一：編譯流程\" class=\"headerlink\" title=\"Canvas 與 一般 Dom元素的差異一：編譯流程\"></a>Canvas 與 一般 Dom元素的差異一：編譯流程</h2><p>通常在80%以上的web專案內容中，我們都是使用普通的Dom元素來對頁面進行版面規劃。<br>所謂『普通』的Dom元素指的就是 <code>div</code>、<code>span</code>、<code>ul</code>、<code>li</code>…,etc. 而我們都知道，<code>HTML</code>本身是一種標記語言，<br>一篇完整的標記語言範本其實就有點像某種<strong>願望清單</strong>，為什麼說是願望清單呢? 那是因為瀏覽器在接收到一份HTML時，他做的事其實就是根據這份文件，上面提到的: 這份文件有多少元素? 元素個別是哪些？ 元素的先後排列順序、元素的巢狀化邏輯…etc. 去生成各個元素的物件實例，然後再透過瀏覽器的渲染引擎去把這些元素渲染在畫面上。</p>\n<p><img src=\"https://i.imgur.com/Ta8eGWm.png\" alt=\"retain mode\"></p>\n<p>像這樣子先確認頁面需求模型(也就是我們提到的願望清單)，然後將模型中的細節一一轉譯實現的這種行為模式，我們把它稱為<code>Retained Mode</code>(保留模式)。<br>接著一定就會有人問：  </p>\n<blockquote>\n<p>那麼是不是還有別的模式呢？</p>\n</blockquote>\n<p>Of course.<br>當瀏覽器需要做這類把文字邏輯轉化成視覺的工作時(我們把這種行為稱為轉譯)，會有兩種固定模式，其一是<code>Retained Mode</code>(保留模式), 然後再來就是與<code>Canvas</code>密切相關的<code>Immediate Mode</code>(立即模式)。  </p>\n<p><img src=\"https://i.imgur.com/d7l62h9.png\" alt=\"img\"></p>\n<p>從上面這張圖片我們可以發現，<code>Canvas</code> 元素和<code>Dom</code>元素最大的區別就是創建模型的這一個環節。<br>所謂的模型指的其實就是彼此之間具有<strong>關聯</strong>的物件(<code>Object</code>)的群集。<br>一個使用Canvas 畫一個藍色方塊，和一個使用<code>div</code>搭配<code>css</code>樣式做出的紅色方塊，本質上最大的區別除了顏色之外，就是這個方塊背後物件的內容差。  </p>\n<p>舉個簡單的例子，我們在做網頁動畫的時候，常常會需要用到<code>getBoundingClientRect</code> 這個<code>api</code> 來獲取一個區塊的大小、座標等。<br>而我們在使用這個api的時候，一般就是先去抓取(<code>query</code>)這個元素，然後就可以用這個元素實例底下的<code>api</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">// ele 本身是透過selector 字串所抓到的元素實例(instance), 這個實例其實是在瀏覽器創建Dom模型的時候new出來的</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ele = <span class=\"built_in\">document</span>.querySelecor(<span class=\"string\">&#x27;div&#x27;</span>); </span><br><span class=\"line\"><span class=\"comment\">// getBoundingClientRect 則是ele 這個實例物件的一個方法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> divWidth = ele.getBoundingClientRect().width; </span><br></pre></td></tr></table></figure>\n<p>上述對大部分人來說應該都是一個稀鬆平常的操作。<br>但是當我們用Canvas 繪製一個方塊時，我們所創建的實例並不是透過去<code>new</code> 瀏覽器內建的<code>Element</code> 類(<code>class</code>)所建立出來的，而是透過我們自己定義的一個具有客製化方法的類，例如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">block</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">ctx</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.ctx = ctx;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">draw</span>(<span class=\"params\">x, y, width, height</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.ctx.fillRect(x, y, width, height);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>當我們用這樣的一個客製類<code>Block</code>去產生一個方塊的實例時，這個實例底下所有的方法，都是來自於這個客製類<code>Block</code>的定義（所以當然也就沒有<code>getBoundingClientRect</code>這麼方便的api可以用）。<br>但是相對的，因為產生實例的類可以自己定義，自由度也當然就跟著大幅提高，平常一些不能用基礎Dom元素做到的操作，甚至都變得有可能了（ex：繪製不規則圖形、創作複雜動畫）</p>\n<h2 id=\"Canvas-與-一般-Dom元素的差異二：使用情境\"><a href=\"#Canvas-與-一般-Dom元素的差異二：使用情境\" class=\"headerlink\" title=\"Canvas 與 一般 Dom元素的差異二：使用情境\"></a>Canvas 與 一般 Dom元素的差異二：使用情境</h2><p>前面我們有提到, Canvas 相較於 基礎Dom元素而言，具有相對高（不只高! 而是非常高！）的自由度。<br>用一個簡單的例子來描述，就好比<strong>訂製手工賽車</strong>和<strong>國產普通轎車</strong> 的區別，這邊絕對不是要說國產貨不好，畢竟我也沒有說訂製的手工賽車的來源是哪一家廠商XD  </p>\n<p>講到這邊應該就可以理解到兩種繪圖方式的使用情境其分野：</p>\n<h4 id=\"1-Dom元素適合的情境\"><a href=\"#1-Dom元素適合的情境\" class=\"headerlink\" title=\"1. Dom元素適合的情境\"></a>1. Dom元素適合的情境</h4><ul>\n<li>快速/大量生產的需求</li>\n<li>不想花費過多時間處理效能問題</li>\n<li>有大量的互動操作行為, 例如UI/UX</li>\n</ul>\n<h4 id=\"2-Canvas渲染適合的情境\"><a href=\"#2-Canvas渲染適合的情境\" class=\"headerlink\" title=\"2. Canvas渲染適合的情境\"></a>2. Canvas渲染適合的情境</h4><ul>\n<li>當有天馬行空的創意</li>\n<li>較少的時間壓力，且能夠自行處理圖形重繪/ 效能問題</li>\n<li>像素操作（這個後面的章節會提到）</li>\n</ul>\n<p>就像我們前面提到的，以現階段來講，前端工程師80%的職業生涯中面對到的多半是第一種情境(當然也有少數人不是)，<br>而我們需要為了這20%的狀況去學習的原因，除了要應對未來的不時之需以外，當然就是有挑戰自我創作的意義存在。</p>\n<p>那麼話就說到這邊。<br>在接下來的章節，我們將會進入下一階段基礎的講解，然後再逐漸的解釋Canvas繪圖的實作，還請各位拭目以待～。</p>\n"},{"title":"Day3 - Canvas基礎概論 II  - 我要成為Canvas Ninja ～ 理解2D渲染的精髓！","_content":"## Some Deeper Basics\n\n  ### 圖像的概念 \n\n  我們在前面有說到，canvas本身是透過物件模型來繪製圖像，但是我們沒有提到何謂\"圖像\"。  \n\n  實際上圖像的概念很簡單。\n\n  大家都知道，光的三原色分別是紅/藍/綠;  一束標準的白光，可以分裂成紅/藍/綠光來看。  \n\n  而圖像的實作原理，其實就是透過阻擋掉紅/藍/綠光一部分的佔比，來形成不同的顏色。\n\n  這邊我找了兩張圖片，這兩張圖片很好的說明了在計算機領域中圖像的概念(圖片來源：https://dev.to/)\n\n  <img src=\"https://i.imgur.com/dz53Fsi.jpg\" width=\"600\">\n\n  <img src=\"https://i.imgur.com/FmT2rzI.jpg\" width=\"600\">\n\n  一個圖像，其實可以直接被視為一大群像素的集合體，而每一個像素都具備了能分別對應三種光線(RGB)，還有透明值(alpha)的篩子,這些篩子就是所謂的通道(Channel)  \n\n  透明值的通道，光看字面上可能不太好理解他在數理上的意義，所以這邊我也找到了一個網頁，這個網頁上的範例可以為我們做一個適當的解釋。\n\n  https://borderleft.com/toolbox/rgba/\n\n  這是一個能夠顯示rgba顏色跟不同顏色底混合之後的樣子的網站，這邊我把底色設定為白色，也就是說合成出來的顏色就是該rgba色放置於白背景時候的樣子。  \n\n  <img src=\"https://i.imgur.com/VC25E8b.png\" width=\"600\">\n\n  圖片中我們看到，當alpha設置為0.7時, R和G通道的0(也就是完全阻絕RG光線)，他們的阻擋量(也就是255 - 0 = 255)都分別被乘以0.3而得到77這個數值，而B光線因為阻擋量是0, 所以最後在B數值上還是得到255，最終則呈現出(77,77,255)這個顏色。 \n\n  從這邊我們就可以推論，alpha的數理意義其實就是同步的對三個通道的數值做比例性的消減。\n\n  ### 從像素觀點來看Canvas\n\n  一張Canvas，其實也就是一個圖像，他也是由非常多個像素所組成，而每一個像素點上又各自都有rgba四個通道。  \n\n  一張寬度100px, 高度100px的canvas，它實際上就是100\\*100 = 10000個像素的集合體，而同時在程序上我們則可以把它轉換成一個長度為100\\*100\\*4的陣列(也就是一共40000個channel值)\n\n  而所謂的『像素操作』，其實就是一種陣列運算，我們可以透過去疊加/轉換/削除陣列中的一部分channel值，來達到產生新圖像的效果。\n\n  Photoshop的濾鏡運算(例如彩色轉灰階)，或是在社群軟體上有時候可以看到的圖片轉符號(拼字圖畫)，就是典型的像素操作技術之運用。\n\n  另外，關於Canvas的寬高數值定義其實有一個**有趣的點**。\n  \n  實際上在定義一張canvas的大小時，並不是使用css來賦值，而是使用width和height這兩個attribute，直接下在canvas元素上面。\n\n  只有width和height這兩個attribute數值才能夠直接定義canvas的像素總量，而如果這時硬是要用css去擴大一張100＊100的canvas為10000px*10000px，就會出現像素密度過低(也就是圖像模糊的情形)的狀況\n\n  關於Canvas的像素操作技術，我們在之後的章節會提到更多實操的範例。\n## Context? What The Hell Is That?\n\n> SO, 你在前面的介紹文一直提到『渲染環境』這一個詞彙，那個到底指的是什麼？\n\n初來乍到的同學對於『渲染環境』這一個詞可能相當的陌生。  \n但是如果過去曾經有電腦繪圖/3D建模相關知識的人可能就能快速的領會這個詞所代表的意義。  \n\n『渲染環境』其實指的是透過`canvasElement.getContext(type)`這一個api所取得的一個物件。  \n我們其實可以把『渲染環境』想像成是繪圖軟體(例如小畫家)的概念，環境中會具備大量的工具（就像小畫家會提供畫圓形畫方形的功能），讓使用者可以應用在繪圖程序中。\n\n『渲染環境』實際的提取方式如下：\n\n````javascript\nlet cvs = document.querySelector('canvas');\nlet ctx = cvs.getContext('2d'); //這個ctx就是2d模式的渲染環境\n````\n\n`getContext(type)` 這一個方法可以根據輸入的type字串來取得操作者所想要使用的渲染環境，而在目前html5的規制下，一共有四種渲染環境可供選擇，分別是:\n\n- 2d : 最基礎同時也最適合新手入門的渲染環境，具備多種2d繪圖的api\n- webgl : 是一種速度更快，功能更多，具備原生 3D API，可讓使用者能夠完全訪問渲染管道的渲染環境。(很多人可能會誤會3D圖像只能透過webgl渲染環境所提供的api來達成，但實際上不是的，這點後面的章節會講。)\n- webgl2 : 簡而言之就是webgl環境的上位版，具備更多的功能，但是相對的，對部分舊型瀏覽器/移動裝置瀏覽器的支援度也略低，算是實驗性的功能\n- bitmaprenderer : 這也同樣是一種只有少數瀏覽器有支援的實驗性功能，它的用途很單純，是用來轉移指定圖像的bitmap到指定的canvas上\n\n在這個系列的文章中，我會針對比較常見的兩種環境(2D,webgl)做案例探討。\n\n## Start From 2D\n\n雖然說講到網頁前端的Canvas技術，大多數人都會直接地想到像是Three.js/Webgl那樣的渲染環境/套件做出來的各種絢麗特效。  \n但是我個人認為，初學Canvas應該還是先從2D的基礎學起，雖然說到了webgl渲染環境時，webgl環境整體提供的API和2D環境所提供的API在本質上有很巨大的差異，但是實際上在做渲染運算、模型規劃時的重點還是有其相似之處。\n\n在接下來的章節中，我們會先從2D的基礎講起，然後再開始慢慢地演進到一些更加複雜的案例～","source":"_posts/Canvas基礎概論 II  - 成為Canvas Ninja ~ 理解2D渲染的精髓.md","raw":"---\ntitle: Day3 - Canvas基礎概論 II  - 我要成為Canvas Ninja ～ 理解2D渲染的精髓！\ncategories: \n- 前端技術學習心得\ntags:\n- 2021鐵人賽\n---\n## Some Deeper Basics\n\n  ### 圖像的概念 \n\n  我們在前面有說到，canvas本身是透過物件模型來繪製圖像，但是我們沒有提到何謂\"圖像\"。  \n\n  實際上圖像的概念很簡單。\n\n  大家都知道，光的三原色分別是紅/藍/綠;  一束標準的白光，可以分裂成紅/藍/綠光來看。  \n\n  而圖像的實作原理，其實就是透過阻擋掉紅/藍/綠光一部分的佔比，來形成不同的顏色。\n\n  這邊我找了兩張圖片，這兩張圖片很好的說明了在計算機領域中圖像的概念(圖片來源：https://dev.to/)\n\n  <img src=\"https://i.imgur.com/dz53Fsi.jpg\" width=\"600\">\n\n  <img src=\"https://i.imgur.com/FmT2rzI.jpg\" width=\"600\">\n\n  一個圖像，其實可以直接被視為一大群像素的集合體，而每一個像素都具備了能分別對應三種光線(RGB)，還有透明值(alpha)的篩子,這些篩子就是所謂的通道(Channel)  \n\n  透明值的通道，光看字面上可能不太好理解他在數理上的意義，所以這邊我也找到了一個網頁，這個網頁上的範例可以為我們做一個適當的解釋。\n\n  https://borderleft.com/toolbox/rgba/\n\n  這是一個能夠顯示rgba顏色跟不同顏色底混合之後的樣子的網站，這邊我把底色設定為白色，也就是說合成出來的顏色就是該rgba色放置於白背景時候的樣子。  \n\n  <img src=\"https://i.imgur.com/VC25E8b.png\" width=\"600\">\n\n  圖片中我們看到，當alpha設置為0.7時, R和G通道的0(也就是完全阻絕RG光線)，他們的阻擋量(也就是255 - 0 = 255)都分別被乘以0.3而得到77這個數值，而B光線因為阻擋量是0, 所以最後在B數值上還是得到255，最終則呈現出(77,77,255)這個顏色。 \n\n  從這邊我們就可以推論，alpha的數理意義其實就是同步的對三個通道的數值做比例性的消減。\n\n  ### 從像素觀點來看Canvas\n\n  一張Canvas，其實也就是一個圖像，他也是由非常多個像素所組成，而每一個像素點上又各自都有rgba四個通道。  \n\n  一張寬度100px, 高度100px的canvas，它實際上就是100\\*100 = 10000個像素的集合體，而同時在程序上我們則可以把它轉換成一個長度為100\\*100\\*4的陣列(也就是一共40000個channel值)\n\n  而所謂的『像素操作』，其實就是一種陣列運算，我們可以透過去疊加/轉換/削除陣列中的一部分channel值，來達到產生新圖像的效果。\n\n  Photoshop的濾鏡運算(例如彩色轉灰階)，或是在社群軟體上有時候可以看到的圖片轉符號(拼字圖畫)，就是典型的像素操作技術之運用。\n\n  另外，關於Canvas的寬高數值定義其實有一個**有趣的點**。\n  \n  實際上在定義一張canvas的大小時，並不是使用css來賦值，而是使用width和height這兩個attribute，直接下在canvas元素上面。\n\n  只有width和height這兩個attribute數值才能夠直接定義canvas的像素總量，而如果這時硬是要用css去擴大一張100＊100的canvas為10000px*10000px，就會出現像素密度過低(也就是圖像模糊的情形)的狀況\n\n  關於Canvas的像素操作技術，我們在之後的章節會提到更多實操的範例。\n## Context? What The Hell Is That?\n\n> SO, 你在前面的介紹文一直提到『渲染環境』這一個詞彙，那個到底指的是什麼？\n\n初來乍到的同學對於『渲染環境』這一個詞可能相當的陌生。  \n但是如果過去曾經有電腦繪圖/3D建模相關知識的人可能就能快速的領會這個詞所代表的意義。  \n\n『渲染環境』其實指的是透過`canvasElement.getContext(type)`這一個api所取得的一個物件。  \n我們其實可以把『渲染環境』想像成是繪圖軟體(例如小畫家)的概念，環境中會具備大量的工具（就像小畫家會提供畫圓形畫方形的功能），讓使用者可以應用在繪圖程序中。\n\n『渲染環境』實際的提取方式如下：\n\n````javascript\nlet cvs = document.querySelector('canvas');\nlet ctx = cvs.getContext('2d'); //這個ctx就是2d模式的渲染環境\n````\n\n`getContext(type)` 這一個方法可以根據輸入的type字串來取得操作者所想要使用的渲染環境，而在目前html5的規制下，一共有四種渲染環境可供選擇，分別是:\n\n- 2d : 最基礎同時也最適合新手入門的渲染環境，具備多種2d繪圖的api\n- webgl : 是一種速度更快，功能更多，具備原生 3D API，可讓使用者能夠完全訪問渲染管道的渲染環境。(很多人可能會誤會3D圖像只能透過webgl渲染環境所提供的api來達成，但實際上不是的，這點後面的章節會講。)\n- webgl2 : 簡而言之就是webgl環境的上位版，具備更多的功能，但是相對的，對部分舊型瀏覽器/移動裝置瀏覽器的支援度也略低，算是實驗性的功能\n- bitmaprenderer : 這也同樣是一種只有少數瀏覽器有支援的實驗性功能，它的用途很單純，是用來轉移指定圖像的bitmap到指定的canvas上\n\n在這個系列的文章中，我會針對比較常見的兩種環境(2D,webgl)做案例探討。\n\n## Start From 2D\n\n雖然說講到網頁前端的Canvas技術，大多數人都會直接地想到像是Three.js/Webgl那樣的渲染環境/套件做出來的各種絢麗特效。  \n但是我個人認為，初學Canvas應該還是先從2D的基礎學起，雖然說到了webgl渲染環境時，webgl環境整體提供的API和2D環境所提供的API在本質上有很巨大的差異，但是實際上在做渲染運算、模型規劃時的重點還是有其相似之處。\n\n在接下來的章節中，我們會先從2D的基礎講起，然後再開始慢慢地演進到一些更加複雜的案例～","slug":"Canvas基礎概論 II  - 成為Canvas Ninja ~ 理解2D渲染的精髓","published":1,"date":"2021-09-10T13:14:54.355Z","updated":"2021-09-14T17:15:33.471Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktx1vyyc000stay2ds2a36b9","content":"<h2 id=\"Some-Deeper-Basics\"><a href=\"#Some-Deeper-Basics\" class=\"headerlink\" title=\"Some Deeper Basics\"></a>Some Deeper Basics</h2><h3 id=\"圖像的概念\"><a href=\"#圖像的概念\" class=\"headerlink\" title=\"圖像的概念\"></a>圖像的概念</h3><p>  我們在前面有說到，canvas本身是透過物件模型來繪製圖像，但是我們沒有提到何謂”圖像”。  </p>\n<p>  實際上圖像的概念很簡單。</p>\n<p>  大家都知道，光的三原色分別是紅/藍/綠;  一束標準的白光，可以分裂成紅/藍/綠光來看。  </p>\n<p>  而圖像的實作原理，其實就是透過阻擋掉紅/藍/綠光一部分的佔比，來形成不同的顏色。</p>\n<p>  這邊我找了兩張圖片，這兩張圖片很好的說明了在計算機領域中圖像的概念(圖片來源：<a href=\"https://dev.to/\">https://dev.to/</a>)</p>\n  <img src=\"https://i.imgur.com/dz53Fsi.jpg\" width=\"600\">\n\n  <img src=\"https://i.imgur.com/FmT2rzI.jpg\" width=\"600\">\n\n<p>  一個圖像，其實可以直接被視為一大群像素的集合體，而每一個像素都具備了能分別對應三種光線(RGB)，還有透明值(alpha)的篩子,這些篩子就是所謂的通道(Channel)  </p>\n<p>  透明值的通道，光看字面上可能不太好理解他在數理上的意義，所以這邊我也找到了一個網頁，這個網頁上的範例可以為我們做一個適當的解釋。</p>\n<p>  <a href=\"https://borderleft.com/toolbox/rgba/\">https://borderleft.com/toolbox/rgba/</a></p>\n<p>  這是一個能夠顯示rgba顏色跟不同顏色底混合之後的樣子的網站，這邊我把底色設定為白色，也就是說合成出來的顏色就是該rgba色放置於白背景時候的樣子。  </p>\n  <img src=\"https://i.imgur.com/VC25E8b.png\" width=\"600\">\n\n<p>  圖片中我們看到，當alpha設置為0.7時, R和G通道的0(也就是完全阻絕RG光線)，他們的阻擋量(也就是255 - 0 = 255)都分別被乘以0.3而得到77這個數值，而B光線因為阻擋量是0, 所以最後在B數值上還是得到255，最終則呈現出(77,77,255)這個顏色。 </p>\n<p>  從這邊我們就可以推論，alpha的數理意義其實就是同步的對三個通道的數值做比例性的消減。</p>\n<h3 id=\"從像素觀點來看Canvas\"><a href=\"#從像素觀點來看Canvas\" class=\"headerlink\" title=\"從像素觀點來看Canvas\"></a>從像素觀點來看Canvas</h3><p>  一張Canvas，其實也就是一個圖像，他也是由非常多個像素所組成，而每一個像素點上又各自都有rgba四個通道。  </p>\n<p>  一張寬度100px, 高度100px的canvas，它實際上就是100*100 = 10000個像素的集合體，而同時在程序上我們則可以把它轉換成一個長度為100*100*4的陣列(也就是一共40000個channel值)</p>\n<p>  而所謂的『像素操作』，其實就是一種陣列運算，我們可以透過去疊加/轉換/削除陣列中的一部分channel值，來達到產生新圖像的效果。</p>\n<p>  Photoshop的濾鏡運算(例如彩色轉灰階)，或是在社群軟體上有時候可以看到的圖片轉符號(拼字圖畫)，就是典型的像素操作技術之運用。</p>\n<p>  另外，關於Canvas的寬高數值定義其實有一個<strong>有趣的點</strong>。</p>\n<p>  實際上在定義一張canvas的大小時，並不是使用css來賦值，而是使用width和height這兩個attribute，直接下在canvas元素上面。</p>\n<p>  只有width和height這兩個attribute數值才能夠直接定義canvas的像素總量，而如果這時硬是要用css去擴大一張100＊100的canvas為10000px*10000px，就會出現像素密度過低(也就是圖像模糊的情形)的狀況</p>\n<p>  關於Canvas的像素操作技術，我們在之後的章節會提到更多實操的範例。</p>\n<h2 id=\"Context-What-The-Hell-Is-That\"><a href=\"#Context-What-The-Hell-Is-That\" class=\"headerlink\" title=\"Context? What The Hell Is That?\"></a>Context? What The Hell Is That?</h2><blockquote>\n<p>SO, 你在前面的介紹文一直提到『渲染環境』這一個詞彙，那個到底指的是什麼？</p>\n</blockquote>\n<p>初來乍到的同學對於『渲染環境』這一個詞可能相當的陌生。<br>但是如果過去曾經有電腦繪圖/3D建模相關知識的人可能就能快速的領會這個詞所代表的意義。  </p>\n<p>『渲染環境』其實指的是透過<code>canvasElement.getContext(type)</code>這一個api所取得的一個物件。<br>我們其實可以把『渲染環境』想像成是繪圖軟體(例如小畫家)的概念，環境中會具備大量的工具（就像小畫家會提供畫圓形畫方形的功能），讓使用者可以應用在繪圖程序中。</p>\n<p>『渲染環境』實際的提取方式如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> cvs = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;canvas&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> ctx = cvs.getContext(<span class=\"string\">&#x27;2d&#x27;</span>); <span class=\"comment\">//這個ctx就是2d模式的渲染環境</span></span><br></pre></td></tr></table></figure>\n\n<p><code>getContext(type)</code> 這一個方法可以根據輸入的type字串來取得操作者所想要使用的渲染環境，而在目前html5的規制下，一共有四種渲染環境可供選擇，分別是:</p>\n<ul>\n<li>2d : 最基礎同時也最適合新手入門的渲染環境，具備多種2d繪圖的api</li>\n<li>webgl : 是一種速度更快，功能更多，具備原生 3D API，可讓使用者能夠完全訪問渲染管道的渲染環境。(很多人可能會誤會3D圖像只能透過webgl渲染環境所提供的api來達成，但實際上不是的，這點後面的章節會講。)</li>\n<li>webgl2 : 簡而言之就是webgl環境的上位版，具備更多的功能，但是相對的，對部分舊型瀏覽器/移動裝置瀏覽器的支援度也略低，算是實驗性的功能</li>\n<li>bitmaprenderer : 這也同樣是一種只有少數瀏覽器有支援的實驗性功能，它的用途很單純，是用來轉移指定圖像的bitmap到指定的canvas上</li>\n</ul>\n<p>在這個系列的文章中，我會針對比較常見的兩種環境(2D,webgl)做案例探討。</p>\n<h2 id=\"Start-From-2D\"><a href=\"#Start-From-2D\" class=\"headerlink\" title=\"Start From 2D\"></a>Start From 2D</h2><p>雖然說講到網頁前端的Canvas技術，大多數人都會直接地想到像是Three.js/Webgl那樣的渲染環境/套件做出來的各種絢麗特效。<br>但是我個人認為，初學Canvas應該還是先從2D的基礎學起，雖然說到了webgl渲染環境時，webgl環境整體提供的API和2D環境所提供的API在本質上有很巨大的差異，但是實際上在做渲染運算、模型規劃時的重點還是有其相似之處。</p>\n<p>在接下來的章節中，我們會先從2D的基礎講起，然後再開始慢慢地演進到一些更加複雜的案例～</p>\n","site":{"data":{"css/variables":"","languages":{"zh-TW":{"title":{"archive":"時間線","category":"分類","tag":"標籤","schedule":"時間表"},"menu":{"home":"首頁","archives":"時間線","categories":"分類","tags":"標籤","about":"關於","search":"搜尋","schedule":"時間表","sitemap":"網站地圖","commonweal":"公益 404"},"sidebar":{"overview":"本站概要","toc":"文章目錄"},"post":{"posted":"發表於","edited":"更新於","created":"創建時間","modified":"修改時間","edit":"編輯","in":"分類於","read_more":"閱讀全文","untitled":"未命名","sticky":"置頂文","views":"閱讀次數","related_posts":"相關文章","copyright":{"author":"作者","link":"文章連結","post_author":"Written by","post_link":"This article originally appeared on","license_title":"版權聲明","license_content":"本網誌所有文章除特別聲明外，均採用 %s 許可協議。轉載請註明出處！"}},"footer":{"powered":"","total_views":"總瀏覽次數","total_visitors":"訪客總數"},"counter":{"tag_cloud":{"zero":"目前還沒有任何標籤","one":"目前共有 1 個標籤","other":"目前共有 %d 個標籤"},"categories":{"zero":"目前還沒有任何分類","one":"目前共有 1 個分類","other":"目前共有 %d 個分類"},"archive_posts":{"zero":"目前還沒有任何文章。","one":"目前共有 1 篇文章。","other":"目前共有 %d 篇文章。"}},"state":{"posts":"文章","tags":"標籤","categories":"分類"},"search":{"placeholder":"搜尋...","empty":"We didn't find any results for the search: %s","hits_time":"%s results found in %s ms","hits":"%s results found"},"cheers":{"um":"嗯..","ok":"還不錯","nice":"好","good":"很好","great":"非常好","excellent":"棒棒Der"},"keep_on":"繼續努力。","symbol":{"comma":"，","period":"。","colon":"："},"reward":{"donate":"捐贈","wechatpay":"微信支付","alipay":"支付寶","paypal":"貝寶","bitcoin":"比特幣"},"follow_me":{"welcome":"歡迎關注我的其它站點"},"accessibility":{"nav_toggle":"切換導航欄","prev_page":"上一頁","next_page":"下一頁"},"symbols_count_time":{"count":"文章字數","count_total":"總字數","time":"所需閱讀時間","time_total":"所需總閱讀時間","time_minutes":"分鐘"}}},"css/mixins":"","css/styles":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","template/head":"<script src=\"//js/tool/canvas-fx-base.js\"></script>\n\n<script src=\"//js/ripple-logo.js\"></script>\n<script src=\"//js/silk-wave.js\"></script>\n\n<style>\n  @font-face {\n  font-family: \"Roboto\";\n  src: url(//font/Roboto.ttf) format(\"truetype\");\n}\n</style>","css/styl-plugin/grid-post-layout/main":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","css/styl-plugin/grid-post-layout/mixins":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n","css/styl-plugin/grid-post-layout/variables":""}},"excerpt":"","more":"<h2 id=\"Some-Deeper-Basics\"><a href=\"#Some-Deeper-Basics\" class=\"headerlink\" title=\"Some Deeper Basics\"></a>Some Deeper Basics</h2><h3 id=\"圖像的概念\"><a href=\"#圖像的概念\" class=\"headerlink\" title=\"圖像的概念\"></a>圖像的概念</h3><p>  我們在前面有說到，canvas本身是透過物件模型來繪製圖像，但是我們沒有提到何謂”圖像”。  </p>\n<p>  實際上圖像的概念很簡單。</p>\n<p>  大家都知道，光的三原色分別是紅/藍/綠;  一束標準的白光，可以分裂成紅/藍/綠光來看。  </p>\n<p>  而圖像的實作原理，其實就是透過阻擋掉紅/藍/綠光一部分的佔比，來形成不同的顏色。</p>\n<p>  這邊我找了兩張圖片，這兩張圖片很好的說明了在計算機領域中圖像的概念(圖片來源：<a href=\"https://dev.to/\">https://dev.to/</a>)</p>\n  <img src=\"https://i.imgur.com/dz53Fsi.jpg\" width=\"600\">\n\n  <img src=\"https://i.imgur.com/FmT2rzI.jpg\" width=\"600\">\n\n<p>  一個圖像，其實可以直接被視為一大群像素的集合體，而每一個像素都具備了能分別對應三種光線(RGB)，還有透明值(alpha)的篩子,這些篩子就是所謂的通道(Channel)  </p>\n<p>  透明值的通道，光看字面上可能不太好理解他在數理上的意義，所以這邊我也找到了一個網頁，這個網頁上的範例可以為我們做一個適當的解釋。</p>\n<p>  <a href=\"https://borderleft.com/toolbox/rgba/\">https://borderleft.com/toolbox/rgba/</a></p>\n<p>  這是一個能夠顯示rgba顏色跟不同顏色底混合之後的樣子的網站，這邊我把底色設定為白色，也就是說合成出來的顏色就是該rgba色放置於白背景時候的樣子。  </p>\n  <img src=\"https://i.imgur.com/VC25E8b.png\" width=\"600\">\n\n<p>  圖片中我們看到，當alpha設置為0.7時, R和G通道的0(也就是完全阻絕RG光線)，他們的阻擋量(也就是255 - 0 = 255)都分別被乘以0.3而得到77這個數值，而B光線因為阻擋量是0, 所以最後在B數值上還是得到255，最終則呈現出(77,77,255)這個顏色。 </p>\n<p>  從這邊我們就可以推論，alpha的數理意義其實就是同步的對三個通道的數值做比例性的消減。</p>\n<h3 id=\"從像素觀點來看Canvas\"><a href=\"#從像素觀點來看Canvas\" class=\"headerlink\" title=\"從像素觀點來看Canvas\"></a>從像素觀點來看Canvas</h3><p>  一張Canvas，其實也就是一個圖像，他也是由非常多個像素所組成，而每一個像素點上又各自都有rgba四個通道。  </p>\n<p>  一張寬度100px, 高度100px的canvas，它實際上就是100*100 = 10000個像素的集合體，而同時在程序上我們則可以把它轉換成一個長度為100*100*4的陣列(也就是一共40000個channel值)</p>\n<p>  而所謂的『像素操作』，其實就是一種陣列運算，我們可以透過去疊加/轉換/削除陣列中的一部分channel值，來達到產生新圖像的效果。</p>\n<p>  Photoshop的濾鏡運算(例如彩色轉灰階)，或是在社群軟體上有時候可以看到的圖片轉符號(拼字圖畫)，就是典型的像素操作技術之運用。</p>\n<p>  另外，關於Canvas的寬高數值定義其實有一個<strong>有趣的點</strong>。</p>\n<p>  實際上在定義一張canvas的大小時，並不是使用css來賦值，而是使用width和height這兩個attribute，直接下在canvas元素上面。</p>\n<p>  只有width和height這兩個attribute數值才能夠直接定義canvas的像素總量，而如果這時硬是要用css去擴大一張100＊100的canvas為10000px*10000px，就會出現像素密度過低(也就是圖像模糊的情形)的狀況</p>\n<p>  關於Canvas的像素操作技術，我們在之後的章節會提到更多實操的範例。</p>\n<h2 id=\"Context-What-The-Hell-Is-That\"><a href=\"#Context-What-The-Hell-Is-That\" class=\"headerlink\" title=\"Context? What The Hell Is That?\"></a>Context? What The Hell Is That?</h2><blockquote>\n<p>SO, 你在前面的介紹文一直提到『渲染環境』這一個詞彙，那個到底指的是什麼？</p>\n</blockquote>\n<p>初來乍到的同學對於『渲染環境』這一個詞可能相當的陌生。<br>但是如果過去曾經有電腦繪圖/3D建模相關知識的人可能就能快速的領會這個詞所代表的意義。  </p>\n<p>『渲染環境』其實指的是透過<code>canvasElement.getContext(type)</code>這一個api所取得的一個物件。<br>我們其實可以把『渲染環境』想像成是繪圖軟體(例如小畫家)的概念，環境中會具備大量的工具（就像小畫家會提供畫圓形畫方形的功能），讓使用者可以應用在繪圖程序中。</p>\n<p>『渲染環境』實際的提取方式如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> cvs = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;canvas&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> ctx = cvs.getContext(<span class=\"string\">&#x27;2d&#x27;</span>); <span class=\"comment\">//這個ctx就是2d模式的渲染環境</span></span><br></pre></td></tr></table></figure>\n\n<p><code>getContext(type)</code> 這一個方法可以根據輸入的type字串來取得操作者所想要使用的渲染環境，而在目前html5的規制下，一共有四種渲染環境可供選擇，分別是:</p>\n<ul>\n<li>2d : 最基礎同時也最適合新手入門的渲染環境，具備多種2d繪圖的api</li>\n<li>webgl : 是一種速度更快，功能更多，具備原生 3D API，可讓使用者能夠完全訪問渲染管道的渲染環境。(很多人可能會誤會3D圖像只能透過webgl渲染環境所提供的api來達成，但實際上不是的，這點後面的章節會講。)</li>\n<li>webgl2 : 簡而言之就是webgl環境的上位版，具備更多的功能，但是相對的，對部分舊型瀏覽器/移動裝置瀏覽器的支援度也略低，算是實驗性的功能</li>\n<li>bitmaprenderer : 這也同樣是一種只有少數瀏覽器有支援的實驗性功能，它的用途很單純，是用來轉移指定圖像的bitmap到指定的canvas上</li>\n</ul>\n<p>在這個系列的文章中，我會針對比較常見的兩種環境(2D,webgl)做案例探討。</p>\n<h2 id=\"Start-From-2D\"><a href=\"#Start-From-2D\" class=\"headerlink\" title=\"Start From 2D\"></a>Start From 2D</h2><p>雖然說講到網頁前端的Canvas技術，大多數人都會直接地想到像是Three.js/Webgl那樣的渲染環境/套件做出來的各種絢麗特效。<br>但是我個人認為，初學Canvas應該還是先從2D的基礎學起，雖然說到了webgl渲染環境時，webgl環境整體提供的API和2D環境所提供的API在本質上有很巨大的差異，但是實際上在做渲染運算、模型規劃時的重點還是有其相似之處。</p>\n<p>在接下來的章節中，我們會先從2D的基礎講起，然後再開始慢慢地演進到一些更加複雜的案例～</p>\n"},{"title":"Day10 - Canvas進階技巧 I -  成為Canvas Ninja ～ 理解2D渲染的精髓","_content":"","source":"_posts/Canvas進階技巧 I - 成為Canvas Ninja ~ 理解2D渲染的精髓.md","raw":"---\ntitle: Day10 - Canvas進階技巧 I -  成為Canvas Ninja ～ 理解2D渲染的精髓\ncategories: \n- 前端技術學習心得\ntags:\n- 2021鐵人賽\n---\n","slug":"Canvas進階技巧 I - 成為Canvas Ninja ~ 理解2D渲染的精髓","published":1,"date":"2021-09-13T18:42:12.682Z","updated":"2021-09-14T17:22:22.348Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktx1vyyd000vtay27nn9eduw","content":"","site":{"data":{"css/variables":"","languages":{"zh-TW":{"title":{"archive":"時間線","category":"分類","tag":"標籤","schedule":"時間表"},"menu":{"home":"首頁","archives":"時間線","categories":"分類","tags":"標籤","about":"關於","search":"搜尋","schedule":"時間表","sitemap":"網站地圖","commonweal":"公益 404"},"sidebar":{"overview":"本站概要","toc":"文章目錄"},"post":{"posted":"發表於","edited":"更新於","created":"創建時間","modified":"修改時間","edit":"編輯","in":"分類於","read_more":"閱讀全文","untitled":"未命名","sticky":"置頂文","views":"閱讀次數","related_posts":"相關文章","copyright":{"author":"作者","link":"文章連結","post_author":"Written by","post_link":"This article originally appeared on","license_title":"版權聲明","license_content":"本網誌所有文章除特別聲明外，均採用 %s 許可協議。轉載請註明出處！"}},"footer":{"powered":"","total_views":"總瀏覽次數","total_visitors":"訪客總數"},"counter":{"tag_cloud":{"zero":"目前還沒有任何標籤","one":"目前共有 1 個標籤","other":"目前共有 %d 個標籤"},"categories":{"zero":"目前還沒有任何分類","one":"目前共有 1 個分類","other":"目前共有 %d 個分類"},"archive_posts":{"zero":"目前還沒有任何文章。","one":"目前共有 1 篇文章。","other":"目前共有 %d 篇文章。"}},"state":{"posts":"文章","tags":"標籤","categories":"分類"},"search":{"placeholder":"搜尋...","empty":"We didn't find any results for the search: %s","hits_time":"%s results found in %s ms","hits":"%s results found"},"cheers":{"um":"嗯..","ok":"還不錯","nice":"好","good":"很好","great":"非常好","excellent":"棒棒Der"},"keep_on":"繼續努力。","symbol":{"comma":"，","period":"。","colon":"："},"reward":{"donate":"捐贈","wechatpay":"微信支付","alipay":"支付寶","paypal":"貝寶","bitcoin":"比特幣"},"follow_me":{"welcome":"歡迎關注我的其它站點"},"accessibility":{"nav_toggle":"切換導航欄","prev_page":"上一頁","next_page":"下一頁"},"symbols_count_time":{"count":"文章字數","count_total":"總字數","time":"所需閱讀時間","time_total":"所需總閱讀時間","time_minutes":"分鐘"}}},"css/mixins":"","css/styles":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","template/head":"<script src=\"//js/tool/canvas-fx-base.js\"></script>\n\n<script src=\"//js/ripple-logo.js\"></script>\n<script src=\"//js/silk-wave.js\"></script>\n\n<style>\n  @font-face {\n  font-family: \"Roboto\";\n  src: url(//font/Roboto.ttf) format(\"truetype\");\n}\n</style>","css/styl-plugin/grid-post-layout/main":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","css/styl-plugin/grid-post-layout/mixins":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n","css/styl-plugin/grid-post-layout/variables":""}},"excerpt":"","more":""},{"title":"ES5/ES6學習筆記-ep1","_content":"\n\n\n## 搞清楚並且用最簡單的方法解釋js的apply/call/bind\n\n- 先解釋apply/call\n> apply/call 最簡單的解釋其實就是“把一個參數丟進去指定的函數裡面當this”\n```javascript=\n//假設有一個變數叫做qq, 初始值為'wow'\nvar qq = 'wow';\nfunction poop(a,b){\n    console.log(this,a,b);\n}\npoop.apply(qq);//wow undefine undefine\n// 這邊其實就是把qq丟進去poop()裡面當作this, 用call 的話亦然\n```\n- apply和call的差別\n> 雖然差別都是丟變數進去函數當this用，但是這兩個的差異在於支援參數不同\n```javascript=\n//apply的第一個參數傳入之後會變成函數中的this，但是第二個參數（必須要是array）傳入之後會變成函數原始支援的參數群\ntheFunction.apply(valueForThis, arrayOfArgs)\n//apply的第一個參數傳入之後會變成函數中的this，但是第二個以後的參數就是函數原始的所有參數群\ntheFunction.call(valueForThis, arg1, arg2, ...)\n```\n```javascript=\n //以上面的poop()來看\n poop().apply(qq,[1,2])//'wow' 1 2\n poop().call(qq,1,2)//'wow' 1 2\n```\n- 解釋bind\n\n> bind的用途跟apply/call 有點不同，他是會return 一個把指定變數綁進去當this的函數\n```javascript=\nfunction aa(a,b){\n    console.log(this,a,b)\n}\naa(11,22);//window 11 22 aa函數在沒被綁之前的this 都是window\nvar ccc=[1,2,3];\nvar gg = aa.bind(ccc);// 把ccc綁給aa之後重新包裝成一個gg, aa其實沒有被變動\ngg(44,44)//[1,2,3] 44 44 從這邊開始this被綁死了\n\n```\n- bind 的進階用法\n> 固定上層scope 的this，這個其實就是ES6 arrow function內部的做法\n```javascript=\nvar a = {\n    gg:'wow',\n    ff:function(){\n        setTimeout(function(){\n            console.log(this.gg)\n        }.bind(this))\n    }\n}\n\na.ff(); //wow\n```\n\n\n## 變數提升與let:\n\n- 變數提升最基本的案例:\n```javascript=\nconsole.log(a)\n//在\"var a = 10\" 之前去呼叫a, 其實會輸出undefine 而不是 ReferenceError: a is not defined.\n//那是因為var 其實是先把a 在最開頭做一個宣告a為變數，然後最後才賦予值。\nvar a = 10\n\n```\n\n- 函數中變數提升的狀況:\n    - 這個狀況:\n    ```javascript=\n        function test(v){\n           console.log(v)\n           var v = 3\n        }\n        test(10)\n    ```\n    - 其實等於這個狀況\n    ```javascript=\n        function test(v=10){\n          var v;// 引入的參數其實也會在開頭被先宣告，而且宣告的優先權會比函數內部的變數宣告來得高\n          var v;\n          v = 10\n          console.log(v)\n          v = 3\n        }\n        test(10)\n    ```\n\n- let/const 與暫時性死區（Temporal Dead Zone）\n    - 雖然let 可以用來避免用var產生的hoisting狀況，但是這並不代表let沒有hoisting行為\n    - 在「提升之後」以及「賦值之前」這段「期間」，如果你存取它就會拋出ReferenceError錯誤，而這段期間就稱做是 TDZ，它是一個為了解釋 let 與 const 的 hoisting 行為所提出的一個名詞。\n    ```javascript=\n        let x = 'outer value';\n\n        (function() {\n          // 在函數的起始處會產生x的 TDZ起始點 x\n          console.log(x) // TDZ期間存取，產生ReferenceError錯誤\n          let x = 'inner value' // 對x的宣告語句，這裡結束 TDZ for x\n        })()\n    ```\n    \n## let與if的搭配\n\n- 單行的if宣告不能在判斷boolean 之後let宣告\n\n```javascript=\n// 第一种写法，报错\nif (true) let x = 1;\n\n// 第二种写法，不报错\nif (true) {\n  let x = 1;\n}\n```\n\n- 應該避免在塊級作用域內聲明函數。如果確實需要，也應該寫成函數表達式，而不是函數聲明語句。\n\n```javascript=\n// 塊級作用域內部的函數聲明語句，建議不要使用\n{\n  let a = 'secret';\n  function f() {\n    return a;\n  }\n}\n// 塊級作用域內部，優先使用函數表達式\n{\n  let a = 'secret';\n  let f = function () {\n    return a;\n  };\n}\n```\n\n## const的重要意義 -- 固定傳址\n> 大家都知道const 宣告的值就是不變的常數，但是實際上const最重要的應用點其實是在於固定變數儲存位置的地址\n\n```javascript=\nconst a = [];\na.push('Hello'); // 可執行\na.length = 0;    // 可執行\na = ['Dave'];    // 錯誤，可以藉由這樣的方式避免a被換址\n\n```\n> 如果真的想將對象凍結，應該使用Object.freeze方法。\n```javascript=\nconst foo = Object.freeze({});\n\n// 常規模式時，下面一行不起作用；\n// 嚴格模式時，該行會報錯\nfoo.prop = 123;\n```\n\n\n\n\n","source":"_posts/ES5_ES6學習筆記-ep1.md","raw":"---\ntitle: ES5/ES6學習筆記-ep1\ncategories: \n- 前端技術學習心得\ntags:\n- js\n---\n\n\n\n## 搞清楚並且用最簡單的方法解釋js的apply/call/bind\n\n- 先解釋apply/call\n> apply/call 最簡單的解釋其實就是“把一個參數丟進去指定的函數裡面當this”\n```javascript=\n//假設有一個變數叫做qq, 初始值為'wow'\nvar qq = 'wow';\nfunction poop(a,b){\n    console.log(this,a,b);\n}\npoop.apply(qq);//wow undefine undefine\n// 這邊其實就是把qq丟進去poop()裡面當作this, 用call 的話亦然\n```\n- apply和call的差別\n> 雖然差別都是丟變數進去函數當this用，但是這兩個的差異在於支援參數不同\n```javascript=\n//apply的第一個參數傳入之後會變成函數中的this，但是第二個參數（必須要是array）傳入之後會變成函數原始支援的參數群\ntheFunction.apply(valueForThis, arrayOfArgs)\n//apply的第一個參數傳入之後會變成函數中的this，但是第二個以後的參數就是函數原始的所有參數群\ntheFunction.call(valueForThis, arg1, arg2, ...)\n```\n```javascript=\n //以上面的poop()來看\n poop().apply(qq,[1,2])//'wow' 1 2\n poop().call(qq,1,2)//'wow' 1 2\n```\n- 解釋bind\n\n> bind的用途跟apply/call 有點不同，他是會return 一個把指定變數綁進去當this的函數\n```javascript=\nfunction aa(a,b){\n    console.log(this,a,b)\n}\naa(11,22);//window 11 22 aa函數在沒被綁之前的this 都是window\nvar ccc=[1,2,3];\nvar gg = aa.bind(ccc);// 把ccc綁給aa之後重新包裝成一個gg, aa其實沒有被變動\ngg(44,44)//[1,2,3] 44 44 從這邊開始this被綁死了\n\n```\n- bind 的進階用法\n> 固定上層scope 的this，這個其實就是ES6 arrow function內部的做法\n```javascript=\nvar a = {\n    gg:'wow',\n    ff:function(){\n        setTimeout(function(){\n            console.log(this.gg)\n        }.bind(this))\n    }\n}\n\na.ff(); //wow\n```\n\n\n## 變數提升與let:\n\n- 變數提升最基本的案例:\n```javascript=\nconsole.log(a)\n//在\"var a = 10\" 之前去呼叫a, 其實會輸出undefine 而不是 ReferenceError: a is not defined.\n//那是因為var 其實是先把a 在最開頭做一個宣告a為變數，然後最後才賦予值。\nvar a = 10\n\n```\n\n- 函數中變數提升的狀況:\n    - 這個狀況:\n    ```javascript=\n        function test(v){\n           console.log(v)\n           var v = 3\n        }\n        test(10)\n    ```\n    - 其實等於這個狀況\n    ```javascript=\n        function test(v=10){\n          var v;// 引入的參數其實也會在開頭被先宣告，而且宣告的優先權會比函數內部的變數宣告來得高\n          var v;\n          v = 10\n          console.log(v)\n          v = 3\n        }\n        test(10)\n    ```\n\n- let/const 與暫時性死區（Temporal Dead Zone）\n    - 雖然let 可以用來避免用var產生的hoisting狀況，但是這並不代表let沒有hoisting行為\n    - 在「提升之後」以及「賦值之前」這段「期間」，如果你存取它就會拋出ReferenceError錯誤，而這段期間就稱做是 TDZ，它是一個為了解釋 let 與 const 的 hoisting 行為所提出的一個名詞。\n    ```javascript=\n        let x = 'outer value';\n\n        (function() {\n          // 在函數的起始處會產生x的 TDZ起始點 x\n          console.log(x) // TDZ期間存取，產生ReferenceError錯誤\n          let x = 'inner value' // 對x的宣告語句，這裡結束 TDZ for x\n        })()\n    ```\n    \n## let與if的搭配\n\n- 單行的if宣告不能在判斷boolean 之後let宣告\n\n```javascript=\n// 第一种写法，报错\nif (true) let x = 1;\n\n// 第二种写法，不报错\nif (true) {\n  let x = 1;\n}\n```\n\n- 應該避免在塊級作用域內聲明函數。如果確實需要，也應該寫成函數表達式，而不是函數聲明語句。\n\n```javascript=\n// 塊級作用域內部的函數聲明語句，建議不要使用\n{\n  let a = 'secret';\n  function f() {\n    return a;\n  }\n}\n// 塊級作用域內部，優先使用函數表達式\n{\n  let a = 'secret';\n  let f = function () {\n    return a;\n  };\n}\n```\n\n## const的重要意義 -- 固定傳址\n> 大家都知道const 宣告的值就是不變的常數，但是實際上const最重要的應用點其實是在於固定變數儲存位置的地址\n\n```javascript=\nconst a = [];\na.push('Hello'); // 可執行\na.length = 0;    // 可執行\na = ['Dave'];    // 錯誤，可以藉由這樣的方式避免a被換址\n\n```\n> 如果真的想將對象凍結，應該使用Object.freeze方法。\n```javascript=\nconst foo = Object.freeze({});\n\n// 常規模式時，下面一行不起作用；\n// 嚴格模式時，該行會報錯\nfoo.prop = 123;\n```\n\n\n\n\n","slug":"ES5_ES6學習筆記-ep1","published":1,"date":"2020-11-25T17:01:45.830Z","updated":"2020-12-12T19:52:00.887Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktx1vyye000ytay20ofa2718","content":"<h2 id=\"搞清楚並且用最簡單的方法解釋js的apply-call-bind\"><a href=\"#搞清楚並且用最簡單的方法解釋js的apply-call-bind\" class=\"headerlink\" title=\"搞清楚並且用最簡單的方法解釋js的apply/call/bind\"></a>搞清楚並且用最簡單的方法解釋js的apply/call/bind</h2><ul>\n<li>先解釋apply/call<blockquote>\n<p>apply/call 最簡單的解釋其實就是“把一個參數丟進去指定的函數裡面當this”</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//假設有一個變數叫做qq, 初始值為&#x27;wow&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> qq = <span class=\"string\">&#x27;wow&#x27;</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">poop</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>,a,b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">poop.apply(qq);<span class=\"comment\">//wow undefine undefine</span></span><br><span class=\"line\"><span class=\"comment\">// 這邊其實就是把qq丟進去poop()裡面當作this, 用call 的話亦然</span></span><br></pre></td></tr></table></figure></li>\n<li>apply和call的差別<blockquote>\n<p>雖然差別都是丟變數進去函數當this用，但是這兩個的差異在於支援參數不同</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//apply的第一個參數傳入之後會變成函數中的this，但是第二個參數（必須要是array）傳入之後會變成函數原始支援的參數群</span></span><br><span class=\"line\">theFunction.apply(valueForThis, arrayOfArgs)</span><br><span class=\"line\"><span class=\"comment\">//apply的第一個參數傳入之後會變成函數中的this，但是第二個以後的參數就是函數原始的所有參數群</span></span><br><span class=\"line\">theFunction.call(valueForThis, arg1, arg2, ...)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//以上面的poop()來看</span></span><br><span class=\"line\">poop().apply(qq,[<span class=\"number\">1</span>,<span class=\"number\">2</span>])<span class=\"comment\">//&#x27;wow&#x27; 1 2</span></span><br><span class=\"line\">poop().call(qq,<span class=\"number\">1</span>,<span class=\"number\">2</span>)<span class=\"comment\">//&#x27;wow&#x27; 1 2</span></span><br></pre></td></tr></table></figure></li>\n<li>解釋bind</li>\n</ul>\n<blockquote>\n<p>bind的用途跟apply/call 有點不同，他是會return 一個把指定變數綁進去當this的函數</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">aa</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>,a,b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">aa(<span class=\"number\">11</span>,<span class=\"number\">22</span>);<span class=\"comment\">//window 11 22 aa函數在沒被綁之前的this 都是window</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ccc=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> gg = aa.bind(ccc);<span class=\"comment\">// 把ccc綁給aa之後重新包裝成一個gg, aa其實沒有被變動</span></span><br><span class=\"line\">gg(<span class=\"number\">44</span>,<span class=\"number\">44</span>)<span class=\"comment\">//[1,2,3] 44 44 從這邊開始this被綁死了</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>bind 的進階用法<blockquote>\n<p>固定上層scope 的this，這個其實就是ES6 arrow function內部的做法</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    gg:<span class=\"string\">&#x27;wow&#x27;</span>,</span><br><span class=\"line\">    ff:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.gg)</span><br><span class=\"line\">        &#125;.bind(<span class=\"built_in\">this</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">a.ff(); <span class=\"comment\">//wow</span></span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<h2 id=\"變數提升與let\"><a href=\"#變數提升與let\" class=\"headerlink\" title=\"變數提升與let:\"></a>變數提升與let:</h2><ul>\n<li><p>變數提升最基本的案例:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\"><span class=\"comment\">//在&quot;var a = 10&quot; 之前去呼叫a, 其實會輸出undefine 而不是 ReferenceError: a is not defined.</span></span><br><span class=\"line\"><span class=\"comment\">//那是因為var 其實是先把a 在最開頭做一個宣告a為變數，然後最後才賦予值。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">10</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>函數中變數提升的狀況:</p>\n<ul>\n<li>這個狀況:<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">v</span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(v)</span><br><span class=\"line\">   <span class=\"keyword\">var</span> v = <span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(<span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure></li>\n<li>其實等於這個狀況<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">v=<span class=\"number\">10</span></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> v;<span class=\"comment\">// 引入的參數其實也會在開頭被先宣告，而且宣告的優先權會比函數內部的變數宣告來得高</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> v;</span><br><span class=\"line\">  v = <span class=\"number\">10</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(v)</span><br><span class=\"line\">  v = <span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(<span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>let/const 與暫時性死區（Temporal Dead Zone）</p>\n<ul>\n<li>雖然let 可以用來避免用var產生的hoisting狀況，但是這並不代表let沒有hoisting行為</li>\n<li>在「提升之後」以及「賦值之前」這段「期間」，如果你存取它就會拋出ReferenceError錯誤，而這段期間就稱做是 TDZ，它是一個為了解釋 let 與 const 的 hoisting 行為所提出的一個名詞。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"string\">&#x27;outer value&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 在函數的起始處會產生x的 TDZ起始點 x</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x) <span class=\"comment\">// TDZ期間存取，產生ReferenceError錯誤</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> x = <span class=\"string\">&#x27;inner value&#x27;</span> <span class=\"comment\">// 對x的宣告語句，這裡結束 TDZ for x</span></span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"let與if的搭配\"><a href=\"#let與if的搭配\" class=\"headerlink\" title=\"let與if的搭配\"></a>let與if的搭配</h2><ul>\n<li>單行的if宣告不能在判斷boolean 之後let宣告</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一种写法，报错</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) <span class=\"keyword\">let</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第二种写法，不报错</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>應該避免在塊級作用域內聲明函數。如果確實需要，也應該寫成函數表達式，而不是函數聲明語句。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 塊級作用域內部的函數聲明語句，建議不要使用</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"string\">&#x27;secret&#x27;</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 塊級作用域內部，優先使用函數表達式</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"string\">&#x27;secret&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> f = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"const的重要意義-–-固定傳址\"><a href=\"#const的重要意義-–-固定傳址\" class=\"headerlink\" title=\"const的重要意義 – 固定傳址\"></a>const的重要意義 – 固定傳址</h2><blockquote>\n<p>大家都知道const 宣告的值就是不變的常數，但是實際上const最重要的應用點其實是在於固定變數儲存位置的地址</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = [];</span><br><span class=\"line\">a.push(<span class=\"string\">&#x27;Hello&#x27;</span>); <span class=\"comment\">// 可執行</span></span><br><span class=\"line\">a.length = <span class=\"number\">0</span>;    <span class=\"comment\">// 可執行</span></span><br><span class=\"line\">a = [<span class=\"string\">&#x27;Dave&#x27;</span>];    <span class=\"comment\">// 錯誤，可以藉由這樣的方式避免a被換址</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果真的想將對象凍結，應該使用Object.freeze方法。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"built_in\">Object</span>.freeze(&#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 常規模式時，下面一行不起作用；</span></span><br><span class=\"line\"><span class=\"comment\">// 嚴格模式時，該行會報錯</span></span><br><span class=\"line\">foo.prop = <span class=\"number\">123</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n\n","site":{"data":{"css/variables":"","languages":{"zh-TW":{"title":{"archive":"時間線","category":"分類","tag":"標籤","schedule":"時間表"},"menu":{"home":"首頁","archives":"時間線","categories":"分類","tags":"標籤","about":"關於","search":"搜尋","schedule":"時間表","sitemap":"網站地圖","commonweal":"公益 404"},"sidebar":{"overview":"本站概要","toc":"文章目錄"},"post":{"posted":"發表於","edited":"更新於","created":"創建時間","modified":"修改時間","edit":"編輯","in":"分類於","read_more":"閱讀全文","untitled":"未命名","sticky":"置頂文","views":"閱讀次數","related_posts":"相關文章","copyright":{"author":"作者","link":"文章連結","post_author":"Written by","post_link":"This article originally appeared on","license_title":"版權聲明","license_content":"本網誌所有文章除特別聲明外，均採用 %s 許可協議。轉載請註明出處！"}},"footer":{"powered":"","total_views":"總瀏覽次數","total_visitors":"訪客總數"},"counter":{"tag_cloud":{"zero":"目前還沒有任何標籤","one":"目前共有 1 個標籤","other":"目前共有 %d 個標籤"},"categories":{"zero":"目前還沒有任何分類","one":"目前共有 1 個分類","other":"目前共有 %d 個分類"},"archive_posts":{"zero":"目前還沒有任何文章。","one":"目前共有 1 篇文章。","other":"目前共有 %d 篇文章。"}},"state":{"posts":"文章","tags":"標籤","categories":"分類"},"search":{"placeholder":"搜尋...","empty":"We didn't find any results for the search: %s","hits_time":"%s results found in %s ms","hits":"%s results found"},"cheers":{"um":"嗯..","ok":"還不錯","nice":"好","good":"很好","great":"非常好","excellent":"棒棒Der"},"keep_on":"繼續努力。","symbol":{"comma":"，","period":"。","colon":"："},"reward":{"donate":"捐贈","wechatpay":"微信支付","alipay":"支付寶","paypal":"貝寶","bitcoin":"比特幣"},"follow_me":{"welcome":"歡迎關注我的其它站點"},"accessibility":{"nav_toggle":"切換導航欄","prev_page":"上一頁","next_page":"下一頁"},"symbols_count_time":{"count":"文章字數","count_total":"總字數","time":"所需閱讀時間","time_total":"所需總閱讀時間","time_minutes":"分鐘"}}},"css/mixins":"","css/styles":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","template/head":"<script src=\"//js/tool/canvas-fx-base.js\"></script>\n\n<script src=\"//js/ripple-logo.js\"></script>\n<script src=\"//js/silk-wave.js\"></script>\n\n<style>\n  @font-face {\n  font-family: \"Roboto\";\n  src: url(//font/Roboto.ttf) format(\"truetype\");\n}\n</style>","css/styl-plugin/grid-post-layout/main":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","css/styl-plugin/grid-post-layout/mixins":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n","css/styl-plugin/grid-post-layout/variables":""}},"excerpt":"","more":"<h2 id=\"搞清楚並且用最簡單的方法解釋js的apply-call-bind\"><a href=\"#搞清楚並且用最簡單的方法解釋js的apply-call-bind\" class=\"headerlink\" title=\"搞清楚並且用最簡單的方法解釋js的apply/call/bind\"></a>搞清楚並且用最簡單的方法解釋js的apply/call/bind</h2><ul>\n<li>先解釋apply/call<blockquote>\n<p>apply/call 最簡單的解釋其實就是“把一個參數丟進去指定的函數裡面當this”</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//假設有一個變數叫做qq, 初始值為&#x27;wow&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> qq = <span class=\"string\">&#x27;wow&#x27;</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">poop</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>,a,b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">poop.apply(qq);<span class=\"comment\">//wow undefine undefine</span></span><br><span class=\"line\"><span class=\"comment\">// 這邊其實就是把qq丟進去poop()裡面當作this, 用call 的話亦然</span></span><br></pre></td></tr></table></figure></li>\n<li>apply和call的差別<blockquote>\n<p>雖然差別都是丟變數進去函數當this用，但是這兩個的差異在於支援參數不同</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//apply的第一個參數傳入之後會變成函數中的this，但是第二個參數（必須要是array）傳入之後會變成函數原始支援的參數群</span></span><br><span class=\"line\">theFunction.apply(valueForThis, arrayOfArgs)</span><br><span class=\"line\"><span class=\"comment\">//apply的第一個參數傳入之後會變成函數中的this，但是第二個以後的參數就是函數原始的所有參數群</span></span><br><span class=\"line\">theFunction.call(valueForThis, arg1, arg2, ...)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//以上面的poop()來看</span></span><br><span class=\"line\">poop().apply(qq,[<span class=\"number\">1</span>,<span class=\"number\">2</span>])<span class=\"comment\">//&#x27;wow&#x27; 1 2</span></span><br><span class=\"line\">poop().call(qq,<span class=\"number\">1</span>,<span class=\"number\">2</span>)<span class=\"comment\">//&#x27;wow&#x27; 1 2</span></span><br></pre></td></tr></table></figure></li>\n<li>解釋bind</li>\n</ul>\n<blockquote>\n<p>bind的用途跟apply/call 有點不同，他是會return 一個把指定變數綁進去當this的函數</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">aa</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>,a,b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">aa(<span class=\"number\">11</span>,<span class=\"number\">22</span>);<span class=\"comment\">//window 11 22 aa函數在沒被綁之前的this 都是window</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ccc=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> gg = aa.bind(ccc);<span class=\"comment\">// 把ccc綁給aa之後重新包裝成一個gg, aa其實沒有被變動</span></span><br><span class=\"line\">gg(<span class=\"number\">44</span>,<span class=\"number\">44</span>)<span class=\"comment\">//[1,2,3] 44 44 從這邊開始this被綁死了</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>bind 的進階用法<blockquote>\n<p>固定上層scope 的this，這個其實就是ES6 arrow function內部的做法</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    gg:<span class=\"string\">&#x27;wow&#x27;</span>,</span><br><span class=\"line\">    ff:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.gg)</span><br><span class=\"line\">        &#125;.bind(<span class=\"built_in\">this</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">a.ff(); <span class=\"comment\">//wow</span></span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<h2 id=\"變數提升與let\"><a href=\"#變數提升與let\" class=\"headerlink\" title=\"變數提升與let:\"></a>變數提升與let:</h2><ul>\n<li><p>變數提升最基本的案例:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\"><span class=\"comment\">//在&quot;var a = 10&quot; 之前去呼叫a, 其實會輸出undefine 而不是 ReferenceError: a is not defined.</span></span><br><span class=\"line\"><span class=\"comment\">//那是因為var 其實是先把a 在最開頭做一個宣告a為變數，然後最後才賦予值。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">10</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>函數中變數提升的狀況:</p>\n<ul>\n<li>這個狀況:<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">v</span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(v)</span><br><span class=\"line\">   <span class=\"keyword\">var</span> v = <span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(<span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure></li>\n<li>其實等於這個狀況<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">v=<span class=\"number\">10</span></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> v;<span class=\"comment\">// 引入的參數其實也會在開頭被先宣告，而且宣告的優先權會比函數內部的變數宣告來得高</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> v;</span><br><span class=\"line\">  v = <span class=\"number\">10</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(v)</span><br><span class=\"line\">  v = <span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(<span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>let/const 與暫時性死區（Temporal Dead Zone）</p>\n<ul>\n<li>雖然let 可以用來避免用var產生的hoisting狀況，但是這並不代表let沒有hoisting行為</li>\n<li>在「提升之後」以及「賦值之前」這段「期間」，如果你存取它就會拋出ReferenceError錯誤，而這段期間就稱做是 TDZ，它是一個為了解釋 let 與 const 的 hoisting 行為所提出的一個名詞。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"string\">&#x27;outer value&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 在函數的起始處會產生x的 TDZ起始點 x</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x) <span class=\"comment\">// TDZ期間存取，產生ReferenceError錯誤</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> x = <span class=\"string\">&#x27;inner value&#x27;</span> <span class=\"comment\">// 對x的宣告語句，這裡結束 TDZ for x</span></span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"let與if的搭配\"><a href=\"#let與if的搭配\" class=\"headerlink\" title=\"let與if的搭配\"></a>let與if的搭配</h2><ul>\n<li>單行的if宣告不能在判斷boolean 之後let宣告</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一种写法，报错</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) <span class=\"keyword\">let</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第二种写法，不报错</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>應該避免在塊級作用域內聲明函數。如果確實需要，也應該寫成函數表達式，而不是函數聲明語句。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 塊級作用域內部的函數聲明語句，建議不要使用</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"string\">&#x27;secret&#x27;</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 塊級作用域內部，優先使用函數表達式</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"string\">&#x27;secret&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> f = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"const的重要意義-–-固定傳址\"><a href=\"#const的重要意義-–-固定傳址\" class=\"headerlink\" title=\"const的重要意義 – 固定傳址\"></a>const的重要意義 – 固定傳址</h2><blockquote>\n<p>大家都知道const 宣告的值就是不變的常數，但是實際上const最重要的應用點其實是在於固定變數儲存位置的地址</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = [];</span><br><span class=\"line\">a.push(<span class=\"string\">&#x27;Hello&#x27;</span>); <span class=\"comment\">// 可執行</span></span><br><span class=\"line\">a.length = <span class=\"number\">0</span>;    <span class=\"comment\">// 可執行</span></span><br><span class=\"line\">a = [<span class=\"string\">&#x27;Dave&#x27;</span>];    <span class=\"comment\">// 錯誤，可以藉由這樣的方式避免a被換址</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果真的想將對象凍結，應該使用Object.freeze方法。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"built_in\">Object</span>.freeze(&#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 常規模式時，下面一行不起作用；</span></span><br><span class=\"line\"><span class=\"comment\">// 嚴格模式時，該行會報錯</span></span><br><span class=\"line\">foo.prop = <span class=\"number\">123</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n\n"},{"title":"ES5/ES6學習筆記-ep2","_content":"\n\n\n\n## ES6解構賦值重點整理\n1. 模式匹配：\n> 只要等号两边的模式相同，左边的变量就会被赋予对应的值。\n\n> - 這個\n    let [a, b, c] = [1, 2, 3];\n\n> - 等同於這個\n    let a = 1;\n    let b = 2;\n    let c = 3;\n    \n> - 這個\n    let [foo, [[bar], baz]] = [1, [[2], 3]];\n\n> - 等同於這個\n    let foo = 1;\n    let bar = 2;\n    let baz = 3;\n\n> - 如果解構不成功，變量的值就等於undefined。\n    let [foo] = [];\n    let [bar，foo] = [1];\n    以上兩種情況都屬於解構失敗，foo的值都會等於undefined。\n    \n> - 解構賦值的等號右邊必須要是一個可以迭代的東西，如果不是的話會報錯\n    let [qoo]=null //報錯\n    \n> - 支援預設值，但也只有遇上對應的子項為 undefined才會採用預設值\n    let [foo = true] = [];\n    foo // true\n    let [x, y = 'b'] = ['a']; // x='a', y='b'\n    let [x, y = 'b'] = ['a', undefined]; // x='a', y='b'\n    let [x = 1] = [null];x // null 因為子項不等於undefined\n\n> - 字串也可以做模式匹配\n    const [a, b, c, d, e] = 'hello';\n    會變成\n    const a= 'h',\n    const b= 'e'\n    ...\n\n2. 對象匹配\n    - Basic\n    ```javascript=\n    let { bar, foo } = { foo: 'aaa', bar: 'bbb' };\n    foo // \"aaa\"\n    bar // \"bbb\"\n\n    let { baz } = { foo: 'aaa', bar: 'bbb' };\n    baz // undefined\n    ```\n    - 如果變數的名稱與複製目標的屬性名稱不一樣的話可以這樣做\n    ```javascript=\n    let { foo: baz } = { foo: 'aaa', bar: 'bbb' };\n    baz // \"aaa\"\n\n    let obj = { first: 'hello', last: 'world' };\n    let { first: f, last: l } = obj;\n    f // 'hello'\n    l // 'world'\n    ```\n    - 對象匹配也可以有預設值，而採用預設值的標準跟模式匹配一樣:undefined\n    ```javascript=\n    var {x = 3} = {};\n    x // 3\n\n    var {x, y = 5} = {x: 1};\n    x // 1\n    y // 5\n\n    //這個比較需要記憶\n    var {x: y = 3} = {};\n    y // 3\n\n    //這個比較需要記憶\n    var {x: y = 3} = {x: 5};\n    y // 5\n\n    var { message: msg = 'Something went wrong' } = {};\n    msg // \"Something went wrong\"\n    ```\n    - 注意不要把大括號寫在行首\n    ```javascript=\n    {x} = {x: 1};//報錯\n    //應該改寫成\n    let {x} = {x: 1};\n    //或\n    let x;//這行不寫的話x 會變全域\n    ({x} = {x: 1};)//這種方式盡量不要用\n    ```\n    - 函數參數的解構\n    ```javascript=\n    function add([x, y]){\n      return x + y;\n    }\n\n    add([1, 2]); // 3\n    ```\n    \n    - 函数参数的解构也可以使用默认值。\n    ```javascript=\n    function move({x = 0, y = 0} = {}) {\n      return [x, y];\n    }\n\n    move({x: 3, y: 8}); // [3, 8]\n    move({x: 3}); // [3, 0]\n    move({}); // [0, 0]\n    move(); // [0, 0]\n    ```\n    - 注意下列兩者的不同\n    ```javascript=\n    //函數參數本身附帶預設值\n    function move({x = 0, y = 0} = {}) {\n      return [x, y];\n    }\n    // 傳進來的物件會取代掉{}\n    move({x: 3, y: 8}); // [3, 8]\n    move({x: 3}); // [3, 0]\n    move({}); // [0, 0]\n    move(); // [0, 0]\n    ```\n    \n    ```javascript=\n    function move({x, y} = { x: 0, y: 0 }) {\n      return [x, y];\n    }\n    // 傳進來的物件會取代掉{ x: 0, y: 0 }\n    move({x: 3, y: 8}); // [3, 8]\n    move({x: 3}); // [3, undefined]\n    move({}); // [undefined, undefined]\n    move(); // [0, 0]\n    ```\n3. 解構賦值的用途\n    - 交換變數值\n    ```javascript=\n    let x = 1;\n    let y = 2;\n\n    [x, y] = [y, x];\n    ```\n    - 從物件/陣列 快速宣告多個值\n    ```javascript=\n    function example() {\n      return [1, 2, 3];\n    }\n    let [a, b, c] = example();\n\n    // 返回一个对象\n\n    function example() {\n      return {\n        foo: 1,\n        bar: 2\n      };\n    }\n    let { foo, bar } = example();\n    ```\n    \n    - 快速指定函數預設參數值\n    ```javascript=\n    $.ajax = function (url, {\n      async = true,\n      beforeSend = function () {},\n      cache = true,\n      complete = function () {},\n      crossDomain = false,\n      global = true,\n      // ... more config\n    } = {}) {\n      // ... do stuff\n    };\n    ```\n4. generator function(生成器函數)是什麼？\n\n    - 在ES6中定義一個生成器函數很簡單，在函數後跟上「*」即可：\n\n    ```\n    function* foo1() { };\n    function *foo2() { };\n    function * foo3() { };\n\n    foo1.toString(); // \"function* foo1() { }\"\n    foo2.toString(); // \"function* foo2() { }\"\n    foo3.toString(); // \"function* foo3() { }\"\n\n    ```\n    - 调用生成器函数会产生一个生成器（generator）。生成器拥有的最重要的方法是 next()，用来迭代：\n    ```javascript=\n    function* fibs() {\n      let a = 0;\n      let b = 1;\n      while (true) {\n        yield a;//碰到yield就會return 一個值\n        [a, b] = [b, a + b];\n      }\n    }\n    ```\n\n","source":"_posts/ES5_ES6學習筆記-ep2.md","raw":"---\ntitle: ES5/ES6學習筆記-ep2\ncategories: \n- 前端技術學習心得\ntags:\n- js\n---\n\n\n\n\n## ES6解構賦值重點整理\n1. 模式匹配：\n> 只要等号两边的模式相同，左边的变量就会被赋予对应的值。\n\n> - 這個\n    let [a, b, c] = [1, 2, 3];\n\n> - 等同於這個\n    let a = 1;\n    let b = 2;\n    let c = 3;\n    \n> - 這個\n    let [foo, [[bar], baz]] = [1, [[2], 3]];\n\n> - 等同於這個\n    let foo = 1;\n    let bar = 2;\n    let baz = 3;\n\n> - 如果解構不成功，變量的值就等於undefined。\n    let [foo] = [];\n    let [bar，foo] = [1];\n    以上兩種情況都屬於解構失敗，foo的值都會等於undefined。\n    \n> - 解構賦值的等號右邊必須要是一個可以迭代的東西，如果不是的話會報錯\n    let [qoo]=null //報錯\n    \n> - 支援預設值，但也只有遇上對應的子項為 undefined才會採用預設值\n    let [foo = true] = [];\n    foo // true\n    let [x, y = 'b'] = ['a']; // x='a', y='b'\n    let [x, y = 'b'] = ['a', undefined]; // x='a', y='b'\n    let [x = 1] = [null];x // null 因為子項不等於undefined\n\n> - 字串也可以做模式匹配\n    const [a, b, c, d, e] = 'hello';\n    會變成\n    const a= 'h',\n    const b= 'e'\n    ...\n\n2. 對象匹配\n    - Basic\n    ```javascript=\n    let { bar, foo } = { foo: 'aaa', bar: 'bbb' };\n    foo // \"aaa\"\n    bar // \"bbb\"\n\n    let { baz } = { foo: 'aaa', bar: 'bbb' };\n    baz // undefined\n    ```\n    - 如果變數的名稱與複製目標的屬性名稱不一樣的話可以這樣做\n    ```javascript=\n    let { foo: baz } = { foo: 'aaa', bar: 'bbb' };\n    baz // \"aaa\"\n\n    let obj = { first: 'hello', last: 'world' };\n    let { first: f, last: l } = obj;\n    f // 'hello'\n    l // 'world'\n    ```\n    - 對象匹配也可以有預設值，而採用預設值的標準跟模式匹配一樣:undefined\n    ```javascript=\n    var {x = 3} = {};\n    x // 3\n\n    var {x, y = 5} = {x: 1};\n    x // 1\n    y // 5\n\n    //這個比較需要記憶\n    var {x: y = 3} = {};\n    y // 3\n\n    //這個比較需要記憶\n    var {x: y = 3} = {x: 5};\n    y // 5\n\n    var { message: msg = 'Something went wrong' } = {};\n    msg // \"Something went wrong\"\n    ```\n    - 注意不要把大括號寫在行首\n    ```javascript=\n    {x} = {x: 1};//報錯\n    //應該改寫成\n    let {x} = {x: 1};\n    //或\n    let x;//這行不寫的話x 會變全域\n    ({x} = {x: 1};)//這種方式盡量不要用\n    ```\n    - 函數參數的解構\n    ```javascript=\n    function add([x, y]){\n      return x + y;\n    }\n\n    add([1, 2]); // 3\n    ```\n    \n    - 函数参数的解构也可以使用默认值。\n    ```javascript=\n    function move({x = 0, y = 0} = {}) {\n      return [x, y];\n    }\n\n    move({x: 3, y: 8}); // [3, 8]\n    move({x: 3}); // [3, 0]\n    move({}); // [0, 0]\n    move(); // [0, 0]\n    ```\n    - 注意下列兩者的不同\n    ```javascript=\n    //函數參數本身附帶預設值\n    function move({x = 0, y = 0} = {}) {\n      return [x, y];\n    }\n    // 傳進來的物件會取代掉{}\n    move({x: 3, y: 8}); // [3, 8]\n    move({x: 3}); // [3, 0]\n    move({}); // [0, 0]\n    move(); // [0, 0]\n    ```\n    \n    ```javascript=\n    function move({x, y} = { x: 0, y: 0 }) {\n      return [x, y];\n    }\n    // 傳進來的物件會取代掉{ x: 0, y: 0 }\n    move({x: 3, y: 8}); // [3, 8]\n    move({x: 3}); // [3, undefined]\n    move({}); // [undefined, undefined]\n    move(); // [0, 0]\n    ```\n3. 解構賦值的用途\n    - 交換變數值\n    ```javascript=\n    let x = 1;\n    let y = 2;\n\n    [x, y] = [y, x];\n    ```\n    - 從物件/陣列 快速宣告多個值\n    ```javascript=\n    function example() {\n      return [1, 2, 3];\n    }\n    let [a, b, c] = example();\n\n    // 返回一个对象\n\n    function example() {\n      return {\n        foo: 1,\n        bar: 2\n      };\n    }\n    let { foo, bar } = example();\n    ```\n    \n    - 快速指定函數預設參數值\n    ```javascript=\n    $.ajax = function (url, {\n      async = true,\n      beforeSend = function () {},\n      cache = true,\n      complete = function () {},\n      crossDomain = false,\n      global = true,\n      // ... more config\n    } = {}) {\n      // ... do stuff\n    };\n    ```\n4. generator function(生成器函數)是什麼？\n\n    - 在ES6中定義一個生成器函數很簡單，在函數後跟上「*」即可：\n\n    ```\n    function* foo1() { };\n    function *foo2() { };\n    function * foo3() { };\n\n    foo1.toString(); // \"function* foo1() { }\"\n    foo2.toString(); // \"function* foo2() { }\"\n    foo3.toString(); // \"function* foo3() { }\"\n\n    ```\n    - 调用生成器函数会产生一个生成器（generator）。生成器拥有的最重要的方法是 next()，用来迭代：\n    ```javascript=\n    function* fibs() {\n      let a = 0;\n      let b = 1;\n      while (true) {\n        yield a;//碰到yield就會return 一個值\n        [a, b] = [b, a + b];\n      }\n    }\n    ```\n\n","slug":"ES5_ES6學習筆記-ep2","published":1,"date":"2020-11-25T17:01:45.831Z","updated":"2020-12-12T19:52:04.913Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktx1vyyf0011tay2g8bef8ug","content":"<h2 id=\"ES6解構賦值重點整理\"><a href=\"#ES6解構賦值重點整理\" class=\"headerlink\" title=\"ES6解構賦值重點整理\"></a>ES6解構賦值重點整理</h2><ol>\n<li>模式匹配：<blockquote>\n<p>只要等号两边的模式相同，左边的变量就会被赋予对应的值。</p>\n</blockquote>\n</li>\n</ol>\n<blockquote>\n<ul>\n<li>這個<br>  let [a, b, c] = [1, 2, 3];</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>等同於這個<br>  let a = 1;<br>  let b = 2;<br>  let c = 3;</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>這個<br>  let [foo, [[bar], baz]] = [1, [[2], 3]];</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>等同於這個<br>  let foo = 1;<br>  let bar = 2;<br>  let baz = 3;</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>如果解構不成功，變量的值就等於undefined。<br>  let [foo] = [];<br>  let [bar，foo] = [1];<br>  以上兩種情況都屬於解構失敗，foo的值都會等於undefined。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>解構賦值的等號右邊必須要是一個可以迭代的東西，如果不是的話會報錯<br>  let [qoo]=null //報錯</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>支援預設值，但也只有遇上對應的子項為 undefined才會採用預設值<br>  let [foo = true] = [];<br>  foo // true<br>  let [x, y = ‘b’] = [‘a’]; // x=’a’, y=’b’<br>  let [x, y = ‘b’] = [‘a’, undefined]; // x=’a’, y=’b’<br>  let [x = 1] = [null];x // null 因為子項不等於undefined</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>字串也可以做模式匹配<br>  const [a, b, c, d, e] = ‘hello’;<br>  會變成<br>  const a= ‘h’,<br>  const b= ‘e’<br>  …</li>\n</ul>\n</blockquote>\n<ol start=\"2\">\n<li><p>對象匹配</p>\n<ul>\n<li><p>Basic</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; bar, foo &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">&#x27;aaa&#x27;</span>, <span class=\"attr\">bar</span>: <span class=\"string\">&#x27;bbb&#x27;</span> &#125;;</span><br><span class=\"line\">foo <span class=\"comment\">// &quot;aaa&quot;</span></span><br><span class=\"line\">bar <span class=\"comment\">// &quot;bbb&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; baz &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">&#x27;aaa&#x27;</span>, <span class=\"attr\">bar</span>: <span class=\"string\">&#x27;bbb&#x27;</span> &#125;;</span><br><span class=\"line\">baz <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure></li>\n<li><p>如果變數的名稱與複製目標的屬性名稱不一樣的話可以這樣做</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">foo</span>: baz &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">&#x27;aaa&#x27;</span>, <span class=\"attr\">bar</span>: <span class=\"string\">&#x27;bbb&#x27;</span> &#125;;</span><br><span class=\"line\">baz <span class=\"comment\">// &quot;aaa&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">first</span>: <span class=\"string\">&#x27;hello&#x27;</span>, <span class=\"attr\">last</span>: <span class=\"string\">&#x27;world&#x27;</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">first</span>: f, <span class=\"attr\">last</span>: l &#125; = obj;</span><br><span class=\"line\">f <span class=\"comment\">// &#x27;hello&#x27;</span></span><br><span class=\"line\">l <span class=\"comment\">// &#x27;world&#x27;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>對象匹配也可以有預設值，而採用預設值的標準跟模式匹配一樣:undefined</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> &#123;x = <span class=\"number\">3</span>&#125; = &#123;&#125;;</span><br><span class=\"line\">x <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;x, y = <span class=\"number\">5</span>&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\">y <span class=\"comment\">// 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//這個比較需要記憶</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;<span class=\"attr\">x</span>: y = <span class=\"number\">3</span>&#125; = &#123;&#125;;</span><br><span class=\"line\">y <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//這個比較需要記憶</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;<span class=\"attr\">x</span>: y = <span class=\"number\">3</span>&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">y <span class=\"comment\">// 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; <span class=\"attr\">message</span>: msg = <span class=\"string\">&#x27;Something went wrong&#x27;</span> &#125; = &#123;&#125;;</span><br><span class=\"line\">msg <span class=\"comment\">// &quot;Something went wrong&quot;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>注意不要把大括號寫在行首</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;x&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;;<span class=\"comment\">//報錯</span></span><br><span class=\"line\"><span class=\"comment\">//應該改寫成</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;x&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">//或</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> x;<span class=\"comment\">//這行不寫的話x 會變全域</span></span><br><span class=\"line\">(&#123;x&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;;)<span class=\"comment\">//這種方式盡量不要用</span></span><br></pre></td></tr></table></figure></li>\n<li><p>函數參數的解構</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">[x, y]</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add([<span class=\"number\">1</span>, <span class=\"number\">2</span>]); <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>函数参数的解构也可以使用默认值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">move</span>(<span class=\"params\">&#123;x = <span class=\"number\">0</span>, y = <span class=\"number\">0</span>&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [x, y];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">move(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">8</span>&#125;); <span class=\"comment\">// [3, 8]</span></span><br><span class=\"line\">move(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>&#125;); <span class=\"comment\">// [3, 0]</span></span><br><span class=\"line\">move(&#123;&#125;); <span class=\"comment\">// [0, 0]</span></span><br><span class=\"line\">move(); <span class=\"comment\">// [0, 0]</span></span><br></pre></td></tr></table></figure></li>\n<li><p>注意下列兩者的不同</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函數參數本身附帶預設值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">move</span>(<span class=\"params\">&#123;x = <span class=\"number\">0</span>, y = <span class=\"number\">0</span>&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [x, y];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 傳進來的物件會取代掉&#123;&#125;</span></span><br><span class=\"line\">move(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">8</span>&#125;); <span class=\"comment\">// [3, 8]</span></span><br><span class=\"line\">move(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>&#125;); <span class=\"comment\">// [3, 0]</span></span><br><span class=\"line\">move(&#123;&#125;); <span class=\"comment\">// [0, 0]</span></span><br><span class=\"line\">move(); <span class=\"comment\">// [0, 0]</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">move</span>(<span class=\"params\">&#123;x, y&#125; = &#123; x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span> &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [x, y];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 傳進來的物件會取代掉&#123; x: 0, y: 0 &#125;</span></span><br><span class=\"line\">move(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">8</span>&#125;); <span class=\"comment\">// [3, 8]</span></span><br><span class=\"line\">move(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>&#125;); <span class=\"comment\">// [3, undefined]</span></span><br><span class=\"line\">move(&#123;&#125;); <span class=\"comment\">// [undefined, undefined]</span></span><br><span class=\"line\">move(); <span class=\"comment\">// [0, 0]</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>解構賦值的用途</p>\n<ul>\n<li><p>交換變數值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> y = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">[x, y] = [y, x];</span><br></pre></td></tr></table></figure></li>\n<li><p>從物件/陣列 快速宣告多個值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c] = example();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回一个对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    foo: <span class=\"number\">1</span>,</span><br><span class=\"line\">    bar: <span class=\"number\">2</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; foo, bar &#125; = example();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>快速指定函數預設參數值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">url, &#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  <span class=\"keyword\">async</span> = <span class=\"literal\">true</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  beforeSend = <span class=\"keyword\">function</span> () &#123;&#125;,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  cache = <span class=\"literal\">true</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  complete = <span class=\"keyword\">function</span> () &#123;&#125;,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  crossDomain = <span class=\"literal\">false</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  <span class=\"built_in\">global</span> = <span class=\"literal\">true</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  <span class=\"regexp\">//</span> ... more config</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ... do stuff</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>generator function(生成器函數)是什麼？</p>\n<ul>\n<li><p>在ES6中定義一個生成器函數很簡單，在函數後跟上「*」即可：</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">foo1</span>(<span class=\"params\"></span>) </span>&#123; &#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">foo2</span>(<span class=\"params\"></span>) </span>&#123; &#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> * <span class=\"title\">foo3</span>(<span class=\"params\"></span>) </span>&#123; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">foo1.toString(); <span class=\"comment\">// &quot;function* foo1() &#123; &#125;&quot;</span></span><br><span class=\"line\">foo2.toString(); <span class=\"comment\">// &quot;function* foo2() &#123; &#125;&quot;</span></span><br><span class=\"line\">foo3.toString(); <span class=\"comment\">// &quot;function* foo3() &#123; &#125;&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><p>调用生成器函数会产生一个生成器（generator）。生成器拥有的最重要的方法是 next()，用来迭代：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">fibs</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> a;<span class=\"comment\">//碰到yield就會return 一個值</span></span><br><span class=\"line\">    [a, b] = [b, a + b];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{"css/variables":"","languages":{"zh-TW":{"title":{"archive":"時間線","category":"分類","tag":"標籤","schedule":"時間表"},"menu":{"home":"首頁","archives":"時間線","categories":"分類","tags":"標籤","about":"關於","search":"搜尋","schedule":"時間表","sitemap":"網站地圖","commonweal":"公益 404"},"sidebar":{"overview":"本站概要","toc":"文章目錄"},"post":{"posted":"發表於","edited":"更新於","created":"創建時間","modified":"修改時間","edit":"編輯","in":"分類於","read_more":"閱讀全文","untitled":"未命名","sticky":"置頂文","views":"閱讀次數","related_posts":"相關文章","copyright":{"author":"作者","link":"文章連結","post_author":"Written by","post_link":"This article originally appeared on","license_title":"版權聲明","license_content":"本網誌所有文章除特別聲明外，均採用 %s 許可協議。轉載請註明出處！"}},"footer":{"powered":"","total_views":"總瀏覽次數","total_visitors":"訪客總數"},"counter":{"tag_cloud":{"zero":"目前還沒有任何標籤","one":"目前共有 1 個標籤","other":"目前共有 %d 個標籤"},"categories":{"zero":"目前還沒有任何分類","one":"目前共有 1 個分類","other":"目前共有 %d 個分類"},"archive_posts":{"zero":"目前還沒有任何文章。","one":"目前共有 1 篇文章。","other":"目前共有 %d 篇文章。"}},"state":{"posts":"文章","tags":"標籤","categories":"分類"},"search":{"placeholder":"搜尋...","empty":"We didn't find any results for the search: %s","hits_time":"%s results found in %s ms","hits":"%s results found"},"cheers":{"um":"嗯..","ok":"還不錯","nice":"好","good":"很好","great":"非常好","excellent":"棒棒Der"},"keep_on":"繼續努力。","symbol":{"comma":"，","period":"。","colon":"："},"reward":{"donate":"捐贈","wechatpay":"微信支付","alipay":"支付寶","paypal":"貝寶","bitcoin":"比特幣"},"follow_me":{"welcome":"歡迎關注我的其它站點"},"accessibility":{"nav_toggle":"切換導航欄","prev_page":"上一頁","next_page":"下一頁"},"symbols_count_time":{"count":"文章字數","count_total":"總字數","time":"所需閱讀時間","time_total":"所需總閱讀時間","time_minutes":"分鐘"}}},"css/mixins":"","css/styles":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","template/head":"<script src=\"//js/tool/canvas-fx-base.js\"></script>\n\n<script src=\"//js/ripple-logo.js\"></script>\n<script src=\"//js/silk-wave.js\"></script>\n\n<style>\n  @font-face {\n  font-family: \"Roboto\";\n  src: url(//font/Roboto.ttf) format(\"truetype\");\n}\n</style>","css/styl-plugin/grid-post-layout/main":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","css/styl-plugin/grid-post-layout/mixins":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n","css/styl-plugin/grid-post-layout/variables":""}},"excerpt":"","more":"<h2 id=\"ES6解構賦值重點整理\"><a href=\"#ES6解構賦值重點整理\" class=\"headerlink\" title=\"ES6解構賦值重點整理\"></a>ES6解構賦值重點整理</h2><ol>\n<li>模式匹配：<blockquote>\n<p>只要等号两边的模式相同，左边的变量就会被赋予对应的值。</p>\n</blockquote>\n</li>\n</ol>\n<blockquote>\n<ul>\n<li>這個<br>  let [a, b, c] = [1, 2, 3];</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>等同於這個<br>  let a = 1;<br>  let b = 2;<br>  let c = 3;</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>這個<br>  let [foo, [[bar], baz]] = [1, [[2], 3]];</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>等同於這個<br>  let foo = 1;<br>  let bar = 2;<br>  let baz = 3;</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>如果解構不成功，變量的值就等於undefined。<br>  let [foo] = [];<br>  let [bar，foo] = [1];<br>  以上兩種情況都屬於解構失敗，foo的值都會等於undefined。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>解構賦值的等號右邊必須要是一個可以迭代的東西，如果不是的話會報錯<br>  let [qoo]=null //報錯</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>支援預設值，但也只有遇上對應的子項為 undefined才會採用預設值<br>  let [foo = true] = [];<br>  foo // true<br>  let [x, y = ‘b’] = [‘a’]; // x=’a’, y=’b’<br>  let [x, y = ‘b’] = [‘a’, undefined]; // x=’a’, y=’b’<br>  let [x = 1] = [null];x // null 因為子項不等於undefined</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>字串也可以做模式匹配<br>  const [a, b, c, d, e] = ‘hello’;<br>  會變成<br>  const a= ‘h’,<br>  const b= ‘e’<br>  …</li>\n</ul>\n</blockquote>\n<ol start=\"2\">\n<li><p>對象匹配</p>\n<ul>\n<li><p>Basic</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; bar, foo &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">&#x27;aaa&#x27;</span>, <span class=\"attr\">bar</span>: <span class=\"string\">&#x27;bbb&#x27;</span> &#125;;</span><br><span class=\"line\">foo <span class=\"comment\">// &quot;aaa&quot;</span></span><br><span class=\"line\">bar <span class=\"comment\">// &quot;bbb&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; baz &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">&#x27;aaa&#x27;</span>, <span class=\"attr\">bar</span>: <span class=\"string\">&#x27;bbb&#x27;</span> &#125;;</span><br><span class=\"line\">baz <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure></li>\n<li><p>如果變數的名稱與複製目標的屬性名稱不一樣的話可以這樣做</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">foo</span>: baz &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">&#x27;aaa&#x27;</span>, <span class=\"attr\">bar</span>: <span class=\"string\">&#x27;bbb&#x27;</span> &#125;;</span><br><span class=\"line\">baz <span class=\"comment\">// &quot;aaa&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">first</span>: <span class=\"string\">&#x27;hello&#x27;</span>, <span class=\"attr\">last</span>: <span class=\"string\">&#x27;world&#x27;</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">first</span>: f, <span class=\"attr\">last</span>: l &#125; = obj;</span><br><span class=\"line\">f <span class=\"comment\">// &#x27;hello&#x27;</span></span><br><span class=\"line\">l <span class=\"comment\">// &#x27;world&#x27;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>對象匹配也可以有預設值，而採用預設值的標準跟模式匹配一樣:undefined</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> &#123;x = <span class=\"number\">3</span>&#125; = &#123;&#125;;</span><br><span class=\"line\">x <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;x, y = <span class=\"number\">5</span>&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\">y <span class=\"comment\">// 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//這個比較需要記憶</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;<span class=\"attr\">x</span>: y = <span class=\"number\">3</span>&#125; = &#123;&#125;;</span><br><span class=\"line\">y <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//這個比較需要記憶</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;<span class=\"attr\">x</span>: y = <span class=\"number\">3</span>&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">y <span class=\"comment\">// 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; <span class=\"attr\">message</span>: msg = <span class=\"string\">&#x27;Something went wrong&#x27;</span> &#125; = &#123;&#125;;</span><br><span class=\"line\">msg <span class=\"comment\">// &quot;Something went wrong&quot;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>注意不要把大括號寫在行首</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;x&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;;<span class=\"comment\">//報錯</span></span><br><span class=\"line\"><span class=\"comment\">//應該改寫成</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;x&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">//或</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> x;<span class=\"comment\">//這行不寫的話x 會變全域</span></span><br><span class=\"line\">(&#123;x&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;;)<span class=\"comment\">//這種方式盡量不要用</span></span><br></pre></td></tr></table></figure></li>\n<li><p>函數參數的解構</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">[x, y]</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add([<span class=\"number\">1</span>, <span class=\"number\">2</span>]); <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>函数参数的解构也可以使用默认值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">move</span>(<span class=\"params\">&#123;x = <span class=\"number\">0</span>, y = <span class=\"number\">0</span>&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [x, y];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">move(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">8</span>&#125;); <span class=\"comment\">// [3, 8]</span></span><br><span class=\"line\">move(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>&#125;); <span class=\"comment\">// [3, 0]</span></span><br><span class=\"line\">move(&#123;&#125;); <span class=\"comment\">// [0, 0]</span></span><br><span class=\"line\">move(); <span class=\"comment\">// [0, 0]</span></span><br></pre></td></tr></table></figure></li>\n<li><p>注意下列兩者的不同</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函數參數本身附帶預設值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">move</span>(<span class=\"params\">&#123;x = <span class=\"number\">0</span>, y = <span class=\"number\">0</span>&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [x, y];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 傳進來的物件會取代掉&#123;&#125;</span></span><br><span class=\"line\">move(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">8</span>&#125;); <span class=\"comment\">// [3, 8]</span></span><br><span class=\"line\">move(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>&#125;); <span class=\"comment\">// [3, 0]</span></span><br><span class=\"line\">move(&#123;&#125;); <span class=\"comment\">// [0, 0]</span></span><br><span class=\"line\">move(); <span class=\"comment\">// [0, 0]</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">move</span>(<span class=\"params\">&#123;x, y&#125; = &#123; x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span> &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [x, y];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 傳進來的物件會取代掉&#123; x: 0, y: 0 &#125;</span></span><br><span class=\"line\">move(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">8</span>&#125;); <span class=\"comment\">// [3, 8]</span></span><br><span class=\"line\">move(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>&#125;); <span class=\"comment\">// [3, undefined]</span></span><br><span class=\"line\">move(&#123;&#125;); <span class=\"comment\">// [undefined, undefined]</span></span><br><span class=\"line\">move(); <span class=\"comment\">// [0, 0]</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>解構賦值的用途</p>\n<ul>\n<li><p>交換變數值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> y = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">[x, y] = [y, x];</span><br></pre></td></tr></table></figure></li>\n<li><p>從物件/陣列 快速宣告多個值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c] = example();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回一个对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    foo: <span class=\"number\">1</span>,</span><br><span class=\"line\">    bar: <span class=\"number\">2</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; foo, bar &#125; = example();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>快速指定函數預設參數值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">url, &#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  <span class=\"keyword\">async</span> = <span class=\"literal\">true</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  beforeSend = <span class=\"keyword\">function</span> () &#123;&#125;,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  cache = <span class=\"literal\">true</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  complete = <span class=\"keyword\">function</span> () &#123;&#125;,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  crossDomain = <span class=\"literal\">false</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  <span class=\"built_in\">global</span> = <span class=\"literal\">true</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  <span class=\"regexp\">//</span> ... more config</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ... do stuff</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>generator function(生成器函數)是什麼？</p>\n<ul>\n<li><p>在ES6中定義一個生成器函數很簡單，在函數後跟上「*」即可：</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">foo1</span>(<span class=\"params\"></span>) </span>&#123; &#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">foo2</span>(<span class=\"params\"></span>) </span>&#123; &#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> * <span class=\"title\">foo3</span>(<span class=\"params\"></span>) </span>&#123; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">foo1.toString(); <span class=\"comment\">// &quot;function* foo1() &#123; &#125;&quot;</span></span><br><span class=\"line\">foo2.toString(); <span class=\"comment\">// &quot;function* foo2() &#123; &#125;&quot;</span></span><br><span class=\"line\">foo3.toString(); <span class=\"comment\">// &quot;function* foo3() &#123; &#125;&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><p>调用生成器函数会产生一个生成器（generator）。生成器拥有的最重要的方法是 next()，用来迭代：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">fibs</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> a;<span class=\"comment\">//碰到yield就會return 一個值</span></span><br><span class=\"line\">    [a, b] = [b, a + b];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ol>\n"},{"title":"ES5/ES6學習筆記-ep3","_content":"\n\n\n## ES6 Promise 重點整理\n1. Promise 是什麼\n - 用來處理callback chain 的一種新JS語法\n - 本身是一個class, 但是他也有自己的靜態方法\n - 建立出來的實例物件具有三種狀態：pending/fulfilled/rejected\n - 狀態只可能是從pending 變成 fulfilled/rejected\n2. promise.prototype.then()\n - then()可以傳入兩個函數作為參數，第一個函數會在promise物件被fulfilled之後馬上發動，第二個函數則會在promise物件被reject的時候馬上發動\n - 會回傳一個新的promise物件\n - **重要** ： 當then與then串接的時候，後面的then 的 **參數function** 會得到前面的then 的 **參數function** return出來的值作為參數\n3. promise.prototype.catch()\n - catch()可以傳入一個函數作為參數，並且這個函數會接收到promise throw出來的error\n - 也會回傳一個新的promise物件\n4. promise.all()\n - 也會回傳新的promise\n - 必須要傳入一個陣列，這個陣列本身的內容物都是promise\n - 當這些內容物promise都被fullfill之後，all()本身回傳的promise就會被fullfill\n - 在all() 回傳得到的promise後面去使用then(), 該 then()的參數function會拿到all()的所有內容promise 在resolve 時使用的參數 所組成的陣列。\n5. promise.race()\n - 也會回傳新的promise\n - 必須要傳入一個陣列，這個陣列本身的內容物都是promise\n - 當這些內容物promise有其中一個被fullfill之後，race()本身回傳的promise就會被fullfill\n - 在race() 回傳得到的promise後面去使用then(), 該 then()的參數function會拿到race()的最快達成fullfilled 的內容promise 在resolve 時使用的參數。\n\n\n","source":"_posts/ES5_ES6學習筆記-ep3.md","raw":"---\ntitle: ES5/ES6學習筆記-ep3\ncategories: \n- 前端技術學習心得\ntags:\n- js\n---\n\n\n\n## ES6 Promise 重點整理\n1. Promise 是什麼\n - 用來處理callback chain 的一種新JS語法\n - 本身是一個class, 但是他也有自己的靜態方法\n - 建立出來的實例物件具有三種狀態：pending/fulfilled/rejected\n - 狀態只可能是從pending 變成 fulfilled/rejected\n2. promise.prototype.then()\n - then()可以傳入兩個函數作為參數，第一個函數會在promise物件被fulfilled之後馬上發動，第二個函數則會在promise物件被reject的時候馬上發動\n - 會回傳一個新的promise物件\n - **重要** ： 當then與then串接的時候，後面的then 的 **參數function** 會得到前面的then 的 **參數function** return出來的值作為參數\n3. promise.prototype.catch()\n - catch()可以傳入一個函數作為參數，並且這個函數會接收到promise throw出來的error\n - 也會回傳一個新的promise物件\n4. promise.all()\n - 也會回傳新的promise\n - 必須要傳入一個陣列，這個陣列本身的內容物都是promise\n - 當這些內容物promise都被fullfill之後，all()本身回傳的promise就會被fullfill\n - 在all() 回傳得到的promise後面去使用then(), 該 then()的參數function會拿到all()的所有內容promise 在resolve 時使用的參數 所組成的陣列。\n5. promise.race()\n - 也會回傳新的promise\n - 必須要傳入一個陣列，這個陣列本身的內容物都是promise\n - 當這些內容物promise有其中一個被fullfill之後，race()本身回傳的promise就會被fullfill\n - 在race() 回傳得到的promise後面去使用then(), 該 then()的參數function會拿到race()的最快達成fullfilled 的內容promise 在resolve 時使用的參數。\n\n\n","slug":"ES5_ES6學習筆記-ep3","published":1,"date":"2020-11-25T17:01:45.838Z","updated":"2020-12-12T19:52:08.504Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktx1vyyh0015tay2c7gk21yn","content":"<h2 id=\"ES6-Promise-重點整理\"><a href=\"#ES6-Promise-重點整理\" class=\"headerlink\" title=\"ES6 Promise 重點整理\"></a>ES6 Promise 重點整理</h2><ol>\n<li>Promise 是什麼</li>\n</ol>\n<ul>\n<li>用來處理callback chain 的一種新JS語法</li>\n<li>本身是一個class, 但是他也有自己的靜態方法</li>\n<li>建立出來的實例物件具有三種狀態：pending/fulfilled/rejected</li>\n<li>狀態只可能是從pending 變成 fulfilled/rejected</li>\n</ul>\n<ol start=\"2\">\n<li>promise.prototype.then()</li>\n</ol>\n<ul>\n<li>then()可以傳入兩個函數作為參數，第一個函數會在promise物件被fulfilled之後馬上發動，第二個函數則會在promise物件被reject的時候馬上發動</li>\n<li>會回傳一個新的promise物件</li>\n<li><strong>重要</strong> ： 當then與then串接的時候，後面的then 的 <strong>參數function</strong> 會得到前面的then 的 <strong>參數function</strong> return出來的值作為參數</li>\n</ul>\n<ol start=\"3\">\n<li>promise.prototype.catch()</li>\n</ol>\n<ul>\n<li>catch()可以傳入一個函數作為參數，並且這個函數會接收到promise throw出來的error</li>\n<li>也會回傳一個新的promise物件</li>\n</ul>\n<ol start=\"4\">\n<li>promise.all()</li>\n</ol>\n<ul>\n<li>也會回傳新的promise</li>\n<li>必須要傳入一個陣列，這個陣列本身的內容物都是promise</li>\n<li>當這些內容物promise都被fullfill之後，all()本身回傳的promise就會被fullfill</li>\n<li>在all() 回傳得到的promise後面去使用then(), 該 then()的參數function會拿到all()的所有內容promise 在resolve 時使用的參數 所組成的陣列。</li>\n</ul>\n<ol start=\"5\">\n<li>promise.race()</li>\n</ol>\n<ul>\n<li>也會回傳新的promise</li>\n<li>必須要傳入一個陣列，這個陣列本身的內容物都是promise</li>\n<li>當這些內容物promise有其中一個被fullfill之後，race()本身回傳的promise就會被fullfill</li>\n<li>在race() 回傳得到的promise後面去使用then(), 該 then()的參數function會拿到race()的最快達成fullfilled 的內容promise 在resolve 時使用的參數。</li>\n</ul>\n","site":{"data":{"css/variables":"","languages":{"zh-TW":{"title":{"archive":"時間線","category":"分類","tag":"標籤","schedule":"時間表"},"menu":{"home":"首頁","archives":"時間線","categories":"分類","tags":"標籤","about":"關於","search":"搜尋","schedule":"時間表","sitemap":"網站地圖","commonweal":"公益 404"},"sidebar":{"overview":"本站概要","toc":"文章目錄"},"post":{"posted":"發表於","edited":"更新於","created":"創建時間","modified":"修改時間","edit":"編輯","in":"分類於","read_more":"閱讀全文","untitled":"未命名","sticky":"置頂文","views":"閱讀次數","related_posts":"相關文章","copyright":{"author":"作者","link":"文章連結","post_author":"Written by","post_link":"This article originally appeared on","license_title":"版權聲明","license_content":"本網誌所有文章除特別聲明外，均採用 %s 許可協議。轉載請註明出處！"}},"footer":{"powered":"","total_views":"總瀏覽次數","total_visitors":"訪客總數"},"counter":{"tag_cloud":{"zero":"目前還沒有任何標籤","one":"目前共有 1 個標籤","other":"目前共有 %d 個標籤"},"categories":{"zero":"目前還沒有任何分類","one":"目前共有 1 個分類","other":"目前共有 %d 個分類"},"archive_posts":{"zero":"目前還沒有任何文章。","one":"目前共有 1 篇文章。","other":"目前共有 %d 篇文章。"}},"state":{"posts":"文章","tags":"標籤","categories":"分類"},"search":{"placeholder":"搜尋...","empty":"We didn't find any results for the search: %s","hits_time":"%s results found in %s ms","hits":"%s results found"},"cheers":{"um":"嗯..","ok":"還不錯","nice":"好","good":"很好","great":"非常好","excellent":"棒棒Der"},"keep_on":"繼續努力。","symbol":{"comma":"，","period":"。","colon":"："},"reward":{"donate":"捐贈","wechatpay":"微信支付","alipay":"支付寶","paypal":"貝寶","bitcoin":"比特幣"},"follow_me":{"welcome":"歡迎關注我的其它站點"},"accessibility":{"nav_toggle":"切換導航欄","prev_page":"上一頁","next_page":"下一頁"},"symbols_count_time":{"count":"文章字數","count_total":"總字數","time":"所需閱讀時間","time_total":"所需總閱讀時間","time_minutes":"分鐘"}}},"css/mixins":"","css/styles":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","template/head":"<script src=\"//js/tool/canvas-fx-base.js\"></script>\n\n<script src=\"//js/ripple-logo.js\"></script>\n<script src=\"//js/silk-wave.js\"></script>\n\n<style>\n  @font-face {\n  font-family: \"Roboto\";\n  src: url(//font/Roboto.ttf) format(\"truetype\");\n}\n</style>","css/styl-plugin/grid-post-layout/main":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","css/styl-plugin/grid-post-layout/mixins":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n","css/styl-plugin/grid-post-layout/variables":""}},"excerpt":"","more":"<h2 id=\"ES6-Promise-重點整理\"><a href=\"#ES6-Promise-重點整理\" class=\"headerlink\" title=\"ES6 Promise 重點整理\"></a>ES6 Promise 重點整理</h2><ol>\n<li>Promise 是什麼</li>\n</ol>\n<ul>\n<li>用來處理callback chain 的一種新JS語法</li>\n<li>本身是一個class, 但是他也有自己的靜態方法</li>\n<li>建立出來的實例物件具有三種狀態：pending/fulfilled/rejected</li>\n<li>狀態只可能是從pending 變成 fulfilled/rejected</li>\n</ul>\n<ol start=\"2\">\n<li>promise.prototype.then()</li>\n</ol>\n<ul>\n<li>then()可以傳入兩個函數作為參數，第一個函數會在promise物件被fulfilled之後馬上發動，第二個函數則會在promise物件被reject的時候馬上發動</li>\n<li>會回傳一個新的promise物件</li>\n<li><strong>重要</strong> ： 當then與then串接的時候，後面的then 的 <strong>參數function</strong> 會得到前面的then 的 <strong>參數function</strong> return出來的值作為參數</li>\n</ul>\n<ol start=\"3\">\n<li>promise.prototype.catch()</li>\n</ol>\n<ul>\n<li>catch()可以傳入一個函數作為參數，並且這個函數會接收到promise throw出來的error</li>\n<li>也會回傳一個新的promise物件</li>\n</ul>\n<ol start=\"4\">\n<li>promise.all()</li>\n</ol>\n<ul>\n<li>也會回傳新的promise</li>\n<li>必須要傳入一個陣列，這個陣列本身的內容物都是promise</li>\n<li>當這些內容物promise都被fullfill之後，all()本身回傳的promise就會被fullfill</li>\n<li>在all() 回傳得到的promise後面去使用then(), 該 then()的參數function會拿到all()的所有內容promise 在resolve 時使用的參數 所組成的陣列。</li>\n</ul>\n<ol start=\"5\">\n<li>promise.race()</li>\n</ol>\n<ul>\n<li>也會回傳新的promise</li>\n<li>必須要傳入一個陣列，這個陣列本身的內容物都是promise</li>\n<li>當這些內容物promise有其中一個被fullfill之後，race()本身回傳的promise就會被fullfill</li>\n<li>在race() 回傳得到的promise後面去使用then(), 該 then()的參數function會拿到race()的最快達成fullfilled 的內容promise 在resolve 時使用的參數。</li>\n</ul>\n"},{"title":"ES6學習筆記-Proxy 用途/介紹/使用情境","_content":"\n\n\n## 什麼是Proxy\n\n> 字面上的意思就是\"代理\" [color=red]\n\n- Q1: 所以說是要代理些什麼東西啊?\n- A1: 所謂的代理, 就是在要去代理一個物件內部 的 <屬性的存取>。過程中Proxy的作用方式，\n有點像是去形成一個攔截屏障，所有要存取目標物件的程序都需要去通過這層屏障才能完成存取，所以說這層屏障的用途就在於偵測屬性的被存取\n\n**這邊是一個利用Proxy去為一個空物件撰寫getter/setter的範例**\n\n````javascript\nvar obj = new Proxy({}, {\n  get: function (target, propKey, receiver) {\n    console.log(`getting ${propKey}!`);\n    return Reflect.get(target, propKey, receiver);\n  },\n  set: function (target, propKey, value, receiver) {\n    console.log(`setting ${propKey}!`);\n    return Reflect.set(target, propKey, value, receiver);\n  }\n});\n````\n\n\n## Proxy 的基本語法\n\n````javascript\nlet p = new Proxy(target, handler);\n````\n\n- 其中 **target** 是一個目標的物件（雖然說是物件，但是它實際上也可以是array/function，甚至是另外一個proxy）\n- **handler** 也是一個物件，但是他裡面的屬性  是proxy攔截(trap)到屬性存取行為時可以使用的函數。\n- 基本上，我們在定義handler的時候並不是直接給一個有很多自訂名稱的方法的物件。\n- handler裡面可以定義的方法有下面幾種(共13種)：\n\n    - **get(target, propKey, receiver)**：攔截對象屬性的讀取，比如proxy.foo和proxy['foo']。\n    - **set(target, propKey, value, receiver)**：攔截對象屬性的設置，比如proxy.foo = v或proxy['foo'] = v，返回一個Boolean。\n    - **has(target, propKey)**：攔截propKey in proxy的操作，返回一個Boolean。\n    - **deleteProperty(target, propKey)**：攔截delete proxy[propKey]的操作，返回一個Boolean。\n    - **ownKeys(target)**：攔截Object.getOwnPropertyNames(proxy)、Object.getOwnPropertySymbols(proxy)、Object.keys(proxy)、for...in循環，返回一個數組。該方法返回目標對象所有自身的屬性的屬性名，而Object.keys()的返回結果僅包括目標對象自身的可遍歷屬性。\n    - **getOwnPropertyDescriptor(target, propKey)**：攔截Object.getOwnPropertyDescriptor(proxy, propKey)，返回屬性的描述對象。\n    - **defineProperty(target, propKey, propDesc)**：攔截Object.defineProperty(proxy, propKey, propDesc）、Object.defineProperties(proxy, propDescs)，返回一個Boolean。\n    - **preventExtensions(target)**：攔截Object.preventExtensions(proxy)，返回一個Boolean。\n    - **getPrototypeOf(target)**：攔截Object.getPrototypeOf(proxy)，返回一個對象。\n    - **isExtensible(target)**：攔截Object.isExtensible(proxy)，返回一個Boolean。\n    - **setPrototypeOf(target, proto)**：攔截Object.setPrototypeOf(proxy, proto)，返回一個Boolean。如果目標對像是函數，那麼還有兩種額外操作可以攔截。\n    - **apply(target, object, args)**：攔截Proxy 實例作為函數調用的操作，比如proxy(...args)、proxy.call(object, ...args)、proxy.apply(.. .)。\n    - **construct(target, args)**：攔截 Proxy 實例作為構造函數調用的操作，比如new proxy(...args)。\n\n> MDN上面有更完整的說明 [color=red]\n> https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy#Handler_functions\n\n\n## 先來看個 Proxy 的基本演練\n\n> source code from MDN [color=red]\n\n````javascript\nlet handler = {\n    get: function(target, name) {\n        return name in target ?\n            target[name] :\n            37;\n    },\n    set: function(target, name, value) {\n    if (name === 'age') {\n      if (!Number.isInteger(value)) {\n        throw new TypeError('The age is not an integer');\n      }\n      if (value > 200) {\n        throw new RangeError('The age seems invalid');\n      }\n    }\n\n    // The default behavior to store the value\n    target[name] = value;\n\n    // Indicate success\n    return true;\n  }\n};\n\nlet p = new Proxy({}, handler);\n````\n\n這樣寫的話，當我們去執行console.log(p.abc),也就是去取用p的屬性值，就會觸發get function\n而如果我們去執行p.abc = \"123\", 就會觸發set function，這就是最基本的handler.get和handler.set的運用\n\n## 下週繼續: 常用的handler方法與他們的使用範例\n\n### 1. handler.apply\n\n基本上大家都知道apply就跟call 是類似的東西, 他們是被用來執行一個函數, 並且可以塞特定的變數(或array)進去函式作為 this 使用;\n而當一個函式被帶入proxy建構式而建立起proxy物件的時候, 因為函式本身也是一種物件([見ＭＤＮ解說](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions), 所以這樣就會變成只要該函式被以任何一種形式(一般/call/apply)呼叫的時候就會觸發代理的apply\n\n基本的型態是這樣(如下)\n\n```javascript=\n\napply: function(target, thisArg, argumentsList)\n\n```\n\n這邊target 是被代理的函式, thisArg 則是當這個被代理的函數是被call或者apply所呼叫時填入的this , argumentsList則是這個函數在被呼叫時的參數群\n\n### 2. handler.new\n\n這應該也是蠻好理解的, 簡單來說就是當一個能被作為建構子使用的函數, 被以proxy代理, 這樣的話, 他在被new 產生實例的時候, 就會觸發construct;\n\n\n基本的型態是這樣(如下)\n\n```javascript=\n\ncontruct: function(target, args)\n\n```\n\n### 3. handler.defineProperty\n\n這個就有點意思了,  handler.defineProperty 是proxy 用來代理 object.defineProperty的對應handler形式, 那什麼是object.defineProperty呢?\n簡單來講, object.defineProperty就是去賦值給一個物件的prop, 或者是產生並賦值一個prop。\n這聽起來似乎很像是set 或是 object['prop']=xxx 這樣的操作, 而的確object['prop']=xxx的背後就是用object.defineProperty做成的。\n\n他正確的形式是像這樣寫的\n\n```javascript=\nObject.defineProperty(obj, prop, descriptor) \n\n```\n\n這邊的obj就是 想要去賦值prop的物件,prop就是想要去改變的property, 而descriptor則是一個物件, 裡面預設包含：\n\n```javascript=\n{\n  enumerable: false,\n  configurable: false,\n  writable: false,\n  value: 'value',\n  get:()=>{}\n  set:()=>{}\n}\n```\n\n我們平常使用obj['prop']=value, 其實等同於是：\n\n```javascript=\nObject.defineProperty(obj, prop, {\nenumerable: true,\n  configurable: true,\n  writable: true,\n  value: 'value'\n})\n```\n\n這邊enumerable的用途是決定是否放行Object.keys() 或 for...in loop 去遍歷到這個屬性\nconfigurable代表的是這次操作之後能不能再重新用Object.defineProperty去改寫這個prop的descriptor\n而writable則是決定這個prop可不可以被覆寫\nget/set 基本上就是一般理解的get/set 函數。\n\n之後有機會的話再來寫一篇心得探討Object.defineProperty的用途\n\n那讓我們回歸到正題。\n\n我們這邊講到的是用proxy 去代理物件時，利用handler 中的 defineProperty trap 去偵測defineProperty行為, 這應該就不難理解了\n基本上只要是透過Object.defineProperty所做出來的操作, 全部都會觸發這個trap\n\n所以,\n\n```javascript=\nobj['prop']=value //會觸發\n\nObject.defineProperty(obj, prop, {\nenumerable: true,\n  configurable: true, \n  writable: true,\n  value: 'value'\n})  //會觸發\n\nlet a  = Object.prop //當然也會觸發\n\n```\n\nhandler.defineProperty 的基本形式如下\n\n```javascript=\ndefineProperty: function(target, property, descriptor)\n```\n\n唯一一個比較需要注意的點是, handler.defineProperty 必須要return 一個 boolean值（用來確定prop是否被正確define）, 不然會報錯\n\n\n### 4. handler.set\n\nset 基本上就跟一般認知的set 是一樣的東西, 簡單來說就是去設定物件prop的值, 和handler.defineProperty的差別在於, 用set 沒有辦法trap到利用Object.defineProperty 所做的操作\n\n基本的set 形式為：\n\n\n```javascript=\nset: function(target, property, value, receiver) {}\n```\n\n這邊的target 就是被代理的物件\nproperty則是想要被set 值的prop\nvalue 是想要給予prop的值\nreceiver 這個比較 特別, 這個預設都是指向proxy 實例自己, 但是在某些狀況底下也可以是別的東西（這個後面再討論）\n\n\n### 4. handler.get\n\n跟handler.get 同理\n\nget 的形式是\n\n```javascript=\nget: function(target, property, receiver) {}\n```\n\n和.set一樣, 最後必須要return true\n\n\n\n## 什麼是Reflect 和 receiver?\n\n### Reflect \n\nReflect 實際上和Proxy 是互相獨立的feature，但是 Reflect 常常跟著 Proxy一起被使用\nReflect本身是一種 built-in Object (跟Math一樣), 裡面的method就跟proxy的預設 handler集一樣（名稱一樣, 但是各個函數內容稍微有點差異）\n\n#### 什麼時候會用到Reflect\n\n> 平常沒有用到proxy的時候(讓對物件的操作可以變成用refect的method來處理, 優點在於統一整體code的一致性)\n```javascript=\n'_secretDrink' in FooBar;\ndelete FooBar._secretDrink;\n```\n有了 Reflect 我們可以這樣做：\n\n```javascript=\nReflect.has(FooBar, '_secretDrink');\nReflect.deleteProperty(FooBar, '_secretDrink');\n\n```\n\n> 當有用到proxy的時候\n```javascript=\n\n const target = {\n    get foo() {\n        return this.bar;\n    },\n    bar: 3\n};\nconst handler = {\n    get(target, propertyKey, receiver) {\n        if (propertyKey === 'bar') return 2;// 這邊透過reflect.get 將可以拿到handler.get 在特定條件下丟出來的值, 但是如果是直接透過target用特定key取值, 則會直接取用原生物件(非代理)的get func, 導致最後的到的值變成3\n        console.log('Reflect.get ', Reflect.get(target, propertyKey, receiver)); // this in foo getter references Proxy instance; logs 2\n        console.log('target[propertyKey] ', target[propertyKey]); // this in foo getter references \"target\" - logs 3\n    }\n};\nconst obj = new Proxy(target, handler); //\nconsole.log(obj.bar); // 因為 obj是一個proxy實例, 所以取用.bar會觸發 handler.get\n// 2\nobj.foo;\n// Reflect.get  2\n// target[propertyKey]  3\n\n```\n\n從這個案例來看, 我們可以發現refect的用意就是要去取得\"代理\" 這一個目標, 確保可以使用到代理內部handler的get, 而不是去使用原生物件的 getter\n\n### receiver\n\n#### 什麼是receiver?\n\n一般狀況下 receiver會去指向代理本身，比方說\n\n```javascript=\nget: function(target, property, receiver) {}\n```\n\n通常來講這個receiver 就會是指向使用了這個handler的代理自己, 但是有些狀況下並不是這樣的。\n\n這邊不太好懂, 可以看這篇stackoverflow\n\nhttps://stackoverflow.com/questions/37563495/what-is-a-receiver-in-javascript\n\n```javascript=\nvar handlers = {\n        get(target,key,context) {\n            console.log(greeter === context); //true, this line added\n            return function() {\n                context.speak(key + \"!\");\n            };\n        }\n    },\n    catchall = new Proxy( {}, handlers ),\n    greeter = {\n        speak(who = \"someone\") {\n            console.log( \"hello\", who );\n        }\n    };\n\n// setup `greeter` to fall back to `catchall`\nObject.setPrototypeOf( greeter, catchall );\n\ngreeter.speak();                // hello someone 發動greeter的speak方法, 很正常的拿到了 預設的 someone\ngreeter.speak( \"world\" );       // hello world 給予 world 這個字串參數, 也很正常的拿到了 hello world\n\ngreeter.everyone();             // hello everyone!\n\n\n```\n\n這邊的greeter.everyone是一個根本不存在的方法, 但是這邊被call了\n這樣最後會跑去觸發到由setPropertyOf 繼承到的catchall(是一個proxy實例)的handler.get\n在這種狀況下 get() 的receiver 參數就不會去指向 catchall, 而是指向greeter\n\n### Proxy 實用的地方\n\n\n#### 1. 實作單向 prop trap綁定\n\n\n```javascript=\nconst inputState = {\n    id: 'username',\n    value: ''\n}\nconst input = document.querySelector('#username')\nconst handler = {\n    set: function(target, key, value) {\n        if (target.id && key === 'username') {\n            target[key] = value;\n            document.querySelector(`#${target.id}`)\n            .value = value;\n            return true\n        }\n        return false\n    }\n}\n\nconst proxy = new Proxy(inputState, handler)\nproxy.value = 'John Doe'\n\n// 因為真的很基本, 就不特別解釋了\n```\n\n#### 2. trap呼叫無效/ 不存在方法的行為並throw error\n\n````javascript\nfunction Foo() {\n  return new Proxy(this, {\n    get: function (object, property) {\n    // 用reflect.has 去判斷 object 是不是有那個key 值\n      if (Reflect.has(object, property)) {\n        return Reflect.get(object, property);\n      } else {\n      //如果方法不存在, 那就return 一個攔截用的function\n        return function methodMissing() {\n          console.log('you called ' + property + ' but it doesn\\'t exist!');\n        }\n      }\n    }\n  });\n}\n\nFoo.prototype.bar = function () {\n  console.log('you called bar. Good job!');\n}\n\nfoo = new Foo();\nfoo.bar();\n//=> you called bar. Good job!\nfoo.this_method_does_not_exist()\n// error 被攔截\n//=> you called this_method_does_not_exist but it doesn't exist\n````\n\n#### 實作 interpolation\n\n這個比較複雜，預計下週在補完","source":"_posts/ES6學習筆記-Proxy 用途_介紹_使用情境.md","raw":"---\ntitle: ES6學習筆記-Proxy 用途/介紹/使用情境\ncategories: \n- 前端技術學習心得\ntags:\n- js\n---\n\n\n\n## 什麼是Proxy\n\n> 字面上的意思就是\"代理\" [color=red]\n\n- Q1: 所以說是要代理些什麼東西啊?\n- A1: 所謂的代理, 就是在要去代理一個物件內部 的 <屬性的存取>。過程中Proxy的作用方式，\n有點像是去形成一個攔截屏障，所有要存取目標物件的程序都需要去通過這層屏障才能完成存取，所以說這層屏障的用途就在於偵測屬性的被存取\n\n**這邊是一個利用Proxy去為一個空物件撰寫getter/setter的範例**\n\n````javascript\nvar obj = new Proxy({}, {\n  get: function (target, propKey, receiver) {\n    console.log(`getting ${propKey}!`);\n    return Reflect.get(target, propKey, receiver);\n  },\n  set: function (target, propKey, value, receiver) {\n    console.log(`setting ${propKey}!`);\n    return Reflect.set(target, propKey, value, receiver);\n  }\n});\n````\n\n\n## Proxy 的基本語法\n\n````javascript\nlet p = new Proxy(target, handler);\n````\n\n- 其中 **target** 是一個目標的物件（雖然說是物件，但是它實際上也可以是array/function，甚至是另外一個proxy）\n- **handler** 也是一個物件，但是他裡面的屬性  是proxy攔截(trap)到屬性存取行為時可以使用的函數。\n- 基本上，我們在定義handler的時候並不是直接給一個有很多自訂名稱的方法的物件。\n- handler裡面可以定義的方法有下面幾種(共13種)：\n\n    - **get(target, propKey, receiver)**：攔截對象屬性的讀取，比如proxy.foo和proxy['foo']。\n    - **set(target, propKey, value, receiver)**：攔截對象屬性的設置，比如proxy.foo = v或proxy['foo'] = v，返回一個Boolean。\n    - **has(target, propKey)**：攔截propKey in proxy的操作，返回一個Boolean。\n    - **deleteProperty(target, propKey)**：攔截delete proxy[propKey]的操作，返回一個Boolean。\n    - **ownKeys(target)**：攔截Object.getOwnPropertyNames(proxy)、Object.getOwnPropertySymbols(proxy)、Object.keys(proxy)、for...in循環，返回一個數組。該方法返回目標對象所有自身的屬性的屬性名，而Object.keys()的返回結果僅包括目標對象自身的可遍歷屬性。\n    - **getOwnPropertyDescriptor(target, propKey)**：攔截Object.getOwnPropertyDescriptor(proxy, propKey)，返回屬性的描述對象。\n    - **defineProperty(target, propKey, propDesc)**：攔截Object.defineProperty(proxy, propKey, propDesc）、Object.defineProperties(proxy, propDescs)，返回一個Boolean。\n    - **preventExtensions(target)**：攔截Object.preventExtensions(proxy)，返回一個Boolean。\n    - **getPrototypeOf(target)**：攔截Object.getPrototypeOf(proxy)，返回一個對象。\n    - **isExtensible(target)**：攔截Object.isExtensible(proxy)，返回一個Boolean。\n    - **setPrototypeOf(target, proto)**：攔截Object.setPrototypeOf(proxy, proto)，返回一個Boolean。如果目標對像是函數，那麼還有兩種額外操作可以攔截。\n    - **apply(target, object, args)**：攔截Proxy 實例作為函數調用的操作，比如proxy(...args)、proxy.call(object, ...args)、proxy.apply(.. .)。\n    - **construct(target, args)**：攔截 Proxy 實例作為構造函數調用的操作，比如new proxy(...args)。\n\n> MDN上面有更完整的說明 [color=red]\n> https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy#Handler_functions\n\n\n## 先來看個 Proxy 的基本演練\n\n> source code from MDN [color=red]\n\n````javascript\nlet handler = {\n    get: function(target, name) {\n        return name in target ?\n            target[name] :\n            37;\n    },\n    set: function(target, name, value) {\n    if (name === 'age') {\n      if (!Number.isInteger(value)) {\n        throw new TypeError('The age is not an integer');\n      }\n      if (value > 200) {\n        throw new RangeError('The age seems invalid');\n      }\n    }\n\n    // The default behavior to store the value\n    target[name] = value;\n\n    // Indicate success\n    return true;\n  }\n};\n\nlet p = new Proxy({}, handler);\n````\n\n這樣寫的話，當我們去執行console.log(p.abc),也就是去取用p的屬性值，就會觸發get function\n而如果我們去執行p.abc = \"123\", 就會觸發set function，這就是最基本的handler.get和handler.set的運用\n\n## 下週繼續: 常用的handler方法與他們的使用範例\n\n### 1. handler.apply\n\n基本上大家都知道apply就跟call 是類似的東西, 他們是被用來執行一個函數, 並且可以塞特定的變數(或array)進去函式作為 this 使用;\n而當一個函式被帶入proxy建構式而建立起proxy物件的時候, 因為函式本身也是一種物件([見ＭＤＮ解說](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions), 所以這樣就會變成只要該函式被以任何一種形式(一般/call/apply)呼叫的時候就會觸發代理的apply\n\n基本的型態是這樣(如下)\n\n```javascript=\n\napply: function(target, thisArg, argumentsList)\n\n```\n\n這邊target 是被代理的函式, thisArg 則是當這個被代理的函數是被call或者apply所呼叫時填入的this , argumentsList則是這個函數在被呼叫時的參數群\n\n### 2. handler.new\n\n這應該也是蠻好理解的, 簡單來說就是當一個能被作為建構子使用的函數, 被以proxy代理, 這樣的話, 他在被new 產生實例的時候, 就會觸發construct;\n\n\n基本的型態是這樣(如下)\n\n```javascript=\n\ncontruct: function(target, args)\n\n```\n\n### 3. handler.defineProperty\n\n這個就有點意思了,  handler.defineProperty 是proxy 用來代理 object.defineProperty的對應handler形式, 那什麼是object.defineProperty呢?\n簡單來講, object.defineProperty就是去賦值給一個物件的prop, 或者是產生並賦值一個prop。\n這聽起來似乎很像是set 或是 object['prop']=xxx 這樣的操作, 而的確object['prop']=xxx的背後就是用object.defineProperty做成的。\n\n他正確的形式是像這樣寫的\n\n```javascript=\nObject.defineProperty(obj, prop, descriptor) \n\n```\n\n這邊的obj就是 想要去賦值prop的物件,prop就是想要去改變的property, 而descriptor則是一個物件, 裡面預設包含：\n\n```javascript=\n{\n  enumerable: false,\n  configurable: false,\n  writable: false,\n  value: 'value',\n  get:()=>{}\n  set:()=>{}\n}\n```\n\n我們平常使用obj['prop']=value, 其實等同於是：\n\n```javascript=\nObject.defineProperty(obj, prop, {\nenumerable: true,\n  configurable: true,\n  writable: true,\n  value: 'value'\n})\n```\n\n這邊enumerable的用途是決定是否放行Object.keys() 或 for...in loop 去遍歷到這個屬性\nconfigurable代表的是這次操作之後能不能再重新用Object.defineProperty去改寫這個prop的descriptor\n而writable則是決定這個prop可不可以被覆寫\nget/set 基本上就是一般理解的get/set 函數。\n\n之後有機會的話再來寫一篇心得探討Object.defineProperty的用途\n\n那讓我們回歸到正題。\n\n我們這邊講到的是用proxy 去代理物件時，利用handler 中的 defineProperty trap 去偵測defineProperty行為, 這應該就不難理解了\n基本上只要是透過Object.defineProperty所做出來的操作, 全部都會觸發這個trap\n\n所以,\n\n```javascript=\nobj['prop']=value //會觸發\n\nObject.defineProperty(obj, prop, {\nenumerable: true,\n  configurable: true, \n  writable: true,\n  value: 'value'\n})  //會觸發\n\nlet a  = Object.prop //當然也會觸發\n\n```\n\nhandler.defineProperty 的基本形式如下\n\n```javascript=\ndefineProperty: function(target, property, descriptor)\n```\n\n唯一一個比較需要注意的點是, handler.defineProperty 必須要return 一個 boolean值（用來確定prop是否被正確define）, 不然會報錯\n\n\n### 4. handler.set\n\nset 基本上就跟一般認知的set 是一樣的東西, 簡單來說就是去設定物件prop的值, 和handler.defineProperty的差別在於, 用set 沒有辦法trap到利用Object.defineProperty 所做的操作\n\n基本的set 形式為：\n\n\n```javascript=\nset: function(target, property, value, receiver) {}\n```\n\n這邊的target 就是被代理的物件\nproperty則是想要被set 值的prop\nvalue 是想要給予prop的值\nreceiver 這個比較 特別, 這個預設都是指向proxy 實例自己, 但是在某些狀況底下也可以是別的東西（這個後面再討論）\n\n\n### 4. handler.get\n\n跟handler.get 同理\n\nget 的形式是\n\n```javascript=\nget: function(target, property, receiver) {}\n```\n\n和.set一樣, 最後必須要return true\n\n\n\n## 什麼是Reflect 和 receiver?\n\n### Reflect \n\nReflect 實際上和Proxy 是互相獨立的feature，但是 Reflect 常常跟著 Proxy一起被使用\nReflect本身是一種 built-in Object (跟Math一樣), 裡面的method就跟proxy的預設 handler集一樣（名稱一樣, 但是各個函數內容稍微有點差異）\n\n#### 什麼時候會用到Reflect\n\n> 平常沒有用到proxy的時候(讓對物件的操作可以變成用refect的method來處理, 優點在於統一整體code的一致性)\n```javascript=\n'_secretDrink' in FooBar;\ndelete FooBar._secretDrink;\n```\n有了 Reflect 我們可以這樣做：\n\n```javascript=\nReflect.has(FooBar, '_secretDrink');\nReflect.deleteProperty(FooBar, '_secretDrink');\n\n```\n\n> 當有用到proxy的時候\n```javascript=\n\n const target = {\n    get foo() {\n        return this.bar;\n    },\n    bar: 3\n};\nconst handler = {\n    get(target, propertyKey, receiver) {\n        if (propertyKey === 'bar') return 2;// 這邊透過reflect.get 將可以拿到handler.get 在特定條件下丟出來的值, 但是如果是直接透過target用特定key取值, 則會直接取用原生物件(非代理)的get func, 導致最後的到的值變成3\n        console.log('Reflect.get ', Reflect.get(target, propertyKey, receiver)); // this in foo getter references Proxy instance; logs 2\n        console.log('target[propertyKey] ', target[propertyKey]); // this in foo getter references \"target\" - logs 3\n    }\n};\nconst obj = new Proxy(target, handler); //\nconsole.log(obj.bar); // 因為 obj是一個proxy實例, 所以取用.bar會觸發 handler.get\n// 2\nobj.foo;\n// Reflect.get  2\n// target[propertyKey]  3\n\n```\n\n從這個案例來看, 我們可以發現refect的用意就是要去取得\"代理\" 這一個目標, 確保可以使用到代理內部handler的get, 而不是去使用原生物件的 getter\n\n### receiver\n\n#### 什麼是receiver?\n\n一般狀況下 receiver會去指向代理本身，比方說\n\n```javascript=\nget: function(target, property, receiver) {}\n```\n\n通常來講這個receiver 就會是指向使用了這個handler的代理自己, 但是有些狀況下並不是這樣的。\n\n這邊不太好懂, 可以看這篇stackoverflow\n\nhttps://stackoverflow.com/questions/37563495/what-is-a-receiver-in-javascript\n\n```javascript=\nvar handlers = {\n        get(target,key,context) {\n            console.log(greeter === context); //true, this line added\n            return function() {\n                context.speak(key + \"!\");\n            };\n        }\n    },\n    catchall = new Proxy( {}, handlers ),\n    greeter = {\n        speak(who = \"someone\") {\n            console.log( \"hello\", who );\n        }\n    };\n\n// setup `greeter` to fall back to `catchall`\nObject.setPrototypeOf( greeter, catchall );\n\ngreeter.speak();                // hello someone 發動greeter的speak方法, 很正常的拿到了 預設的 someone\ngreeter.speak( \"world\" );       // hello world 給予 world 這個字串參數, 也很正常的拿到了 hello world\n\ngreeter.everyone();             // hello everyone!\n\n\n```\n\n這邊的greeter.everyone是一個根本不存在的方法, 但是這邊被call了\n這樣最後會跑去觸發到由setPropertyOf 繼承到的catchall(是一個proxy實例)的handler.get\n在這種狀況下 get() 的receiver 參數就不會去指向 catchall, 而是指向greeter\n\n### Proxy 實用的地方\n\n\n#### 1. 實作單向 prop trap綁定\n\n\n```javascript=\nconst inputState = {\n    id: 'username',\n    value: ''\n}\nconst input = document.querySelector('#username')\nconst handler = {\n    set: function(target, key, value) {\n        if (target.id && key === 'username') {\n            target[key] = value;\n            document.querySelector(`#${target.id}`)\n            .value = value;\n            return true\n        }\n        return false\n    }\n}\n\nconst proxy = new Proxy(inputState, handler)\nproxy.value = 'John Doe'\n\n// 因為真的很基本, 就不特別解釋了\n```\n\n#### 2. trap呼叫無效/ 不存在方法的行為並throw error\n\n````javascript\nfunction Foo() {\n  return new Proxy(this, {\n    get: function (object, property) {\n    // 用reflect.has 去判斷 object 是不是有那個key 值\n      if (Reflect.has(object, property)) {\n        return Reflect.get(object, property);\n      } else {\n      //如果方法不存在, 那就return 一個攔截用的function\n        return function methodMissing() {\n          console.log('you called ' + property + ' but it doesn\\'t exist!');\n        }\n      }\n    }\n  });\n}\n\nFoo.prototype.bar = function () {\n  console.log('you called bar. Good job!');\n}\n\nfoo = new Foo();\nfoo.bar();\n//=> you called bar. Good job!\nfoo.this_method_does_not_exist()\n// error 被攔截\n//=> you called this_method_does_not_exist but it doesn't exist\n````\n\n#### 實作 interpolation\n\n這個比較複雜，預計下週在補完","slug":"ES6學習筆記-Proxy 用途_介紹_使用情境","published":1,"date":"2020-11-25T17:01:45.840Z","updated":"2020-12-12T19:52:13.428Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktx1vyyt0018tay29lgdhmif","content":"<h2 id=\"什麼是Proxy\"><a href=\"#什麼是Proxy\" class=\"headerlink\" title=\"什麼是Proxy\"></a>什麼是Proxy</h2><blockquote>\n<p>字面上的意思就是”代理” [color=red]</p>\n</blockquote>\n<ul>\n<li>Q1: 所以說是要代理些什麼東西啊?</li>\n<li>A1: 所謂的代理, 就是在要去代理一個物件內部 的 &lt;屬性的存取&gt;。過程中Proxy的作用方式，<br>有點像是去形成一個攔截屏障，所有要存取目標物件的程序都需要去通過這層屏障才能完成存取，所以說這層屏障的用途就在於偵測屬性的被存取</li>\n</ul>\n<p><strong>這邊是一個利用Proxy去為一個空物件撰寫getter/setter的範例</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, &#123;</span><br><span class=\"line\">  get: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target, propKey, receiver</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`getting <span class=\"subst\">$&#123;propKey&#125;</span>!`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.get(target, propKey, receiver);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  set: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target, propKey, value, receiver</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`setting <span class=\"subst\">$&#123;propKey&#125;</span>!`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.set(target, propKey, value, receiver);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"Proxy-的基本語法\"><a href=\"#Proxy-的基本語法\" class=\"headerlink\" title=\"Proxy 的基本語法\"></a>Proxy 的基本語法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>其中 <strong>target</strong> 是一個目標的物件（雖然說是物件，但是它實際上也可以是array/function，甚至是另外一個proxy）</p>\n</li>\n<li><p><strong>handler</strong> 也是一個物件，但是他裡面的屬性  是proxy攔截(trap)到屬性存取行為時可以使用的函數。</p>\n</li>\n<li><p>基本上，我們在定義handler的時候並不是直接給一個有很多自訂名稱的方法的物件。</p>\n</li>\n<li><p>handler裡面可以定義的方法有下面幾種(共13種)：</p>\n<ul>\n<li>**get(target, propKey, receiver)**：攔截對象屬性的讀取，比如proxy.foo和proxy[‘foo’]。</li>\n<li>**set(target, propKey, value, receiver)**：攔截對象屬性的設置，比如proxy.foo = v或proxy[‘foo’] = v，返回一個Boolean。</li>\n<li>**has(target, propKey)**：攔截propKey in proxy的操作，返回一個Boolean。</li>\n<li>**deleteProperty(target, propKey)**：攔截delete proxy[propKey]的操作，返回一個Boolean。</li>\n<li>**ownKeys(target)**：攔截Object.getOwnPropertyNames(proxy)、Object.getOwnPropertySymbols(proxy)、Object.keys(proxy)、for…in循環，返回一個數組。該方法返回目標對象所有自身的屬性的屬性名，而Object.keys()的返回結果僅包括目標對象自身的可遍歷屬性。</li>\n<li>**getOwnPropertyDescriptor(target, propKey)**：攔截Object.getOwnPropertyDescriptor(proxy, propKey)，返回屬性的描述對象。</li>\n<li>**defineProperty(target, propKey, propDesc)**：攔截Object.defineProperty(proxy, propKey, propDesc）、Object.defineProperties(proxy, propDescs)，返回一個Boolean。</li>\n<li>**preventExtensions(target)**：攔截Object.preventExtensions(proxy)，返回一個Boolean。</li>\n<li>**getPrototypeOf(target)**：攔截Object.getPrototypeOf(proxy)，返回一個對象。</li>\n<li>**isExtensible(target)**：攔截Object.isExtensible(proxy)，返回一個Boolean。</li>\n<li>**setPrototypeOf(target, proto)**：攔截Object.setPrototypeOf(proxy, proto)，返回一個Boolean。如果目標對像是函數，那麼還有兩種額外操作可以攔截。</li>\n<li>**apply(target, object, args)**：攔截Proxy 實例作為函數調用的操作，比如proxy(…args)、proxy.call(object, …args)、proxy.apply(.. .)。</li>\n<li>**construct(target, args)**：攔截 Proxy 實例作為構造函數調用的操作，比如new proxy(…args)。</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>MDN上面有更完整的說明 [color=red]<br><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy#Handler_functions\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy#Handler_functions</a></p>\n</blockquote>\n<h2 id=\"先來看個-Proxy-的基本演練\"><a href=\"#先來看個-Proxy-的基本演練\" class=\"headerlink\" title=\"先來看個 Proxy 的基本演練\"></a>先來看個 Proxy 的基本演練</h2><blockquote>\n<p>source code from MDN [color=red]</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> handler = &#123;</span><br><span class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, name</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name <span class=\"keyword\">in</span> target ?</span><br><span class=\"line\">            target[name] :</span><br><span class=\"line\">            <span class=\"number\">37</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, name, value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (name === <span class=\"string\">&#x27;age&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"built_in\">Number</span>.isInteger(value)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">&#x27;The age is not an integer&#x27;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (value &gt; <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">RangeError</span>(<span class=\"string\">&#x27;The age seems invalid&#x27;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// The default behavior to store the value</span></span><br><span class=\"line\">    target[name] = value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Indicate success</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, handler);</span><br></pre></td></tr></table></figure>\n\n<p>這樣寫的話，當我們去執行console.log(p.abc),也就是去取用p的屬性值，就會觸發get function<br>而如果我們去執行p.abc = “123”, 就會觸發set function，這就是最基本的handler.get和handler.set的運用</p>\n<h2 id=\"下週繼續-常用的handler方法與他們的使用範例\"><a href=\"#下週繼續-常用的handler方法與他們的使用範例\" class=\"headerlink\" title=\"下週繼續: 常用的handler方法與他們的使用範例\"></a>下週繼續: 常用的handler方法與他們的使用範例</h2><h3 id=\"1-handler-apply\"><a href=\"#1-handler-apply\" class=\"headerlink\" title=\"1. handler.apply\"></a>1. handler.apply</h3><p>基本上大家都知道apply就跟call 是類似的東西, 他們是被用來執行一個函數, 並且可以塞特定的變數(或array)進去函式作為 this 使用;<br>而當一個函式被帶入proxy建構式而建立起proxy物件的時候, 因為函式本身也是一種物件(<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions\">見ＭＤＮ解說</a>, 所以這樣就會變成只要該函式被以任何一種形式(一般/call/apply)呼叫的時候就會觸發代理的apply</p>\n<p>基本的型態是這樣(如下)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">apply: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, thisArg, argumentsList</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br></pre></td></tr></table></figure>\n\n<p>這邊target 是被代理的函式, thisArg 則是當這個被代理的函數是被call或者apply所呼叫時填入的this , argumentsList則是這個函數在被呼叫時的參數群</p>\n<h3 id=\"2-handler-new\"><a href=\"#2-handler-new\" class=\"headerlink\" title=\"2. handler.new\"></a>2. handler.new</h3><p>這應該也是蠻好理解的, 簡單來說就是當一個能被作為建構子使用的函數, 被以proxy代理, 這樣的話, 他在被new 產生實例的時候, 就會觸發construct;</p>\n<p>基本的型態是這樣(如下)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">contruct: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-handler-defineProperty\"><a href=\"#3-handler-defineProperty\" class=\"headerlink\" title=\"3. handler.defineProperty\"></a>3. handler.defineProperty</h3><p>這個就有點意思了,  handler.defineProperty 是proxy 用來代理 object.defineProperty的對應handler形式, 那什麼是object.defineProperty呢?<br>簡單來講, object.defineProperty就是去賦值給一個物件的prop, 或者是產生並賦值一個prop。<br>這聽起來似乎很像是set 或是 object[‘prop’]=xxx 這樣的操作, 而的確object[‘prop’]=xxx的背後就是用object.defineProperty做成的。</p>\n<p>他正確的形式是像這樣寫的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, prop, descriptor) </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>這邊的obj就是 想要去賦值prop的物件,prop就是想要去改變的property, 而descriptor則是一個物件, 裡面預設包含：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  enumerable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  configurable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  writable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  value: <span class=\"string\">&#x27;value&#x27;</span>,</span><br><span class=\"line\">  get:<span class=\"function\">()=&gt;</span>&#123;&#125;</span><br><span class=\"line\">  set:<span class=\"function\">()=&gt;</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我們平常使用obj[‘prop’]=value, 其實等同於是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, prop, &#123;</span><br><span class=\"line\">enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  configurable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  writable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  value: <span class=\"string\">&#x27;value&#x27;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>這邊enumerable的用途是決定是否放行Object.keys() 或 for…in loop 去遍歷到這個屬性<br>configurable代表的是這次操作之後能不能再重新用Object.defineProperty去改寫這個prop的descriptor<br>而writable則是決定這個prop可不可以被覆寫<br>get/set 基本上就是一般理解的get/set 函數。</p>\n<p>之後有機會的話再來寫一篇心得探討Object.defineProperty的用途</p>\n<p>那讓我們回歸到正題。</p>\n<p>我們這邊講到的是用proxy 去代理物件時，利用handler 中的 defineProperty trap 去偵測defineProperty行為, 這應該就不難理解了<br>基本上只要是透過Object.defineProperty所做出來的操作, 全部都會觸發這個trap</p>\n<p>所以,</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj[<span class=\"string\">&#x27;prop&#x27;</span>]=value <span class=\"comment\">//會觸發</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, prop, &#123;</span><br><span class=\"line\">enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  configurable: <span class=\"literal\">true</span>, </span><br><span class=\"line\">  writable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  value: <span class=\"string\">&#x27;value&#x27;</span></span><br><span class=\"line\">&#125;)  <span class=\"comment\">//會觸發</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a  = <span class=\"built_in\">Object</span>.prop <span class=\"comment\">//當然也會觸發</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>handler.defineProperty 的基本形式如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">defineProperty: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, property, descriptor</span>)</span></span><br></pre></td></tr></table></figure>\n\n<p>唯一一個比較需要注意的點是, handler.defineProperty 必須要return 一個 boolean值（用來確定prop是否被正確define）, 不然會報錯</p>\n<h3 id=\"4-handler-set\"><a href=\"#4-handler-set\" class=\"headerlink\" title=\"4. handler.set\"></a>4. handler.set</h3><p>set 基本上就跟一般認知的set 是一樣的東西, 簡單來說就是去設定物件prop的值, 和handler.defineProperty的差別在於, 用set 沒有辦法trap到利用Object.defineProperty 所做的操作</p>\n<p>基本的set 形式為：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, property, value, receiver</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>這邊的target 就是被代理的物件<br>property則是想要被set 值的prop<br>value 是想要給予prop的值<br>receiver 這個比較 特別, 這個預設都是指向proxy 實例自己, 但是在某些狀況底下也可以是別的東西（這個後面再討論）</p>\n<h3 id=\"4-handler-get\"><a href=\"#4-handler-get\" class=\"headerlink\" title=\"4. handler.get\"></a>4. handler.get</h3><p>跟handler.get 同理</p>\n<p>get 的形式是</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, property, receiver</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>和.set一樣, 最後必須要return true</p>\n<h2 id=\"什麼是Reflect-和-receiver\"><a href=\"#什麼是Reflect-和-receiver\" class=\"headerlink\" title=\"什麼是Reflect 和 receiver?\"></a>什麼是Reflect 和 receiver?</h2><h3 id=\"Reflect\"><a href=\"#Reflect\" class=\"headerlink\" title=\"Reflect\"></a>Reflect</h3><p>Reflect 實際上和Proxy 是互相獨立的feature，但是 Reflect 常常跟著 Proxy一起被使用<br>Reflect本身是一種 built-in Object (跟Math一樣), 裡面的method就跟proxy的預設 handler集一樣（名稱一樣, 但是各個函數內容稍微有點差異）</p>\n<h4 id=\"什麼時候會用到Reflect\"><a href=\"#什麼時候會用到Reflect\" class=\"headerlink\" title=\"什麼時候會用到Reflect\"></a>什麼時候會用到Reflect</h4><blockquote>\n<p>平常沒有用到proxy的時候(讓對物件的操作可以變成用refect的method來處理, 優點在於統一整體code的一致性)</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;_secretDrink&#x27;</span> <span class=\"keyword\">in</span> FooBar;</span><br><span class=\"line\"><span class=\"keyword\">delete</span> FooBar._secretDrink;</span><br></pre></td></tr></table></figure>\n<p>有了 Reflect 我們可以這樣做：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Reflect</span>.has(FooBar, <span class=\"string\">&#x27;_secretDrink&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">Reflect</span>.deleteProperty(FooBar, <span class=\"string\">&#x27;_secretDrink&#x27;</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>當有用到proxy的時候</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">const</span> target = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> <span class=\"title\">foo</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.bar;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    bar: <span class=\"number\">3</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> handler = &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\">target, propertyKey, receiver</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (propertyKey === <span class=\"string\">&#x27;bar&#x27;</span>) <span class=\"keyword\">return</span> <span class=\"number\">2</span>;<span class=\"comment\">// 這邊透過reflect.get 將可以拿到handler.get 在特定條件下丟出來的值, 但是如果是直接透過target用特定key取值, 則會直接取用原生物件(非代理)的get func, 導致最後的到的值變成3</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Reflect.get &#x27;</span>, <span class=\"built_in\">Reflect</span>.get(target, propertyKey, receiver)); <span class=\"comment\">// this in foo getter references Proxy instance; logs 2</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;target[propertyKey] &#x27;</span>, target[propertyKey]); <span class=\"comment\">// this in foo getter references &quot;target&quot; - logs 3</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler); <span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.bar); <span class=\"comment\">// 因為 obj是一個proxy實例, 所以取用.bar會觸發 handler.get</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\">obj.foo;</span><br><span class=\"line\"><span class=\"comment\">// Reflect.get  2</span></span><br><span class=\"line\"><span class=\"comment\">// target[propertyKey]  3</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>從這個案例來看, 我們可以發現refect的用意就是要去取得”代理” 這一個目標, 確保可以使用到代理內部handler的get, 而不是去使用原生物件的 getter</p>\n<h3 id=\"receiver\"><a href=\"#receiver\" class=\"headerlink\" title=\"receiver\"></a>receiver</h3><h4 id=\"什麼是receiver\"><a href=\"#什麼是receiver\" class=\"headerlink\" title=\"什麼是receiver?\"></a>什麼是receiver?</h4><p>一般狀況下 receiver會去指向代理本身，比方說</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, property, receiver</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通常來講這個receiver 就會是指向使用了這個handler的代理自己, 但是有些狀況下並不是這樣的。</p>\n<p>這邊不太好懂, 可以看這篇stackoverflow</p>\n<p><a href=\"https://stackoverflow.com/questions/37563495/what-is-a-receiver-in-javascript\">https://stackoverflow.com/questions/37563495/what-is-a-receiver-in-javascript</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> handlers = &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\">target,key,context</span>)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(greeter === context); <span class=\"comment\">//true, this line added</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                context.speak(key + <span class=\"string\">&quot;!&quot;</span>);</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    catchall = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>( &#123;&#125;, handlers ),</span><br><span class=\"line\">    greeter = &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">speak</span>(<span class=\"params\">who = <span class=\"string\">&quot;someone&quot;</span></span>)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log( <span class=\"string\">&quot;hello&quot;</span>, who );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// setup `greeter` to fall back to `catchall`</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf( greeter, catchall );</span><br><span class=\"line\"></span><br><span class=\"line\">greeter.speak();                <span class=\"comment\">// hello someone 發動greeter的speak方法, 很正常的拿到了 預設的 someone</span></span><br><span class=\"line\">greeter.speak( <span class=\"string\">&quot;world&quot;</span> );       <span class=\"comment\">// hello world 給予 world 這個字串參數, 也很正常的拿到了 hello world</span></span><br><span class=\"line\"></span><br><span class=\"line\">greeter.everyone();             <span class=\"comment\">// hello everyone!</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>這邊的greeter.everyone是一個根本不存在的方法, 但是這邊被call了<br>這樣最後會跑去觸發到由setPropertyOf 繼承到的catchall(是一個proxy實例)的handler.get<br>在這種狀況下 get() 的receiver 參數就不會去指向 catchall, 而是指向greeter</p>\n<h3 id=\"Proxy-實用的地方\"><a href=\"#Proxy-實用的地方\" class=\"headerlink\" title=\"Proxy 實用的地方\"></a>Proxy 實用的地方</h3><h4 id=\"1-實作單向-prop-trap綁定\"><a href=\"#1-實作單向-prop-trap綁定\" class=\"headerlink\" title=\"1. 實作單向 prop trap綁定\"></a>1. 實作單向 prop trap綁定</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> inputState = &#123;</span><br><span class=\"line\">    id: <span class=\"string\">&#x27;username&#x27;</span>,</span><br><span class=\"line\">    value: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> input = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#username&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> handler = &#123;</span><br><span class=\"line\">    set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, key, value</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target.id &amp;&amp; key === <span class=\"string\">&#x27;username&#x27;</span>) &#123;</span><br><span class=\"line\">            target[key] = value;</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">`#<span class=\"subst\">$&#123;target.id&#125;</span>`</span>)</span><br><span class=\"line\">            .value = value;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(inputState, handler)</span><br><span class=\"line\">proxy.value = <span class=\"string\">&#x27;John Doe&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 因為真的很基本, 就不特別解釋了</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-trap呼叫無效-不存在方法的行為並throw-error\"><a href=\"#2-trap呼叫無效-不存在方法的行為並throw-error\" class=\"headerlink\" title=\"2. trap呼叫無效/ 不存在方法的行為並throw error\"></a>2. trap呼叫無效/ 不存在方法的行為並throw error</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(<span class=\"built_in\">this</span>, &#123;</span><br><span class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">object, property</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 用reflect.has 去判斷 object 是不是有那個key 值</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">Reflect</span>.has(object, property)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.get(object, property);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//如果方法不存在, 那就return 一個攔截用的function</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">methodMissing</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;you called &#x27;</span> + property + <span class=\"string\">&#x27; but it doesn\\&#x27;t exist!&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Foo.prototype.bar = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;you called bar. Good job!&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo = <span class=\"keyword\">new</span> Foo();</span><br><span class=\"line\">foo.bar();</span><br><span class=\"line\"><span class=\"comment\">//=&gt; you called bar. Good job!</span></span><br><span class=\"line\">foo.this_method_does_not_exist()</span><br><span class=\"line\"><span class=\"comment\">// error 被攔截</span></span><br><span class=\"line\"><span class=\"comment\">//=&gt; you called this_method_does_not_exist but it doesn&#x27;t exist</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"實作-interpolation\"><a href=\"#實作-interpolation\" class=\"headerlink\" title=\"實作 interpolation\"></a>實作 interpolation</h4><p>這個比較複雜，預計下週在補完</p>\n","site":{"data":{"css/variables":"","languages":{"zh-TW":{"title":{"archive":"時間線","category":"分類","tag":"標籤","schedule":"時間表"},"menu":{"home":"首頁","archives":"時間線","categories":"分類","tags":"標籤","about":"關於","search":"搜尋","schedule":"時間表","sitemap":"網站地圖","commonweal":"公益 404"},"sidebar":{"overview":"本站概要","toc":"文章目錄"},"post":{"posted":"發表於","edited":"更新於","created":"創建時間","modified":"修改時間","edit":"編輯","in":"分類於","read_more":"閱讀全文","untitled":"未命名","sticky":"置頂文","views":"閱讀次數","related_posts":"相關文章","copyright":{"author":"作者","link":"文章連結","post_author":"Written by","post_link":"This article originally appeared on","license_title":"版權聲明","license_content":"本網誌所有文章除特別聲明外，均採用 %s 許可協議。轉載請註明出處！"}},"footer":{"powered":"","total_views":"總瀏覽次數","total_visitors":"訪客總數"},"counter":{"tag_cloud":{"zero":"目前還沒有任何標籤","one":"目前共有 1 個標籤","other":"目前共有 %d 個標籤"},"categories":{"zero":"目前還沒有任何分類","one":"目前共有 1 個分類","other":"目前共有 %d 個分類"},"archive_posts":{"zero":"目前還沒有任何文章。","one":"目前共有 1 篇文章。","other":"目前共有 %d 篇文章。"}},"state":{"posts":"文章","tags":"標籤","categories":"分類"},"search":{"placeholder":"搜尋...","empty":"We didn't find any results for the search: %s","hits_time":"%s results found in %s ms","hits":"%s results found"},"cheers":{"um":"嗯..","ok":"還不錯","nice":"好","good":"很好","great":"非常好","excellent":"棒棒Der"},"keep_on":"繼續努力。","symbol":{"comma":"，","period":"。","colon":"："},"reward":{"donate":"捐贈","wechatpay":"微信支付","alipay":"支付寶","paypal":"貝寶","bitcoin":"比特幣"},"follow_me":{"welcome":"歡迎關注我的其它站點"},"accessibility":{"nav_toggle":"切換導航欄","prev_page":"上一頁","next_page":"下一頁"},"symbols_count_time":{"count":"文章字數","count_total":"總字數","time":"所需閱讀時間","time_total":"所需總閱讀時間","time_minutes":"分鐘"}}},"css/mixins":"","css/styles":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","template/head":"<script src=\"//js/tool/canvas-fx-base.js\"></script>\n\n<script src=\"//js/ripple-logo.js\"></script>\n<script src=\"//js/silk-wave.js\"></script>\n\n<style>\n  @font-face {\n  font-family: \"Roboto\";\n  src: url(//font/Roboto.ttf) format(\"truetype\");\n}\n</style>","css/styl-plugin/grid-post-layout/main":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","css/styl-plugin/grid-post-layout/mixins":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n","css/styl-plugin/grid-post-layout/variables":""}},"excerpt":"","more":"<h2 id=\"什麼是Proxy\"><a href=\"#什麼是Proxy\" class=\"headerlink\" title=\"什麼是Proxy\"></a>什麼是Proxy</h2><blockquote>\n<p>字面上的意思就是”代理” [color=red]</p>\n</blockquote>\n<ul>\n<li>Q1: 所以說是要代理些什麼東西啊?</li>\n<li>A1: 所謂的代理, 就是在要去代理一個物件內部 的 &lt;屬性的存取&gt;。過程中Proxy的作用方式，<br>有點像是去形成一個攔截屏障，所有要存取目標物件的程序都需要去通過這層屏障才能完成存取，所以說這層屏障的用途就在於偵測屬性的被存取</li>\n</ul>\n<p><strong>這邊是一個利用Proxy去為一個空物件撰寫getter/setter的範例</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, &#123;</span><br><span class=\"line\">  get: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target, propKey, receiver</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`getting <span class=\"subst\">$&#123;propKey&#125;</span>!`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.get(target, propKey, receiver);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  set: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target, propKey, value, receiver</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`setting <span class=\"subst\">$&#123;propKey&#125;</span>!`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.set(target, propKey, value, receiver);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"Proxy-的基本語法\"><a href=\"#Proxy-的基本語法\" class=\"headerlink\" title=\"Proxy 的基本語法\"></a>Proxy 的基本語法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>其中 <strong>target</strong> 是一個目標的物件（雖然說是物件，但是它實際上也可以是array/function，甚至是另外一個proxy）</p>\n</li>\n<li><p><strong>handler</strong> 也是一個物件，但是他裡面的屬性  是proxy攔截(trap)到屬性存取行為時可以使用的函數。</p>\n</li>\n<li><p>基本上，我們在定義handler的時候並不是直接給一個有很多自訂名稱的方法的物件。</p>\n</li>\n<li><p>handler裡面可以定義的方法有下面幾種(共13種)：</p>\n<ul>\n<li>**get(target, propKey, receiver)**：攔截對象屬性的讀取，比如proxy.foo和proxy[‘foo’]。</li>\n<li>**set(target, propKey, value, receiver)**：攔截對象屬性的設置，比如proxy.foo = v或proxy[‘foo’] = v，返回一個Boolean。</li>\n<li>**has(target, propKey)**：攔截propKey in proxy的操作，返回一個Boolean。</li>\n<li>**deleteProperty(target, propKey)**：攔截delete proxy[propKey]的操作，返回一個Boolean。</li>\n<li>**ownKeys(target)**：攔截Object.getOwnPropertyNames(proxy)、Object.getOwnPropertySymbols(proxy)、Object.keys(proxy)、for…in循環，返回一個數組。該方法返回目標對象所有自身的屬性的屬性名，而Object.keys()的返回結果僅包括目標對象自身的可遍歷屬性。</li>\n<li>**getOwnPropertyDescriptor(target, propKey)**：攔截Object.getOwnPropertyDescriptor(proxy, propKey)，返回屬性的描述對象。</li>\n<li>**defineProperty(target, propKey, propDesc)**：攔截Object.defineProperty(proxy, propKey, propDesc）、Object.defineProperties(proxy, propDescs)，返回一個Boolean。</li>\n<li>**preventExtensions(target)**：攔截Object.preventExtensions(proxy)，返回一個Boolean。</li>\n<li>**getPrototypeOf(target)**：攔截Object.getPrototypeOf(proxy)，返回一個對象。</li>\n<li>**isExtensible(target)**：攔截Object.isExtensible(proxy)，返回一個Boolean。</li>\n<li>**setPrototypeOf(target, proto)**：攔截Object.setPrototypeOf(proxy, proto)，返回一個Boolean。如果目標對像是函數，那麼還有兩種額外操作可以攔截。</li>\n<li>**apply(target, object, args)**：攔截Proxy 實例作為函數調用的操作，比如proxy(…args)、proxy.call(object, …args)、proxy.apply(.. .)。</li>\n<li>**construct(target, args)**：攔截 Proxy 實例作為構造函數調用的操作，比如new proxy(…args)。</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>MDN上面有更完整的說明 [color=red]<br><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy#Handler_functions\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy#Handler_functions</a></p>\n</blockquote>\n<h2 id=\"先來看個-Proxy-的基本演練\"><a href=\"#先來看個-Proxy-的基本演練\" class=\"headerlink\" title=\"先來看個 Proxy 的基本演練\"></a>先來看個 Proxy 的基本演練</h2><blockquote>\n<p>source code from MDN [color=red]</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> handler = &#123;</span><br><span class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, name</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name <span class=\"keyword\">in</span> target ?</span><br><span class=\"line\">            target[name] :</span><br><span class=\"line\">            <span class=\"number\">37</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, name, value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (name === <span class=\"string\">&#x27;age&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"built_in\">Number</span>.isInteger(value)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">&#x27;The age is not an integer&#x27;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (value &gt; <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">RangeError</span>(<span class=\"string\">&#x27;The age seems invalid&#x27;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// The default behavior to store the value</span></span><br><span class=\"line\">    target[name] = value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Indicate success</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, handler);</span><br></pre></td></tr></table></figure>\n\n<p>這樣寫的話，當我們去執行console.log(p.abc),也就是去取用p的屬性值，就會觸發get function<br>而如果我們去執行p.abc = “123”, 就會觸發set function，這就是最基本的handler.get和handler.set的運用</p>\n<h2 id=\"下週繼續-常用的handler方法與他們的使用範例\"><a href=\"#下週繼續-常用的handler方法與他們的使用範例\" class=\"headerlink\" title=\"下週繼續: 常用的handler方法與他們的使用範例\"></a>下週繼續: 常用的handler方法與他們的使用範例</h2><h3 id=\"1-handler-apply\"><a href=\"#1-handler-apply\" class=\"headerlink\" title=\"1. handler.apply\"></a>1. handler.apply</h3><p>基本上大家都知道apply就跟call 是類似的東西, 他們是被用來執行一個函數, 並且可以塞特定的變數(或array)進去函式作為 this 使用;<br>而當一個函式被帶入proxy建構式而建立起proxy物件的時候, 因為函式本身也是一種物件(<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions\">見ＭＤＮ解說</a>, 所以這樣就會變成只要該函式被以任何一種形式(一般/call/apply)呼叫的時候就會觸發代理的apply</p>\n<p>基本的型態是這樣(如下)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">apply: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, thisArg, argumentsList</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br></pre></td></tr></table></figure>\n\n<p>這邊target 是被代理的函式, thisArg 則是當這個被代理的函數是被call或者apply所呼叫時填入的this , argumentsList則是這個函數在被呼叫時的參數群</p>\n<h3 id=\"2-handler-new\"><a href=\"#2-handler-new\" class=\"headerlink\" title=\"2. handler.new\"></a>2. handler.new</h3><p>這應該也是蠻好理解的, 簡單來說就是當一個能被作為建構子使用的函數, 被以proxy代理, 這樣的話, 他在被new 產生實例的時候, 就會觸發construct;</p>\n<p>基本的型態是這樣(如下)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">contruct: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-handler-defineProperty\"><a href=\"#3-handler-defineProperty\" class=\"headerlink\" title=\"3. handler.defineProperty\"></a>3. handler.defineProperty</h3><p>這個就有點意思了,  handler.defineProperty 是proxy 用來代理 object.defineProperty的對應handler形式, 那什麼是object.defineProperty呢?<br>簡單來講, object.defineProperty就是去賦值給一個物件的prop, 或者是產生並賦值一個prop。<br>這聽起來似乎很像是set 或是 object[‘prop’]=xxx 這樣的操作, 而的確object[‘prop’]=xxx的背後就是用object.defineProperty做成的。</p>\n<p>他正確的形式是像這樣寫的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, prop, descriptor) </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>這邊的obj就是 想要去賦值prop的物件,prop就是想要去改變的property, 而descriptor則是一個物件, 裡面預設包含：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  enumerable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  configurable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  writable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  value: <span class=\"string\">&#x27;value&#x27;</span>,</span><br><span class=\"line\">  get:<span class=\"function\">()=&gt;</span>&#123;&#125;</span><br><span class=\"line\">  set:<span class=\"function\">()=&gt;</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我們平常使用obj[‘prop’]=value, 其實等同於是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, prop, &#123;</span><br><span class=\"line\">enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  configurable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  writable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  value: <span class=\"string\">&#x27;value&#x27;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>這邊enumerable的用途是決定是否放行Object.keys() 或 for…in loop 去遍歷到這個屬性<br>configurable代表的是這次操作之後能不能再重新用Object.defineProperty去改寫這個prop的descriptor<br>而writable則是決定這個prop可不可以被覆寫<br>get/set 基本上就是一般理解的get/set 函數。</p>\n<p>之後有機會的話再來寫一篇心得探討Object.defineProperty的用途</p>\n<p>那讓我們回歸到正題。</p>\n<p>我們這邊講到的是用proxy 去代理物件時，利用handler 中的 defineProperty trap 去偵測defineProperty行為, 這應該就不難理解了<br>基本上只要是透過Object.defineProperty所做出來的操作, 全部都會觸發這個trap</p>\n<p>所以,</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj[<span class=\"string\">&#x27;prop&#x27;</span>]=value <span class=\"comment\">//會觸發</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, prop, &#123;</span><br><span class=\"line\">enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  configurable: <span class=\"literal\">true</span>, </span><br><span class=\"line\">  writable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  value: <span class=\"string\">&#x27;value&#x27;</span></span><br><span class=\"line\">&#125;)  <span class=\"comment\">//會觸發</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a  = <span class=\"built_in\">Object</span>.prop <span class=\"comment\">//當然也會觸發</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>handler.defineProperty 的基本形式如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">defineProperty: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, property, descriptor</span>)</span></span><br></pre></td></tr></table></figure>\n\n<p>唯一一個比較需要注意的點是, handler.defineProperty 必須要return 一個 boolean值（用來確定prop是否被正確define）, 不然會報錯</p>\n<h3 id=\"4-handler-set\"><a href=\"#4-handler-set\" class=\"headerlink\" title=\"4. handler.set\"></a>4. handler.set</h3><p>set 基本上就跟一般認知的set 是一樣的東西, 簡單來說就是去設定物件prop的值, 和handler.defineProperty的差別在於, 用set 沒有辦法trap到利用Object.defineProperty 所做的操作</p>\n<p>基本的set 形式為：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, property, value, receiver</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>這邊的target 就是被代理的物件<br>property則是想要被set 值的prop<br>value 是想要給予prop的值<br>receiver 這個比較 特別, 這個預設都是指向proxy 實例自己, 但是在某些狀況底下也可以是別的東西（這個後面再討論）</p>\n<h3 id=\"4-handler-get\"><a href=\"#4-handler-get\" class=\"headerlink\" title=\"4. handler.get\"></a>4. handler.get</h3><p>跟handler.get 同理</p>\n<p>get 的形式是</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, property, receiver</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>和.set一樣, 最後必須要return true</p>\n<h2 id=\"什麼是Reflect-和-receiver\"><a href=\"#什麼是Reflect-和-receiver\" class=\"headerlink\" title=\"什麼是Reflect 和 receiver?\"></a>什麼是Reflect 和 receiver?</h2><h3 id=\"Reflect\"><a href=\"#Reflect\" class=\"headerlink\" title=\"Reflect\"></a>Reflect</h3><p>Reflect 實際上和Proxy 是互相獨立的feature，但是 Reflect 常常跟著 Proxy一起被使用<br>Reflect本身是一種 built-in Object (跟Math一樣), 裡面的method就跟proxy的預設 handler集一樣（名稱一樣, 但是各個函數內容稍微有點差異）</p>\n<h4 id=\"什麼時候會用到Reflect\"><a href=\"#什麼時候會用到Reflect\" class=\"headerlink\" title=\"什麼時候會用到Reflect\"></a>什麼時候會用到Reflect</h4><blockquote>\n<p>平常沒有用到proxy的時候(讓對物件的操作可以變成用refect的method來處理, 優點在於統一整體code的一致性)</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;_secretDrink&#x27;</span> <span class=\"keyword\">in</span> FooBar;</span><br><span class=\"line\"><span class=\"keyword\">delete</span> FooBar._secretDrink;</span><br></pre></td></tr></table></figure>\n<p>有了 Reflect 我們可以這樣做：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Reflect</span>.has(FooBar, <span class=\"string\">&#x27;_secretDrink&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">Reflect</span>.deleteProperty(FooBar, <span class=\"string\">&#x27;_secretDrink&#x27;</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>當有用到proxy的時候</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">const</span> target = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> <span class=\"title\">foo</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.bar;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    bar: <span class=\"number\">3</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> handler = &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\">target, propertyKey, receiver</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (propertyKey === <span class=\"string\">&#x27;bar&#x27;</span>) <span class=\"keyword\">return</span> <span class=\"number\">2</span>;<span class=\"comment\">// 這邊透過reflect.get 將可以拿到handler.get 在特定條件下丟出來的值, 但是如果是直接透過target用特定key取值, 則會直接取用原生物件(非代理)的get func, 導致最後的到的值變成3</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Reflect.get &#x27;</span>, <span class=\"built_in\">Reflect</span>.get(target, propertyKey, receiver)); <span class=\"comment\">// this in foo getter references Proxy instance; logs 2</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;target[propertyKey] &#x27;</span>, target[propertyKey]); <span class=\"comment\">// this in foo getter references &quot;target&quot; - logs 3</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler); <span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.bar); <span class=\"comment\">// 因為 obj是一個proxy實例, 所以取用.bar會觸發 handler.get</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\">obj.foo;</span><br><span class=\"line\"><span class=\"comment\">// Reflect.get  2</span></span><br><span class=\"line\"><span class=\"comment\">// target[propertyKey]  3</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>從這個案例來看, 我們可以發現refect的用意就是要去取得”代理” 這一個目標, 確保可以使用到代理內部handler的get, 而不是去使用原生物件的 getter</p>\n<h3 id=\"receiver\"><a href=\"#receiver\" class=\"headerlink\" title=\"receiver\"></a>receiver</h3><h4 id=\"什麼是receiver\"><a href=\"#什麼是receiver\" class=\"headerlink\" title=\"什麼是receiver?\"></a>什麼是receiver?</h4><p>一般狀況下 receiver會去指向代理本身，比方說</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, property, receiver</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通常來講這個receiver 就會是指向使用了這個handler的代理自己, 但是有些狀況下並不是這樣的。</p>\n<p>這邊不太好懂, 可以看這篇stackoverflow</p>\n<p><a href=\"https://stackoverflow.com/questions/37563495/what-is-a-receiver-in-javascript\">https://stackoverflow.com/questions/37563495/what-is-a-receiver-in-javascript</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> handlers = &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\">target,key,context</span>)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(greeter === context); <span class=\"comment\">//true, this line added</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                context.speak(key + <span class=\"string\">&quot;!&quot;</span>);</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    catchall = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>( &#123;&#125;, handlers ),</span><br><span class=\"line\">    greeter = &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">speak</span>(<span class=\"params\">who = <span class=\"string\">&quot;someone&quot;</span></span>)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log( <span class=\"string\">&quot;hello&quot;</span>, who );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// setup `greeter` to fall back to `catchall`</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf( greeter, catchall );</span><br><span class=\"line\"></span><br><span class=\"line\">greeter.speak();                <span class=\"comment\">// hello someone 發動greeter的speak方法, 很正常的拿到了 預設的 someone</span></span><br><span class=\"line\">greeter.speak( <span class=\"string\">&quot;world&quot;</span> );       <span class=\"comment\">// hello world 給予 world 這個字串參數, 也很正常的拿到了 hello world</span></span><br><span class=\"line\"></span><br><span class=\"line\">greeter.everyone();             <span class=\"comment\">// hello everyone!</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>這邊的greeter.everyone是一個根本不存在的方法, 但是這邊被call了<br>這樣最後會跑去觸發到由setPropertyOf 繼承到的catchall(是一個proxy實例)的handler.get<br>在這種狀況下 get() 的receiver 參數就不會去指向 catchall, 而是指向greeter</p>\n<h3 id=\"Proxy-實用的地方\"><a href=\"#Proxy-實用的地方\" class=\"headerlink\" title=\"Proxy 實用的地方\"></a>Proxy 實用的地方</h3><h4 id=\"1-實作單向-prop-trap綁定\"><a href=\"#1-實作單向-prop-trap綁定\" class=\"headerlink\" title=\"1. 實作單向 prop trap綁定\"></a>1. 實作單向 prop trap綁定</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> inputState = &#123;</span><br><span class=\"line\">    id: <span class=\"string\">&#x27;username&#x27;</span>,</span><br><span class=\"line\">    value: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> input = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#username&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> handler = &#123;</span><br><span class=\"line\">    set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, key, value</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target.id &amp;&amp; key === <span class=\"string\">&#x27;username&#x27;</span>) &#123;</span><br><span class=\"line\">            target[key] = value;</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">`#<span class=\"subst\">$&#123;target.id&#125;</span>`</span>)</span><br><span class=\"line\">            .value = value;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(inputState, handler)</span><br><span class=\"line\">proxy.value = <span class=\"string\">&#x27;John Doe&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 因為真的很基本, 就不特別解釋了</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-trap呼叫無效-不存在方法的行為並throw-error\"><a href=\"#2-trap呼叫無效-不存在方法的行為並throw-error\" class=\"headerlink\" title=\"2. trap呼叫無效/ 不存在方法的行為並throw error\"></a>2. trap呼叫無效/ 不存在方法的行為並throw error</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(<span class=\"built_in\">this</span>, &#123;</span><br><span class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">object, property</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 用reflect.has 去判斷 object 是不是有那個key 值</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">Reflect</span>.has(object, property)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.get(object, property);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//如果方法不存在, 那就return 一個攔截用的function</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">methodMissing</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;you called &#x27;</span> + property + <span class=\"string\">&#x27; but it doesn\\&#x27;t exist!&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Foo.prototype.bar = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;you called bar. Good job!&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo = <span class=\"keyword\">new</span> Foo();</span><br><span class=\"line\">foo.bar();</span><br><span class=\"line\"><span class=\"comment\">//=&gt; you called bar. Good job!</span></span><br><span class=\"line\">foo.this_method_does_not_exist()</span><br><span class=\"line\"><span class=\"comment\">// error 被攔截</span></span><br><span class=\"line\"><span class=\"comment\">//=&gt; you called this_method_does_not_exist but it doesn&#x27;t exist</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"實作-interpolation\"><a href=\"#實作-interpolation\" class=\"headerlink\" title=\"實作 interpolation\"></a>實作 interpolation</h4><p>這個比較複雜，預計下週在補完</p>\n"},{"title":"Proxy 的功用/實用的點","_content":"\n\n## 1. 實作雙/單向 prop trap綁定  \n\n````javascript\nconst input = document.querySelector('#username')\nconst handler = {\n    set: function(target, key, value) {\n        if (target.id && key === 'username') {\n            target[key] = value;\n            document.querySelector(`#${target.id}`)\n            .value = value;\n            return true\n        }\n        return false\n    }\n}\n\nconst proxy = new Proxy(inputState, handler)\nproxy.value = 'John Doe'\n````\n\n\n\n## 2. trap呼叫無效/ 不存在方法的行為並throw error\n````javascript\nfunction Foo() {\n  return new Proxy(this, {\n    get: function (object, property) {\n      if (Reflect.has(object, property)) {\n        return Reflect.get(object, property);\n      } else {\n        return function methodMissing() {\n          console.log('you called ' + property + ' but it doesn\\'t exist!');\n        }\n      }\n    }\n  });\n}\n\nFoo.prototype.bar = function () {\n  console.log('you called bar. Good job!');\n}\n\nfoo = new Foo();\nfoo.bar();\n//=> you called bar. Good job!\nfoo.this_method_does_not_exist()\n//=> you called this_method_does_not_exist but it doesn't exist\n````","source":"_posts/Proxy 的功用_實用的點.md","raw":"---\ntitle: Proxy 的功用/實用的點\ncategories: \n- 前端技術學習心得\ntags:\n- js\n---\n\n\n## 1. 實作雙/單向 prop trap綁定  \n\n````javascript\nconst input = document.querySelector('#username')\nconst handler = {\n    set: function(target, key, value) {\n        if (target.id && key === 'username') {\n            target[key] = value;\n            document.querySelector(`#${target.id}`)\n            .value = value;\n            return true\n        }\n        return false\n    }\n}\n\nconst proxy = new Proxy(inputState, handler)\nproxy.value = 'John Doe'\n````\n\n\n\n## 2. trap呼叫無效/ 不存在方法的行為並throw error\n````javascript\nfunction Foo() {\n  return new Proxy(this, {\n    get: function (object, property) {\n      if (Reflect.has(object, property)) {\n        return Reflect.get(object, property);\n      } else {\n        return function methodMissing() {\n          console.log('you called ' + property + ' but it doesn\\'t exist!');\n        }\n      }\n    }\n  });\n}\n\nFoo.prototype.bar = function () {\n  console.log('you called bar. Good job!');\n}\n\nfoo = new Foo();\nfoo.bar();\n//=> you called bar. Good job!\nfoo.this_method_does_not_exist()\n//=> you called this_method_does_not_exist but it doesn't exist\n````","slug":"Proxy 的功用_實用的點","published":1,"date":"2020-11-25T17:01:45.842Z","updated":"2020-12-12T19:52:16.235Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktx1vyyu001btay260pb8w2e","content":"<h2 id=\"1-實作雙-單向-prop-trap綁定\"><a href=\"#1-實作雙-單向-prop-trap綁定\" class=\"headerlink\" title=\"1. 實作雙/單向 prop trap綁定\"></a>1. 實作雙/單向 prop trap綁定</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> input = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#username&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> handler = &#123;</span><br><span class=\"line\">    set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, key, value</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target.id &amp;&amp; key === <span class=\"string\">&#x27;username&#x27;</span>) &#123;</span><br><span class=\"line\">            target[key] = value;</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">`#<span class=\"subst\">$&#123;target.id&#125;</span>`</span>)</span><br><span class=\"line\">            .value = value;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(inputState, handler)</span><br><span class=\"line\">proxy.value = <span class=\"string\">&#x27;John Doe&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-trap呼叫無效-不存在方法的行為並throw-error\"><a href=\"#2-trap呼叫無效-不存在方法的行為並throw-error\" class=\"headerlink\" title=\"2. trap呼叫無效/ 不存在方法的行為並throw error\"></a>2. trap呼叫無效/ 不存在方法的行為並throw error</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(<span class=\"built_in\">this</span>, &#123;</span><br><span class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">object, property</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">Reflect</span>.has(object, property)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.get(object, property);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">methodMissing</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;you called &#x27;</span> + property + <span class=\"string\">&#x27; but it doesn\\&#x27;t exist!&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Foo.prototype.bar = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;you called bar. Good job!&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo = <span class=\"keyword\">new</span> Foo();</span><br><span class=\"line\">foo.bar();</span><br><span class=\"line\"><span class=\"comment\">//=&gt; you called bar. Good job!</span></span><br><span class=\"line\">foo.this_method_does_not_exist()</span><br><span class=\"line\"><span class=\"comment\">//=&gt; you called this_method_does_not_exist but it doesn&#x27;t exist</span></span><br></pre></td></tr></table></figure>","site":{"data":{"css/variables":"","languages":{"zh-TW":{"title":{"archive":"時間線","category":"分類","tag":"標籤","schedule":"時間表"},"menu":{"home":"首頁","archives":"時間線","categories":"分類","tags":"標籤","about":"關於","search":"搜尋","schedule":"時間表","sitemap":"網站地圖","commonweal":"公益 404"},"sidebar":{"overview":"本站概要","toc":"文章目錄"},"post":{"posted":"發表於","edited":"更新於","created":"創建時間","modified":"修改時間","edit":"編輯","in":"分類於","read_more":"閱讀全文","untitled":"未命名","sticky":"置頂文","views":"閱讀次數","related_posts":"相關文章","copyright":{"author":"作者","link":"文章連結","post_author":"Written by","post_link":"This article originally appeared on","license_title":"版權聲明","license_content":"本網誌所有文章除特別聲明外，均採用 %s 許可協議。轉載請註明出處！"}},"footer":{"powered":"","total_views":"總瀏覽次數","total_visitors":"訪客總數"},"counter":{"tag_cloud":{"zero":"目前還沒有任何標籤","one":"目前共有 1 個標籤","other":"目前共有 %d 個標籤"},"categories":{"zero":"目前還沒有任何分類","one":"目前共有 1 個分類","other":"目前共有 %d 個分類"},"archive_posts":{"zero":"目前還沒有任何文章。","one":"目前共有 1 篇文章。","other":"目前共有 %d 篇文章。"}},"state":{"posts":"文章","tags":"標籤","categories":"分類"},"search":{"placeholder":"搜尋...","empty":"We didn't find any results for the search: %s","hits_time":"%s results found in %s ms","hits":"%s results found"},"cheers":{"um":"嗯..","ok":"還不錯","nice":"好","good":"很好","great":"非常好","excellent":"棒棒Der"},"keep_on":"繼續努力。","symbol":{"comma":"，","period":"。","colon":"："},"reward":{"donate":"捐贈","wechatpay":"微信支付","alipay":"支付寶","paypal":"貝寶","bitcoin":"比特幣"},"follow_me":{"welcome":"歡迎關注我的其它站點"},"accessibility":{"nav_toggle":"切換導航欄","prev_page":"上一頁","next_page":"下一頁"},"symbols_count_time":{"count":"文章字數","count_total":"總字數","time":"所需閱讀時間","time_total":"所需總閱讀時間","time_minutes":"分鐘"}}},"css/mixins":"","css/styles":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","template/head":"<script src=\"//js/tool/canvas-fx-base.js\"></script>\n\n<script src=\"//js/ripple-logo.js\"></script>\n<script src=\"//js/silk-wave.js\"></script>\n\n<style>\n  @font-face {\n  font-family: \"Roboto\";\n  src: url(//font/Roboto.ttf) format(\"truetype\");\n}\n</style>","css/styl-plugin/grid-post-layout/main":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","css/styl-plugin/grid-post-layout/mixins":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n","css/styl-plugin/grid-post-layout/variables":""}},"excerpt":"","more":"<h2 id=\"1-實作雙-單向-prop-trap綁定\"><a href=\"#1-實作雙-單向-prop-trap綁定\" class=\"headerlink\" title=\"1. 實作雙/單向 prop trap綁定\"></a>1. 實作雙/單向 prop trap綁定</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> input = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#username&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> handler = &#123;</span><br><span class=\"line\">    set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, key, value</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target.id &amp;&amp; key === <span class=\"string\">&#x27;username&#x27;</span>) &#123;</span><br><span class=\"line\">            target[key] = value;</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">`#<span class=\"subst\">$&#123;target.id&#125;</span>`</span>)</span><br><span class=\"line\">            .value = value;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(inputState, handler)</span><br><span class=\"line\">proxy.value = <span class=\"string\">&#x27;John Doe&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-trap呼叫無效-不存在方法的行為並throw-error\"><a href=\"#2-trap呼叫無效-不存在方法的行為並throw-error\" class=\"headerlink\" title=\"2. trap呼叫無效/ 不存在方法的行為並throw error\"></a>2. trap呼叫無效/ 不存在方法的行為並throw error</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(<span class=\"built_in\">this</span>, &#123;</span><br><span class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">object, property</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">Reflect</span>.has(object, property)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.get(object, property);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">methodMissing</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;you called &#x27;</span> + property + <span class=\"string\">&#x27; but it doesn\\&#x27;t exist!&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Foo.prototype.bar = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;you called bar. Good job!&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo = <span class=\"keyword\">new</span> Foo();</span><br><span class=\"line\">foo.bar();</span><br><span class=\"line\"><span class=\"comment\">//=&gt; you called bar. Good job!</span></span><br><span class=\"line\">foo.this_method_does_not_exist()</span><br><span class=\"line\"><span class=\"comment\">//=&gt; you called this_method_does_not_exist but it doesn&#x27;t exist</span></span><br></pre></td></tr></table></figure>"},{"title":"TYPESCRIPT學習筆記-ep1","_content":"\n\n\n\n# TYPESCRIPT的基礎常識\n\n\n## 基礎型別上與es5/es6 較有差異的部分\n1. 數字\nts的數字另外有支援兩種格式：2進位＆8進位;除此之外,ts 的number同樣都是浮點數\n```typescript=\nlet decLiteral: number = 6;\nlet hexLiteral: number = 0xf00d;\nlet binaryLiteral: number = 0b1010;\nlet octalLiteral: number = 0o744;\n```\n\n2. 陣列\n```typescript=\n//原則上ts的變數都要寫型別，而如果一個變數的型別是array\n//且這個array的子項型別都是number，則可寫成如下\nlet list: number[] = [1, 2, 3];\n```\n\n```typescript=\n//承上，或如下利用泛型\nlet list: number[] = [1, 2, 3];\n```\n\n3. 元組(陣列型別專用)\n\n- 最基本的範例：\n```typescript=\n// Declare a tuple type\nlet x: [string, number];\n// Initialize it\nx = ['hello', 10]; // OK\n// Initialize it incorrectly\nx = [10, 'hello']; // Error\n```\n\n- 為陣列編寫型別的好處\n\n```typescript=\nlet x: [string, number];\nx = ['hello', 10]; // OK\nconsole.log(x[0].substr(1)); // OK 因為x[0]在元組中定義為字串，可以使用substr方法\nconsole.log(x[1].substr(1)); // Error, 因為10屬於在元組中定義為數字，不能使用substr方法，所以會報錯\n```\n\n- 當偵測到陣列子項位置在元組定義範圍外的子項時，會用元組定義的型別的聯集來定義之\n\n```typescript=\nx[3] = 'world'; // OK, 字符串可以赋值给(string | number)类型\n\nconsole.log(x[5].toString()); // OK, 'string' 和 'number' 都有 toString\n\nx[6] = true; // Error, 布尔不是(string | number)类型\n```\n\n4. 列舉（Enumerate）\n\n- 能夠把變數的範圍限制在某些限制下進行存取並賦予其定義\n\n- 舉個實用的例子，團隊裡的後端在 Server 處理資料發生錯誤時，定義了一些代碼，來告訴前端說，這個代碼代表什麼錯誤，那個又是什麼：\n\n```javascript=\nconst handleWrongStatus = (status: string): void => {\n  switch (status) {\n    case 'A':\n      // Do something...\n      break;\n    case 'B':\n      // Do something...\n      break;\n    case 'C':\n      // Do something...\n      break;\n    default:\n      throw (new Error('No have wrong code!'));\n  }\n};\n```\n\n然而像上面這樣寫的話，缺點會在於各個case之間沒有語意化，你很難去釐清Case A 實際上是什麼, Case B又是什麼，在這種狀況下就可以去使用enumerate\n\nenumerate的寫法跟js的物件接近，如下\n\n```typescript=\nenum requestStatusCodes {\n  error,\n  success,\n}\n```\n\n正常來講，如果不幫上述這個requestStatusCodes 的裡面每一個子項去做定義，TS的編譯器會直接把error的編號定為0, success的編號定為1（流水號）\n\n這樣我們就可以透過requestStatusCodes.error拿到0這個列舉值, requestStatusCodes.success拿到1這個列舉值;或者透過requestStatusCodes[0]拿到error 這個列舉子項\n\n這樣的話。上述的case switch就可以這樣改良\n\n```typescript=\nenum requestWrongCodes {\n  missingParameter = 'A',\n  wrongParameterType = 'B',\n  invalidToken = 'C',\n}\n\nconst handleWrongStatus = (status: string): void => {\n  //es6解構賦值的寫法\n  const { missingParameter, wrongParameterType, invalidToken, } = requestWrongCodes;\n  switch (status) {\n    case missingParameter:\n      // Do something...\n      break;\n    case wrongParameterType:\n      // Do something...\n      break;\n    case invalidToken:\n      // Do something...\n      break;\n    default:\n      throw (new Error('No have wrong code!'));\n  }\n};\n```\n5.any/void 任意值與虛空值\n\n變數的型別如果不確定的話可以直接帶any，而函數的return type如果為空的話則可以直接帶:void\n\n```typescript=\nlet notSure: any = 4;\nnotSure = \"maybe a string instead\"; //這樣不會報錯\nnotSure = false; //這樣也不會報錯\n```\n\n```typescript=\nfunction warnUser(): void {\n    console.log(\"This is my warning message\");\n}\n```\n\n6.undefined/null 未定義與空值\n\n> TypeScript里，undefined和null两者各自有自己的类型分别叫做undefined和null。 和void相似，它们的本身的类型用处不是很大\n\n```typscript=\n// Not much else we can assign to these variables!\nlet u: undefined = undefined; \nlet n: null = null;\n```\n> 在默認狀況下 undefined和null 這兩種value也可以被賦予給任何型別作為其值\n```typescript=\nlet u: number = undefined; \nlet n: syting = null;\n```\n\n- --strictNullChecks是什麼？\n>簡單來說就是typescript 的tsconfig.json裡面的一個設定，只要做了這個設定以後，undefined和null 這兩種value就再也不會被默認為任何型別的一種預設值。也許在某處你想嘗試一個字串或空或未定義，可以使用聯合類型 ```ex: string|number|null```\n\n```json\n{\n    \"compileOnSave\": false,\n    \"compilerOptions\": {\n        ...\n        \"strictNullChecks\": true,\n        \"skipLibCheck\": true,\n        ...\n    }\n}\n```\n\n7. Never 這個型別是用來幹嘛用的?\n\nnever類型表示的是那些根本就不會有值的類型，例如一個只會return new Error('string') 的function； \n要注意值為never型別不接受null作為其值。\n\n```typescript=\nfunction error(message: string): never {\n    throw new Error(message);\n}\n```\n\n```typescript=\nlet something: void = null;\nlet nothing: never = null; // Error: Type 'null' is not assignable to type 'never'\n```\n\n8. 類型斷言\n\n類型斷言好比其它語言裡的類型轉換，但是不進行特殊的數據檢查和解構。\n.jsx檔案裡面只能用as的方式做類型斷言\n\n```typescript\nlet someValue: any = \"this is a string\";\n\nlet strLength: number = (<string>someValue).length;\n```\n\n```typescript\nlet someValue: any = \"this is a string\";\n\nlet strLength: number = (someValue as string).length;\n```","source":"_posts/TYPESCRIPT學習筆記-ep1.md","raw":"---\ntitle: TYPESCRIPT學習筆記-ep1\ncategories: \n- 前端技術學習心得\ntags:\n- ts\n---\n\n\n\n\n# TYPESCRIPT的基礎常識\n\n\n## 基礎型別上與es5/es6 較有差異的部分\n1. 數字\nts的數字另外有支援兩種格式：2進位＆8進位;除此之外,ts 的number同樣都是浮點數\n```typescript=\nlet decLiteral: number = 6;\nlet hexLiteral: number = 0xf00d;\nlet binaryLiteral: number = 0b1010;\nlet octalLiteral: number = 0o744;\n```\n\n2. 陣列\n```typescript=\n//原則上ts的變數都要寫型別，而如果一個變數的型別是array\n//且這個array的子項型別都是number，則可寫成如下\nlet list: number[] = [1, 2, 3];\n```\n\n```typescript=\n//承上，或如下利用泛型\nlet list: number[] = [1, 2, 3];\n```\n\n3. 元組(陣列型別專用)\n\n- 最基本的範例：\n```typescript=\n// Declare a tuple type\nlet x: [string, number];\n// Initialize it\nx = ['hello', 10]; // OK\n// Initialize it incorrectly\nx = [10, 'hello']; // Error\n```\n\n- 為陣列編寫型別的好處\n\n```typescript=\nlet x: [string, number];\nx = ['hello', 10]; // OK\nconsole.log(x[0].substr(1)); // OK 因為x[0]在元組中定義為字串，可以使用substr方法\nconsole.log(x[1].substr(1)); // Error, 因為10屬於在元組中定義為數字，不能使用substr方法，所以會報錯\n```\n\n- 當偵測到陣列子項位置在元組定義範圍外的子項時，會用元組定義的型別的聯集來定義之\n\n```typescript=\nx[3] = 'world'; // OK, 字符串可以赋值给(string | number)类型\n\nconsole.log(x[5].toString()); // OK, 'string' 和 'number' 都有 toString\n\nx[6] = true; // Error, 布尔不是(string | number)类型\n```\n\n4. 列舉（Enumerate）\n\n- 能夠把變數的範圍限制在某些限制下進行存取並賦予其定義\n\n- 舉個實用的例子，團隊裡的後端在 Server 處理資料發生錯誤時，定義了一些代碼，來告訴前端說，這個代碼代表什麼錯誤，那個又是什麼：\n\n```javascript=\nconst handleWrongStatus = (status: string): void => {\n  switch (status) {\n    case 'A':\n      // Do something...\n      break;\n    case 'B':\n      // Do something...\n      break;\n    case 'C':\n      // Do something...\n      break;\n    default:\n      throw (new Error('No have wrong code!'));\n  }\n};\n```\n\n然而像上面這樣寫的話，缺點會在於各個case之間沒有語意化，你很難去釐清Case A 實際上是什麼, Case B又是什麼，在這種狀況下就可以去使用enumerate\n\nenumerate的寫法跟js的物件接近，如下\n\n```typescript=\nenum requestStatusCodes {\n  error,\n  success,\n}\n```\n\n正常來講，如果不幫上述這個requestStatusCodes 的裡面每一個子項去做定義，TS的編譯器會直接把error的編號定為0, success的編號定為1（流水號）\n\n這樣我們就可以透過requestStatusCodes.error拿到0這個列舉值, requestStatusCodes.success拿到1這個列舉值;或者透過requestStatusCodes[0]拿到error 這個列舉子項\n\n這樣的話。上述的case switch就可以這樣改良\n\n```typescript=\nenum requestWrongCodes {\n  missingParameter = 'A',\n  wrongParameterType = 'B',\n  invalidToken = 'C',\n}\n\nconst handleWrongStatus = (status: string): void => {\n  //es6解構賦值的寫法\n  const { missingParameter, wrongParameterType, invalidToken, } = requestWrongCodes;\n  switch (status) {\n    case missingParameter:\n      // Do something...\n      break;\n    case wrongParameterType:\n      // Do something...\n      break;\n    case invalidToken:\n      // Do something...\n      break;\n    default:\n      throw (new Error('No have wrong code!'));\n  }\n};\n```\n5.any/void 任意值與虛空值\n\n變數的型別如果不確定的話可以直接帶any，而函數的return type如果為空的話則可以直接帶:void\n\n```typescript=\nlet notSure: any = 4;\nnotSure = \"maybe a string instead\"; //這樣不會報錯\nnotSure = false; //這樣也不會報錯\n```\n\n```typescript=\nfunction warnUser(): void {\n    console.log(\"This is my warning message\");\n}\n```\n\n6.undefined/null 未定義與空值\n\n> TypeScript里，undefined和null两者各自有自己的类型分别叫做undefined和null。 和void相似，它们的本身的类型用处不是很大\n\n```typscript=\n// Not much else we can assign to these variables!\nlet u: undefined = undefined; \nlet n: null = null;\n```\n> 在默認狀況下 undefined和null 這兩種value也可以被賦予給任何型別作為其值\n```typescript=\nlet u: number = undefined; \nlet n: syting = null;\n```\n\n- --strictNullChecks是什麼？\n>簡單來說就是typescript 的tsconfig.json裡面的一個設定，只要做了這個設定以後，undefined和null 這兩種value就再也不會被默認為任何型別的一種預設值。也許在某處你想嘗試一個字串或空或未定義，可以使用聯合類型 ```ex: string|number|null```\n\n```json\n{\n    \"compileOnSave\": false,\n    \"compilerOptions\": {\n        ...\n        \"strictNullChecks\": true,\n        \"skipLibCheck\": true,\n        ...\n    }\n}\n```\n\n7. Never 這個型別是用來幹嘛用的?\n\nnever類型表示的是那些根本就不會有值的類型，例如一個只會return new Error('string') 的function； \n要注意值為never型別不接受null作為其值。\n\n```typescript=\nfunction error(message: string): never {\n    throw new Error(message);\n}\n```\n\n```typescript=\nlet something: void = null;\nlet nothing: never = null; // Error: Type 'null' is not assignable to type 'never'\n```\n\n8. 類型斷言\n\n類型斷言好比其它語言裡的類型轉換，但是不進行特殊的數據檢查和解構。\n.jsx檔案裡面只能用as的方式做類型斷言\n\n```typescript\nlet someValue: any = \"this is a string\";\n\nlet strLength: number = (<string>someValue).length;\n```\n\n```typescript\nlet someValue: any = \"this is a string\";\n\nlet strLength: number = (someValue as string).length;\n```","slug":"TYPESCRIPT學習筆記-ep1","published":1,"date":"2020-11-25T17:01:45.844Z","updated":"2020-12-12T19:52:51.902Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktx1vyyw001ftay2hehk75aa","content":"<h1 id=\"TYPESCRIPT的基礎常識\"><a href=\"#TYPESCRIPT的基礎常識\" class=\"headerlink\" title=\"TYPESCRIPT的基礎常識\"></a>TYPESCRIPT的基礎常識</h1><h2 id=\"基礎型別上與es5-es6-較有差異的部分\"><a href=\"#基礎型別上與es5-es6-較有差異的部分\" class=\"headerlink\" title=\"基礎型別上與es5/es6 較有差異的部分\"></a>基礎型別上與es5/es6 較有差異的部分</h2><ol>\n<li><p>數字<br>ts的數字另外有支援兩種格式：2進位＆8進位;除此之外,ts 的number同樣都是浮點數</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> decLiteral: <span class=\"built_in\">number</span> = <span class=\"number\">6</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> hexLiteral: <span class=\"built_in\">number</span> = <span class=\"number\">0xf00d</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> binaryLiteral: <span class=\"built_in\">number</span> = <span class=\"number\">0b1010</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> octalLiteral: <span class=\"built_in\">number</span> = <span class=\"number\">0o744</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>陣列</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//原則上ts的變數都要寫型別，而如果一個變數的型別是array</span></span><br><span class=\"line\"><span class=\"comment\">//且這個array的子項型別都是number，則可寫成如下</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> list: <span class=\"built_in\">number</span>[] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//承上，或如下利用泛型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> list: <span class=\"built_in\">number</span>[] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>元組(陣列型別專用)</li>\n</ol>\n<ul>\n<li><p>最基本的範例：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Declare a tuple type</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> x: [<span class=\"built_in\">string</span>, <span class=\"built_in\">number</span>];</span><br><span class=\"line\"><span class=\"comment\">// Initialize it</span></span><br><span class=\"line\">x = [<span class=\"string\">&#x27;hello&#x27;</span>, <span class=\"number\">10</span>]; <span class=\"comment\">// OK</span></span><br><span class=\"line\"><span class=\"comment\">// Initialize it incorrectly</span></span><br><span class=\"line\">x = [<span class=\"number\">10</span>, <span class=\"string\">&#x27;hello&#x27;</span>]; <span class=\"comment\">// Error</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>為陣列編寫型別的好處</p>\n</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x: [<span class=\"built_in\">string</span>, <span class=\"built_in\">number</span>];</span><br><span class=\"line\">x = [<span class=\"string\">&#x27;hello&#x27;</span>, <span class=\"number\">10</span>]; <span class=\"comment\">// OK</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x[<span class=\"number\">0</span>].substr(<span class=\"number\">1</span>)); <span class=\"comment\">// OK 因為x[0]在元組中定義為字串，可以使用substr方法</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x[<span class=\"number\">1</span>].substr(<span class=\"number\">1</span>)); <span class=\"comment\">// Error, 因為10屬於在元組中定義為數字，不能使用substr方法，所以會報錯</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>當偵測到陣列子項位置在元組定義範圍外的子項時，會用元組定義的型別的聯集來定義之</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x[<span class=\"number\">3</span>] = <span class=\"string\">&#x27;world&#x27;</span>; <span class=\"comment\">// OK, 字符串可以赋值给(string | number)类型</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x[<span class=\"number\">5</span>].toString()); <span class=\"comment\">// OK, &#x27;string&#x27; 和 &#x27;number&#x27; 都有 toString</span></span><br><span class=\"line\"></span><br><span class=\"line\">x[<span class=\"number\">6</span>] = <span class=\"literal\">true</span>; <span class=\"comment\">// Error, 布尔不是(string | number)类型</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>列舉（Enumerate）</li>\n</ol>\n<ul>\n<li><p>能夠把變數的範圍限制在某些限制下進行存取並賦予其定義</p>\n</li>\n<li><p>舉個實用的例子，團隊裡的後端在 Server 處理資料發生錯誤時，定義了一些代碼，來告訴前端說，這個代碼代表什麼錯誤，那個又是什麼：</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> handleWrongStatus = (status: string): <span class=\"function\"><span class=\"params\">void</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (status) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;A&#x27;</span>:</span><br><span class=\"line\">      <span class=\"comment\">// Do something...</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;B&#x27;</span>:</span><br><span class=\"line\">      <span class=\"comment\">// Do something...</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;C&#x27;</span>:</span><br><span class=\"line\">      <span class=\"comment\">// Do something...</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;No have wrong code!&#x27;</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>然而像上面這樣寫的話，缺點會在於各個case之間沒有語意化，你很難去釐清Case A 實際上是什麼, Case B又是什麼，在這種狀況下就可以去使用enumerate</p>\n<p>enumerate的寫法跟js的物件接近，如下</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">enum</span> requestStatusCodes &#123;</span><br><span class=\"line\">  error,</span><br><span class=\"line\">  success,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>正常來講，如果不幫上述這個requestStatusCodes 的裡面每一個子項去做定義，TS的編譯器會直接把error的編號定為0, success的編號定為1（流水號）</p>\n<p>這樣我們就可以透過requestStatusCodes.error拿到0這個列舉值, requestStatusCodes.success拿到1這個列舉值;或者透過requestStatusCodes[0]拿到error 這個列舉子項</p>\n<p>這樣的話。上述的case switch就可以這樣改良</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">enum</span> requestWrongCodes &#123;</span><br><span class=\"line\">  missingParameter = <span class=\"string\">&#x27;A&#x27;</span>,</span><br><span class=\"line\">  wrongParameterType = <span class=\"string\">&#x27;B&#x27;</span>,</span><br><span class=\"line\">  invalidToken = <span class=\"string\">&#x27;C&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> handleWrongStatus = (status: <span class=\"built_in\">string</span>): <span class=\"function\"><span class=\"params\">void</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//es6解構賦值的寫法</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; missingParameter, wrongParameterType, invalidToken, &#125; = requestWrongCodes;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (status) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> missingParameter:</span><br><span class=\"line\">      <span class=\"comment\">// Do something...</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> wrongParameterType:</span><br><span class=\"line\">      <span class=\"comment\">// Do something...</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> invalidToken:</span><br><span class=\"line\">      <span class=\"comment\">// Do something...</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;No have wrong code!&#x27;</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>5.any/void 任意值與虛空值</p>\n<p>變數的型別如果不確定的話可以直接帶any，而函數的return type如果為空的話則可以直接帶:void</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> notSure: <span class=\"built_in\">any</span> = <span class=\"number\">4</span>;</span><br><span class=\"line\">notSure = <span class=\"string\">&quot;maybe a string instead&quot;</span>; <span class=\"comment\">//這樣不會報錯</span></span><br><span class=\"line\">notSure = <span class=\"literal\">false</span>; <span class=\"comment\">//這樣也不會報錯</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">warnUser</span>(<span class=\"params\"></span>): <span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;This is my warning message&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>6.undefined/null 未定義與空值</p>\n<blockquote>\n<p>TypeScript里，undefined和null两者各自有自己的类型分别叫做undefined和null。 和void相似，它们的本身的类型用处不是很大</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; Not much else we can assign to these variables!</span><br><span class=\"line\">let u: undefined &#x3D; undefined; </span><br><span class=\"line\">let n: null &#x3D; null;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在默認狀況下 undefined和null 這兩種value也可以被賦予給任何型別作為其值</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> u: <span class=\"built_in\">number</span> = <span class=\"literal\">undefined</span>; </span><br><span class=\"line\"><span class=\"keyword\">let</span> n: syting = <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>–strictNullChecks是什麼？<blockquote>\n<p>簡單來說就是typescript 的tsconfig.json裡面的一個設定，只要做了這個設定以後，undefined和null 這兩種value就再也不會被默認為任何型別的一種預設值。也許在某處你想嘗試一個字串或空或未定義，可以使用聯合類型 <code>ex: string|number|null</code></p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;compileOnSave&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        &quot;strictNullChecks&quot;: true,</span><br><span class=\"line\">        &quot;skipLibCheck&quot;: true,</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li>Never 這個型別是用來幹嘛用的?</li>\n</ol>\n<p>never類型表示的是那些根本就不會有值的類型，例如一個只會return new Error(‘string’) 的function；<br>要注意值為never型別不接受null作為其值。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">error</span>(<span class=\"params\">message: <span class=\"built_in\">string</span></span>): <span class=\"title\">never</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(message);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> something: <span class=\"built_in\">void</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> nothing: <span class=\"built_in\">never</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// Error: Type &#x27;null&#x27; is not assignable to type &#x27;never&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li>類型斷言</li>\n</ol>\n<p>類型斷言好比其它語言裡的類型轉換，但是不進行特殊的數據檢查和解構。<br>.jsx檔案裡面只能用as的方式做類型斷言</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> someValue: <span class=\"built_in\">any</span> = <span class=\"string\">&quot;this is a string&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> strLength: <span class=\"built_in\">number</span> = (&lt;<span class=\"built_in\">string</span>&gt;someValue).length;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> someValue: <span class=\"built_in\">any</span> = <span class=\"string\">&quot;this is a string&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> strLength: <span class=\"built_in\">number</span> = (someValue <span class=\"keyword\">as</span> <span class=\"built_in\">string</span>).length;</span><br></pre></td></tr></table></figure>","site":{"data":{"css/variables":"","languages":{"zh-TW":{"title":{"archive":"時間線","category":"分類","tag":"標籤","schedule":"時間表"},"menu":{"home":"首頁","archives":"時間線","categories":"分類","tags":"標籤","about":"關於","search":"搜尋","schedule":"時間表","sitemap":"網站地圖","commonweal":"公益 404"},"sidebar":{"overview":"本站概要","toc":"文章目錄"},"post":{"posted":"發表於","edited":"更新於","created":"創建時間","modified":"修改時間","edit":"編輯","in":"分類於","read_more":"閱讀全文","untitled":"未命名","sticky":"置頂文","views":"閱讀次數","related_posts":"相關文章","copyright":{"author":"作者","link":"文章連結","post_author":"Written by","post_link":"This article originally appeared on","license_title":"版權聲明","license_content":"本網誌所有文章除特別聲明外，均採用 %s 許可協議。轉載請註明出處！"}},"footer":{"powered":"","total_views":"總瀏覽次數","total_visitors":"訪客總數"},"counter":{"tag_cloud":{"zero":"目前還沒有任何標籤","one":"目前共有 1 個標籤","other":"目前共有 %d 個標籤"},"categories":{"zero":"目前還沒有任何分類","one":"目前共有 1 個分類","other":"目前共有 %d 個分類"},"archive_posts":{"zero":"目前還沒有任何文章。","one":"目前共有 1 篇文章。","other":"目前共有 %d 篇文章。"}},"state":{"posts":"文章","tags":"標籤","categories":"分類"},"search":{"placeholder":"搜尋...","empty":"We didn't find any results for the search: %s","hits_time":"%s results found in %s ms","hits":"%s results found"},"cheers":{"um":"嗯..","ok":"還不錯","nice":"好","good":"很好","great":"非常好","excellent":"棒棒Der"},"keep_on":"繼續努力。","symbol":{"comma":"，","period":"。","colon":"："},"reward":{"donate":"捐贈","wechatpay":"微信支付","alipay":"支付寶","paypal":"貝寶","bitcoin":"比特幣"},"follow_me":{"welcome":"歡迎關注我的其它站點"},"accessibility":{"nav_toggle":"切換導航欄","prev_page":"上一頁","next_page":"下一頁"},"symbols_count_time":{"count":"文章字數","count_total":"總字數","time":"所需閱讀時間","time_total":"所需總閱讀時間","time_minutes":"分鐘"}}},"css/mixins":"","css/styles":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","template/head":"<script src=\"//js/tool/canvas-fx-base.js\"></script>\n\n<script src=\"//js/ripple-logo.js\"></script>\n<script src=\"//js/silk-wave.js\"></script>\n\n<style>\n  @font-face {\n  font-family: \"Roboto\";\n  src: url(//font/Roboto.ttf) format(\"truetype\");\n}\n</style>","css/styl-plugin/grid-post-layout/main":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","css/styl-plugin/grid-post-layout/mixins":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n","css/styl-plugin/grid-post-layout/variables":""}},"excerpt":"","more":"<h1 id=\"TYPESCRIPT的基礎常識\"><a href=\"#TYPESCRIPT的基礎常識\" class=\"headerlink\" title=\"TYPESCRIPT的基礎常識\"></a>TYPESCRIPT的基礎常識</h1><h2 id=\"基礎型別上與es5-es6-較有差異的部分\"><a href=\"#基礎型別上與es5-es6-較有差異的部分\" class=\"headerlink\" title=\"基礎型別上與es5/es6 較有差異的部分\"></a>基礎型別上與es5/es6 較有差異的部分</h2><ol>\n<li><p>數字<br>ts的數字另外有支援兩種格式：2進位＆8進位;除此之外,ts 的number同樣都是浮點數</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> decLiteral: <span class=\"built_in\">number</span> = <span class=\"number\">6</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> hexLiteral: <span class=\"built_in\">number</span> = <span class=\"number\">0xf00d</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> binaryLiteral: <span class=\"built_in\">number</span> = <span class=\"number\">0b1010</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> octalLiteral: <span class=\"built_in\">number</span> = <span class=\"number\">0o744</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>陣列</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//原則上ts的變數都要寫型別，而如果一個變數的型別是array</span></span><br><span class=\"line\"><span class=\"comment\">//且這個array的子項型別都是number，則可寫成如下</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> list: <span class=\"built_in\">number</span>[] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//承上，或如下利用泛型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> list: <span class=\"built_in\">number</span>[] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>元組(陣列型別專用)</li>\n</ol>\n<ul>\n<li><p>最基本的範例：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Declare a tuple type</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> x: [<span class=\"built_in\">string</span>, <span class=\"built_in\">number</span>];</span><br><span class=\"line\"><span class=\"comment\">// Initialize it</span></span><br><span class=\"line\">x = [<span class=\"string\">&#x27;hello&#x27;</span>, <span class=\"number\">10</span>]; <span class=\"comment\">// OK</span></span><br><span class=\"line\"><span class=\"comment\">// Initialize it incorrectly</span></span><br><span class=\"line\">x = [<span class=\"number\">10</span>, <span class=\"string\">&#x27;hello&#x27;</span>]; <span class=\"comment\">// Error</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>為陣列編寫型別的好處</p>\n</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x: [<span class=\"built_in\">string</span>, <span class=\"built_in\">number</span>];</span><br><span class=\"line\">x = [<span class=\"string\">&#x27;hello&#x27;</span>, <span class=\"number\">10</span>]; <span class=\"comment\">// OK</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x[<span class=\"number\">0</span>].substr(<span class=\"number\">1</span>)); <span class=\"comment\">// OK 因為x[0]在元組中定義為字串，可以使用substr方法</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x[<span class=\"number\">1</span>].substr(<span class=\"number\">1</span>)); <span class=\"comment\">// Error, 因為10屬於在元組中定義為數字，不能使用substr方法，所以會報錯</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>當偵測到陣列子項位置在元組定義範圍外的子項時，會用元組定義的型別的聯集來定義之</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x[<span class=\"number\">3</span>] = <span class=\"string\">&#x27;world&#x27;</span>; <span class=\"comment\">// OK, 字符串可以赋值给(string | number)类型</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x[<span class=\"number\">5</span>].toString()); <span class=\"comment\">// OK, &#x27;string&#x27; 和 &#x27;number&#x27; 都有 toString</span></span><br><span class=\"line\"></span><br><span class=\"line\">x[<span class=\"number\">6</span>] = <span class=\"literal\">true</span>; <span class=\"comment\">// Error, 布尔不是(string | number)类型</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>列舉（Enumerate）</li>\n</ol>\n<ul>\n<li><p>能夠把變數的範圍限制在某些限制下進行存取並賦予其定義</p>\n</li>\n<li><p>舉個實用的例子，團隊裡的後端在 Server 處理資料發生錯誤時，定義了一些代碼，來告訴前端說，這個代碼代表什麼錯誤，那個又是什麼：</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> handleWrongStatus = (status: string): <span class=\"function\"><span class=\"params\">void</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (status) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;A&#x27;</span>:</span><br><span class=\"line\">      <span class=\"comment\">// Do something...</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;B&#x27;</span>:</span><br><span class=\"line\">      <span class=\"comment\">// Do something...</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;C&#x27;</span>:</span><br><span class=\"line\">      <span class=\"comment\">// Do something...</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;No have wrong code!&#x27;</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>然而像上面這樣寫的話，缺點會在於各個case之間沒有語意化，你很難去釐清Case A 實際上是什麼, Case B又是什麼，在這種狀況下就可以去使用enumerate</p>\n<p>enumerate的寫法跟js的物件接近，如下</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">enum</span> requestStatusCodes &#123;</span><br><span class=\"line\">  error,</span><br><span class=\"line\">  success,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>正常來講，如果不幫上述這個requestStatusCodes 的裡面每一個子項去做定義，TS的編譯器會直接把error的編號定為0, success的編號定為1（流水號）</p>\n<p>這樣我們就可以透過requestStatusCodes.error拿到0這個列舉值, requestStatusCodes.success拿到1這個列舉值;或者透過requestStatusCodes[0]拿到error 這個列舉子項</p>\n<p>這樣的話。上述的case switch就可以這樣改良</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">enum</span> requestWrongCodes &#123;</span><br><span class=\"line\">  missingParameter = <span class=\"string\">&#x27;A&#x27;</span>,</span><br><span class=\"line\">  wrongParameterType = <span class=\"string\">&#x27;B&#x27;</span>,</span><br><span class=\"line\">  invalidToken = <span class=\"string\">&#x27;C&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> handleWrongStatus = (status: <span class=\"built_in\">string</span>): <span class=\"function\"><span class=\"params\">void</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//es6解構賦值的寫法</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; missingParameter, wrongParameterType, invalidToken, &#125; = requestWrongCodes;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (status) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> missingParameter:</span><br><span class=\"line\">      <span class=\"comment\">// Do something...</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> wrongParameterType:</span><br><span class=\"line\">      <span class=\"comment\">// Do something...</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> invalidToken:</span><br><span class=\"line\">      <span class=\"comment\">// Do something...</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;No have wrong code!&#x27;</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>5.any/void 任意值與虛空值</p>\n<p>變數的型別如果不確定的話可以直接帶any，而函數的return type如果為空的話則可以直接帶:void</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> notSure: <span class=\"built_in\">any</span> = <span class=\"number\">4</span>;</span><br><span class=\"line\">notSure = <span class=\"string\">&quot;maybe a string instead&quot;</span>; <span class=\"comment\">//這樣不會報錯</span></span><br><span class=\"line\">notSure = <span class=\"literal\">false</span>; <span class=\"comment\">//這樣也不會報錯</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">warnUser</span>(<span class=\"params\"></span>): <span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;This is my warning message&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>6.undefined/null 未定義與空值</p>\n<blockquote>\n<p>TypeScript里，undefined和null两者各自有自己的类型分别叫做undefined和null。 和void相似，它们的本身的类型用处不是很大</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; Not much else we can assign to these variables!</span><br><span class=\"line\">let u: undefined &#x3D; undefined; </span><br><span class=\"line\">let n: null &#x3D; null;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在默認狀況下 undefined和null 這兩種value也可以被賦予給任何型別作為其值</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> u: <span class=\"built_in\">number</span> = <span class=\"literal\">undefined</span>; </span><br><span class=\"line\"><span class=\"keyword\">let</span> n: syting = <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>–strictNullChecks是什麼？<blockquote>\n<p>簡單來說就是typescript 的tsconfig.json裡面的一個設定，只要做了這個設定以後，undefined和null 這兩種value就再也不會被默認為任何型別的一種預設值。也許在某處你想嘗試一個字串或空或未定義，可以使用聯合類型 <code>ex: string|number|null</code></p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;compileOnSave&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        &quot;strictNullChecks&quot;: true,</span><br><span class=\"line\">        &quot;skipLibCheck&quot;: true,</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li>Never 這個型別是用來幹嘛用的?</li>\n</ol>\n<p>never類型表示的是那些根本就不會有值的類型，例如一個只會return new Error(‘string’) 的function；<br>要注意值為never型別不接受null作為其值。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">error</span>(<span class=\"params\">message: <span class=\"built_in\">string</span></span>): <span class=\"title\">never</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(message);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> something: <span class=\"built_in\">void</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> nothing: <span class=\"built_in\">never</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// Error: Type &#x27;null&#x27; is not assignable to type &#x27;never&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li>類型斷言</li>\n</ol>\n<p>類型斷言好比其它語言裡的類型轉換，但是不進行特殊的數據檢查和解構。<br>.jsx檔案裡面只能用as的方式做類型斷言</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> someValue: <span class=\"built_in\">any</span> = <span class=\"string\">&quot;this is a string&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> strLength: <span class=\"built_in\">number</span> = (&lt;<span class=\"built_in\">string</span>&gt;someValue).length;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> someValue: <span class=\"built_in\">any</span> = <span class=\"string\">&quot;this is a string&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> strLength: <span class=\"built_in\">number</span> = (someValue <span class=\"keyword\">as</span> <span class=\"built_in\">string</span>).length;</span><br></pre></td></tr></table></figure>"},{"title":"TYPESCRIPT學習筆記-ep2.5","_content":"\n\n\n#### 如何使用interface 為函數定義參數型別與回傳值型別\n\n``` typescript\ninterface SearchFunc {\n  (source: string, subString: string): boolean;\n} // 定義函數參數/return 的方式\n\ninterface customVariables {\n  variableA: boolean;\n}\n```\n\n#### 如何使用interface 定義\"可索引類型\"\n\n```typescript=\ninterface arrayType {\n  [index: number]: string;\n} // 意思指的是[]內只能輸入數字, 並且return 值為字串\n\ninterface readonlyArrayType {\n  readonly [index: number]: string;\n} // 與readonly屬性的搭配應用方式, 這樣就可以把陣列轉為唯讀陣列\n\n// 問題狀況\ninterface arrayType {\n   [index: string]: number; //當索引值的型別是字串時會有一種特殊的問題, 會強制要求內部的變數型別跟這邊定義的一樣\n  value:string // 所以這樣會報錯 (必須是number)\n} // 當已經使用了strinf索引類型的定義時, 會強制要求回傳值是索引類型定義中的那個回傳值型別\n\n\n\n```\n\n#### 使用implement 將class與 interface 對接\n\n```typescript\n\ninterface ClockInterface {\n    currentTime: Date;\n    setTime(d: Date): void;\n}\n\nclass Clock implements ClockInterface {\n    currentTime: Date = new Date(); //如果class裡面沒有寫這個變數就會報錯\n    setTime(d: Date) {\n        this.currentTime = d;\n    }\n    constructor(h: number, m: number) { }\n}\n\n```\n\n\n#### 如何快速定義一個class的constructor 參數型別與其建立出來的實例型別？\n\n```typescript=\n//建議直接使用表達式\ninterface ClockConstructor {\n  new (hour: number, minute: number); //定義ctor 參數內容\n}\n\ninterface ClockInterface {\n  tick(); // 定義實例內容\n}\n\nconst Clock: ClockConstructor = class Clock implements ClockInterface {\n  constructor(h: number, m: number) {}\n  tick() {\n\n  }\n}\n```\n\n\n\n#### interface也可以extend\n\n> 實際使用起來就跟class的extend 差不多\n\n```typescript=\n\ninterface Shape {\n    color: string;\n}\n\ninterface Square extends Shape {\n    sideLength: number;\n}\n\nlet square = <Square>{};  \n// 這邊也可以寫成 let square:Square = {color:'blue',sideLength=10}, 但如果不寫預設值就會報錯\nsquare.color = \"blue\";\nsquare.sideLength = 10;\n```\n\n#### interface extend class？ 用意是什麼?\n\n```typescript=\nclass Control {\n    private state: any;\n}\n\ninterface SelectableControl extends Control {\n    select(): void; // 這邊定義了一個extend了 control的接口, 所以意思是說，如果今天有class想要implement 這個接口，他必須要有control 的全內容, 不然就會報錯\n}\n\nclass Button extends Control implements SelectableControl {\n    select() { } // 因為button 有 extend Control, 所以他本身就具有private 的state, 所以這樣給過\n\nclass TextBox extends Control {\n    select() { }\n}\n\n// Error: Property 'state' is missing in type 'Image'.\nclass Image implements SelectableControl {\n    select() { }\n    // 因為Image 本身沒有private 的state, 所以不能implement SelectableControl\n}\n\n\n```","source":"_posts/TYPESCRIPT學習筆記-ep2.5.md","raw":"---\ntitle: TYPESCRIPT學習筆記-ep2.5\ncategories: \n- 前端技術學習心得\ntags:\n- ts\n---\n\n\n\n#### 如何使用interface 為函數定義參數型別與回傳值型別\n\n``` typescript\ninterface SearchFunc {\n  (source: string, subString: string): boolean;\n} // 定義函數參數/return 的方式\n\ninterface customVariables {\n  variableA: boolean;\n}\n```\n\n#### 如何使用interface 定義\"可索引類型\"\n\n```typescript=\ninterface arrayType {\n  [index: number]: string;\n} // 意思指的是[]內只能輸入數字, 並且return 值為字串\n\ninterface readonlyArrayType {\n  readonly [index: number]: string;\n} // 與readonly屬性的搭配應用方式, 這樣就可以把陣列轉為唯讀陣列\n\n// 問題狀況\ninterface arrayType {\n   [index: string]: number; //當索引值的型別是字串時會有一種特殊的問題, 會強制要求內部的變數型別跟這邊定義的一樣\n  value:string // 所以這樣會報錯 (必須是number)\n} // 當已經使用了strinf索引類型的定義時, 會強制要求回傳值是索引類型定義中的那個回傳值型別\n\n\n\n```\n\n#### 使用implement 將class與 interface 對接\n\n```typescript\n\ninterface ClockInterface {\n    currentTime: Date;\n    setTime(d: Date): void;\n}\n\nclass Clock implements ClockInterface {\n    currentTime: Date = new Date(); //如果class裡面沒有寫這個變數就會報錯\n    setTime(d: Date) {\n        this.currentTime = d;\n    }\n    constructor(h: number, m: number) { }\n}\n\n```\n\n\n#### 如何快速定義一個class的constructor 參數型別與其建立出來的實例型別？\n\n```typescript=\n//建議直接使用表達式\ninterface ClockConstructor {\n  new (hour: number, minute: number); //定義ctor 參數內容\n}\n\ninterface ClockInterface {\n  tick(); // 定義實例內容\n}\n\nconst Clock: ClockConstructor = class Clock implements ClockInterface {\n  constructor(h: number, m: number) {}\n  tick() {\n\n  }\n}\n```\n\n\n\n#### interface也可以extend\n\n> 實際使用起來就跟class的extend 差不多\n\n```typescript=\n\ninterface Shape {\n    color: string;\n}\n\ninterface Square extends Shape {\n    sideLength: number;\n}\n\nlet square = <Square>{};  \n// 這邊也可以寫成 let square:Square = {color:'blue',sideLength=10}, 但如果不寫預設值就會報錯\nsquare.color = \"blue\";\nsquare.sideLength = 10;\n```\n\n#### interface extend class？ 用意是什麼?\n\n```typescript=\nclass Control {\n    private state: any;\n}\n\ninterface SelectableControl extends Control {\n    select(): void; // 這邊定義了一個extend了 control的接口, 所以意思是說，如果今天有class想要implement 這個接口，他必須要有control 的全內容, 不然就會報錯\n}\n\nclass Button extends Control implements SelectableControl {\n    select() { } // 因為button 有 extend Control, 所以他本身就具有private 的state, 所以這樣給過\n\nclass TextBox extends Control {\n    select() { }\n}\n\n// Error: Property 'state' is missing in type 'Image'.\nclass Image implements SelectableControl {\n    select() { }\n    // 因為Image 本身沒有private 的state, 所以不能implement SelectableControl\n}\n\n\n```","slug":"TYPESCRIPT學習筆記-ep2.5","published":1,"date":"2020-11-25T17:01:45.846Z","updated":"2020-12-12T19:52:54.910Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktx1vyyx001itay2asfshi7n","content":"<h4 id=\"如何使用interface-為函數定義參數型別與回傳值型別\"><a href=\"#如何使用interface-為函數定義參數型別與回傳值型別\" class=\"headerlink\" title=\"如何使用interface 為函數定義參數型別與回傳值型別\"></a>如何使用interface 為函數定義參數型別與回傳值型別</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> SearchFunc &#123;</span><br><span class=\"line\">  (source: <span class=\"built_in\">string</span>, <span class=\"attr\">subString</span>: <span class=\"built_in\">string</span>): <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">&#125; <span class=\"comment\">// 定義函數參數/return 的方式</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> customVariables &#123;</span><br><span class=\"line\">  variableA: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"如何使用interface-定義”可索引類型”\"><a href=\"#如何使用interface-定義”可索引類型”\" class=\"headerlink\" title=\"如何使用interface 定義”可索引類型”\"></a>如何使用interface 定義”可索引類型”</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> arrayType &#123;</span><br><span class=\"line\">  [index: <span class=\"built_in\">number</span>]: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125; <span class=\"comment\">// 意思指的是[]內只能輸入數字, 並且return 值為字串</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> readonlyArrayType &#123;</span><br><span class=\"line\">  <span class=\"keyword\">readonly</span> [index: <span class=\"built_in\">number</span>]: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125; <span class=\"comment\">// 與readonly屬性的搭配應用方式, 這樣就可以把陣列轉為唯讀陣列</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 問題狀況</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> arrayType &#123;</span><br><span class=\"line\">   [index: <span class=\"built_in\">string</span>]: <span class=\"built_in\">number</span>; <span class=\"comment\">//當索引值的型別是字串時會有一種特殊的問題, 會強制要求內部的變數型別跟這邊定義的一樣</span></span><br><span class=\"line\">  value:<span class=\"built_in\">string</span> <span class=\"comment\">// 所以這樣會報錯 (必須是number)</span></span><br><span class=\"line\">&#125; <span class=\"comment\">// 當已經使用了strinf索引類型的定義時, 會強制要求回傳值是索引類型定義中的那個回傳值型別</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用implement-將class與-interface-對接\"><a href=\"#使用implement-將class與-interface-對接\" class=\"headerlink\" title=\"使用implement 將class與 interface 對接\"></a>使用implement 將class與 interface 對接</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> ClockInterface &#123;</span><br><span class=\"line\">    currentTime: <span class=\"built_in\">Date</span>;</span><br><span class=\"line\">    setTime(d: <span class=\"built_in\">Date</span>): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Clock</span> <span class=\"title\">implements</span> <span class=\"title\">ClockInterface</span> </span>&#123;</span><br><span class=\"line\">    currentTime: <span class=\"built_in\">Date</span> = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(); <span class=\"comment\">//如果class裡面沒有寫這個變數就會報錯</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">setTime</span>(<span class=\"params\">d: <span class=\"built_in\">Date</span></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.currentTime = d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">h: <span class=\"built_in\">number</span>, m: <span class=\"built_in\">number</span></span>)</span> &#123; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"如何快速定義一個class的constructor-參數型別與其建立出來的實例型別？\"><a href=\"#如何快速定義一個class的constructor-參數型別與其建立出來的實例型別？\" class=\"headerlink\" title=\"如何快速定義一個class的constructor 參數型別與其建立出來的實例型別？\"></a>如何快速定義一個class的constructor 參數型別與其建立出來的實例型別？</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//建議直接使用表達式</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> ClockConstructor &#123;</span><br><span class=\"line\">  <span class=\"keyword\">new</span> (hour: <span class=\"built_in\">number</span>, <span class=\"attr\">minute</span>: <span class=\"built_in\">number</span>); <span class=\"comment\">//定義ctor 參數內容</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> ClockInterface &#123;</span><br><span class=\"line\">  tick(); <span class=\"comment\">// 定義實例內容</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Clock: ClockConstructor = <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Clock</span> <span class=\"title\">implements</span> <span class=\"title\">ClockInterface</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">h: <span class=\"built_in\">number</span>, m: <span class=\"built_in\">number</span></span>)</span> &#123;&#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">tick</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"interface也可以extend\"><a href=\"#interface也可以extend\" class=\"headerlink\" title=\"interface也可以extend\"></a>interface也可以extend</h4><blockquote>\n<p>實際使用起來就跟class的extend 差不多</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> Shape &#123;</span><br><span class=\"line\">    color: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> Square <span class=\"keyword\">extends</span> Shape &#123;</span><br><span class=\"line\">    sideLength: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> square = &lt;Square&gt;&#123;&#125;;  </span><br><span class=\"line\"><span class=\"comment\">// 這邊也可以寫成 let square:Square = &#123;color:&#x27;blue&#x27;,sideLength=10&#125;, 但如果不寫預設值就會報錯</span></span><br><span class=\"line\">square.color = <span class=\"string\">&quot;blue&quot;</span>;</span><br><span class=\"line\">square.sideLength = <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"interface-extend-class？-用意是什麼\"><a href=\"#interface-extend-class？-用意是什麼\" class=\"headerlink\" title=\"interface extend class？ 用意是什麼?\"></a>interface extend class？ 用意是什麼?</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Control</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> state: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> SelectableControl <span class=\"keyword\">extends</span> Control &#123;</span><br><span class=\"line\">    select(): <span class=\"built_in\">void</span>; <span class=\"comment\">// 這邊定義了一個extend了 control的接口, 所以意思是說，如果今天有class想要implement 這個接口，他必須要有control 的全內容, 不然就會報錯</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Button</span> <span class=\"keyword\">extends</span> <span class=\"title\">Control</span> <span class=\"title\">implements</span> <span class=\"title\">SelectableControl</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">select</span>(<span class=\"params\"></span>)</span> &#123; &#125; <span class=\"comment\">// 因為button 有 extend Control, 所以他本身就具有private 的state, 所以這樣給過</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TextBox</span> <span class=\"keyword\">extends</span> <span class=\"title\">Control</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">select</span>(<span class=\"params\"></span>)</span> &#123; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Error: Property &#x27;state&#x27; is missing in type &#x27;Image&#x27;.</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Image</span> <span class=\"title\">implements</span> <span class=\"title\">SelectableControl</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">select</span>(<span class=\"params\"></span>)</span> &#123; &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 因為Image 本身沒有private 的state, 所以不能implement SelectableControl</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{"css/variables":"","languages":{"zh-TW":{"title":{"archive":"時間線","category":"分類","tag":"標籤","schedule":"時間表"},"menu":{"home":"首頁","archives":"時間線","categories":"分類","tags":"標籤","about":"關於","search":"搜尋","schedule":"時間表","sitemap":"網站地圖","commonweal":"公益 404"},"sidebar":{"overview":"本站概要","toc":"文章目錄"},"post":{"posted":"發表於","edited":"更新於","created":"創建時間","modified":"修改時間","edit":"編輯","in":"分類於","read_more":"閱讀全文","untitled":"未命名","sticky":"置頂文","views":"閱讀次數","related_posts":"相關文章","copyright":{"author":"作者","link":"文章連結","post_author":"Written by","post_link":"This article originally appeared on","license_title":"版權聲明","license_content":"本網誌所有文章除特別聲明外，均採用 %s 許可協議。轉載請註明出處！"}},"footer":{"powered":"","total_views":"總瀏覽次數","total_visitors":"訪客總數"},"counter":{"tag_cloud":{"zero":"目前還沒有任何標籤","one":"目前共有 1 個標籤","other":"目前共有 %d 個標籤"},"categories":{"zero":"目前還沒有任何分類","one":"目前共有 1 個分類","other":"目前共有 %d 個分類"},"archive_posts":{"zero":"目前還沒有任何文章。","one":"目前共有 1 篇文章。","other":"目前共有 %d 篇文章。"}},"state":{"posts":"文章","tags":"標籤","categories":"分類"},"search":{"placeholder":"搜尋...","empty":"We didn't find any results for the search: %s","hits_time":"%s results found in %s ms","hits":"%s results found"},"cheers":{"um":"嗯..","ok":"還不錯","nice":"好","good":"很好","great":"非常好","excellent":"棒棒Der"},"keep_on":"繼續努力。","symbol":{"comma":"，","period":"。","colon":"："},"reward":{"donate":"捐贈","wechatpay":"微信支付","alipay":"支付寶","paypal":"貝寶","bitcoin":"比特幣"},"follow_me":{"welcome":"歡迎關注我的其它站點"},"accessibility":{"nav_toggle":"切換導航欄","prev_page":"上一頁","next_page":"下一頁"},"symbols_count_time":{"count":"文章字數","count_total":"總字數","time":"所需閱讀時間","time_total":"所需總閱讀時間","time_minutes":"分鐘"}}},"css/mixins":"","css/styles":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","template/head":"<script src=\"//js/tool/canvas-fx-base.js\"></script>\n\n<script src=\"//js/ripple-logo.js\"></script>\n<script src=\"//js/silk-wave.js\"></script>\n\n<style>\n  @font-face {\n  font-family: \"Roboto\";\n  src: url(//font/Roboto.ttf) format(\"truetype\");\n}\n</style>","css/styl-plugin/grid-post-layout/main":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","css/styl-plugin/grid-post-layout/mixins":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n","css/styl-plugin/grid-post-layout/variables":""}},"excerpt":"","more":"<h4 id=\"如何使用interface-為函數定義參數型別與回傳值型別\"><a href=\"#如何使用interface-為函數定義參數型別與回傳值型別\" class=\"headerlink\" title=\"如何使用interface 為函數定義參數型別與回傳值型別\"></a>如何使用interface 為函數定義參數型別與回傳值型別</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> SearchFunc &#123;</span><br><span class=\"line\">  (source: <span class=\"built_in\">string</span>, <span class=\"attr\">subString</span>: <span class=\"built_in\">string</span>): <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">&#125; <span class=\"comment\">// 定義函數參數/return 的方式</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> customVariables &#123;</span><br><span class=\"line\">  variableA: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"如何使用interface-定義”可索引類型”\"><a href=\"#如何使用interface-定義”可索引類型”\" class=\"headerlink\" title=\"如何使用interface 定義”可索引類型”\"></a>如何使用interface 定義”可索引類型”</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> arrayType &#123;</span><br><span class=\"line\">  [index: <span class=\"built_in\">number</span>]: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125; <span class=\"comment\">// 意思指的是[]內只能輸入數字, 並且return 值為字串</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> readonlyArrayType &#123;</span><br><span class=\"line\">  <span class=\"keyword\">readonly</span> [index: <span class=\"built_in\">number</span>]: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125; <span class=\"comment\">// 與readonly屬性的搭配應用方式, 這樣就可以把陣列轉為唯讀陣列</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 問題狀況</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> arrayType &#123;</span><br><span class=\"line\">   [index: <span class=\"built_in\">string</span>]: <span class=\"built_in\">number</span>; <span class=\"comment\">//當索引值的型別是字串時會有一種特殊的問題, 會強制要求內部的變數型別跟這邊定義的一樣</span></span><br><span class=\"line\">  value:<span class=\"built_in\">string</span> <span class=\"comment\">// 所以這樣會報錯 (必須是number)</span></span><br><span class=\"line\">&#125; <span class=\"comment\">// 當已經使用了strinf索引類型的定義時, 會強制要求回傳值是索引類型定義中的那個回傳值型別</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用implement-將class與-interface-對接\"><a href=\"#使用implement-將class與-interface-對接\" class=\"headerlink\" title=\"使用implement 將class與 interface 對接\"></a>使用implement 將class與 interface 對接</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> ClockInterface &#123;</span><br><span class=\"line\">    currentTime: <span class=\"built_in\">Date</span>;</span><br><span class=\"line\">    setTime(d: <span class=\"built_in\">Date</span>): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Clock</span> <span class=\"title\">implements</span> <span class=\"title\">ClockInterface</span> </span>&#123;</span><br><span class=\"line\">    currentTime: <span class=\"built_in\">Date</span> = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(); <span class=\"comment\">//如果class裡面沒有寫這個變數就會報錯</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">setTime</span>(<span class=\"params\">d: <span class=\"built_in\">Date</span></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.currentTime = d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">h: <span class=\"built_in\">number</span>, m: <span class=\"built_in\">number</span></span>)</span> &#123; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"如何快速定義一個class的constructor-參數型別與其建立出來的實例型別？\"><a href=\"#如何快速定義一個class的constructor-參數型別與其建立出來的實例型別？\" class=\"headerlink\" title=\"如何快速定義一個class的constructor 參數型別與其建立出來的實例型別？\"></a>如何快速定義一個class的constructor 參數型別與其建立出來的實例型別？</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//建議直接使用表達式</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> ClockConstructor &#123;</span><br><span class=\"line\">  <span class=\"keyword\">new</span> (hour: <span class=\"built_in\">number</span>, <span class=\"attr\">minute</span>: <span class=\"built_in\">number</span>); <span class=\"comment\">//定義ctor 參數內容</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> ClockInterface &#123;</span><br><span class=\"line\">  tick(); <span class=\"comment\">// 定義實例內容</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Clock: ClockConstructor = <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Clock</span> <span class=\"title\">implements</span> <span class=\"title\">ClockInterface</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">h: <span class=\"built_in\">number</span>, m: <span class=\"built_in\">number</span></span>)</span> &#123;&#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">tick</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"interface也可以extend\"><a href=\"#interface也可以extend\" class=\"headerlink\" title=\"interface也可以extend\"></a>interface也可以extend</h4><blockquote>\n<p>實際使用起來就跟class的extend 差不多</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> Shape &#123;</span><br><span class=\"line\">    color: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> Square <span class=\"keyword\">extends</span> Shape &#123;</span><br><span class=\"line\">    sideLength: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> square = &lt;Square&gt;&#123;&#125;;  </span><br><span class=\"line\"><span class=\"comment\">// 這邊也可以寫成 let square:Square = &#123;color:&#x27;blue&#x27;,sideLength=10&#125;, 但如果不寫預設值就會報錯</span></span><br><span class=\"line\">square.color = <span class=\"string\">&quot;blue&quot;</span>;</span><br><span class=\"line\">square.sideLength = <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"interface-extend-class？-用意是什麼\"><a href=\"#interface-extend-class？-用意是什麼\" class=\"headerlink\" title=\"interface extend class？ 用意是什麼?\"></a>interface extend class？ 用意是什麼?</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Control</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> state: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> SelectableControl <span class=\"keyword\">extends</span> Control &#123;</span><br><span class=\"line\">    select(): <span class=\"built_in\">void</span>; <span class=\"comment\">// 這邊定義了一個extend了 control的接口, 所以意思是說，如果今天有class想要implement 這個接口，他必須要有control 的全內容, 不然就會報錯</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Button</span> <span class=\"keyword\">extends</span> <span class=\"title\">Control</span> <span class=\"title\">implements</span> <span class=\"title\">SelectableControl</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">select</span>(<span class=\"params\"></span>)</span> &#123; &#125; <span class=\"comment\">// 因為button 有 extend Control, 所以他本身就具有private 的state, 所以這樣給過</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TextBox</span> <span class=\"keyword\">extends</span> <span class=\"title\">Control</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">select</span>(<span class=\"params\"></span>)</span> &#123; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Error: Property &#x27;state&#x27; is missing in type &#x27;Image&#x27;.</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Image</span> <span class=\"title\">implements</span> <span class=\"title\">SelectableControl</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">select</span>(<span class=\"params\"></span>)</span> &#123; &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 因為Image 本身沒有private 的state, 所以不能implement SelectableControl</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"TYPESCRIPT學習筆記-ep2","_content":"\n\n\n## 什麼是Interface(接口)?\n\n> 簡單來說就是一個用來定義一個物件內部 必要變數/變數型別的寫法\n> 好用的點在於可以去限制一個物件必須要具備什麼樣的property\n\n```typescript=\ninterface LabeledValue {\n  label: string;\n  name?:string; //後面有問號的property代表是optional的項目\n  readonly color:'red'\n  //前面有寫readonly的property，\n  //代表這個項目只要被interface初始定義之後就沒有辦法再被覆寫\n  //注意readonly只能在interface裡面使用\n}\n\nfunction printLabel(labeledObj: LabeledValue\n//直接把labeledObj 內容的型別定義為labeledValue 接口 \n) {\n  console.log(labeledObj.label);\n}\n\nlet myObj = {size: 10, label: \"Size 10 Object\"};\nprintLabel(myObj);\n```\n\n## 什麼是ReadonlyArray(唯讀陣列)?\n\n> 用途是用來確保陣列被定義為唯獨之後再也不能被修改\n\n```typescript=\nlet a: number[] = [1, 2, 3, 4];\nlet ro: ReadonlyArray<number> = a;\nro[0] = 12; // error!\nro.push(5); // error!\nro.length = 100; // error!\na = ro; // error!\n//但是可以用類型斷言強行複製\na = ro as number[];\n```\n\n## 我把函數的參數物件用一個具備optional屬性的interface來定義型別，然後我傳入不存在於該interface的property卻報錯了，為什麼?\n\n```typescript\ninterface LabeledValue {\n  name?:string; //後面有問號的property代表是optional的項目\n}\n//所以基本上這樣寫是合法的\n\nlet qq = (bb:LabeledValue)=>{\n    \n}\nqq({})//傳入空物件\n\n// 這樣寫也是合法的\nlet apple:LabeledValue ={};\napple.name = 'fuji';\n\n\n//但是這樣寫就會fail\napple.color = 'red';\n\n```\n\n這說明了optional屬性只能接受\"存在\"或“不存在”這兩種值，用一個本來就不符合interface的property是不合法的\n\n\n\n","source":"_posts/TYPESCRIPT學習筆記-ep2.md","raw":"---\ntitle: TYPESCRIPT學習筆記-ep2\ncategories: \n- 前端技術學習心得\ntags:\n- ts\n---\n\n\n\n## 什麼是Interface(接口)?\n\n> 簡單來說就是一個用來定義一個物件內部 必要變數/變數型別的寫法\n> 好用的點在於可以去限制一個物件必須要具備什麼樣的property\n\n```typescript=\ninterface LabeledValue {\n  label: string;\n  name?:string; //後面有問號的property代表是optional的項目\n  readonly color:'red'\n  //前面有寫readonly的property，\n  //代表這個項目只要被interface初始定義之後就沒有辦法再被覆寫\n  //注意readonly只能在interface裡面使用\n}\n\nfunction printLabel(labeledObj: LabeledValue\n//直接把labeledObj 內容的型別定義為labeledValue 接口 \n) {\n  console.log(labeledObj.label);\n}\n\nlet myObj = {size: 10, label: \"Size 10 Object\"};\nprintLabel(myObj);\n```\n\n## 什麼是ReadonlyArray(唯讀陣列)?\n\n> 用途是用來確保陣列被定義為唯獨之後再也不能被修改\n\n```typescript=\nlet a: number[] = [1, 2, 3, 4];\nlet ro: ReadonlyArray<number> = a;\nro[0] = 12; // error!\nro.push(5); // error!\nro.length = 100; // error!\na = ro; // error!\n//但是可以用類型斷言強行複製\na = ro as number[];\n```\n\n## 我把函數的參數物件用一個具備optional屬性的interface來定義型別，然後我傳入不存在於該interface的property卻報錯了，為什麼?\n\n```typescript\ninterface LabeledValue {\n  name?:string; //後面有問號的property代表是optional的項目\n}\n//所以基本上這樣寫是合法的\n\nlet qq = (bb:LabeledValue)=>{\n    \n}\nqq({})//傳入空物件\n\n// 這樣寫也是合法的\nlet apple:LabeledValue ={};\napple.name = 'fuji';\n\n\n//但是這樣寫就會fail\napple.color = 'red';\n\n```\n\n這說明了optional屬性只能接受\"存在\"或“不存在”這兩種值，用一個本來就不符合interface的property是不合法的\n\n\n\n","slug":"TYPESCRIPT學習筆記-ep2","published":1,"date":"2020-11-25T17:01:45.848Z","updated":"2020-12-12T19:52:57.837Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktx1vyyy001mtay2cuq85kvl","content":"<h2 id=\"什麼是Interface-接口\"><a href=\"#什麼是Interface-接口\" class=\"headerlink\" title=\"什麼是Interface(接口)?\"></a>什麼是Interface(接口)?</h2><blockquote>\n<p>簡單來說就是一個用來定義一個物件內部 必要變數/變數型別的寫法<br>好用的點在於可以去限制一個物件必須要具備什麼樣的property</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> LabeledValue &#123;</span><br><span class=\"line\">  label: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  name?:<span class=\"built_in\">string</span>; <span class=\"comment\">//後面有問號的property代表是optional的項目</span></span><br><span class=\"line\">  <span class=\"keyword\">readonly</span> color:<span class=\"string\">&#x27;red&#x27;</span></span><br><span class=\"line\">  <span class=\"comment\">//前面有寫readonly的property，</span></span><br><span class=\"line\">  <span class=\"comment\">//代表這個項目只要被interface初始定義之後就沒有辦法再被覆寫</span></span><br><span class=\"line\">  <span class=\"comment\">//注意readonly只能在interface裡面使用</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printLabel</span>(<span class=\"params\">labeledObj: LabeledValue</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"comment\">//直接把labeledObj 內容的型別定義為labeledValue 接口 </span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(labeledObj.label);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> myObj = &#123;<span class=\"attr\">size</span>: <span class=\"number\">10</span>, <span class=\"attr\">label</span>: <span class=\"string\">&quot;Size 10 Object&quot;</span>&#125;;</span><br><span class=\"line\">printLabel(myObj);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"什麼是ReadonlyArray-唯讀陣列\"><a href=\"#什麼是ReadonlyArray-唯讀陣列\" class=\"headerlink\" title=\"什麼是ReadonlyArray(唯讀陣列)?\"></a>什麼是ReadonlyArray(唯讀陣列)?</h2><blockquote>\n<p>用途是用來確保陣列被定義為唯獨之後再也不能被修改</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a: <span class=\"built_in\">number</span>[] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> ro: ReadonlyArray&lt;<span class=\"built_in\">number</span>&gt; = a;</span><br><span class=\"line\">ro[<span class=\"number\">0</span>] = <span class=\"number\">12</span>; <span class=\"comment\">// error!</span></span><br><span class=\"line\">ro.push(<span class=\"number\">5</span>); <span class=\"comment\">// error!</span></span><br><span class=\"line\">ro.length = <span class=\"number\">100</span>; <span class=\"comment\">// error!</span></span><br><span class=\"line\">a = ro; <span class=\"comment\">// error!</span></span><br><span class=\"line\"><span class=\"comment\">//但是可以用類型斷言強行複製</span></span><br><span class=\"line\">a = ro <span class=\"keyword\">as</span> <span class=\"built_in\">number</span>[];</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"我把函數的參數物件用一個具備optional屬性的interface來定義型別，然後我傳入不存在於該interface的property卻報錯了，為什麼\"><a href=\"#我把函數的參數物件用一個具備optional屬性的interface來定義型別，然後我傳入不存在於該interface的property卻報錯了，為什麼\" class=\"headerlink\" title=\"我把函數的參數物件用一個具備optional屬性的interface來定義型別，然後我傳入不存在於該interface的property卻報錯了，為什麼?\"></a>我把函數的參數物件用一個具備optional屬性的interface來定義型別，然後我傳入不存在於該interface的property卻報錯了，為什麼?</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> LabeledValue &#123;</span><br><span class=\"line\">  name?:<span class=\"built_in\">string</span>; <span class=\"comment\">//後面有問號的property代表是optional的項目</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//所以基本上這樣寫是合法的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> qq = <span class=\"function\">(<span class=\"params\">bb:LabeledValue</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">qq(&#123;&#125;)<span class=\"comment\">//傳入空物件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 這樣寫也是合法的</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> apple:LabeledValue =&#123;&#125;;</span><br><span class=\"line\">apple.name = <span class=\"string\">&#x27;fuji&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//但是這樣寫就會fail</span></span><br><span class=\"line\">apple.color = <span class=\"string\">&#x27;red&#x27;</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>這說明了optional屬性只能接受”存在”或“不存在”這兩種值，用一個本來就不符合interface的property是不合法的</p>\n","site":{"data":{"css/variables":"","languages":{"zh-TW":{"title":{"archive":"時間線","category":"分類","tag":"標籤","schedule":"時間表"},"menu":{"home":"首頁","archives":"時間線","categories":"分類","tags":"標籤","about":"關於","search":"搜尋","schedule":"時間表","sitemap":"網站地圖","commonweal":"公益 404"},"sidebar":{"overview":"本站概要","toc":"文章目錄"},"post":{"posted":"發表於","edited":"更新於","created":"創建時間","modified":"修改時間","edit":"編輯","in":"分類於","read_more":"閱讀全文","untitled":"未命名","sticky":"置頂文","views":"閱讀次數","related_posts":"相關文章","copyright":{"author":"作者","link":"文章連結","post_author":"Written by","post_link":"This article originally appeared on","license_title":"版權聲明","license_content":"本網誌所有文章除特別聲明外，均採用 %s 許可協議。轉載請註明出處！"}},"footer":{"powered":"","total_views":"總瀏覽次數","total_visitors":"訪客總數"},"counter":{"tag_cloud":{"zero":"目前還沒有任何標籤","one":"目前共有 1 個標籤","other":"目前共有 %d 個標籤"},"categories":{"zero":"目前還沒有任何分類","one":"目前共有 1 個分類","other":"目前共有 %d 個分類"},"archive_posts":{"zero":"目前還沒有任何文章。","one":"目前共有 1 篇文章。","other":"目前共有 %d 篇文章。"}},"state":{"posts":"文章","tags":"標籤","categories":"分類"},"search":{"placeholder":"搜尋...","empty":"We didn't find any results for the search: %s","hits_time":"%s results found in %s ms","hits":"%s results found"},"cheers":{"um":"嗯..","ok":"還不錯","nice":"好","good":"很好","great":"非常好","excellent":"棒棒Der"},"keep_on":"繼續努力。","symbol":{"comma":"，","period":"。","colon":"："},"reward":{"donate":"捐贈","wechatpay":"微信支付","alipay":"支付寶","paypal":"貝寶","bitcoin":"比特幣"},"follow_me":{"welcome":"歡迎關注我的其它站點"},"accessibility":{"nav_toggle":"切換導航欄","prev_page":"上一頁","next_page":"下一頁"},"symbols_count_time":{"count":"文章字數","count_total":"總字數","time":"所需閱讀時間","time_total":"所需總閱讀時間","time_minutes":"分鐘"}}},"css/mixins":"","css/styles":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","template/head":"<script src=\"//js/tool/canvas-fx-base.js\"></script>\n\n<script src=\"//js/ripple-logo.js\"></script>\n<script src=\"//js/silk-wave.js\"></script>\n\n<style>\n  @font-face {\n  font-family: \"Roboto\";\n  src: url(//font/Roboto.ttf) format(\"truetype\");\n}\n</style>","css/styl-plugin/grid-post-layout/main":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","css/styl-plugin/grid-post-layout/mixins":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n","css/styl-plugin/grid-post-layout/variables":""}},"excerpt":"","more":"<h2 id=\"什麼是Interface-接口\"><a href=\"#什麼是Interface-接口\" class=\"headerlink\" title=\"什麼是Interface(接口)?\"></a>什麼是Interface(接口)?</h2><blockquote>\n<p>簡單來說就是一個用來定義一個物件內部 必要變數/變數型別的寫法<br>好用的點在於可以去限制一個物件必須要具備什麼樣的property</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> LabeledValue &#123;</span><br><span class=\"line\">  label: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  name?:<span class=\"built_in\">string</span>; <span class=\"comment\">//後面有問號的property代表是optional的項目</span></span><br><span class=\"line\">  <span class=\"keyword\">readonly</span> color:<span class=\"string\">&#x27;red&#x27;</span></span><br><span class=\"line\">  <span class=\"comment\">//前面有寫readonly的property，</span></span><br><span class=\"line\">  <span class=\"comment\">//代表這個項目只要被interface初始定義之後就沒有辦法再被覆寫</span></span><br><span class=\"line\">  <span class=\"comment\">//注意readonly只能在interface裡面使用</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printLabel</span>(<span class=\"params\">labeledObj: LabeledValue</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"comment\">//直接把labeledObj 內容的型別定義為labeledValue 接口 </span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(labeledObj.label);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> myObj = &#123;<span class=\"attr\">size</span>: <span class=\"number\">10</span>, <span class=\"attr\">label</span>: <span class=\"string\">&quot;Size 10 Object&quot;</span>&#125;;</span><br><span class=\"line\">printLabel(myObj);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"什麼是ReadonlyArray-唯讀陣列\"><a href=\"#什麼是ReadonlyArray-唯讀陣列\" class=\"headerlink\" title=\"什麼是ReadonlyArray(唯讀陣列)?\"></a>什麼是ReadonlyArray(唯讀陣列)?</h2><blockquote>\n<p>用途是用來確保陣列被定義為唯獨之後再也不能被修改</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a: <span class=\"built_in\">number</span>[] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> ro: ReadonlyArray&lt;<span class=\"built_in\">number</span>&gt; = a;</span><br><span class=\"line\">ro[<span class=\"number\">0</span>] = <span class=\"number\">12</span>; <span class=\"comment\">// error!</span></span><br><span class=\"line\">ro.push(<span class=\"number\">5</span>); <span class=\"comment\">// error!</span></span><br><span class=\"line\">ro.length = <span class=\"number\">100</span>; <span class=\"comment\">// error!</span></span><br><span class=\"line\">a = ro; <span class=\"comment\">// error!</span></span><br><span class=\"line\"><span class=\"comment\">//但是可以用類型斷言強行複製</span></span><br><span class=\"line\">a = ro <span class=\"keyword\">as</span> <span class=\"built_in\">number</span>[];</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"我把函數的參數物件用一個具備optional屬性的interface來定義型別，然後我傳入不存在於該interface的property卻報錯了，為什麼\"><a href=\"#我把函數的參數物件用一個具備optional屬性的interface來定義型別，然後我傳入不存在於該interface的property卻報錯了，為什麼\" class=\"headerlink\" title=\"我把函數的參數物件用一個具備optional屬性的interface來定義型別，然後我傳入不存在於該interface的property卻報錯了，為什麼?\"></a>我把函數的參數物件用一個具備optional屬性的interface來定義型別，然後我傳入不存在於該interface的property卻報錯了，為什麼?</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> LabeledValue &#123;</span><br><span class=\"line\">  name?:<span class=\"built_in\">string</span>; <span class=\"comment\">//後面有問號的property代表是optional的項目</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//所以基本上這樣寫是合法的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> qq = <span class=\"function\">(<span class=\"params\">bb:LabeledValue</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">qq(&#123;&#125;)<span class=\"comment\">//傳入空物件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 這樣寫也是合法的</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> apple:LabeledValue =&#123;&#125;;</span><br><span class=\"line\">apple.name = <span class=\"string\">&#x27;fuji&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//但是這樣寫就會fail</span></span><br><span class=\"line\">apple.color = <span class=\"string\">&#x27;red&#x27;</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>這說明了optional屬性只能接受”存在”或“不存在”這兩種值，用一個本來就不符合interface的property是不合法的</p>\n"},{"title":"TYPESCRIPT學習筆記-ep3","_content":"\n\n\n## TS 的class 跟 es6 有什麼差別？\n\n#### 1. private與 public 宣告的存在:\n如果一個方法/變數/constructor被宣告為public 則能在聲明它的類的外部被取用\n反之若宣告為private， 那這個方法/變數/constructor 就只能在自己的class裡面被使用\n\n所以說這樣會錯\n\n> 實際上, 當private 方法/變數/constructor 在父類別被繼承出去的時候，\n他是會進到子類別（或子類別的實例）裡面的，但是就是無法訪問而已\n\n````typescript\nclass fruit{\n    constructor(){\n\n    }\n\n    private type =\"fruit\";\n    method1(){\n        console.log(this.type);\n    }\n}\n\n\nlet a  = new fruit();\nconsole.log(a.type);//報錯, 因為type 只能在fruit裡面被使用，被new 出來的實例沒辦法取得他\n\n\nclass apple extends fruit{\n    constructor(){\n        super();\n        this.type = \"aa\"\n    }\n    mm(){\n        console.log(this.type);//報錯, 因為type 只能在fruit裡面被使用，就算是extend 過來也不行\n    }\n}\n````\n\n\n#### 2. protect 宣告的存在:\n\n##### 如果一個class 的方法/變數/constructor被宣告為protected， 則:\n1. 這個方法/變數/constructor能在class裡面被叫用\n但是我們不能透過這個class的實例去拿到他被 protect 的東西\n2. 但若如果今天這個class被作為一個父類別被繼承下去的話，他的子類別在子類class的實例化前/後, \n都可以去訪問這個被protected的東西\n\n\n#### 3. readonly 宣告的存在:\n\n##### 如果一個class 的變數被宣告為readonly， 則:\n1. 這個方法/變數/constructor只能在class(實例化前後)被讀取，但不能被改變\n2. 就算class被作為父類別繼承，他的子類別一樣不能去修改父類別繼承下來的變數\n3. 注意 readonly只能用來把變數標注成唯讀，方法跟constructor 是不能設定的\n\n#### 4. getter與 setter\n\n> typescript 的 class 可以把裡面的變數(屬性) 寫成 getter與setter 的形式[color=#36c169]\n\n> 如果是用VSCODE作為IDE的話，可以先把變數(屬性)反白，然後右鍵點左上角的小燈泡，這樣就可以自動產出ts 的get/set snippet 語法\n> ![](https://i.imgur.com/qGgO47X.png)\n\n以上面圖片這個例子來講, 當這個class的a屬性被改成get/set之後，就會變成下面這樣\n\n````typescript\nclass test{\n  constructor(){\n\n  }\n  private _a: string = \"abc\";\n  public get a(): string {\n    return this._a;\n  }\n  public set a(value: string) {\n    this._a = value;\n  }\n}\n````\n\n然後當這個class被實例化之後就可以透過setter去賦值，也就是\n````typescript\nlet example  = new test();\ntest.a = \"def\";\n//  這邊\"def\"會自動作為value 被帶入到set a(value)裡面去\n````\n\n\n","source":"_posts/TYPESCRIPT學習筆記-ep3.md","raw":"---\ntitle: TYPESCRIPT學習筆記-ep3\ncategories: \n- 前端技術學習心得\ntags:\n- ts\n---\n\n\n\n## TS 的class 跟 es6 有什麼差別？\n\n#### 1. private與 public 宣告的存在:\n如果一個方法/變數/constructor被宣告為public 則能在聲明它的類的外部被取用\n反之若宣告為private， 那這個方法/變數/constructor 就只能在自己的class裡面被使用\n\n所以說這樣會錯\n\n> 實際上, 當private 方法/變數/constructor 在父類別被繼承出去的時候，\n他是會進到子類別（或子類別的實例）裡面的，但是就是無法訪問而已\n\n````typescript\nclass fruit{\n    constructor(){\n\n    }\n\n    private type =\"fruit\";\n    method1(){\n        console.log(this.type);\n    }\n}\n\n\nlet a  = new fruit();\nconsole.log(a.type);//報錯, 因為type 只能在fruit裡面被使用，被new 出來的實例沒辦法取得他\n\n\nclass apple extends fruit{\n    constructor(){\n        super();\n        this.type = \"aa\"\n    }\n    mm(){\n        console.log(this.type);//報錯, 因為type 只能在fruit裡面被使用，就算是extend 過來也不行\n    }\n}\n````\n\n\n#### 2. protect 宣告的存在:\n\n##### 如果一個class 的方法/變數/constructor被宣告為protected， 則:\n1. 這個方法/變數/constructor能在class裡面被叫用\n但是我們不能透過這個class的實例去拿到他被 protect 的東西\n2. 但若如果今天這個class被作為一個父類別被繼承下去的話，他的子類別在子類class的實例化前/後, \n都可以去訪問這個被protected的東西\n\n\n#### 3. readonly 宣告的存在:\n\n##### 如果一個class 的變數被宣告為readonly， 則:\n1. 這個方法/變數/constructor只能在class(實例化前後)被讀取，但不能被改變\n2. 就算class被作為父類別繼承，他的子類別一樣不能去修改父類別繼承下來的變數\n3. 注意 readonly只能用來把變數標注成唯讀，方法跟constructor 是不能設定的\n\n#### 4. getter與 setter\n\n> typescript 的 class 可以把裡面的變數(屬性) 寫成 getter與setter 的形式[color=#36c169]\n\n> 如果是用VSCODE作為IDE的話，可以先把變數(屬性)反白，然後右鍵點左上角的小燈泡，這樣就可以自動產出ts 的get/set snippet 語法\n> ![](https://i.imgur.com/qGgO47X.png)\n\n以上面圖片這個例子來講, 當這個class的a屬性被改成get/set之後，就會變成下面這樣\n\n````typescript\nclass test{\n  constructor(){\n\n  }\n  private _a: string = \"abc\";\n  public get a(): string {\n    return this._a;\n  }\n  public set a(value: string) {\n    this._a = value;\n  }\n}\n````\n\n然後當這個class被實例化之後就可以透過setter去賦值，也就是\n````typescript\nlet example  = new test();\ntest.a = \"def\";\n//  這邊\"def\"會自動作為value 被帶入到set a(value)裡面去\n````\n\n\n","slug":"TYPESCRIPT學習筆記-ep3","published":1,"date":"2020-11-25T17:01:45.850Z","updated":"2020-12-12T19:53:00.423Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktx1vyz2001ptay2f4l5e64u","content":"<h2 id=\"TS-的class-跟-es6-有什麼差別？\"><a href=\"#TS-的class-跟-es6-有什麼差別？\" class=\"headerlink\" title=\"TS 的class 跟 es6 有什麼差別？\"></a>TS 的class 跟 es6 有什麼差別？</h2><h4 id=\"1-private與-public-宣告的存在\"><a href=\"#1-private與-public-宣告的存在\" class=\"headerlink\" title=\"1. private與 public 宣告的存在:\"></a>1. private與 public 宣告的存在:</h4><p>如果一個方法/變數/constructor被宣告為public 則能在聲明它的類的外部被取用<br>反之若宣告為private， 那這個方法/變數/constructor 就只能在自己的class裡面被使用</p>\n<p>所以說這樣會錯</p>\n<blockquote>\n<p>實際上, 當private 方法/變數/constructor 在父類別被繼承出去的時候，<br>他是會進到子類別（或子類別的實例）裡面的，但是就是無法訪問而已</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">fruit</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">type</span> =<span class=\"string\">&quot;fruit&quot;</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">method1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.type);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a  = <span class=\"keyword\">new</span> fruit();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.type);<span class=\"comment\">//報錯, 因為type 只能在fruit裡面被使用，被new 出來的實例沒辦法取得他</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">apple</span> <span class=\"keyword\">extends</span> <span class=\"title\">fruit</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.type = <span class=\"string\">&quot;aa&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">mm</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.type);<span class=\"comment\">//報錯, 因為type 只能在fruit裡面被使用，就算是extend 過來也不行</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"2-protect-宣告的存在\"><a href=\"#2-protect-宣告的存在\" class=\"headerlink\" title=\"2. protect 宣告的存在:\"></a>2. protect 宣告的存在:</h4><h5 id=\"如果一個class-的方法-變數-constructor被宣告為protected，-則\"><a href=\"#如果一個class-的方法-變數-constructor被宣告為protected，-則\" class=\"headerlink\" title=\"如果一個class 的方法/變數/constructor被宣告為protected， 則:\"></a>如果一個class 的方法/變數/constructor被宣告為protected， 則:</h5><ol>\n<li>這個方法/變數/constructor能在class裡面被叫用<br>但是我們不能透過這個class的實例去拿到他被 protect 的東西</li>\n<li>但若如果今天這個class被作為一個父類別被繼承下去的話，他的子類別在子類class的實例化前/後,<br>都可以去訪問這個被protected的東西</li>\n</ol>\n<h4 id=\"3-readonly-宣告的存在\"><a href=\"#3-readonly-宣告的存在\" class=\"headerlink\" title=\"3. readonly 宣告的存在:\"></a>3. readonly 宣告的存在:</h4><h5 id=\"如果一個class-的變數被宣告為readonly，-則\"><a href=\"#如果一個class-的變數被宣告為readonly，-則\" class=\"headerlink\" title=\"如果一個class 的變數被宣告為readonly， 則:\"></a>如果一個class 的變數被宣告為readonly， 則:</h5><ol>\n<li>這個方法/變數/constructor只能在class(實例化前後)被讀取，但不能被改變</li>\n<li>就算class被作為父類別繼承，他的子類別一樣不能去修改父類別繼承下來的變數</li>\n<li>注意 readonly只能用來把變數標注成唯讀，方法跟constructor 是不能設定的</li>\n</ol>\n<h4 id=\"4-getter與-setter\"><a href=\"#4-getter與-setter\" class=\"headerlink\" title=\"4. getter與 setter\"></a>4. getter與 setter</h4><blockquote>\n<p>typescript 的 class 可以把裡面的變數(屬性) 寫成 getter與setter 的形式[color=#36c169]</p>\n</blockquote>\n<blockquote>\n<p>如果是用VSCODE作為IDE的話，可以先把變數(屬性)反白，然後右鍵點左上角的小燈泡，這樣就可以自動產出ts 的get/set snippet 語法<br><img src=\"https://i.imgur.com/qGgO47X.png\"></p>\n</blockquote>\n<p>以上面圖片這個例子來講, 當這個class的a屬性被改成get/set之後，就會變成下面這樣</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> _a: <span class=\"built_in\">string</span> = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">get</span> <span class=\"title\">a</span>(): <span class=\"title\">string</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>._a;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">set</span> <span class=\"title\">a</span>(<span class=\"params\">value: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>._a = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然後當這個class被實例化之後就可以透過setter去賦值，也就是</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> example  = <span class=\"keyword\">new</span> test();</span><br><span class=\"line\">test.a = <span class=\"string\">&quot;def&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">//  這邊&quot;def&quot;會自動作為value 被帶入到set a(value)裡面去</span></span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{"css/variables":"","languages":{"zh-TW":{"title":{"archive":"時間線","category":"分類","tag":"標籤","schedule":"時間表"},"menu":{"home":"首頁","archives":"時間線","categories":"分類","tags":"標籤","about":"關於","search":"搜尋","schedule":"時間表","sitemap":"網站地圖","commonweal":"公益 404"},"sidebar":{"overview":"本站概要","toc":"文章目錄"},"post":{"posted":"發表於","edited":"更新於","created":"創建時間","modified":"修改時間","edit":"編輯","in":"分類於","read_more":"閱讀全文","untitled":"未命名","sticky":"置頂文","views":"閱讀次數","related_posts":"相關文章","copyright":{"author":"作者","link":"文章連結","post_author":"Written by","post_link":"This article originally appeared on","license_title":"版權聲明","license_content":"本網誌所有文章除特別聲明外，均採用 %s 許可協議。轉載請註明出處！"}},"footer":{"powered":"","total_views":"總瀏覽次數","total_visitors":"訪客總數"},"counter":{"tag_cloud":{"zero":"目前還沒有任何標籤","one":"目前共有 1 個標籤","other":"目前共有 %d 個標籤"},"categories":{"zero":"目前還沒有任何分類","one":"目前共有 1 個分類","other":"目前共有 %d 個分類"},"archive_posts":{"zero":"目前還沒有任何文章。","one":"目前共有 1 篇文章。","other":"目前共有 %d 篇文章。"}},"state":{"posts":"文章","tags":"標籤","categories":"分類"},"search":{"placeholder":"搜尋...","empty":"We didn't find any results for the search: %s","hits_time":"%s results found in %s ms","hits":"%s results found"},"cheers":{"um":"嗯..","ok":"還不錯","nice":"好","good":"很好","great":"非常好","excellent":"棒棒Der"},"keep_on":"繼續努力。","symbol":{"comma":"，","period":"。","colon":"："},"reward":{"donate":"捐贈","wechatpay":"微信支付","alipay":"支付寶","paypal":"貝寶","bitcoin":"比特幣"},"follow_me":{"welcome":"歡迎關注我的其它站點"},"accessibility":{"nav_toggle":"切換導航欄","prev_page":"上一頁","next_page":"下一頁"},"symbols_count_time":{"count":"文章字數","count_total":"總字數","time":"所需閱讀時間","time_total":"所需總閱讀時間","time_minutes":"分鐘"}}},"css/mixins":"","css/styles":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","template/head":"<script src=\"//js/tool/canvas-fx-base.js\"></script>\n\n<script src=\"//js/ripple-logo.js\"></script>\n<script src=\"//js/silk-wave.js\"></script>\n\n<style>\n  @font-face {\n  font-family: \"Roboto\";\n  src: url(//font/Roboto.ttf) format(\"truetype\");\n}\n</style>","css/styl-plugin/grid-post-layout/main":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","css/styl-plugin/grid-post-layout/mixins":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n","css/styl-plugin/grid-post-layout/variables":""}},"excerpt":"","more":"<h2 id=\"TS-的class-跟-es6-有什麼差別？\"><a href=\"#TS-的class-跟-es6-有什麼差別？\" class=\"headerlink\" title=\"TS 的class 跟 es6 有什麼差別？\"></a>TS 的class 跟 es6 有什麼差別？</h2><h4 id=\"1-private與-public-宣告的存在\"><a href=\"#1-private與-public-宣告的存在\" class=\"headerlink\" title=\"1. private與 public 宣告的存在:\"></a>1. private與 public 宣告的存在:</h4><p>如果一個方法/變數/constructor被宣告為public 則能在聲明它的類的外部被取用<br>反之若宣告為private， 那這個方法/變數/constructor 就只能在自己的class裡面被使用</p>\n<p>所以說這樣會錯</p>\n<blockquote>\n<p>實際上, 當private 方法/變數/constructor 在父類別被繼承出去的時候，<br>他是會進到子類別（或子類別的實例）裡面的，但是就是無法訪問而已</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">fruit</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">type</span> =<span class=\"string\">&quot;fruit&quot;</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">method1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.type);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a  = <span class=\"keyword\">new</span> fruit();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.type);<span class=\"comment\">//報錯, 因為type 只能在fruit裡面被使用，被new 出來的實例沒辦法取得他</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">apple</span> <span class=\"keyword\">extends</span> <span class=\"title\">fruit</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.type = <span class=\"string\">&quot;aa&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">mm</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.type);<span class=\"comment\">//報錯, 因為type 只能在fruit裡面被使用，就算是extend 過來也不行</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"2-protect-宣告的存在\"><a href=\"#2-protect-宣告的存在\" class=\"headerlink\" title=\"2. protect 宣告的存在:\"></a>2. protect 宣告的存在:</h4><h5 id=\"如果一個class-的方法-變數-constructor被宣告為protected，-則\"><a href=\"#如果一個class-的方法-變數-constructor被宣告為protected，-則\" class=\"headerlink\" title=\"如果一個class 的方法/變數/constructor被宣告為protected， 則:\"></a>如果一個class 的方法/變數/constructor被宣告為protected， 則:</h5><ol>\n<li>這個方法/變數/constructor能在class裡面被叫用<br>但是我們不能透過這個class的實例去拿到他被 protect 的東西</li>\n<li>但若如果今天這個class被作為一個父類別被繼承下去的話，他的子類別在子類class的實例化前/後,<br>都可以去訪問這個被protected的東西</li>\n</ol>\n<h4 id=\"3-readonly-宣告的存在\"><a href=\"#3-readonly-宣告的存在\" class=\"headerlink\" title=\"3. readonly 宣告的存在:\"></a>3. readonly 宣告的存在:</h4><h5 id=\"如果一個class-的變數被宣告為readonly，-則\"><a href=\"#如果一個class-的變數被宣告為readonly，-則\" class=\"headerlink\" title=\"如果一個class 的變數被宣告為readonly， 則:\"></a>如果一個class 的變數被宣告為readonly， 則:</h5><ol>\n<li>這個方法/變數/constructor只能在class(實例化前後)被讀取，但不能被改變</li>\n<li>就算class被作為父類別繼承，他的子類別一樣不能去修改父類別繼承下來的變數</li>\n<li>注意 readonly只能用來把變數標注成唯讀，方法跟constructor 是不能設定的</li>\n</ol>\n<h4 id=\"4-getter與-setter\"><a href=\"#4-getter與-setter\" class=\"headerlink\" title=\"4. getter與 setter\"></a>4. getter與 setter</h4><blockquote>\n<p>typescript 的 class 可以把裡面的變數(屬性) 寫成 getter與setter 的形式[color=#36c169]</p>\n</blockquote>\n<blockquote>\n<p>如果是用VSCODE作為IDE的話，可以先把變數(屬性)反白，然後右鍵點左上角的小燈泡，這樣就可以自動產出ts 的get/set snippet 語法<br><img src=\"https://i.imgur.com/qGgO47X.png\"></p>\n</blockquote>\n<p>以上面圖片這個例子來講, 當這個class的a屬性被改成get/set之後，就會變成下面這樣</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> _a: <span class=\"built_in\">string</span> = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">get</span> <span class=\"title\">a</span>(): <span class=\"title\">string</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>._a;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">set</span> <span class=\"title\">a</span>(<span class=\"params\">value: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>._a = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然後當這個class被實例化之後就可以透過setter去賦值，也就是</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> example  = <span class=\"keyword\">new</span> test();</span><br><span class=\"line\">test.a = <span class=\"string\">&quot;def&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">//  這邊&quot;def&quot;會自動作為value 被帶入到set a(value)裡面去</span></span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"rxjs 學習筆記 - ep1","_content":"\n# Opening\n\n前陣子講了很久要來學習RxJs, 但是實際上卻是拖到了現在才要認真開始把它學好~\n事不宜遲，我們這邊就馬上開始基礎的部分\n\n# Preface\n\n首先，我們先來說說為什麼要學`rxjs`, 平常寫前端UI真的有常常需要用到這東西嗎?\n\n之前偶爾有聽說`RxJs`可以用來做高頻率事件的監聽與處理(例如`mousemove`或`touchmove`), 但是這跟一般的`addEventListener` 或 `jquery` 的`.on` 方法又差在哪裡? 有必要為了一個高頻事件處理去特地學這麼一個看上去很複雜的東西嗎?\n\n實際上，如果只是要處理高頻事件監聽，確實是沒有需要特地去學習`Rxjs`。\n但是`Rxjs` 其實並不是一個只能用來做高頻事件監聽控管的library。\n\nRxjs最重要的意義之一就是`Reactive Programming`，也就是`當變數或資源發生變動時，由變數或資源自動告訴我發生變動了`。\n\nRxjs 把很多東西都當成Reactive的對象, 除了前面提到的高頻事件的event object，另外也可以把單純的變數(物件/數值等)作為reavtive對象, 而這個概念也就是所謂的 `Observable`。\n\n\n\n","source":"_posts/rxjs 學習筆記 - ep1.md","raw":"---\ntitle: rxjs 學習筆記 - ep1\ncategories: \n- 前端技術學習心得\ntags:\n- js\n- rxjs\n---\n\n# Opening\n\n前陣子講了很久要來學習RxJs, 但是實際上卻是拖到了現在才要認真開始把它學好~\n事不宜遲，我們這邊就馬上開始基礎的部分\n\n# Preface\n\n首先，我們先來說說為什麼要學`rxjs`, 平常寫前端UI真的有常常需要用到這東西嗎?\n\n之前偶爾有聽說`RxJs`可以用來做高頻率事件的監聽與處理(例如`mousemove`或`touchmove`), 但是這跟一般的`addEventListener` 或 `jquery` 的`.on` 方法又差在哪裡? 有必要為了一個高頻事件處理去特地學這麼一個看上去很複雜的東西嗎?\n\n實際上，如果只是要處理高頻事件監聽，確實是沒有需要特地去學習`Rxjs`。\n但是`Rxjs` 其實並不是一個只能用來做高頻事件監聽控管的library。\n\nRxjs最重要的意義之一就是`Reactive Programming`，也就是`當變數或資源發生變動時，由變數或資源自動告訴我發生變動了`。\n\nRxjs 把很多東西都當成Reactive的對象, 除了前面提到的高頻事件的event object，另外也可以把單純的變數(物件/數值等)作為reavtive對象, 而這個概念也就是所謂的 `Observable`。\n\n\n\n","slug":"rxjs 學習筆記 - ep1","published":1,"date":"2020-12-12T19:47:33.476Z","updated":"2020-12-13T10:01:36.027Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktx1vyz5001ttay288kgctwi","content":"<h1 id=\"Opening\"><a href=\"#Opening\" class=\"headerlink\" title=\"Opening\"></a>Opening</h1><p>前陣子講了很久要來學習RxJs, 但是實際上卻是拖到了現在才要認真開始把它學好~<br>事不宜遲，我們這邊就馬上開始基礎的部分</p>\n<h1 id=\"Preface\"><a href=\"#Preface\" class=\"headerlink\" title=\"Preface\"></a>Preface</h1><p>首先，我們先來說說為什麼要學<code>rxjs</code>, 平常寫前端UI真的有常常需要用到這東西嗎?</p>\n<p>之前偶爾有聽說<code>RxJs</code>可以用來做高頻率事件的監聽與處理(例如<code>mousemove</code>或<code>touchmove</code>), 但是這跟一般的<code>addEventListener</code> 或 <code>jquery</code> 的<code>.on</code> 方法又差在哪裡? 有必要為了一個高頻事件處理去特地學這麼一個看上去很複雜的東西嗎?</p>\n<p>實際上，如果只是要處理高頻事件監聽，確實是沒有需要特地去學習<code>Rxjs</code>。<br>但是<code>Rxjs</code> 其實並不是一個只能用來做高頻事件監聽控管的library。</p>\n<p>Rxjs最重要的意義之一就是<code>Reactive Programming</code>，也就是<code>當變數或資源發生變動時，由變數或資源自動告訴我發生變動了</code>。</p>\n<p>Rxjs 把很多東西都當成Reactive的對象, 除了前面提到的高頻事件的event object，另外也可以把單純的變數(物件/數值等)作為reavtive對象, 而這個概念也就是所謂的 <code>Observable</code>。</p>\n","site":{"data":{"css/variables":"","languages":{"zh-TW":{"title":{"archive":"時間線","category":"分類","tag":"標籤","schedule":"時間表"},"menu":{"home":"首頁","archives":"時間線","categories":"分類","tags":"標籤","about":"關於","search":"搜尋","schedule":"時間表","sitemap":"網站地圖","commonweal":"公益 404"},"sidebar":{"overview":"本站概要","toc":"文章目錄"},"post":{"posted":"發表於","edited":"更新於","created":"創建時間","modified":"修改時間","edit":"編輯","in":"分類於","read_more":"閱讀全文","untitled":"未命名","sticky":"置頂文","views":"閱讀次數","related_posts":"相關文章","copyright":{"author":"作者","link":"文章連結","post_author":"Written by","post_link":"This article originally appeared on","license_title":"版權聲明","license_content":"本網誌所有文章除特別聲明外，均採用 %s 許可協議。轉載請註明出處！"}},"footer":{"powered":"","total_views":"總瀏覽次數","total_visitors":"訪客總數"},"counter":{"tag_cloud":{"zero":"目前還沒有任何標籤","one":"目前共有 1 個標籤","other":"目前共有 %d 個標籤"},"categories":{"zero":"目前還沒有任何分類","one":"目前共有 1 個分類","other":"目前共有 %d 個分類"},"archive_posts":{"zero":"目前還沒有任何文章。","one":"目前共有 1 篇文章。","other":"目前共有 %d 篇文章。"}},"state":{"posts":"文章","tags":"標籤","categories":"分類"},"search":{"placeholder":"搜尋...","empty":"We didn't find any results for the search: %s","hits_time":"%s results found in %s ms","hits":"%s results found"},"cheers":{"um":"嗯..","ok":"還不錯","nice":"好","good":"很好","great":"非常好","excellent":"棒棒Der"},"keep_on":"繼續努力。","symbol":{"comma":"，","period":"。","colon":"："},"reward":{"donate":"捐贈","wechatpay":"微信支付","alipay":"支付寶","paypal":"貝寶","bitcoin":"比特幣"},"follow_me":{"welcome":"歡迎關注我的其它站點"},"accessibility":{"nav_toggle":"切換導航欄","prev_page":"上一頁","next_page":"下一頁"},"symbols_count_time":{"count":"文章字數","count_total":"總字數","time":"所需閱讀時間","time_total":"所需總閱讀時間","time_minutes":"分鐘"}}},"css/mixins":"","css/styles":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","template/head":"<script src=\"//js/tool/canvas-fx-base.js\"></script>\n\n<script src=\"//js/ripple-logo.js\"></script>\n<script src=\"//js/silk-wave.js\"></script>\n\n<style>\n  @font-face {\n  font-family: \"Roboto\";\n  src: url(//font/Roboto.ttf) format(\"truetype\");\n}\n</style>","css/styl-plugin/grid-post-layout/main":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","css/styl-plugin/grid-post-layout/mixins":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n","css/styl-plugin/grid-post-layout/variables":""}},"excerpt":"","more":"<h1 id=\"Opening\"><a href=\"#Opening\" class=\"headerlink\" title=\"Opening\"></a>Opening</h1><p>前陣子講了很久要來學習RxJs, 但是實際上卻是拖到了現在才要認真開始把它學好~<br>事不宜遲，我們這邊就馬上開始基礎的部分</p>\n<h1 id=\"Preface\"><a href=\"#Preface\" class=\"headerlink\" title=\"Preface\"></a>Preface</h1><p>首先，我們先來說說為什麼要學<code>rxjs</code>, 平常寫前端UI真的有常常需要用到這東西嗎?</p>\n<p>之前偶爾有聽說<code>RxJs</code>可以用來做高頻率事件的監聽與處理(例如<code>mousemove</code>或<code>touchmove</code>), 但是這跟一般的<code>addEventListener</code> 或 <code>jquery</code> 的<code>.on</code> 方法又差在哪裡? 有必要為了一個高頻事件處理去特地學這麼一個看上去很複雜的東西嗎?</p>\n<p>實際上，如果只是要處理高頻事件監聽，確實是沒有需要特地去學習<code>Rxjs</code>。<br>但是<code>Rxjs</code> 其實並不是一個只能用來做高頻事件監聽控管的library。</p>\n<p>Rxjs最重要的意義之一就是<code>Reactive Programming</code>，也就是<code>當變數或資源發生變動時，由變數或資源自動告訴我發生變動了</code>。</p>\n<p>Rxjs 把很多東西都當成Reactive的對象, 除了前面提到的高頻事件的event object，另外也可以把單純的變數(物件/數值等)作為reavtive對象, 而這個概念也就是所謂的 <code>Observable</code>。</p>\n"},{"title":"rxjs 學習筆記 - ep2","_content":"\n# Observable\n\n","source":"_posts/rxjs 學習筆記 - ep2.md","raw":"---\ntitle: rxjs 學習筆記 - ep2\ncategories: \n- 前端技術學習心得\ntags:\n- js\n- rxjs\n---\n\n# Observable\n\n","slug":"rxjs 學習筆記 - ep2","published":1,"date":"2020-12-13T10:02:26.623Z","updated":"2020-12-14T03:29:44.895Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktx1vyz6001vtay23cvx67eg","content":"<h1 id=\"Observable\"><a href=\"#Observable\" class=\"headerlink\" title=\"Observable\"></a>Observable</h1>","site":{"data":{"css/variables":"","languages":{"zh-TW":{"title":{"archive":"時間線","category":"分類","tag":"標籤","schedule":"時間表"},"menu":{"home":"首頁","archives":"時間線","categories":"分類","tags":"標籤","about":"關於","search":"搜尋","schedule":"時間表","sitemap":"網站地圖","commonweal":"公益 404"},"sidebar":{"overview":"本站概要","toc":"文章目錄"},"post":{"posted":"發表於","edited":"更新於","created":"創建時間","modified":"修改時間","edit":"編輯","in":"分類於","read_more":"閱讀全文","untitled":"未命名","sticky":"置頂文","views":"閱讀次數","related_posts":"相關文章","copyright":{"author":"作者","link":"文章連結","post_author":"Written by","post_link":"This article originally appeared on","license_title":"版權聲明","license_content":"本網誌所有文章除特別聲明外，均採用 %s 許可協議。轉載請註明出處！"}},"footer":{"powered":"","total_views":"總瀏覽次數","total_visitors":"訪客總數"},"counter":{"tag_cloud":{"zero":"目前還沒有任何標籤","one":"目前共有 1 個標籤","other":"目前共有 %d 個標籤"},"categories":{"zero":"目前還沒有任何分類","one":"目前共有 1 個分類","other":"目前共有 %d 個分類"},"archive_posts":{"zero":"目前還沒有任何文章。","one":"目前共有 1 篇文章。","other":"目前共有 %d 篇文章。"}},"state":{"posts":"文章","tags":"標籤","categories":"分類"},"search":{"placeholder":"搜尋...","empty":"We didn't find any results for the search: %s","hits_time":"%s results found in %s ms","hits":"%s results found"},"cheers":{"um":"嗯..","ok":"還不錯","nice":"好","good":"很好","great":"非常好","excellent":"棒棒Der"},"keep_on":"繼續努力。","symbol":{"comma":"，","period":"。","colon":"："},"reward":{"donate":"捐贈","wechatpay":"微信支付","alipay":"支付寶","paypal":"貝寶","bitcoin":"比特幣"},"follow_me":{"welcome":"歡迎關注我的其它站點"},"accessibility":{"nav_toggle":"切換導航欄","prev_page":"上一頁","next_page":"下一頁"},"symbols_count_time":{"count":"文章字數","count_total":"總字數","time":"所需閱讀時間","time_total":"所需總閱讀時間","time_minutes":"分鐘"}}},"css/mixins":"","css/styles":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","template/head":"<script src=\"//js/tool/canvas-fx-base.js\"></script>\n\n<script src=\"//js/ripple-logo.js\"></script>\n<script src=\"//js/silk-wave.js\"></script>\n\n<style>\n  @font-face {\n  font-family: \"Roboto\";\n  src: url(//font/Roboto.ttf) format(\"truetype\");\n}\n</style>","css/styl-plugin/grid-post-layout/main":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","css/styl-plugin/grid-post-layout/mixins":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n","css/styl-plugin/grid-post-layout/variables":""}},"excerpt":"","more":"<h1 id=\"Observable\"><a href=\"#Observable\" class=\"headerlink\" title=\"Observable\"></a>Observable</h1>"},{"title":"Day1 - 序言 - 成為Canvas Ninja ～ 理解2D渲染的精髓","_content":"\n## SO Just Who The Hell Am I?\n\n大家好! 首先先介紹一下我自己, 我是**Mizok** :D  \n小弟目前人在金融相關產業擔任前端工程師，到今年為止大約有三年左右的資歷。  \n我在就職的這幾年一直有意識到一件事: 不知道是不是因為個人學經歷的關係(過去並不是資訊本科生畢業), 我對前端感興趣的部分也比較奇怪(?)\n比起鑽研那些最新的前端框架功能/API，我發現我自己更喜歡研究瀏覽器渲染與視覺呈現方面的技術(例如物理模擬程序背後的數學運算)。  \n今年首次挑戰參加鐵人賽，有一部分的目標也是想把自己目前曾經研究過的東西再整理一遍，並且加以深化。  \n那麼話不多說，接下來就開始介紹我的參賽主題 :D\n\n\n## What Is Ninja?\n\n首先必須老實說, 這個標題其實不是我想的ＸＤ, 而是來自於一本[外文書](https://www.amazon.com/HTML5-Canvas-Ninja-Kirupa-Chinnathambi/dp/1523978090)  \n之所以取這個名字只是因為想要看起來**潮潮的**～然後我在這邊為這次的參賽主題畫了一個LOGO, **我覺得很酷**(自己說)\n\n\n平常在國外的前端社群中提到Ninja這個詞的時候～指的是一些習慣用很自由奔放(而且又讓人看不懂)的語法，來編寫專案源碼的工程師～**是一個帶有負面意義的詞**。  \n而小弟我對於自己的期許當然也不是成為那樣子的開發者ＸＤ。\nNinja這個詞彙對我來說，比較近似於對某種技藝有深度理解的人。  \n我期許自己不只能做到理解框架/套件怎麼使用，而且還要能深入它們背後的邏輯，並且把這部分的理解運用在自己的專案上。  \n這對我來說就是成為一個Ninja的必經過程。\n\n## Why Canvas?\n\n大家都知道，IE近年已經逐漸退出市場，而這個趨勢也漸漸的對前端圈子造成了不小的影響，除了各大前端框架相繼放棄支援IE以外，過去因為IE實作問題而被限制的技術也漸漸的開始浮出水面\n小弟本身因為是在金融相關的專案公司就職，對於這部分真的是很有感。 \n\n這三年以來，其實不難發現在台灣的業界中，**前端專案視覺部分的複雜程度有一點一點的在逐漸提升**，從過去那種用BS隨便套一套就可以交差的網頁， 到現在隨便一個Campaign Site可能就會要你用動畫引擎去實作一堆有的沒的特效。\n個人覺得在未來的前端業界中，出現像遊戲公司技術美術(TA)那樣的職位，大概也是極其有可能的。  \n\n前端工程師對於技術的鑽研，其實某種程度上也是對於未來的投資。而我之所以選擇Canvas這項技術，大部分的原因也就是想要探求這門技術，它在未來是否有更多的可能性。\n\n## About The Road Map\n\n老實說我一開始在定下這個題目的時候也很猶豫，因為一開始是打算把webgl的內容一起包括進來這次的賽程的，但是後來實際評估了一下(有先試著寫了幾篇)，才意識到要在30天內把2D + Webgl 全部寫完對我而言還是太困難了，畢竟平常還有工作 ：（\n\n主題的規劃上，在賽程的前段會先從基本的2D渲染理論和技術講起，\n中期開始則是會找一些實務上常見的特效範例/套件效果來作為研究目標。\n目前預計會提到的技術:\n  1. web 端粒子系統實作\n  2. 力學效果模擬（磁力/張力/引力）\n  3. 布料材質模擬\n  4. 二維以上的碰撞模擬\n  5. 像素操作  \n\n## 敬請期待!","source":"_posts/序言 - 成為Canvas Ninja ～ 理解2D渲染的精髓.md","raw":"---\ntitle: Day1 - 序言 - 成為Canvas Ninja ～ 理解2D渲染的精髓\ncategories: \n- 前端技術學習心得\ntags:\n- 2021鐵人賽\n---\n\n## SO Just Who The Hell Am I?\n\n大家好! 首先先介紹一下我自己, 我是**Mizok** :D  \n小弟目前人在金融相關產業擔任前端工程師，到今年為止大約有三年左右的資歷。  \n我在就職的這幾年一直有意識到一件事: 不知道是不是因為個人學經歷的關係(過去並不是資訊本科生畢業), 我對前端感興趣的部分也比較奇怪(?)\n比起鑽研那些最新的前端框架功能/API，我發現我自己更喜歡研究瀏覽器渲染與視覺呈現方面的技術(例如物理模擬程序背後的數學運算)。  \n今年首次挑戰參加鐵人賽，有一部分的目標也是想把自己目前曾經研究過的東西再整理一遍，並且加以深化。  \n那麼話不多說，接下來就開始介紹我的參賽主題 :D\n\n\n## What Is Ninja?\n\n首先必須老實說, 這個標題其實不是我想的ＸＤ, 而是來自於一本[外文書](https://www.amazon.com/HTML5-Canvas-Ninja-Kirupa-Chinnathambi/dp/1523978090)  \n之所以取這個名字只是因為想要看起來**潮潮的**～然後我在這邊為這次的參賽主題畫了一個LOGO, **我覺得很酷**(自己說)\n\n\n平常在國外的前端社群中提到Ninja這個詞的時候～指的是一些習慣用很自由奔放(而且又讓人看不懂)的語法，來編寫專案源碼的工程師～**是一個帶有負面意義的詞**。  \n而小弟我對於自己的期許當然也不是成為那樣子的開發者ＸＤ。\nNinja這個詞彙對我來說，比較近似於對某種技藝有深度理解的人。  \n我期許自己不只能做到理解框架/套件怎麼使用，而且還要能深入它們背後的邏輯，並且把這部分的理解運用在自己的專案上。  \n這對我來說就是成為一個Ninja的必經過程。\n\n## Why Canvas?\n\n大家都知道，IE近年已經逐漸退出市場，而這個趨勢也漸漸的對前端圈子造成了不小的影響，除了各大前端框架相繼放棄支援IE以外，過去因為IE實作問題而被限制的技術也漸漸的開始浮出水面\n小弟本身因為是在金融相關的專案公司就職，對於這部分真的是很有感。 \n\n這三年以來，其實不難發現在台灣的業界中，**前端專案視覺部分的複雜程度有一點一點的在逐漸提升**，從過去那種用BS隨便套一套就可以交差的網頁， 到現在隨便一個Campaign Site可能就會要你用動畫引擎去實作一堆有的沒的特效。\n個人覺得在未來的前端業界中，出現像遊戲公司技術美術(TA)那樣的職位，大概也是極其有可能的。  \n\n前端工程師對於技術的鑽研，其實某種程度上也是對於未來的投資。而我之所以選擇Canvas這項技術，大部分的原因也就是想要探求這門技術，它在未來是否有更多的可能性。\n\n## About The Road Map\n\n老實說我一開始在定下這個題目的時候也很猶豫，因為一開始是打算把webgl的內容一起包括進來這次的賽程的，但是後來實際評估了一下(有先試著寫了幾篇)，才意識到要在30天內把2D + Webgl 全部寫完對我而言還是太困難了，畢竟平常還有工作 ：（\n\n主題的規劃上，在賽程的前段會先從基本的2D渲染理論和技術講起，\n中期開始則是會找一些實務上常見的特效範例/套件效果來作為研究目標。\n目前預計會提到的技術:\n  1. web 端粒子系統實作\n  2. 力學效果模擬（磁力/張力/引力）\n  3. 布料材質模擬\n  4. 二維以上的碰撞模擬\n  5. 像素操作  \n\n## 敬請期待!","slug":"序言 - 成為Canvas Ninja ～ 理解2D渲染的精髓","published":1,"date":"2021-09-01T18:21:29.441Z","updated":"2021-09-14T16:26:03.245Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktx1vyz7001ytay20nod0g47","content":"<h2 id=\"SO-Just-Who-The-Hell-Am-I\"><a href=\"#SO-Just-Who-The-Hell-Am-I\" class=\"headerlink\" title=\"SO Just Who The Hell Am I?\"></a>SO Just Who The Hell Am I?</h2><p>大家好! 首先先介紹一下我自己, 我是<strong>Mizok</strong> :D<br>小弟目前人在金融相關產業擔任前端工程師，到今年為止大約有三年左右的資歷。<br>我在就職的這幾年一直有意識到一件事: 不知道是不是因為個人學經歷的關係(過去並不是資訊本科生畢業), 我對前端感興趣的部分也比較奇怪(?)<br>比起鑽研那些最新的前端框架功能/API，我發現我自己更喜歡研究瀏覽器渲染與視覺呈現方面的技術(例如物理模擬程序背後的數學運算)。<br>今年首次挑戰參加鐵人賽，有一部分的目標也是想把自己目前曾經研究過的東西再整理一遍，並且加以深化。<br>那麼話不多說，接下來就開始介紹我的參賽主題 :D</p>\n<h2 id=\"What-Is-Ninja\"><a href=\"#What-Is-Ninja\" class=\"headerlink\" title=\"What Is Ninja?\"></a>What Is Ninja?</h2><p>首先必須老實說, 這個標題其實不是我想的ＸＤ, 而是來自於一本<a href=\"https://www.amazon.com/HTML5-Canvas-Ninja-Kirupa-Chinnathambi/dp/1523978090\">外文書</a><br>之所以取這個名字只是因為想要看起來<strong>潮潮的</strong>～然後我在這邊為這次的參賽主題畫了一個LOGO, <strong>我覺得很酷</strong>(自己說)</p>\n<p>平常在國外的前端社群中提到Ninja這個詞的時候～指的是一些習慣用很自由奔放(而且又讓人看不懂)的語法，來編寫專案源碼的工程師～<strong>是一個帶有負面意義的詞</strong>。<br>而小弟我對於自己的期許當然也不是成為那樣子的開發者ＸＤ。<br>Ninja這個詞彙對我來說，比較近似於對某種技藝有深度理解的人。<br>我期許自己不只能做到理解框架/套件怎麼使用，而且還要能深入它們背後的邏輯，並且把這部分的理解運用在自己的專案上。<br>這對我來說就是成為一個Ninja的必經過程。</p>\n<h2 id=\"Why-Canvas\"><a href=\"#Why-Canvas\" class=\"headerlink\" title=\"Why Canvas?\"></a>Why Canvas?</h2><p>大家都知道，IE近年已經逐漸退出市場，而這個趨勢也漸漸的對前端圈子造成了不小的影響，除了各大前端框架相繼放棄支援IE以外，過去因為IE實作問題而被限制的技術也漸漸的開始浮出水面<br>小弟本身因為是在金融相關的專案公司就職，對於這部分真的是很有感。 </p>\n<p>這三年以來，其實不難發現在台灣的業界中，<strong>前端專案視覺部分的複雜程度有一點一點的在逐漸提升</strong>，從過去那種用BS隨便套一套就可以交差的網頁， 到現在隨便一個Campaign Site可能就會要你用動畫引擎去實作一堆有的沒的特效。<br>個人覺得在未來的前端業界中，出現像遊戲公司技術美術(TA)那樣的職位，大概也是極其有可能的。  </p>\n<p>前端工程師對於技術的鑽研，其實某種程度上也是對於未來的投資。而我之所以選擇Canvas這項技術，大部分的原因也就是想要探求這門技術，它在未來是否有更多的可能性。</p>\n<h2 id=\"About-The-Road-Map\"><a href=\"#About-The-Road-Map\" class=\"headerlink\" title=\"About The Road Map\"></a>About The Road Map</h2><p>老實說我一開始在定下這個題目的時候也很猶豫，因為一開始是打算把webgl的內容一起包括進來這次的賽程的，但是後來實際評估了一下(有先試著寫了幾篇)，才意識到要在30天內把2D + Webgl 全部寫完對我而言還是太困難了，畢竟平常還有工作 ：（</p>\n<p>主題的規劃上，在賽程的前段會先從基本的2D渲染理論和技術講起，<br>中期開始則是會找一些實務上常見的特效範例/套件效果來作為研究目標。<br>目前預計會提到的技術:</p>\n<ol>\n<li>web 端粒子系統實作</li>\n<li>力學效果模擬（磁力/張力/引力）</li>\n<li>布料材質模擬</li>\n<li>二維以上的碰撞模擬</li>\n<li>像素操作  </li>\n</ol>\n<h2 id=\"敬請期待\"><a href=\"#敬請期待\" class=\"headerlink\" title=\"敬請期待!\"></a>敬請期待!</h2>","site":{"data":{"css/variables":"","languages":{"zh-TW":{"title":{"archive":"時間線","category":"分類","tag":"標籤","schedule":"時間表"},"menu":{"home":"首頁","archives":"時間線","categories":"分類","tags":"標籤","about":"關於","search":"搜尋","schedule":"時間表","sitemap":"網站地圖","commonweal":"公益 404"},"sidebar":{"overview":"本站概要","toc":"文章目錄"},"post":{"posted":"發表於","edited":"更新於","created":"創建時間","modified":"修改時間","edit":"編輯","in":"分類於","read_more":"閱讀全文","untitled":"未命名","sticky":"置頂文","views":"閱讀次數","related_posts":"相關文章","copyright":{"author":"作者","link":"文章連結","post_author":"Written by","post_link":"This article originally appeared on","license_title":"版權聲明","license_content":"本網誌所有文章除特別聲明外，均採用 %s 許可協議。轉載請註明出處！"}},"footer":{"powered":"","total_views":"總瀏覽次數","total_visitors":"訪客總數"},"counter":{"tag_cloud":{"zero":"目前還沒有任何標籤","one":"目前共有 1 個標籤","other":"目前共有 %d 個標籤"},"categories":{"zero":"目前還沒有任何分類","one":"目前共有 1 個分類","other":"目前共有 %d 個分類"},"archive_posts":{"zero":"目前還沒有任何文章。","one":"目前共有 1 篇文章。","other":"目前共有 %d 篇文章。"}},"state":{"posts":"文章","tags":"標籤","categories":"分類"},"search":{"placeholder":"搜尋...","empty":"We didn't find any results for the search: %s","hits_time":"%s results found in %s ms","hits":"%s results found"},"cheers":{"um":"嗯..","ok":"還不錯","nice":"好","good":"很好","great":"非常好","excellent":"棒棒Der"},"keep_on":"繼續努力。","symbol":{"comma":"，","period":"。","colon":"："},"reward":{"donate":"捐贈","wechatpay":"微信支付","alipay":"支付寶","paypal":"貝寶","bitcoin":"比特幣"},"follow_me":{"welcome":"歡迎關注我的其它站點"},"accessibility":{"nav_toggle":"切換導航欄","prev_page":"上一頁","next_page":"下一頁"},"symbols_count_time":{"count":"文章字數","count_total":"總字數","time":"所需閱讀時間","time_total":"所需總閱讀時間","time_minutes":"分鐘"}}},"css/mixins":"","css/styles":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","template/head":"<script src=\"//js/tool/canvas-fx-base.js\"></script>\n\n<script src=\"//js/ripple-logo.js\"></script>\n<script src=\"//js/silk-wave.js\"></script>\n\n<style>\n  @font-face {\n  font-family: \"Roboto\";\n  src: url(//font/Roboto.ttf) format(\"truetype\");\n}\n</style>","css/styl-plugin/grid-post-layout/main":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","css/styl-plugin/grid-post-layout/mixins":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n","css/styl-plugin/grid-post-layout/variables":""}},"excerpt":"","more":"<h2 id=\"SO-Just-Who-The-Hell-Am-I\"><a href=\"#SO-Just-Who-The-Hell-Am-I\" class=\"headerlink\" title=\"SO Just Who The Hell Am I?\"></a>SO Just Who The Hell Am I?</h2><p>大家好! 首先先介紹一下我自己, 我是<strong>Mizok</strong> :D<br>小弟目前人在金融相關產業擔任前端工程師，到今年為止大約有三年左右的資歷。<br>我在就職的這幾年一直有意識到一件事: 不知道是不是因為個人學經歷的關係(過去並不是資訊本科生畢業), 我對前端感興趣的部分也比較奇怪(?)<br>比起鑽研那些最新的前端框架功能/API，我發現我自己更喜歡研究瀏覽器渲染與視覺呈現方面的技術(例如物理模擬程序背後的數學運算)。<br>今年首次挑戰參加鐵人賽，有一部分的目標也是想把自己目前曾經研究過的東西再整理一遍，並且加以深化。<br>那麼話不多說，接下來就開始介紹我的參賽主題 :D</p>\n<h2 id=\"What-Is-Ninja\"><a href=\"#What-Is-Ninja\" class=\"headerlink\" title=\"What Is Ninja?\"></a>What Is Ninja?</h2><p>首先必須老實說, 這個標題其實不是我想的ＸＤ, 而是來自於一本<a href=\"https://www.amazon.com/HTML5-Canvas-Ninja-Kirupa-Chinnathambi/dp/1523978090\">外文書</a><br>之所以取這個名字只是因為想要看起來<strong>潮潮的</strong>～然後我在這邊為這次的參賽主題畫了一個LOGO, <strong>我覺得很酷</strong>(自己說)</p>\n<p>平常在國外的前端社群中提到Ninja這個詞的時候～指的是一些習慣用很自由奔放(而且又讓人看不懂)的語法，來編寫專案源碼的工程師～<strong>是一個帶有負面意義的詞</strong>。<br>而小弟我對於自己的期許當然也不是成為那樣子的開發者ＸＤ。<br>Ninja這個詞彙對我來說，比較近似於對某種技藝有深度理解的人。<br>我期許自己不只能做到理解框架/套件怎麼使用，而且還要能深入它們背後的邏輯，並且把這部分的理解運用在自己的專案上。<br>這對我來說就是成為一個Ninja的必經過程。</p>\n<h2 id=\"Why-Canvas\"><a href=\"#Why-Canvas\" class=\"headerlink\" title=\"Why Canvas?\"></a>Why Canvas?</h2><p>大家都知道，IE近年已經逐漸退出市場，而這個趨勢也漸漸的對前端圈子造成了不小的影響，除了各大前端框架相繼放棄支援IE以外，過去因為IE實作問題而被限制的技術也漸漸的開始浮出水面<br>小弟本身因為是在金融相關的專案公司就職，對於這部分真的是很有感。 </p>\n<p>這三年以來，其實不難發現在台灣的業界中，<strong>前端專案視覺部分的複雜程度有一點一點的在逐漸提升</strong>，從過去那種用BS隨便套一套就可以交差的網頁， 到現在隨便一個Campaign Site可能就會要你用動畫引擎去實作一堆有的沒的特效。<br>個人覺得在未來的前端業界中，出現像遊戲公司技術美術(TA)那樣的職位，大概也是極其有可能的。  </p>\n<p>前端工程師對於技術的鑽研，其實某種程度上也是對於未來的投資。而我之所以選擇Canvas這項技術，大部分的原因也就是想要探求這門技術，它在未來是否有更多的可能性。</p>\n<h2 id=\"About-The-Road-Map\"><a href=\"#About-The-Road-Map\" class=\"headerlink\" title=\"About The Road Map\"></a>About The Road Map</h2><p>老實說我一開始在定下這個題目的時候也很猶豫，因為一開始是打算把webgl的內容一起包括進來這次的賽程的，但是後來實際評估了一下(有先試著寫了幾篇)，才意識到要在30天內把2D + Webgl 全部寫完對我而言還是太困難了，畢竟平常還有工作 ：（</p>\n<p>主題的規劃上，在賽程的前段會先從基本的2D渲染理論和技術講起，<br>中期開始則是會找一些實務上常見的特效範例/套件效果來作為研究目標。<br>目前預計會提到的技術:</p>\n<ol>\n<li>web 端粒子系統實作</li>\n<li>力學效果模擬（磁力/張力/引力）</li>\n<li>布料材質模擬</li>\n<li>二維以上的碰撞模擬</li>\n<li>像素操作  </li>\n</ol>\n<h2 id=\"敬請期待\"><a href=\"#敬請期待\" class=\"headerlink\" title=\"敬請期待!\"></a>敬請期待!</h2>"},{"title":"高見龍為自己學 git 學習筆記-ep1","_content":"\n\n\n\n## 一些簡單的基本：終端機指令\n\n\n1. 複製檔案```cp```\n2. 重新命名檔案 ```mv '舊檔名' ‘新檔名‘```\n3. 列出目前位置 ```pwd```\n4. 移除檔案 ```rm```\n5. 到根資料夾```cd ~```\n6. 顯示所有包括隱藏的檔案```ls -al```\n\n## Vim操作\n\n![](https://i.imgur.com/mXktH1C.png)\n\n## git 基本操作\n\n1. 使用者基本資料設定(bt device)，設定姓名/電子郵件\n\n```\ngit config --global user.name \"Eddie Kao\"\ngit config --global user.email \"eddiexxxx@gmail.com\"\n```\n- 這邊拿掉global 的話就會對專案直接做個別設定\n- 存取的global使用者資料會在user根資料夾底下的.gitconfig檔案裡\n```\n~/.gitconfig\n```\n\n\n2. 列出當前使用者資料設定\n```\ngit config --list\n```\n\n3. 其實可以把git的預設編輯器改成 VSCODE\nhttps://stackoverflow.com/questions/30024353/how-to-use-visual-studio-code-as-default-editor-for-git\n\n4. git 的操作指令其實也可以寫alias(縮寫)\n\n```terminal\ngit config --global alias.co checkout\n//把checkout指令改成co\n```\n```terminal\ngit config --global alias.l \"log--oneline--graph\"\n//也可以把一些比較複雜的指令改成alias\n```\n```terminal\ngit config --global alias.ls 'log --graph --pretty=format:\"%h <%an> %ar %s\"'\n//or more complicated\n//把git log的格式簡化用\n```\n\n## 專案git初始化的流程\n\n1. ```cd <folder>```\n2. ```git init```\n3. \n\n```git add --all```\n\n```\ngit add -A stages all changes\n\ngit add . stages new files and modifications, without deletions\n\ngit add -u stages modifications and deletions, without new files\n```\n\n4. ```git commit -m <commit log>```\n\n\n\n","source":"_posts/高見龍為自己學 git 學習筆記-ep1.md","raw":"---\ntitle: 高見龍為自己學 git 學習筆記-ep1\ncategories: \n- 前端技術學習心得\ntags:\n- git\n---\n\n\n\n\n## 一些簡單的基本：終端機指令\n\n\n1. 複製檔案```cp```\n2. 重新命名檔案 ```mv '舊檔名' ‘新檔名‘```\n3. 列出目前位置 ```pwd```\n4. 移除檔案 ```rm```\n5. 到根資料夾```cd ~```\n6. 顯示所有包括隱藏的檔案```ls -al```\n\n## Vim操作\n\n![](https://i.imgur.com/mXktH1C.png)\n\n## git 基本操作\n\n1. 使用者基本資料設定(bt device)，設定姓名/電子郵件\n\n```\ngit config --global user.name \"Eddie Kao\"\ngit config --global user.email \"eddiexxxx@gmail.com\"\n```\n- 這邊拿掉global 的話就會對專案直接做個別設定\n- 存取的global使用者資料會在user根資料夾底下的.gitconfig檔案裡\n```\n~/.gitconfig\n```\n\n\n2. 列出當前使用者資料設定\n```\ngit config --list\n```\n\n3. 其實可以把git的預設編輯器改成 VSCODE\nhttps://stackoverflow.com/questions/30024353/how-to-use-visual-studio-code-as-default-editor-for-git\n\n4. git 的操作指令其實也可以寫alias(縮寫)\n\n```terminal\ngit config --global alias.co checkout\n//把checkout指令改成co\n```\n```terminal\ngit config --global alias.l \"log--oneline--graph\"\n//也可以把一些比較複雜的指令改成alias\n```\n```terminal\ngit config --global alias.ls 'log --graph --pretty=format:\"%h <%an> %ar %s\"'\n//or more complicated\n//把git log的格式簡化用\n```\n\n## 專案git初始化的流程\n\n1. ```cd <folder>```\n2. ```git init```\n3. \n\n```git add --all```\n\n```\ngit add -A stages all changes\n\ngit add . stages new files and modifications, without deletions\n\ngit add -u stages modifications and deletions, without new files\n```\n\n4. ```git commit -m <commit log>```\n\n\n\n","slug":"高見龍為自己學 git 學習筆記-ep1","published":1,"date":"2020-11-25T17:01:45.852Z","updated":"2020-12-12T19:54:21.494Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktx1vyz80021tay2an1sftnd","content":"<h2 id=\"一些簡單的基本：終端機指令\"><a href=\"#一些簡單的基本：終端機指令\" class=\"headerlink\" title=\"一些簡單的基本：終端機指令\"></a>一些簡單的基本：終端機指令</h2><ol>\n<li>複製檔案<code>cp</code></li>\n<li>重新命名檔案 <code>mv &#39;舊檔名&#39; ‘新檔名‘</code></li>\n<li>列出目前位置 <code>pwd</code></li>\n<li>移除檔案 <code>rm</code></li>\n<li>到根資料夾<code>cd ~</code></li>\n<li>顯示所有包括隱藏的檔案<code>ls -al</code></li>\n</ol>\n<h2 id=\"Vim操作\"><a href=\"#Vim操作\" class=\"headerlink\" title=\"Vim操作\"></a>Vim操作</h2><p><img src=\"https://i.imgur.com/mXktH1C.png\"></p>\n<h2 id=\"git-基本操作\"><a href=\"#git-基本操作\" class=\"headerlink\" title=\"git 基本操作\"></a>git 基本操作</h2><ol>\n<li>使用者基本資料設定(bt device)，設定姓名/電子郵件</li>\n</ol>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git<span class=\"built_in\"> config </span>--global user.name <span class=\"string\">&quot;Eddie Kao&quot;</span></span><br><span class=\"line\">git<span class=\"built_in\"> config </span>--global user.email <span class=\"string\">&quot;eddiexxxx@gmail.com&quot;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>這邊拿掉global 的話就會對專案直接做個別設定</li>\n<li>存取的global使用者資料會在user根資料夾底下的.gitconfig檔案裡<figure class=\"highlight haml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~/.gitconfig</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<ol start=\"2\">\n<li><p>列出當前使用者資料設定</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git<span class=\"built_in\"> config </span>--list</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>其實可以把git的預設編輯器改成 VSCODE<br><a href=\"https://stackoverflow.com/questions/30024353/how-to-use-visual-studio-code-as-default-editor-for-git\">https://stackoverflow.com/questions/30024353/how-to-use-visual-studio-code-as-default-editor-for-git</a></p>\n</li>\n<li><p>git 的操作指令其實也可以寫alias(縮寫)</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global alias.co checkout</span><br><span class=\"line\">&#x2F;&#x2F;把checkout指令改成co</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global alias.l &quot;log--oneline--graph&quot;</span><br><span class=\"line\">&#x2F;&#x2F;也可以把一些比較複雜的指令改成alias</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global alias.ls &#39;log --graph --pretty&#x3D;format:&quot;%h &lt;%an&gt; %ar %s&quot;&#39;</span><br><span class=\"line\">&#x2F;&#x2F;or more complicated</span><br><span class=\"line\">&#x2F;&#x2F;把git log的格式簡化用</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"專案git初始化的流程\"><a href=\"#專案git初始化的流程\" class=\"headerlink\" title=\"專案git初始化的流程\"></a>專案git初始化的流程</h2><ol>\n<li><code>cd &lt;folder&gt;</code></li>\n<li><code>git init</code></li>\n<li></li>\n</ol>\n<p><code>git add --all</code></p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">add</span> -A stages all changes</span><br><span class=\"line\"></span><br><span class=\"line\">git <span class=\"built_in\">add</span> . stages <span class=\"built_in\">new</span> <span class=\"built_in\">files</span> <span class=\"keyword\">and</span> modifications, <span class=\"keyword\">without</span> deletions</span><br><span class=\"line\"></span><br><span class=\"line\">git <span class=\"built_in\">add</span> -u stages modifications <span class=\"keyword\">and</span> deletions, <span class=\"keyword\">without</span> <span class=\"built_in\">new</span> <span class=\"built_in\">files</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li><code>git commit -m &lt;commit log&gt;</code></li>\n</ol>\n","site":{"data":{"css/variables":"","languages":{"zh-TW":{"title":{"archive":"時間線","category":"分類","tag":"標籤","schedule":"時間表"},"menu":{"home":"首頁","archives":"時間線","categories":"分類","tags":"標籤","about":"關於","search":"搜尋","schedule":"時間表","sitemap":"網站地圖","commonweal":"公益 404"},"sidebar":{"overview":"本站概要","toc":"文章目錄"},"post":{"posted":"發表於","edited":"更新於","created":"創建時間","modified":"修改時間","edit":"編輯","in":"分類於","read_more":"閱讀全文","untitled":"未命名","sticky":"置頂文","views":"閱讀次數","related_posts":"相關文章","copyright":{"author":"作者","link":"文章連結","post_author":"Written by","post_link":"This article originally appeared on","license_title":"版權聲明","license_content":"本網誌所有文章除特別聲明外，均採用 %s 許可協議。轉載請註明出處！"}},"footer":{"powered":"","total_views":"總瀏覽次數","total_visitors":"訪客總數"},"counter":{"tag_cloud":{"zero":"目前還沒有任何標籤","one":"目前共有 1 個標籤","other":"目前共有 %d 個標籤"},"categories":{"zero":"目前還沒有任何分類","one":"目前共有 1 個分類","other":"目前共有 %d 個分類"},"archive_posts":{"zero":"目前還沒有任何文章。","one":"目前共有 1 篇文章。","other":"目前共有 %d 篇文章。"}},"state":{"posts":"文章","tags":"標籤","categories":"分類"},"search":{"placeholder":"搜尋...","empty":"We didn't find any results for the search: %s","hits_time":"%s results found in %s ms","hits":"%s results found"},"cheers":{"um":"嗯..","ok":"還不錯","nice":"好","good":"很好","great":"非常好","excellent":"棒棒Der"},"keep_on":"繼續努力。","symbol":{"comma":"，","period":"。","colon":"："},"reward":{"donate":"捐贈","wechatpay":"微信支付","alipay":"支付寶","paypal":"貝寶","bitcoin":"比特幣"},"follow_me":{"welcome":"歡迎關注我的其它站點"},"accessibility":{"nav_toggle":"切換導航欄","prev_page":"上一頁","next_page":"下一頁"},"symbols_count_time":{"count":"文章字數","count_total":"總字數","time":"所需閱讀時間","time_total":"所需總閱讀時間","time_minutes":"分鐘"}}},"css/mixins":"","css/styles":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","template/head":"<script src=\"//js/tool/canvas-fx-base.js\"></script>\n\n<script src=\"//js/ripple-logo.js\"></script>\n<script src=\"//js/silk-wave.js\"></script>\n\n<style>\n  @font-face {\n  font-family: \"Roboto\";\n  src: url(//font/Roboto.ttf) format(\"truetype\");\n}\n</style>","css/styl-plugin/grid-post-layout/main":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","css/styl-plugin/grid-post-layout/mixins":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n","css/styl-plugin/grid-post-layout/variables":""}},"excerpt":"","more":"<h2 id=\"一些簡單的基本：終端機指令\"><a href=\"#一些簡單的基本：終端機指令\" class=\"headerlink\" title=\"一些簡單的基本：終端機指令\"></a>一些簡單的基本：終端機指令</h2><ol>\n<li>複製檔案<code>cp</code></li>\n<li>重新命名檔案 <code>mv &#39;舊檔名&#39; ‘新檔名‘</code></li>\n<li>列出目前位置 <code>pwd</code></li>\n<li>移除檔案 <code>rm</code></li>\n<li>到根資料夾<code>cd ~</code></li>\n<li>顯示所有包括隱藏的檔案<code>ls -al</code></li>\n</ol>\n<h2 id=\"Vim操作\"><a href=\"#Vim操作\" class=\"headerlink\" title=\"Vim操作\"></a>Vim操作</h2><p><img src=\"https://i.imgur.com/mXktH1C.png\"></p>\n<h2 id=\"git-基本操作\"><a href=\"#git-基本操作\" class=\"headerlink\" title=\"git 基本操作\"></a>git 基本操作</h2><ol>\n<li>使用者基本資料設定(bt device)，設定姓名/電子郵件</li>\n</ol>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git<span class=\"built_in\"> config </span>--global user.name <span class=\"string\">&quot;Eddie Kao&quot;</span></span><br><span class=\"line\">git<span class=\"built_in\"> config </span>--global user.email <span class=\"string\">&quot;eddiexxxx@gmail.com&quot;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>這邊拿掉global 的話就會對專案直接做個別設定</li>\n<li>存取的global使用者資料會在user根資料夾底下的.gitconfig檔案裡<figure class=\"highlight haml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~/.gitconfig</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<ol start=\"2\">\n<li><p>列出當前使用者資料設定</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git<span class=\"built_in\"> config </span>--list</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>其實可以把git的預設編輯器改成 VSCODE<br><a href=\"https://stackoverflow.com/questions/30024353/how-to-use-visual-studio-code-as-default-editor-for-git\">https://stackoverflow.com/questions/30024353/how-to-use-visual-studio-code-as-default-editor-for-git</a></p>\n</li>\n<li><p>git 的操作指令其實也可以寫alias(縮寫)</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global alias.co checkout</span><br><span class=\"line\">&#x2F;&#x2F;把checkout指令改成co</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global alias.l &quot;log--oneline--graph&quot;</span><br><span class=\"line\">&#x2F;&#x2F;也可以把一些比較複雜的指令改成alias</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global alias.ls &#39;log --graph --pretty&#x3D;format:&quot;%h &lt;%an&gt; %ar %s&quot;&#39;</span><br><span class=\"line\">&#x2F;&#x2F;or more complicated</span><br><span class=\"line\">&#x2F;&#x2F;把git log的格式簡化用</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"專案git初始化的流程\"><a href=\"#專案git初始化的流程\" class=\"headerlink\" title=\"專案git初始化的流程\"></a>專案git初始化的流程</h2><ol>\n<li><code>cd &lt;folder&gt;</code></li>\n<li><code>git init</code></li>\n<li></li>\n</ol>\n<p><code>git add --all</code></p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">add</span> -A stages all changes</span><br><span class=\"line\"></span><br><span class=\"line\">git <span class=\"built_in\">add</span> . stages <span class=\"built_in\">new</span> <span class=\"built_in\">files</span> <span class=\"keyword\">and</span> modifications, <span class=\"keyword\">without</span> deletions</span><br><span class=\"line\"></span><br><span class=\"line\">git <span class=\"built_in\">add</span> -u stages modifications <span class=\"keyword\">and</span> deletions, <span class=\"keyword\">without</span> <span class=\"built_in\">new</span> <span class=\"built_in\">files</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li><code>git commit -m &lt;commit log&gt;</code></li>\n</ol>\n"},{"title":"高見龍為自己學 git 學習筆記-ep2","_content":"\n\n\n\n\n\n## 關於git add的一些常識\n\n當我git add 一個檔案之後, 我如果再去修改他, 接著再commit。\n其實在這個commit，git 並不會去紀錄該檔案的改動, 因為這個檔案只是被加到暫存區而已，git沒有辦法去refer到他的歷史改動狀況。\n\n所以建議如果要git add檔案, 一律add完之後commit一次再做改動\n\n> 要commit之前一定要先add --all, 或者可以直接使用 git commit -a\n\n> 想要add 一個資料夾, 包括底下的所有child folder, 可以使用git add ., 如果是想要 add 整個專案的內容，則可以用git add --all\n\n> git commit --allowed-empty -m \"\" 這樣寫就可以產生一個空的commit點ˊ \nlog\n\n> git 可以分成 工作目錄/暫存區/儲存區\n> 用git add 把檔案從工作目錄記錄到暫存區, 用git commit 把檔案從暫存區記錄到儲存區\n\n\n\n## git log 內容有些什麼\n\n可以看到每一個commit點\n\n1. commit 的人是誰?\n2. 時間點\n3. commit log\n\n> 可以搭配 --oneline 或 --graph 來做不同模式的log顯示\n> 可以用 --author 查詢特定開發者的commit內容\n> --author=\"\" 的使用, 如果開發者有兩位以上, 可以使用 userA \\| userB\n> --grep=\"\" 的使用, 可以尋找commit log裡面有特定字串的commit點\n> -S\"\" 的使用, 可以尋找commit 點之中，改動內容含有特定字串的commit 點\n> --since=\"\" & --until=\"\" & --after=\"2019-01\"  可以顯示特定時間點區間的commit點\n> \n\n\n## git rm 是幹嘛用的? 跟一般的rm 差在哪裡?\n\ngit rm 等於 先使用一般的rm , 然後再把這個rm 的改動 用add 加到暫存區\n\n> 可以使用 --cached ，這樣會變成單純的把檔案與git 斷聯，但是不會實際刪除檔案, 這樣該檔案在做完這個動作之後就會變成 untracked了\n\n\n## git mv 改變檔名\n\n例如\n```\n\ngit mv aa.html bb.html\n```\n\n\n","source":"_posts/高見龍為自己學 git 學習筆記-ep2.md","raw":"---\ntitle: 高見龍為自己學 git 學習筆記-ep2\ncategories: \n- 前端技術學習心得\ntags:\n- git\n---\n\n\n\n\n\n\n## 關於git add的一些常識\n\n當我git add 一個檔案之後, 我如果再去修改他, 接著再commit。\n其實在這個commit，git 並不會去紀錄該檔案的改動, 因為這個檔案只是被加到暫存區而已，git沒有辦法去refer到他的歷史改動狀況。\n\n所以建議如果要git add檔案, 一律add完之後commit一次再做改動\n\n> 要commit之前一定要先add --all, 或者可以直接使用 git commit -a\n\n> 想要add 一個資料夾, 包括底下的所有child folder, 可以使用git add ., 如果是想要 add 整個專案的內容，則可以用git add --all\n\n> git commit --allowed-empty -m \"\" 這樣寫就可以產生一個空的commit點ˊ \nlog\n\n> git 可以分成 工作目錄/暫存區/儲存區\n> 用git add 把檔案從工作目錄記錄到暫存區, 用git commit 把檔案從暫存區記錄到儲存區\n\n\n\n## git log 內容有些什麼\n\n可以看到每一個commit點\n\n1. commit 的人是誰?\n2. 時間點\n3. commit log\n\n> 可以搭配 --oneline 或 --graph 來做不同模式的log顯示\n> 可以用 --author 查詢特定開發者的commit內容\n> --author=\"\" 的使用, 如果開發者有兩位以上, 可以使用 userA \\| userB\n> --grep=\"\" 的使用, 可以尋找commit log裡面有特定字串的commit點\n> -S\"\" 的使用, 可以尋找commit 點之中，改動內容含有特定字串的commit 點\n> --since=\"\" & --until=\"\" & --after=\"2019-01\"  可以顯示特定時間點區間的commit點\n> \n\n\n## git rm 是幹嘛用的? 跟一般的rm 差在哪裡?\n\ngit rm 等於 先使用一般的rm , 然後再把這個rm 的改動 用add 加到暫存區\n\n> 可以使用 --cached ，這樣會變成單純的把檔案與git 斷聯，但是不會實際刪除檔案, 這樣該檔案在做完這個動作之後就會變成 untracked了\n\n\n## git mv 改變檔名\n\n例如\n```\n\ngit mv aa.html bb.html\n```\n\n\n","slug":"高見龍為自己學 git 學習筆記-ep2","published":1,"date":"2020-11-25T17:01:45.853Z","updated":"2020-12-12T19:51:54.341Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktx1vyzb0025tay212daggpm","content":"<h2 id=\"關於git-add的一些常識\"><a href=\"#關於git-add的一些常識\" class=\"headerlink\" title=\"關於git add的一些常識\"></a>關於git add的一些常識</h2><p>當我git add 一個檔案之後, 我如果再去修改他, 接著再commit。<br>其實在這個commit，git 並不會去紀錄該檔案的改動, 因為這個檔案只是被加到暫存區而已，git沒有辦法去refer到他的歷史改動狀況。</p>\n<p>所以建議如果要git add檔案, 一律add完之後commit一次再做改動</p>\n<blockquote>\n<p>要commit之前一定要先add –all, 或者可以直接使用 git commit -a</p>\n</blockquote>\n<blockquote>\n<p>想要add 一個資料夾, 包括底下的所有child folder, 可以使用git add ., 如果是想要 add 整個專案的內容，則可以用git add –all</p>\n</blockquote>\n<blockquote>\n<p>git commit –allowed-empty -m “” 這樣寫就可以產生一個空的commit點ˊ<br>log</p>\n</blockquote>\n<blockquote>\n<p>git 可以分成 工作目錄/暫存區/儲存區<br>用git add 把檔案從工作目錄記錄到暫存區, 用git commit 把檔案從暫存區記錄到儲存區</p>\n</blockquote>\n<h2 id=\"git-log-內容有些什麼\"><a href=\"#git-log-內容有些什麼\" class=\"headerlink\" title=\"git log 內容有些什麼\"></a>git log 內容有些什麼</h2><p>可以看到每一個commit點</p>\n<ol>\n<li>commit 的人是誰?</li>\n<li>時間點</li>\n<li>commit log</li>\n</ol>\n<blockquote>\n<p>可以搭配 –oneline 或 –graph 來做不同模式的log顯示<br>可以用 –author 查詢特定開發者的commit內容<br>–author=”” 的使用, 如果開發者有兩位以上, 可以使用 userA | userB<br>–grep=”” 的使用, 可以尋找commit log裡面有特定字串的commit點<br>-S”” 的使用, 可以尋找commit 點之中，改動內容含有特定字串的commit 點<br>–since=”” &amp; –until=”” &amp; –after=”2019-01”  可以顯示特定時間點區間的commit點</p>\n</blockquote>\n<h2 id=\"git-rm-是幹嘛用的-跟一般的rm-差在哪裡\"><a href=\"#git-rm-是幹嘛用的-跟一般的rm-差在哪裡\" class=\"headerlink\" title=\"git rm 是幹嘛用的? 跟一般的rm 差在哪裡?\"></a>git rm 是幹嘛用的? 跟一般的rm 差在哪裡?</h2><p>git rm 等於 先使用一般的rm , 然後再把這個rm 的改動 用add 加到暫存區</p>\n<blockquote>\n<p>可以使用 –cached ，這樣會變成單純的把檔案與git 斷聯，但是不會實際刪除檔案, 這樣該檔案在做完這個動作之後就會變成 untracked了</p>\n</blockquote>\n<h2 id=\"git-mv-改變檔名\"><a href=\"#git-mv-改變檔名\" class=\"headerlink\" title=\"git mv 改變檔名\"></a>git mv 改變檔名</h2><p>例如</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">git</span> <span class=\"selector-tag\">mv</span> <span class=\"selector-tag\">aa</span><span class=\"selector-class\">.html</span> <span class=\"selector-tag\">bb</span><span class=\"selector-class\">.html</span></span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{"css/variables":"","languages":{"zh-TW":{"title":{"archive":"時間線","category":"分類","tag":"標籤","schedule":"時間表"},"menu":{"home":"首頁","archives":"時間線","categories":"分類","tags":"標籤","about":"關於","search":"搜尋","schedule":"時間表","sitemap":"網站地圖","commonweal":"公益 404"},"sidebar":{"overview":"本站概要","toc":"文章目錄"},"post":{"posted":"發表於","edited":"更新於","created":"創建時間","modified":"修改時間","edit":"編輯","in":"分類於","read_more":"閱讀全文","untitled":"未命名","sticky":"置頂文","views":"閱讀次數","related_posts":"相關文章","copyright":{"author":"作者","link":"文章連結","post_author":"Written by","post_link":"This article originally appeared on","license_title":"版權聲明","license_content":"本網誌所有文章除特別聲明外，均採用 %s 許可協議。轉載請註明出處！"}},"footer":{"powered":"","total_views":"總瀏覽次數","total_visitors":"訪客總數"},"counter":{"tag_cloud":{"zero":"目前還沒有任何標籤","one":"目前共有 1 個標籤","other":"目前共有 %d 個標籤"},"categories":{"zero":"目前還沒有任何分類","one":"目前共有 1 個分類","other":"目前共有 %d 個分類"},"archive_posts":{"zero":"目前還沒有任何文章。","one":"目前共有 1 篇文章。","other":"目前共有 %d 篇文章。"}},"state":{"posts":"文章","tags":"標籤","categories":"分類"},"search":{"placeholder":"搜尋...","empty":"We didn't find any results for the search: %s","hits_time":"%s results found in %s ms","hits":"%s results found"},"cheers":{"um":"嗯..","ok":"還不錯","nice":"好","good":"很好","great":"非常好","excellent":"棒棒Der"},"keep_on":"繼續努力。","symbol":{"comma":"，","period":"。","colon":"："},"reward":{"donate":"捐贈","wechatpay":"微信支付","alipay":"支付寶","paypal":"貝寶","bitcoin":"比特幣"},"follow_me":{"welcome":"歡迎關注我的其它站點"},"accessibility":{"nav_toggle":"切換導航欄","prev_page":"上一頁","next_page":"下一頁"},"symbols_count_time":{"count":"文章字數","count_total":"總字數","time":"所需閱讀時間","time_total":"所需總閱讀時間","time_minutes":"分鐘"}}},"css/mixins":"","css/styles":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","template/head":"<script src=\"//js/tool/canvas-fx-base.js\"></script>\n\n<script src=\"//js/ripple-logo.js\"></script>\n<script src=\"//js/silk-wave.js\"></script>\n\n<style>\n  @font-face {\n  font-family: \"Roboto\";\n  src: url(//font/Roboto.ttf) format(\"truetype\");\n}\n</style>","css/styl-plugin/grid-post-layout/main":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","css/styl-plugin/grid-post-layout/mixins":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n","css/styl-plugin/grid-post-layout/variables":""}},"excerpt":"","more":"<h2 id=\"關於git-add的一些常識\"><a href=\"#關於git-add的一些常識\" class=\"headerlink\" title=\"關於git add的一些常識\"></a>關於git add的一些常識</h2><p>當我git add 一個檔案之後, 我如果再去修改他, 接著再commit。<br>其實在這個commit，git 並不會去紀錄該檔案的改動, 因為這個檔案只是被加到暫存區而已，git沒有辦法去refer到他的歷史改動狀況。</p>\n<p>所以建議如果要git add檔案, 一律add完之後commit一次再做改動</p>\n<blockquote>\n<p>要commit之前一定要先add –all, 或者可以直接使用 git commit -a</p>\n</blockquote>\n<blockquote>\n<p>想要add 一個資料夾, 包括底下的所有child folder, 可以使用git add ., 如果是想要 add 整個專案的內容，則可以用git add –all</p>\n</blockquote>\n<blockquote>\n<p>git commit –allowed-empty -m “” 這樣寫就可以產生一個空的commit點ˊ<br>log</p>\n</blockquote>\n<blockquote>\n<p>git 可以分成 工作目錄/暫存區/儲存區<br>用git add 把檔案從工作目錄記錄到暫存區, 用git commit 把檔案從暫存區記錄到儲存區</p>\n</blockquote>\n<h2 id=\"git-log-內容有些什麼\"><a href=\"#git-log-內容有些什麼\" class=\"headerlink\" title=\"git log 內容有些什麼\"></a>git log 內容有些什麼</h2><p>可以看到每一個commit點</p>\n<ol>\n<li>commit 的人是誰?</li>\n<li>時間點</li>\n<li>commit log</li>\n</ol>\n<blockquote>\n<p>可以搭配 –oneline 或 –graph 來做不同模式的log顯示<br>可以用 –author 查詢特定開發者的commit內容<br>–author=”” 的使用, 如果開發者有兩位以上, 可以使用 userA | userB<br>–grep=”” 的使用, 可以尋找commit log裡面有特定字串的commit點<br>-S”” 的使用, 可以尋找commit 點之中，改動內容含有特定字串的commit 點<br>–since=”” &amp; –until=”” &amp; –after=”2019-01”  可以顯示特定時間點區間的commit點</p>\n</blockquote>\n<h2 id=\"git-rm-是幹嘛用的-跟一般的rm-差在哪裡\"><a href=\"#git-rm-是幹嘛用的-跟一般的rm-差在哪裡\" class=\"headerlink\" title=\"git rm 是幹嘛用的? 跟一般的rm 差在哪裡?\"></a>git rm 是幹嘛用的? 跟一般的rm 差在哪裡?</h2><p>git rm 等於 先使用一般的rm , 然後再把這個rm 的改動 用add 加到暫存區</p>\n<blockquote>\n<p>可以使用 –cached ，這樣會變成單純的把檔案與git 斷聯，但是不會實際刪除檔案, 這樣該檔案在做完這個動作之後就會變成 untracked了</p>\n</blockquote>\n<h2 id=\"git-mv-改變檔名\"><a href=\"#git-mv-改變檔名\" class=\"headerlink\" title=\"git mv 改變檔名\"></a>git mv 改變檔名</h2><p>例如</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">git</span> <span class=\"selector-tag\">mv</span> <span class=\"selector-tag\">aa</span><span class=\"selector-class\">.html</span> <span class=\"selector-tag\">bb</span><span class=\"selector-class\">.html</span></span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"高見龍為自己學 git 學習筆記-ep3","_content":"\n## git clone專案的方法\n\n說到clone專案(這邊以github為例), 一般狀況下有下面幾種比較常見的狀況\n\n### 作法一(遠端git倉庫直接clone到本地)\n\n  1. 首先第一步當然是直接在遠端倉庫的網頁(例如github的repo頁面)先開一個repo\n  2. 再來打開自己電腦的command line(或是也可以使用Vscode等IDE自帶的終端), 利用bash指令去把當前資料夾位置移到想要存放本地repo資料夾的地方\n  3. 然後就直接輸入`git clone <遠端repo位址>`\n  4. 這樣就可以創建出一個和遠端倉庫關聯的本地倉庫\n\n### 作法二(本地已經有一個裡面有檔案的資料夾, 然後在遠端也有一個裡面有東西的git倉庫,上面有master, 可能也有master以外的分支, 想要把本地的東西推到遠端)\n\n  1. 首先第一步先把本地的資料夾做git的初始化 `git init`\n  2. 再來 `git remote add <遠端資料庫的暱稱, 可以自訂> <遠端資料庫的位址>`\n  3. 上面這個動作是去為本地的這個倉庫\"標記\", 他有關聯上哪一個遠端倉庫(所以其實一個本地倉庫可以關聯上很多個遠端倉庫，但是暱稱不能重複)\n  4. 所以說如果我想要去關聯一個新的遠端倉庫(我們這邊取名為apple), 那就是`git remote add apple <apple的位址>`\n  5. 接下來因為我們這邊的狀況是本地已經有檔案, 想要推到遠端, 但遠端因為也是有東西的，所以這邊我們其實會有兩種做法，我們接著描述\n\n#### 作法二其1\n\n  1. 直接 `git fetch <指定遠端倉庫的暱稱>` 這邊以apple為例, 也就是 `git fetch apple`\n  2. 這麼做之後就可以把遠端倉庫的最新改動、所有分支與檔案下載回來, 而我們這邊因為本地倉庫是新開的，這個狀況叫做 \"unborn branch\", 是一個只有HEAD在本地的狀況(這部分以後再討論)。\n  3. 在這邊講的\"unborn branch\"的狀況下去做 fetch, 以這邊來講，就會把遠端的master下載回拉本地端，這樣就會在本地端看到一個origin/master分支, 這個就是遠端master在本地的備份, 這時候我們可以直接`git checkout master`或者直接把本地本來就存在的檔案做`git add -A && git commit -m 'initial msg'`, 這樣就會發現第4步的狀況。\n  4. 我們會發現本地出現了本地自己的master(關於 unborn branch的介紹可以看這一篇[stackoverflow](https://stackoverflow.com/questions/21252876/git-repository-created-without-a-master-branch) )。\n  5. 如果我們在4.的時候是透過`git checkout master`產生本地master的話，會發現本地master是會自動跟遠端的備份(origin/master)同步好的, 而且遠端master也會同時被視為上游分支(上游分支的解釋可以看第7步)，這樣就可以直接跳過第6步進階到第7步。\n  6. 但是如果我們在4的時候是透過`git add -A && git commit -m 'initial msg'`去走到第5步，則會發現本地master只有原本就存在本地的檔案，這時候如果用的IDE是 vscode, 如過利用左下角的分支切換功能, 去切到apple/master , 就會發現報錯 \"Git: fatal: A branch named 'master' already exists.\"，這種狀況下我們要去執行 `git pull apple master`，然後就會發現多出了一個新的分支叫做 FETCHED_HEAD，我們接著可以進階到第7步(FETCHED_HEAD只是暫時的, 第七步結束後,FETCHED_HEAD就會消失, IDE也不會再報一樣的錯)。\n  7. `git push -u <遠端倉庫的暱稱> <想要push過去的遠端倉庫分支>` , 以這邊來講就是`git push -u apple master`\n  8. 這邊的 **-u** 代表的是去把apple master去定為這個分支的上游分支，這樣以後在這個分支上做的git push, 最後都會把改動push到apple master。\n  9. 做完最後一步之後就會發現遠端repo的網頁上master的內容已經跟本地同步了\n\n#### 作法二其2\n\n  1. 直接 `git pull <指定遠端倉庫的暱稱> <指定想要pull下來的遠端倉庫分支>`，這邊以apple上的master分支為例, 也就是 `git pull apple master`\n  2. 其實這種狀況會跟前面其一的`git add -A && git commit -m 'initial msg'`狀況類似，接著也是直接`git push -u <遠端倉庫的暱稱> <想要push過去的遠端倉庫分支>` 就完事了（當然，如果有改動要commit的記得要commit）。","source":"_posts/高見龍為自己學 git 學習筆記-ep3.md","raw":"---\ntitle: 高見龍為自己學 git 學習筆記-ep3\ncategories: \n- 前端技術學習心得\ntags:\n- git\n---\n\n## git clone專案的方法\n\n說到clone專案(這邊以github為例), 一般狀況下有下面幾種比較常見的狀況\n\n### 作法一(遠端git倉庫直接clone到本地)\n\n  1. 首先第一步當然是直接在遠端倉庫的網頁(例如github的repo頁面)先開一個repo\n  2. 再來打開自己電腦的command line(或是也可以使用Vscode等IDE自帶的終端), 利用bash指令去把當前資料夾位置移到想要存放本地repo資料夾的地方\n  3. 然後就直接輸入`git clone <遠端repo位址>`\n  4. 這樣就可以創建出一個和遠端倉庫關聯的本地倉庫\n\n### 作法二(本地已經有一個裡面有檔案的資料夾, 然後在遠端也有一個裡面有東西的git倉庫,上面有master, 可能也有master以外的分支, 想要把本地的東西推到遠端)\n\n  1. 首先第一步先把本地的資料夾做git的初始化 `git init`\n  2. 再來 `git remote add <遠端資料庫的暱稱, 可以自訂> <遠端資料庫的位址>`\n  3. 上面這個動作是去為本地的這個倉庫\"標記\", 他有關聯上哪一個遠端倉庫(所以其實一個本地倉庫可以關聯上很多個遠端倉庫，但是暱稱不能重複)\n  4. 所以說如果我想要去關聯一個新的遠端倉庫(我們這邊取名為apple), 那就是`git remote add apple <apple的位址>`\n  5. 接下來因為我們這邊的狀況是本地已經有檔案, 想要推到遠端, 但遠端因為也是有東西的，所以這邊我們其實會有兩種做法，我們接著描述\n\n#### 作法二其1\n\n  1. 直接 `git fetch <指定遠端倉庫的暱稱>` 這邊以apple為例, 也就是 `git fetch apple`\n  2. 這麼做之後就可以把遠端倉庫的最新改動、所有分支與檔案下載回來, 而我們這邊因為本地倉庫是新開的，這個狀況叫做 \"unborn branch\", 是一個只有HEAD在本地的狀況(這部分以後再討論)。\n  3. 在這邊講的\"unborn branch\"的狀況下去做 fetch, 以這邊來講，就會把遠端的master下載回拉本地端，這樣就會在本地端看到一個origin/master分支, 這個就是遠端master在本地的備份, 這時候我們可以直接`git checkout master`或者直接把本地本來就存在的檔案做`git add -A && git commit -m 'initial msg'`, 這樣就會發現第4步的狀況。\n  4. 我們會發現本地出現了本地自己的master(關於 unborn branch的介紹可以看這一篇[stackoverflow](https://stackoverflow.com/questions/21252876/git-repository-created-without-a-master-branch) )。\n  5. 如果我們在4.的時候是透過`git checkout master`產生本地master的話，會發現本地master是會自動跟遠端的備份(origin/master)同步好的, 而且遠端master也會同時被視為上游分支(上游分支的解釋可以看第7步)，這樣就可以直接跳過第6步進階到第7步。\n  6. 但是如果我們在4的時候是透過`git add -A && git commit -m 'initial msg'`去走到第5步，則會發現本地master只有原本就存在本地的檔案，這時候如果用的IDE是 vscode, 如過利用左下角的分支切換功能, 去切到apple/master , 就會發現報錯 \"Git: fatal: A branch named 'master' already exists.\"，這種狀況下我們要去執行 `git pull apple master`，然後就會發現多出了一個新的分支叫做 FETCHED_HEAD，我們接著可以進階到第7步(FETCHED_HEAD只是暫時的, 第七步結束後,FETCHED_HEAD就會消失, IDE也不會再報一樣的錯)。\n  7. `git push -u <遠端倉庫的暱稱> <想要push過去的遠端倉庫分支>` , 以這邊來講就是`git push -u apple master`\n  8. 這邊的 **-u** 代表的是去把apple master去定為這個分支的上游分支，這樣以後在這個分支上做的git push, 最後都會把改動push到apple master。\n  9. 做完最後一步之後就會發現遠端repo的網頁上master的內容已經跟本地同步了\n\n#### 作法二其2\n\n  1. 直接 `git pull <指定遠端倉庫的暱稱> <指定想要pull下來的遠端倉庫分支>`，這邊以apple上的master分支為例, 也就是 `git pull apple master`\n  2. 其實這種狀況會跟前面其一的`git add -A && git commit -m 'initial msg'`狀況類似，接著也是直接`git push -u <遠端倉庫的暱稱> <想要push過去的遠端倉庫分支>` 就完事了（當然，如果有改動要commit的記得要commit）。","slug":"高見龍為自己學 git 學習筆記-ep3","published":1,"date":"2020-11-25T17:01:45.854Z","updated":"2020-12-12T19:51:58.248Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktx1vyzc0028tay2bjtnd72o","content":"<h2 id=\"git-clone專案的方法\"><a href=\"#git-clone專案的方法\" class=\"headerlink\" title=\"git clone專案的方法\"></a>git clone專案的方法</h2><p>說到clone專案(這邊以github為例), 一般狀況下有下面幾種比較常見的狀況</p>\n<h3 id=\"作法一-遠端git倉庫直接clone到本地\"><a href=\"#作法一-遠端git倉庫直接clone到本地\" class=\"headerlink\" title=\"作法一(遠端git倉庫直接clone到本地)\"></a>作法一(遠端git倉庫直接clone到本地)</h3><ol>\n<li>首先第一步當然是直接在遠端倉庫的網頁(例如github的repo頁面)先開一個repo</li>\n<li>再來打開自己電腦的command line(或是也可以使用Vscode等IDE自帶的終端), 利用bash指令去把當前資料夾位置移到想要存放本地repo資料夾的地方</li>\n<li>然後就直接輸入<code>git clone &lt;遠端repo位址&gt;</code></li>\n<li>這樣就可以創建出一個和遠端倉庫關聯的本地倉庫</li>\n</ol>\n<h3 id=\"作法二-本地已經有一個裡面有檔案的資料夾-然後在遠端也有一個裡面有東西的git倉庫-上面有master-可能也有master以外的分支-想要把本地的東西推到遠端\"><a href=\"#作法二-本地已經有一個裡面有檔案的資料夾-然後在遠端也有一個裡面有東西的git倉庫-上面有master-可能也有master以外的分支-想要把本地的東西推到遠端\" class=\"headerlink\" title=\"作法二(本地已經有一個裡面有檔案的資料夾, 然後在遠端也有一個裡面有東西的git倉庫,上面有master, 可能也有master以外的分支, 想要把本地的東西推到遠端)\"></a>作法二(本地已經有一個裡面有檔案的資料夾, 然後在遠端也有一個裡面有東西的git倉庫,上面有master, 可能也有master以外的分支, 想要把本地的東西推到遠端)</h3><ol>\n<li>首先第一步先把本地的資料夾做git的初始化 <code>git init</code></li>\n<li>再來 <code>git remote add &lt;遠端資料庫的暱稱, 可以自訂&gt; &lt;遠端資料庫的位址&gt;</code></li>\n<li>上面這個動作是去為本地的這個倉庫”標記”, 他有關聯上哪一個遠端倉庫(所以其實一個本地倉庫可以關聯上很多個遠端倉庫，但是暱稱不能重複)</li>\n<li>所以說如果我想要去關聯一個新的遠端倉庫(我們這邊取名為apple), 那就是<code>git remote add apple &lt;apple的位址&gt;</code></li>\n<li>接下來因為我們這邊的狀況是本地已經有檔案, 想要推到遠端, 但遠端因為也是有東西的，所以這邊我們其實會有兩種做法，我們接著描述</li>\n</ol>\n<h4 id=\"作法二其1\"><a href=\"#作法二其1\" class=\"headerlink\" title=\"作法二其1\"></a>作法二其1</h4><ol>\n<li>直接 <code>git fetch &lt;指定遠端倉庫的暱稱&gt;</code> 這邊以apple為例, 也就是 <code>git fetch apple</code></li>\n<li>這麼做之後就可以把遠端倉庫的最新改動、所有分支與檔案下載回來, 而我們這邊因為本地倉庫是新開的，這個狀況叫做 “unborn branch”, 是一個只有HEAD在本地的狀況(這部分以後再討論)。</li>\n<li>在這邊講的”unborn branch”的狀況下去做 fetch, 以這邊來講，就會把遠端的master下載回拉本地端，這樣就會在本地端看到一個origin/master分支, 這個就是遠端master在本地的備份, 這時候我們可以直接<code>git checkout master</code>或者直接把本地本來就存在的檔案做<code>git add -A &amp;&amp; git commit -m &#39;initial msg&#39;</code>, 這樣就會發現第4步的狀況。</li>\n<li>我們會發現本地出現了本地自己的master(關於 unborn branch的介紹可以看這一篇<a href=\"https://stackoverflow.com/questions/21252876/git-repository-created-without-a-master-branch\">stackoverflow</a> )。</li>\n<li>如果我們在4.的時候是透過<code>git checkout master</code>產生本地master的話，會發現本地master是會自動跟遠端的備份(origin/master)同步好的, 而且遠端master也會同時被視為上游分支(上游分支的解釋可以看第7步)，這樣就可以直接跳過第6步進階到第7步。</li>\n<li>但是如果我們在4的時候是透過<code>git add -A &amp;&amp; git commit -m &#39;initial msg&#39;</code>去走到第5步，則會發現本地master只有原本就存在本地的檔案，這時候如果用的IDE是 vscode, 如過利用左下角的分支切換功能, 去切到apple/master , 就會發現報錯 “Git: fatal: A branch named ‘master’ already exists.”，這種狀況下我們要去執行 <code>git pull apple master</code>，然後就會發現多出了一個新的分支叫做 FETCHED_HEAD，我們接著可以進階到第7步(FETCHED_HEAD只是暫時的, 第七步結束後,FETCHED_HEAD就會消失, IDE也不會再報一樣的錯)。</li>\n<li><code>git push -u &lt;遠端倉庫的暱稱&gt; &lt;想要push過去的遠端倉庫分支&gt;</code> , 以這邊來講就是<code>git push -u apple master</code></li>\n<li>這邊的 <strong>-u</strong> 代表的是去把apple master去定為這個分支的上游分支，這樣以後在這個分支上做的git push, 最後都會把改動push到apple master。</li>\n<li>做完最後一步之後就會發現遠端repo的網頁上master的內容已經跟本地同步了</li>\n</ol>\n<h4 id=\"作法二其2\"><a href=\"#作法二其2\" class=\"headerlink\" title=\"作法二其2\"></a>作法二其2</h4><ol>\n<li>直接 <code>git pull &lt;指定遠端倉庫的暱稱&gt; &lt;指定想要pull下來的遠端倉庫分支&gt;</code>，這邊以apple上的master分支為例, 也就是 <code>git pull apple master</code></li>\n<li>其實這種狀況會跟前面其一的<code>git add -A &amp;&amp; git commit -m &#39;initial msg&#39;</code>狀況類似，接著也是直接<code>git push -u &lt;遠端倉庫的暱稱&gt; &lt;想要push過去的遠端倉庫分支&gt;</code> 就完事了（當然，如果有改動要commit的記得要commit）。</li>\n</ol>\n","site":{"data":{"css/variables":"","languages":{"zh-TW":{"title":{"archive":"時間線","category":"分類","tag":"標籤","schedule":"時間表"},"menu":{"home":"首頁","archives":"時間線","categories":"分類","tags":"標籤","about":"關於","search":"搜尋","schedule":"時間表","sitemap":"網站地圖","commonweal":"公益 404"},"sidebar":{"overview":"本站概要","toc":"文章目錄"},"post":{"posted":"發表於","edited":"更新於","created":"創建時間","modified":"修改時間","edit":"編輯","in":"分類於","read_more":"閱讀全文","untitled":"未命名","sticky":"置頂文","views":"閱讀次數","related_posts":"相關文章","copyright":{"author":"作者","link":"文章連結","post_author":"Written by","post_link":"This article originally appeared on","license_title":"版權聲明","license_content":"本網誌所有文章除特別聲明外，均採用 %s 許可協議。轉載請註明出處！"}},"footer":{"powered":"","total_views":"總瀏覽次數","total_visitors":"訪客總數"},"counter":{"tag_cloud":{"zero":"目前還沒有任何標籤","one":"目前共有 1 個標籤","other":"目前共有 %d 個標籤"},"categories":{"zero":"目前還沒有任何分類","one":"目前共有 1 個分類","other":"目前共有 %d 個分類"},"archive_posts":{"zero":"目前還沒有任何文章。","one":"目前共有 1 篇文章。","other":"目前共有 %d 篇文章。"}},"state":{"posts":"文章","tags":"標籤","categories":"分類"},"search":{"placeholder":"搜尋...","empty":"We didn't find any results for the search: %s","hits_time":"%s results found in %s ms","hits":"%s results found"},"cheers":{"um":"嗯..","ok":"還不錯","nice":"好","good":"很好","great":"非常好","excellent":"棒棒Der"},"keep_on":"繼續努力。","symbol":{"comma":"，","period":"。","colon":"："},"reward":{"donate":"捐贈","wechatpay":"微信支付","alipay":"支付寶","paypal":"貝寶","bitcoin":"比特幣"},"follow_me":{"welcome":"歡迎關注我的其它站點"},"accessibility":{"nav_toggle":"切換導航欄","prev_page":"上一頁","next_page":"下一頁"},"symbols_count_time":{"count":"文章字數","count_total":"總字數","time":"所需閱讀時間","time_total":"所需總閱讀時間","time_minutes":"分鐘"}}},"css/mixins":"","css/styles":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","template/head":"<script src=\"//js/tool/canvas-fx-base.js\"></script>\n\n<script src=\"//js/ripple-logo.js\"></script>\n<script src=\"//js/silk-wave.js\"></script>\n\n<style>\n  @font-face {\n  font-family: \"Roboto\";\n  src: url(//font/Roboto.ttf) format(\"truetype\");\n}\n</style>","css/styl-plugin/grid-post-layout/main":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n.site-banner {\n  height: 300px;\n  position: relative;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n}\n@media (min-width: 992px) {\n  .site-banner {\n    margin-top: 15px;\n    width: $content-desktop-large;\n    background-color: #222;\n    box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n  }\n}\n.headband {\n  display: none;\n}\n.post-meta-item {\n  font-size: 12px;\n}\nh1 {\n  font-size: 1.125em;\n}\nh2 {\n  font-size: 1em;\n}\nh3 {\n  font-size: 0.875em;\n}\nh4 {\n  font-size: 0.75em;\n}\nh5 {\n  font-size: 0.625em;\n}\nh6 {\n  font-size: 0.5em;\n}\nh1 {\n  font-size: 1.625em;\n}\nh2 {\n  font-size: 1.5em;\n}\nh3 {\n  font-size: 1.375em;\n}\nh4 {\n  font-size: 1.25em;\n}\nh5 {\n  font-size: 1.125em;\n}\nh6 {\n  font-size: 1em;\n}\n.posts-expand {\n  padding: 40px;\n}\n.posts-montage {\n  padding: 0px;\n  margin-left: 15px;\n}\n.posts-montage h1 {\n  font-size: 1.125em;\n}\n.posts-montage h2 {\n  font-size: 1em;\n}\n.posts-montage h3 {\n  font-size: 0.875em;\n}\n.posts-montage h4 {\n  font-size: 0.75em;\n}\n.posts-montage h5 {\n  font-size: 0.625em;\n}\n.posts-montage h6 {\n  font-size: 0.5em;\n}\n@media screen and (max-width: 992px) {\n  .posts-montage {\n    margin-left: 0;\n  }\n}\n.posts-montage .post-block {\n  user-select: none;\n  height: 250px;\n  position: relative;\n  box-sizing: border-box;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.posts-montage .post-block:first-of-type {\n  padding-top: 0;\n}\n.posts-montage .post-block >article {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  padding-left: 25px;\n  padding-top: 25px;\n  margin: auto;\n}\n.posts-montage .post-block .post-header {\n  height: 100%;\n}\n.posts-montage .post-block .post-header .post-title {\n  margin: 0;\n  padding-right: 25px;\n}\n.posts-montage .post-block .post-header .post-title-link {\n  border-bottom: none;\n}\n.posts-montage .post-block .post-header .post-meta-container {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  padding-right: 25px;\n  padding-left: 25px;\n  padding-bottom: 25px;\n}\n.posts-montage .post-block .post-header .post-meta {\n  justify-content: flex-end;\n}\n.posts-montage .post-block .post-header .post-meta-item-icon {\n  display: none;\n}\n.posts-montage .post-block .post-header .post-meta-item-text {\n  display: none;\n}\n.posts-montage .post-block .post-body {\n  display: none;\n}\n.posts-montage .post-block .post-footer {\n  display: none;\n}\n.pagination {\n  margin: 0;\n  padding: 30px 0 20px 0;\n  border: none;\n}\n.pagination .page-number,\n.pagination .extend {\n  border: none;\n}\n.header-inner {\n  background-color: transparent;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.site-brand-container {\n  background-color: transparent;\n}\n@media screen and (max-width: 992px) {\n  .site-brand-container {\n    background-color: #222;\n    border: none;\n  }\n}\n.site-nav {\n  margin-top: 15px;\n  margin-top: 0;\n}\n@media screen and (max-width: 992px) {\n  .site-nav {\n    background-color: #222;\n    border: none;\n  }\n}\n.sidebar {\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n.main-inner {\n  background-color: transparent;\n}\n.main-inner.posts-expand {\n  background-color: #222;\n  background-color: #222;\n  box-shadow: 0 0px 1.4px rgba(0,0,0,0.128), 0 0px 3.6px rgba(0,0,0,0.15), 0 0px 7.4px rgba(0,0,0,0.178), 0 0px 15.3px rgba(0,0,0,0.23), 0 0px 42px rgba(0,0,0,0.32);\n}\n@media screen and (max-width: 992px) {\n  .main-inner {\n    padding: 20px;\n  }\n}\n.main {\n  margin-top: 20px;\n}\n@media screen and (max-width: 992px) {\n  .main {\n    margin-top: 0;\n  }\n}\n@media (min-width: $content-desktop-large) {\n  .main {\n    width: $content-desktop-large;\n  }\n}\n.menu-item a:hover,\n.menu-item span.exturl:hover,\n.menu-item a.menu-item-active,\n.menu-item span.exturl.menu-item-active {\n  background-color: transparent;\n}\nhtml,\nbody {\n  height: auto;\n  background: linear-gradient(180deg, #222 0%, #222 49%, #191919 100%);\n  background-size: cover;\n}\n.posts-collapse {\n  padding: 20px;\n}\n.posts-collapse .post-block:first-of-type {\n  padding-top: 20px;\n}\n.posts-expand {\n  padding: 40px;\n}\n.post-body {\n  font-size: 1em;\n}\n.post-body li+li {\n  margin-top: 30px;\n}\n.post-body code {\n  color: #ffb531;\n}\n.site-brand-container {\n  padding: 0;\n}\n.site-meta {\n  padding: 0;\n}\n@media screen and (max-width: 991px) {\n  .site-meta {\n    padding: 20px 0;\n  }\n}\n.site-subtitle {\n  color: rgba(255,255,255,0.35);\n  margin: 0px;\n  padding: 10px;\n  background-color: rgba(0,0,0,0.35);\n  user-select: none;\n}\n@media screen and (max-width: 991px) {\n  .site-subtitle {\n    padding: 0;\n    margin: 10px;\n    margin-bottom: 0;\n    background-color: transparent;\n  }\n}\n.site-description {\n  display: none;\n}\n.brand {\n  font-size: 0px;\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 50%;\n}\n@media screen and (max-width: 991px) {\n  .brand {\n    font-size: 20px;\n    padding-bottom: 0px;\n  }\n}\n.brand >*:not(#logo-canvas) {\n  display: none;\n}\n@media screen and (max-width: 991px) {\n  .brand >*:not(#logo-canvas) {\n    display: block;\n  }\n}\n.brand #logo-canvas {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(0,0,0,0.35);\n  box-shadow: inset 0px -10px 20px 3px rgba(0,0,0,0.25);\n}\n@media screen and (max-width: 991px) {\n  .brand #logo-canvas {\n    display: none;\n  }\n}\n","css/styl-plugin/grid-post-layout/mixins":".sidebar-inner {\n  background-color: transparent;\n}\n.sidebar-inner .site-author-image {\n  border: none;\n  user-select: none;\n}\n","css/styl-plugin/grid-post-layout/variables":""}},"excerpt":"","more":"<h2 id=\"git-clone專案的方法\"><a href=\"#git-clone專案的方法\" class=\"headerlink\" title=\"git clone專案的方法\"></a>git clone專案的方法</h2><p>說到clone專案(這邊以github為例), 一般狀況下有下面幾種比較常見的狀況</p>\n<h3 id=\"作法一-遠端git倉庫直接clone到本地\"><a href=\"#作法一-遠端git倉庫直接clone到本地\" class=\"headerlink\" title=\"作法一(遠端git倉庫直接clone到本地)\"></a>作法一(遠端git倉庫直接clone到本地)</h3><ol>\n<li>首先第一步當然是直接在遠端倉庫的網頁(例如github的repo頁面)先開一個repo</li>\n<li>再來打開自己電腦的command line(或是也可以使用Vscode等IDE自帶的終端), 利用bash指令去把當前資料夾位置移到想要存放本地repo資料夾的地方</li>\n<li>然後就直接輸入<code>git clone &lt;遠端repo位址&gt;</code></li>\n<li>這樣就可以創建出一個和遠端倉庫關聯的本地倉庫</li>\n</ol>\n<h3 id=\"作法二-本地已經有一個裡面有檔案的資料夾-然後在遠端也有一個裡面有東西的git倉庫-上面有master-可能也有master以外的分支-想要把本地的東西推到遠端\"><a href=\"#作法二-本地已經有一個裡面有檔案的資料夾-然後在遠端也有一個裡面有東西的git倉庫-上面有master-可能也有master以外的分支-想要把本地的東西推到遠端\" class=\"headerlink\" title=\"作法二(本地已經有一個裡面有檔案的資料夾, 然後在遠端也有一個裡面有東西的git倉庫,上面有master, 可能也有master以外的分支, 想要把本地的東西推到遠端)\"></a>作法二(本地已經有一個裡面有檔案的資料夾, 然後在遠端也有一個裡面有東西的git倉庫,上面有master, 可能也有master以外的分支, 想要把本地的東西推到遠端)</h3><ol>\n<li>首先第一步先把本地的資料夾做git的初始化 <code>git init</code></li>\n<li>再來 <code>git remote add &lt;遠端資料庫的暱稱, 可以自訂&gt; &lt;遠端資料庫的位址&gt;</code></li>\n<li>上面這個動作是去為本地的這個倉庫”標記”, 他有關聯上哪一個遠端倉庫(所以其實一個本地倉庫可以關聯上很多個遠端倉庫，但是暱稱不能重複)</li>\n<li>所以說如果我想要去關聯一個新的遠端倉庫(我們這邊取名為apple), 那就是<code>git remote add apple &lt;apple的位址&gt;</code></li>\n<li>接下來因為我們這邊的狀況是本地已經有檔案, 想要推到遠端, 但遠端因為也是有東西的，所以這邊我們其實會有兩種做法，我們接著描述</li>\n</ol>\n<h4 id=\"作法二其1\"><a href=\"#作法二其1\" class=\"headerlink\" title=\"作法二其1\"></a>作法二其1</h4><ol>\n<li>直接 <code>git fetch &lt;指定遠端倉庫的暱稱&gt;</code> 這邊以apple為例, 也就是 <code>git fetch apple</code></li>\n<li>這麼做之後就可以把遠端倉庫的最新改動、所有分支與檔案下載回來, 而我們這邊因為本地倉庫是新開的，這個狀況叫做 “unborn branch”, 是一個只有HEAD在本地的狀況(這部分以後再討論)。</li>\n<li>在這邊講的”unborn branch”的狀況下去做 fetch, 以這邊來講，就會把遠端的master下載回拉本地端，這樣就會在本地端看到一個origin/master分支, 這個就是遠端master在本地的備份, 這時候我們可以直接<code>git checkout master</code>或者直接把本地本來就存在的檔案做<code>git add -A &amp;&amp; git commit -m &#39;initial msg&#39;</code>, 這樣就會發現第4步的狀況。</li>\n<li>我們會發現本地出現了本地自己的master(關於 unborn branch的介紹可以看這一篇<a href=\"https://stackoverflow.com/questions/21252876/git-repository-created-without-a-master-branch\">stackoverflow</a> )。</li>\n<li>如果我們在4.的時候是透過<code>git checkout master</code>產生本地master的話，會發現本地master是會自動跟遠端的備份(origin/master)同步好的, 而且遠端master也會同時被視為上游分支(上游分支的解釋可以看第7步)，這樣就可以直接跳過第6步進階到第7步。</li>\n<li>但是如果我們在4的時候是透過<code>git add -A &amp;&amp; git commit -m &#39;initial msg&#39;</code>去走到第5步，則會發現本地master只有原本就存在本地的檔案，這時候如果用的IDE是 vscode, 如過利用左下角的分支切換功能, 去切到apple/master , 就會發現報錯 “Git: fatal: A branch named ‘master’ already exists.”，這種狀況下我們要去執行 <code>git pull apple master</code>，然後就會發現多出了一個新的分支叫做 FETCHED_HEAD，我們接著可以進階到第7步(FETCHED_HEAD只是暫時的, 第七步結束後,FETCHED_HEAD就會消失, IDE也不會再報一樣的錯)。</li>\n<li><code>git push -u &lt;遠端倉庫的暱稱&gt; &lt;想要push過去的遠端倉庫分支&gt;</code> , 以這邊來講就是<code>git push -u apple master</code></li>\n<li>這邊的 <strong>-u</strong> 代表的是去把apple master去定為這個分支的上游分支，這樣以後在這個分支上做的git push, 最後都會把改動push到apple master。</li>\n<li>做完最後一步之後就會發現遠端repo的網頁上master的內容已經跟本地同步了</li>\n</ol>\n<h4 id=\"作法二其2\"><a href=\"#作法二其2\" class=\"headerlink\" title=\"作法二其2\"></a>作法二其2</h4><ol>\n<li>直接 <code>git pull &lt;指定遠端倉庫的暱稱&gt; &lt;指定想要pull下來的遠端倉庫分支&gt;</code>，這邊以apple上的master分支為例, 也就是 <code>git pull apple master</code></li>\n<li>其實這種狀況會跟前面其一的<code>git add -A &amp;&amp; git commit -m &#39;initial msg&#39;</code>狀況類似，接著也是直接<code>git push -u &lt;遠端倉庫的暱稱&gt; &lt;想要push過去的遠端倉庫分支&gt;</code> 就完事了（當然，如果有改動要commit的記得要commit）。</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cktx1vyxv0009tay2ebe62s73","category_id":"cktx1vyxr0004tay27owi927o","_id":"cktx1vyy3000itay22e2z6e7o"},{"post_id":"cktx1vyxj0001tay22grm3zru","category_id":"cktx1vyxr0004tay27owi927o","_id":"cktx1vyya000ntay2gau5bhrk"},{"post_id":"cktx1vyxx000btay21dm829lm","category_id":"cktx1vyxr0004tay27owi927o","_id":"cktx1vyyc000qtay2478seolh"},{"post_id":"cktx1vyxz000ftay2a0072il5","category_id":"cktx1vyxr0004tay27owi927o","_id":"cktx1vyyd000ttay29ymxd0vp"},{"post_id":"cktx1vyxo0003tay202kj74d4","category_id":"cktx1vyxr0004tay27owi927o","_id":"cktx1vyye000wtay24m576sjt"},{"post_id":"cktx1vyy0000htay2cmzq770k","category_id":"cktx1vyxr0004tay27owi927o","_id":"cktx1vyyf000ztay2at4u87nk"},{"post_id":"cktx1vyy4000mtay20391c6cq","category_id":"cktx1vyxr0004tay27owi927o","_id":"cktx1vyyf0012tay28hxw7qc9"},{"post_id":"cktx1vyxt0007tay2dtffelie","category_id":"cktx1vyxr0004tay27owi927o","_id":"cktx1vyyt0016tay200v22p55"},{"post_id":"cktx1vyyb000ptay2ai09hwvr","category_id":"cktx1vyxr0004tay27owi927o","_id":"cktx1vyyu0019tay2cowebras"},{"post_id":"cktx1vyyc000stay2ds2a36b9","category_id":"cktx1vyxr0004tay27owi927o","_id":"cktx1vyyv001dtay27pvdhzka"},{"post_id":"cktx1vyyd000vtay27nn9eduw","category_id":"cktx1vyxr0004tay27owi927o","_id":"cktx1vyyw001gtay2428of8y3"},{"post_id":"cktx1vyye000ytay20ofa2718","category_id":"cktx1vyxr0004tay27owi927o","_id":"cktx1vyyy001ktay271kl4vim"},{"post_id":"cktx1vyyf0011tay2g8bef8ug","category_id":"cktx1vyxr0004tay27owi927o","_id":"cktx1vyz1001ntay2bbct4nmo"},{"post_id":"cktx1vyyh0015tay2c7gk21yn","category_id":"cktx1vyxr0004tay27owi927o","_id":"cktx1vyz4001rtay2fqgohup9"},{"post_id":"cktx1vyyt0018tay29lgdhmif","category_id":"cktx1vyxr0004tay27owi927o","_id":"cktx1vyz6001utay224lmhamt"},{"post_id":"cktx1vyyu001btay260pb8w2e","category_id":"cktx1vyxr0004tay27owi927o","_id":"cktx1vyz7001wtay24fme8oqe"},{"post_id":"cktx1vyyw001ftay2hehk75aa","category_id":"cktx1vyxr0004tay27owi927o","_id":"cktx1vyz80020tay23lrng8cc"},{"post_id":"cktx1vyyx001itay2asfshi7n","category_id":"cktx1vyxr0004tay27owi927o","_id":"cktx1vyza0022tay28h0f5d8d"},{"post_id":"cktx1vyyy001mtay2cuq85kvl","category_id":"cktx1vyxr0004tay27owi927o","_id":"cktx1vyzc0026tay2cgw48ee7"},{"post_id":"cktx1vyz2001ptay2f4l5e64u","category_id":"cktx1vyxr0004tay27owi927o","_id":"cktx1vyzc0029tay22bek5g6q"},{"post_id":"cktx1vyz5001ttay288kgctwi","category_id":"cktx1vyxr0004tay27owi927o","_id":"cktx1vyzd002ctay27pbbdd3n"},{"post_id":"cktx1vyz6001vtay23cvx67eg","category_id":"cktx1vyxr0004tay27owi927o","_id":"cktx1vyzd002dtay247aa3j5v"},{"post_id":"cktx1vyz7001ytay20nod0g47","category_id":"cktx1vyxr0004tay27owi927o","_id":"cktx1vyze002gtay29aufdz5l"},{"post_id":"cktx1vyz80021tay2an1sftnd","category_id":"cktx1vyxr0004tay27owi927o","_id":"cktx1vyze002htay26xqifc97"},{"post_id":"cktx1vyzb0025tay212daggpm","category_id":"cktx1vyxr0004tay27owi927o","_id":"cktx1vyzg002jtay2138281t7"},{"post_id":"cktx1vyzc0028tay2bjtnd72o","category_id":"cktx1vyxr0004tay27owi927o","_id":"cktx1vyzg002ltay271771x2i"}],"PostTag":[{"post_id":"cktx1vyxv0009tay2ebe62s73","tag_id":"cktx1vyxs0005tay2bffz7moi","_id":"cktx1vyxz000etay29klqdodu"},{"post_id":"cktx1vyxj0001tay22grm3zru","tag_id":"cktx1vyxs0005tay2bffz7moi","_id":"cktx1vyy0000gtay2ddtm6lba"},{"post_id":"cktx1vyxx000btay21dm829lm","tag_id":"cktx1vyxs0005tay2bffz7moi","_id":"cktx1vyy4000ltay2c4p0bqgs"},{"post_id":"cktx1vyxz000ftay2a0072il5","tag_id":"cktx1vyxs0005tay2bffz7moi","_id":"cktx1vyyb000otay28q6scsxd"},{"post_id":"cktx1vyxo0003tay202kj74d4","tag_id":"cktx1vyxs0005tay2bffz7moi","_id":"cktx1vyyc000rtay2bvza1crc"},{"post_id":"cktx1vyy0000htay2cmzq770k","tag_id":"cktx1vyxs0005tay2bffz7moi","_id":"cktx1vyyd000utay26kou54qa"},{"post_id":"cktx1vyy4000mtay20391c6cq","tag_id":"cktx1vyxs0005tay2bffz7moi","_id":"cktx1vyye000xtay2ckkrbncz"},{"post_id":"cktx1vyxt0007tay2dtffelie","tag_id":"cktx1vyxs0005tay2bffz7moi","_id":"cktx1vyyf0010tay2dqv40h9j"},{"post_id":"cktx1vyyb000ptay2ai09hwvr","tag_id":"cktx1vyxs0005tay2bffz7moi","_id":"cktx1vyyh0014tay28xfi3vh2"},{"post_id":"cktx1vyyc000stay2ds2a36b9","tag_id":"cktx1vyxs0005tay2bffz7moi","_id":"cktx1vyyt0017tay24qu7fdt9"},{"post_id":"cktx1vyyd000vtay27nn9eduw","tag_id":"cktx1vyxs0005tay2bffz7moi","_id":"cktx1vyyu001atay2gu674rae"},{"post_id":"cktx1vyyt0018tay29lgdhmif","tag_id":"cktx1vyyg0013tay29z44her3","_id":"cktx1vyyw001etay2d7io3rae"},{"post_id":"cktx1vyye000ytay20ofa2718","tag_id":"cktx1vyyg0013tay29z44her3","_id":"cktx1vyyx001htay24c4hd44a"},{"post_id":"cktx1vyyu001btay260pb8w2e","tag_id":"cktx1vyyg0013tay29z44her3","_id":"cktx1vyyy001ltay2gp7614b1"},{"post_id":"cktx1vyyf0011tay2g8bef8ug","tag_id":"cktx1vyyg0013tay29z44her3","_id":"cktx1vyz2001otay23nnbbj4g"},{"post_id":"cktx1vyyh0015tay2c7gk21yn","tag_id":"cktx1vyyg0013tay29z44her3","_id":"cktx1vyz5001stay2hrpp58yc"},{"post_id":"cktx1vyyw001ftay2hehk75aa","tag_id":"cktx1vyz4001qtay25noi3frc","_id":"cktx1vyz8001ztay2c090g6ew"},{"post_id":"cktx1vyz7001ytay20nod0g47","tag_id":"cktx1vyxs0005tay2bffz7moi","_id":"cktx1vyzb0024tay24sdbghsg"},{"post_id":"cktx1vyyx001itay2asfshi7n","tag_id":"cktx1vyz4001qtay25noi3frc","_id":"cktx1vyzc0027tay2dy32ccun"},{"post_id":"cktx1vyyy001mtay2cuq85kvl","tag_id":"cktx1vyz4001qtay25noi3frc","_id":"cktx1vyzd002btay2gpb8f7mm"},{"post_id":"cktx1vyz2001ptay2f4l5e64u","tag_id":"cktx1vyz4001qtay25noi3frc","_id":"cktx1vyze002ftay255539jo8"},{"post_id":"cktx1vyz5001ttay288kgctwi","tag_id":"cktx1vyyg0013tay29z44her3","_id":"cktx1vyzg002ktay29zuw9b5a"},{"post_id":"cktx1vyz5001ttay288kgctwi","tag_id":"cktx1vyzd002etay23avbd44s","_id":"cktx1vyzg002mtay290z3gv9y"},{"post_id":"cktx1vyz6001vtay23cvx67eg","tag_id":"cktx1vyyg0013tay29z44her3","_id":"cktx1vyzh002otay2cepk694o"},{"post_id":"cktx1vyz6001vtay23cvx67eg","tag_id":"cktx1vyzd002etay23avbd44s","_id":"cktx1vyzh002ptay28toxa6tg"},{"post_id":"cktx1vyz80021tay2an1sftnd","tag_id":"cktx1vyzg002ntay23rn191vo","_id":"cktx1vyzh002rtay26scv6brp"},{"post_id":"cktx1vyzb0025tay212daggpm","tag_id":"cktx1vyzg002ntay23rn191vo","_id":"cktx1vyzi002ttay2fgrwfyrz"},{"post_id":"cktx1vyzc0028tay2bjtnd72o","tag_id":"cktx1vyzg002ntay23rn191vo","_id":"cktx1vyzi002utay28hxc7ks9"}],"Tag":[{"name":"2021鐵人賽","_id":"cktx1vyxs0005tay2bffz7moi"},{"name":"js","_id":"cktx1vyyg0013tay29z44her3"},{"name":"ts","_id":"cktx1vyz4001qtay25noi3frc"},{"name":"rxjs","_id":"cktx1vyzd002etay23avbd44s"},{"name":"git","_id":"cktx1vyzg002ntay23rn191vo"}]}}