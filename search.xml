<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Day4 - 2D渲染環境基礎篇 I -  我要成為Canvas Ninja!</title>
    <url>/WFX-Maniac/2021/09/14/2D%E6%B8%B2%E6%9F%93%E7%92%B0%E5%A2%83%E5%9F%BA%E7%A4%8E%E7%AF%87%20I%20-%20%20%E6%88%91%E8%A6%81%E6%88%90%E7%82%BACanvas%20Ninja!/</url>
    <content><![CDATA[<h2 id="進入2D渲染的世界"><a href="#進入2D渲染的世界" class="headerlink" title="進入2D渲染的世界"></a>進入2D渲染的世界</h2><p>我們在前面的章節有提到，任何Canvas的相關程序，起手式必定是先取得渲染環境，所以2D渲染程序的第一步當然也就是先取得2D得渲染環境</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> cvs = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;canvas&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> ctx = cvs.getContext(<span class="string">&#x27;2d&#x27;</span>); <span class="comment">//這個ctx就是2d模式的渲染環境</span></span><br></pre></td></tr></table></figure>



<h2 id="2D渲染環境下的座標系"><a href="#2D渲染環境下的座標系" class="headerlink" title="2D渲染環境下的座標系"></a>2D渲染環境下的座標系</h2><p>  在國高中上數學課的提到座標系時，我們會很習慣的去畫一個X軸向右為正，Y軸向上為正的座標軸，像這樣的座標系也就是所謂的『卡氏座標』，他是一種遵循右手定則的坐標系。  </p>
<p>  我猜大家應該都已經把過去學過的數學/理化都還給老師了，所以這邊我們稍微複習一下『右手定則』這個概念：  </p>
<p>  所謂的『右手定則』指的是：  </p>
  <img src="https://i.imgur.com/rJUSy76.png" width="250">

<p>  把右手伸出來，掌心朝自己，四指的方向會跟上圖Y軸同向，而大拇指方向則跟X軸同向，同時，你不管怎麼旋轉這張圖，你都可以用你的右手(手心必須朝自己)四指去比出Ｙ軸方向/用大拇指比出Ｘ軸方向，這就是所謂的『右手定則座標系』</p>
<p>  但是在Canvas 2D渲染環境的世界中，它所採取的座標系並不是『右手定則座標系』，而是『左手定則座標系』。</p>
<p>  『左手定則座標系』其實就是『右手定則座標系』的鏡像版～也就是說，我們其實可以直接把上面這張圖水平翻轉，它就直接成為了『左手定則座標系』，這時候你會發現，像剛剛同樣的操作，會變成只有左手才做得到。</p>
  <img src="https://i.imgur.com/XnfXM9b.png" width="250">


<p>  接著是重點，『左手定則座標系』和 『右手定則座標系』雖然看上去好像很相像，但最重要的差別就在於：  </p>
<blockquote>
<p>右手定則的座標系，逆時針是正的旋轉方向，但是左手定則的座標系，順時針才是正的旋轉方向</p>
</blockquote>
<p>  這點必須要熟記。</p>
<h2 id="2D渲染環境下常見的API與Property"><a href="#2D渲染環境下常見的API與Property" class="headerlink" title="2D渲染環境下常見的API與Property"></a>2D渲染環境下常見的API與Property</h2><p>  實際上，比起我們之後會提到的webgl環境，2D渲染環境的API在使用上都相當的直觀而且單純（當然，這也同時意味著2D渲染的難點不在於對API的理解，而是在於運算的過程）</p>
<p>  隨然說2D渲染環境的api數量繁多，但是為了避免一條一條介紹有點流水帳，</p>
<p>  在這邊我把常見的API/Property劃分成三種類型：</p>
<ul>
<li><p>路徑/上色相關</p>
</li>
<li><p>變形相關</p>
</li>
<li><p>像素操作相關</p>
<p>在接下來的章節中我會根據上述的三種類型，一一介紹三種類型中常用的api和這些api相關的基礎常識</p>
</li>
</ul>
]]></content>
      <categories>
        <category>前端技術學習心得</category>
      </categories>
      <tags>
        <tag>2021鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>Day6 - 2D渲染環境基礎篇 III -  我要成為Canvas Ninja!</title>
    <url>/WFX-Maniac/2021/09/14/2D%E6%B8%B2%E6%9F%93%E7%92%B0%E5%A2%83%E5%9F%BA%E7%A4%8E%E7%AF%87%20III%20-%20%20%E6%88%91%E8%A6%81%E6%88%90%E7%82%BACanvas%20Ninja!/</url>
    <content><![CDATA[<h2 id="非零纏繞與奇偶規則"><a href="#非零纏繞與奇偶規則" class="headerlink" title="非零纏繞與奇偶規則"></a>非零纏繞與奇偶規則</h2><h2 id="變形相關api"><a href="#變形相關api" class="headerlink" title="變形相關api"></a>變形相關api</h2><h3 id="旋轉"><a href="#旋轉" class="headerlink" title="旋轉"></a>旋轉</h3><h3 id="縮放"><a href="#縮放" class="headerlink" title="縮放"></a>縮放</h3><h3 id="平移"><a href="#平移" class="headerlink" title="平移"></a>平移</h3>]]></content>
      <categories>
        <category>前端技術學習心得</category>
      </categories>
      <tags>
        <tag>2021鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>Day5 - 2D渲染環境基礎篇 II -  我要成為Canvas Ninja!</title>
    <url>/WFX-Maniac/2021/09/14/2D%E6%B8%B2%E6%9F%93%E7%92%B0%E5%A2%83%E5%9F%BA%E7%A4%8E%E7%AF%87%20II%20-%20%20%E6%88%91%E8%A6%81%E6%88%90%E7%82%BACanvas%20Ninja!/</url>
    <content><![CDATA[<h2 id="何謂路徑？"><a href="#何謂路徑？" class="headerlink" title="何謂路徑？"></a>何謂路徑？</h2><p>要介紹路徑繪圖相關的api之前，必須要先理解什麼叫做『路徑』。<br>有學過電腦繪圖軟體，例如Adobe Photoshop, Adobe Illustrator的同學可能對『路徑』這個詞相當的熟悉，而且也可以快速掌握2D渲染環境路徑繪圖的概念。</p>
<blockquote>
<p>路徑是使用繪圖工具建立的任意形狀的曲線，用它可勾勒出物體的輪廓，所以也稱之為輪廓線。 為了滿足繪圖的需要，路徑又分為開放路徑和封閉路徑。 –維基百科</p>
</blockquote>
<p>如果要白話一點的解釋『路徑(Path)』這個概念，可以想像成他是一種透明，但是有形的一段曲線，在canvas中我們可以利用(接下來會提到的)上色填充相關api為已經成形的路徑設定填充色(fill)/邊框色(stroke)。</p>
<img src="https://i.imgur.com/7TfVMlG.png" width="500">

<p>在Canvas上繪製路徑時有一個<strong>特別需要注意的地方</strong>，那就是當我們開始繪製路徑時，這個行為過程其實有點類似於用筆尖在紙面上作畫。<br>這個『筆尖』會是一個實際存在的座標(但是你看不到)，打個比方:假設我們現在畫了一段由A點畫向B點的路徑，那麼『筆尖』最後也會停在B上面。  </p>
<p>接下來我們要藉由實作的方式來加速學習api的使用方式</p>
<h2 id="來畫一條線看看吧"><a href="#來畫一條線看看吧" class="headerlink" title="來畫一條線看看吧!"></a>來畫一條線看看吧!</h2><h3 id="畫上框線！"><a href="#畫上框線！" class="headerlink" title="畫上框線！"></a>畫上框線！</h3><h2 id="接著來畫一個圓"><a href="#接著來畫一個圓" class="headerlink" title="接著來畫一個圓!"></a>接著來畫一個圓!</h2><h3 id="畫上框線！-1"><a href="#畫上框線！-1" class="headerlink" title="畫上框線！"></a>畫上框線！</h3><h3 id="填充！"><a href="#填充！" class="headerlink" title="填充！"></a>填充！</h3><h2 id="畫一個不規則形狀"><a href="#畫一個不規則形狀" class="headerlink" title="畫一個不規則形狀!"></a>畫一個不規則形狀!</h2><h3 id="畫上框線！-2"><a href="#畫上框線！-2" class="headerlink" title="畫上框線！"></a>畫上框線！</h3><h3 id="填充！-1"><a href="#填充！-1" class="headerlink" title="填充！"></a>填充！</h3><h2 id="Canvas-Property的紀錄-save-與復原-restore"><a href="#Canvas-Property的紀錄-save-與復原-restore" class="headerlink" title="Canvas Property的紀錄(save)與復原(restore)"></a>Canvas Property的紀錄(save)與復原(restore)</h2><h2 id="非零纏繞與奇偶規則"><a href="#非零纏繞與奇偶規則" class="headerlink" title="非零纏繞與奇偶規則"></a>非零纏繞與奇偶規則</h2>]]></content>
      <categories>
        <category>前端技術學習心得</category>
      </categories>
      <tags>
        <tag>2021鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>Day7 - 2D渲染環境基礎篇 IV -  我要成為Canvas Ninja!</title>
    <url>/WFX-Maniac/2021/09/14/2D%E6%B8%B2%E6%9F%93%E7%92%B0%E5%A2%83%E5%9F%BA%E7%A4%8E%E7%AF%87%20IV%20-%20%20%E6%88%91%E8%A6%81%E6%88%90%E7%82%BACanvas%20Ninja!/</url>
    <content><![CDATA[<h2 id="像素操作相關"><a href="#像素操作相關" class="headerlink" title="像素操作相關"></a>像素操作相關</h2>]]></content>
      <categories>
        <category>前端技術學習心得</category>
      </categories>
      <tags>
        <tag>2021鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>Day8 - Canvas動畫概論 -  我要成為Canvas Ninja!</title>
    <url>/WFX-Maniac/2021/09/12/Canvas%20%E5%8B%95%E7%95%AB%E6%A6%82%E8%AB%96%20-%20%20%E6%88%91%E8%A6%81%E6%88%90%E7%82%BACanvas%20Ninja!/</url>
    <content><![CDATA[<h2 id="canvas動畫"><a href="#canvas動畫" class="headerlink" title="canvas動畫"></a>canvas動畫</h2>]]></content>
      <categories>
        <category>前端技術學習心得</category>
      </categories>
      <tags>
        <tag>2021鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>Day3 - Canvas基礎概論 II  - 我要成為Canvas Ninja！</title>
    <url>/WFX-Maniac/2021/09/10/Canvas%E5%9F%BA%E7%A4%8E%E6%A6%82%E8%AB%96%20II%20%20-%20%E6%88%91%E8%A6%81%E6%88%90%E7%82%BACanvas%20Ninja%EF%BC%81/</url>
    <content><![CDATA[<h2 id="Some-Deeper-Basics"><a href="#Some-Deeper-Basics" class="headerlink" title="Some Deeper Basics"></a>Some Deeper Basics</h2><h3 id="圖像的概念"><a href="#圖像的概念" class="headerlink" title="圖像的概念"></a>圖像的概念</h3><p>  我們在前面有說到，canvas本身是透過物件模型來繪製圖像，但是我們沒有提到何謂”圖像”。  </p>
<p>  實際上圖像的概念很簡單。</p>
<p>  大家都知道，光的三原色分別是紅/藍/綠;  一束標準的白光，可以分裂成紅/藍/綠光來看。  </p>
<p>  而圖像的實作原理，其實就是透過阻擋掉紅/藍/綠光一部分的佔比，來形成不同的顏色。</p>
<p>  這邊我找了兩張圖片，這兩張圖片很好的說明了在計算機領域中圖像的概念(圖片來源：<a href="https://dev.to/">https://dev.to/</a>)</p>
  <img src="https://i.imgur.com/dz53Fsi.jpg" width="600">

  <img src="https://i.imgur.com/FmT2rzI.jpg" width="600">

<p>  一個圖像，其實可以直接被視為一大群像素的集合體，而每一個像素都具備了能分別對應三種光線(RGB)，還有透明值(alpha)的篩子,這些篩子就是所謂的通道(Channel)  </p>
<p>  透明值的通道，光看字面上可能不太好理解他在數理上的意義，所以這邊我也找到了一個網頁，這個網頁上的範例可以為我們做一個適當的解釋。</p>
<p>  <a href="https://borderleft.com/toolbox/rgba/">https://borderleft.com/toolbox/rgba/</a></p>
<p>  這是一個能夠顯示rgba顏色跟不同顏色底混合之後的樣子的網站，這邊我把底色設定為白色，也就是說合成出來的顏色就是該rgba色放置於白背景時候的樣子。  </p>
  <img src="https://i.imgur.com/VC25E8b.png" width="600">

<p>  圖片中我們看到，當alpha設置為0.7時, R和G通道的0(也就是完全阻絕RG光線)，他們的阻擋量(也就是255 - 0 = 255)都分別被乘以0.3而得到77這個數值，而B光線因為阻擋量是0, 所以最後在B數值上還是得到255，最終則呈現出(77,77,255)這個顏色。 </p>
<p>  從這邊我們就可以推論，alpha的數理意義其實就是同步的對三個通道的數值做比例性的消減。</p>
<h3 id="從像素觀點來看Canvas"><a href="#從像素觀點來看Canvas" class="headerlink" title="從像素觀點來看Canvas"></a>從像素觀點來看Canvas</h3><p>  一張Canvas，其實也就是一個圖像，他也是由非常多個像素所組成，而每一個像素點上又各自都有rgba四個通道。  </p>
<p>  一張寬度100px, 高度100px的canvas，它實際上就是100*100 = 10000個像素的集合體，而同時在程序上我們則可以把它轉換成一個長度為100*100*4的陣列(也就是一共40000個channel值)</p>
<p>  而所謂的『像素操作』，其實就是一種陣列運算，我們可以透過去疊加/轉換/削除陣列中的一部分channel值，來達到產生新圖像的效果。</p>
<p>  Photoshop的濾鏡運算(例如彩色轉灰階)，或是在社群軟體上有時候可以看到的圖片轉符號(拼字圖畫)，就是典型的像素操作技術之運用。</p>
<p>  另外，關於Canvas的寬高數值定義其實有一個<strong>有趣的點</strong>。</p>
<p>  實際上在定義一張canvas的大小時，並不是使用css來賦值，而是使用width和height這兩個attribute，直接下在canvas元素上面。</p>
<p>  只有width和height這兩個attribute數值才能夠直接定義canvas的像素總量，而如果這時硬是要用css去擴大一張100＊100的canvas為10000px*10000px，就會出現像素密度過低(也就是圖像模糊的情形)的狀況</p>
<p>  關於Canvas的像素操作技術，我們在之後的章節會提到更多實操的範例。</p>
<h2 id="Context-What-The-Hell-Is-That"><a href="#Context-What-The-Hell-Is-That" class="headerlink" title="Context? What The Hell Is That?"></a>Context? What The Hell Is That?</h2><blockquote>
<p>SO, 你在前面的介紹文一直提到『渲染環境』這一個詞彙，那個到底指的是什麼？</p>
</blockquote>
<p>初來乍到的同學對於『渲染環境』這一個詞可能相當的陌生。<br>但是如果過去曾經有電腦繪圖/3D建模相關知識的人可能就能快速的領會這個詞所代表的意義。  </p>
<p>『渲染環境』其實指的是透過<code>canvasElement.getContext(type)</code>這一個api所取得的一個物件。<br>我們其實可以把『渲染環境』想像成是繪圖軟體(例如小畫家)的概念，環境中會具備大量的工具（就像小畫家會提供畫圓形畫方形的功能），讓使用者可以應用在繪圖程序中。</p>
<p>『渲染環境』實際的提取方式如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> cvs = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;canvas&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> ctx = cvs.getContext(<span class="string">&#x27;2d&#x27;</span>); <span class="comment">//這個ctx就是2d模式的渲染環境</span></span><br></pre></td></tr></table></figure>

<p><code>getContext(type)</code> 這一個方法可以根據輸入的type字串來取得操作者所想要使用的渲染環境，而在目前html5的規制下，一共有四種渲染環境可供選擇，分別是:</p>
<ul>
<li>2d : 最基礎同時也最適合新手入門的渲染環境，具備多種2d繪圖的api</li>
<li>webgl : 是一種速度更快，功能更多，具備原生 3D API，可讓使用者能夠完全訪問渲染管道的渲染環境。(很多人可能會誤會3D圖像只能透過webgl渲染環境所提供的api來達成，但實際上不是的，這點後面的章節會講。)</li>
<li>webgl2 : 簡而言之就是webgl環境的上位版，具備更多的功能，但是相對的，對部分舊型瀏覽器/移動裝置瀏覽器的支援度也略低，算是實驗性的功能</li>
<li>bitmaprenderer : 這也同樣是一種只有少數瀏覽器有支援的實驗性功能，它的用途很單純，是用來轉移指定圖像的bitmap到指定的canvas上</li>
</ul>
<p>在這個系列的文章中，我會針對比較常見的兩種環境(2D,webgl)做案例探討。</p>
<h2 id="Start-From-2D"><a href="#Start-From-2D" class="headerlink" title="Start From 2D"></a>Start From 2D</h2><p>雖然說講到網頁前端的Canvas技術，大多數人都會直接地想到像是Three.js/Webgl那樣的渲染環境/套件做出來的各種絢麗特效。<br>但是我個人認為，初學Canvas應該還是先從2D的基礎學起，雖然說到了webgl渲染環境時，webgl環境整體提供的API和2D環境所提供的API在本質上有很巨大的差異，<br>但是實際上在做渲染運算、模型規劃時的重點還是有其相似之處。</p>
<p>在接下來的章節中，我們會先進入2D渲染的環節，當然還是會先從2D的基礎講起，然後再開始慢慢的進入一些更加複雜的案例。</p>
]]></content>
      <categories>
        <category>前端技術學習心得</category>
      </categories>
      <tags>
        <tag>2021鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>Day2 - Canvas基礎概論 I - 我要成為Canvas Ninja!</title>
    <url>/WFX-Maniac/2021/09/09/Canvas%E5%9F%BA%E7%A4%8E%E6%A6%82%E8%AB%96%20I%20%20-%20%E6%88%91%E8%A6%81%E6%88%90%E7%82%BACanvas%20Ninja%EF%BC%81%20/</url>
    <content><![CDATA[<h2 id="Let’s-Start-From-Scratch"><a href="#Let’s-Start-From-Scratch" class="headerlink" title="Let’s Start From Scratch"></a>Let’s Start From Scratch</h2><p>本系列文章的頭幾篇我決定還是帶點基礎的東西，所以首先，我打算介紹一些不常被一般教學提到的資料來當熱身。</p>
<blockquote>
<p>The HTMLCanvasElement interface provides properties and methods for manipulating the layout and presentation of <code>&lt;canvas&gt;</code> elements. The HTMLCanvasElement interface also inherits the properties and methods of the HTMLElement interface.  — from MDN<br>The HTML <code>&lt;canvas&gt;</code> element is used to draw graphics on a web page. — from <a href="http://www.w3schools.com/">www.w3schools.com</a></p>
</blockquote>
<p>上述是在MDN還有W3school上關於<code>canvas</code> 元素 的解釋。簡單來說<code>canvas</code>就是一種自帶複數api, 然後可以用來在網頁上做動態繪圖的元素。<br>簡單的介紹就到這邊，接下來是疑問時間。<br>有些人看到上述的解釋，可能會覺得很疑惑，例如：</p>
<blockquote>
<p>那麼我們平常在用的CSS和html基礎元素，那樣子的東西難道不也是一種繪圖嗎? 差別在哪裡?</p>
</blockquote>
<p>接下來我們將針對這個問題做一系列的說明。</p>
<h2 id="Canvas-與-一般-Dom元素的差異一：編譯流程"><a href="#Canvas-與-一般-Dom元素的差異一：編譯流程" class="headerlink" title="Canvas 與 一般 Dom元素的差異一：編譯流程"></a>Canvas 與 一般 Dom元素的差異一：編譯流程</h2><p>通常在80%以上的web專案內容中，我們都是使用普通的Dom元素來對頁面進行版面規劃。<br>所謂『普通』的Dom元素指的就是 <code>div</code>、<code>span</code>、<code>ul</code>、<code>li</code>…,etc. 而我們都知道，<code>HTML</code>本身是一種標記語言，<br>一篇完整的標記語言範本其實就有點像某種<strong>願望清單</strong>，為什麼說是願望清單呢? 那是因為瀏覽器在接收到一份HTML時，他做的事其實就是根據這份文件，上面提到的: 這份文件有多少元素? 元素個別是哪些？ 元素的先後排列順序、元素的巢狀化邏輯…etc. 去生成各個元素的物件實例，然後再透過瀏覽器的渲染引擎去把這些元素渲染在畫面上。</p>
<p><img src="https://i.imgur.com/Ta8eGWm.png" alt="retain mode"></p>
<p>像這樣子先確認頁面需求模型(也就是我們提到的願望清單)，然後將模型中的細節一一轉譯實現的這種行為模式，我們把它稱為<code>Retained Mode</code>(保留模式)。<br>接著一定就會有人問：  </p>
<blockquote>
<p>那麼是不是還有別的模式呢？</p>
</blockquote>
<p>Of course.<br>當瀏覽器需要做這類把文字邏輯轉化成視覺的工作時(我們把這種行為稱為轉譯)，會有兩種固定模式，其一是<code>Retained Mode</code>(保留模式), 然後再來就是與<code>Canvas</code>密切相關的<code>Immediate Mode</code>(立即模式)。  </p>
<p><img src="https://i.imgur.com/d7l62h9.png" alt="img"></p>
<p>從上面這張圖片我們可以發現，<code>Canvas</code> 元素和<code>Dom</code>元素最大的區別就是創建模型的這一個環節。<br>所謂的模型指的其實就是彼此之間具有<strong>關聯</strong>的物件(<code>Object</code>)的群集。<br>一個使用Canvas 畫一個藍色方塊，和一個使用<code>div</code>搭配<code>css</code>樣式做出的紅色方塊，本質上最大的區別除了顏色之外，就是這個方塊背後物件的內容差。  </p>
<p>舉個簡單的例子，我們在做網頁動畫的時候，常常會需要用到<code>getBoundingClientRect</code> 這個<code>api</code> 來獲取一個區塊的大小、座標等。<br>而我們在使用這個api的時候，一般就是先去抓取(<code>query</code>)這個元素，然後就可以用這個元素實例底下的<code>api</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// ele 本身是透過selector 字串所抓到的元素實例(instance), 這個實例其實是在瀏覽器創建Dom模型的時候new出來的</span></span><br><span class="line"><span class="keyword">let</span> ele = <span class="built_in">document</span>.querySelecor(<span class="string">&#x27;div&#x27;</span>); </span><br><span class="line"><span class="comment">// getBoundingClientRect 則是ele 這個實例物件的一個方法</span></span><br><span class="line"><span class="keyword">let</span> divWidth = ele.getBoundingClientRect().width; </span><br></pre></td></tr></table></figure>
<p>上述對大部分人來說應該都是一個稀鬆平常的操作。<br>但是當我們用Canvas 繪製一個方塊時，我們所創建的實例並不是透過去<code>new</code> 瀏覽器內建的<code>Element</code> 類(<code>class</code>)所建立出來的，而是透過我們自己定義的一個具有客製化方法的類，例如:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">block</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">ctx</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.ctx = ctx;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">draw</span>(<span class="params">x, y, width, height</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.ctx.fillRect(x, y, width, height);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>當我們用這樣的一個客製類<code>Block</code>去產生一個方塊的實例時，這個實例底下所有的方法，都是來自於這個客製類<code>Block</code>的定義（所以當然也就沒有<code>getBoundingClientRect</code>這麼方便的api可以用）。<br>但是相對的，因為產生實例的類可以自己定義，自由度也當然就跟著大幅提高，平常一些不能用基礎Dom元素做到的操作，甚至都變得有可能了（ex：繪製不規則圖形、創作複雜動畫）</p>
<h2 id="Canvas-與-一般-Dom元素的差異二：使用情境"><a href="#Canvas-與-一般-Dom元素的差異二：使用情境" class="headerlink" title="Canvas 與 一般 Dom元素的差異二：使用情境"></a>Canvas 與 一般 Dom元素的差異二：使用情境</h2><p>前面我們有提到, Canvas 相較於 基礎Dom元素而言，具有相對高（不只高! 而是非常高！）的自由度。<br>用一個簡單的例子來描述，就好比<strong>訂製手工賽車</strong>和<strong>國產普通轎車</strong> 的區別，這邊絕對不是要說國產貨不好，畢竟我也沒有說訂製的手工賽車的來源是哪一家廠商XD  </p>
<p>講到這邊應該就可以理解到兩種繪圖方式的使用情境其分野：</p>
<h4 id="1-Dom元素適合的情境"><a href="#1-Dom元素適合的情境" class="headerlink" title="1. Dom元素適合的情境"></a>1. Dom元素適合的情境</h4><ul>
<li>快速/大量生產的需求</li>
<li>不想花費過多時間處理效能問題</li>
<li>有大量的互動操作行為, 例如UI/UX</li>
</ul>
<h4 id="2-Canvas渲染適合的情境"><a href="#2-Canvas渲染適合的情境" class="headerlink" title="2. Canvas渲染適合的情境"></a>2. Canvas渲染適合的情境</h4><ul>
<li>當有天馬行空的創意</li>
<li>較少的時間壓力，且能夠自行處理圖形重繪/ 效能問題</li>
<li>像素操作（這個後面的章節會提到）</li>
</ul>
<p>就像我們前面提到的，以現階段來講，前端工程師80%的職業生涯中面對到的多半是第一種情境(當然也有少數人不是)，<br>而我們需要為了這20%的狀況去學習的原因，除了要應對未來的不時之需以外，當然就是有挑戰自我創作的意義存在。</p>
<p>那麼話就說到這邊。<br>在接下來的章節，我們將會進入下一階段基礎的講解，然後再逐漸的解釋Canvas繪圖的實作，還請各位拭目以待～。</p>
]]></content>
      <categories>
        <category>前端技術學習心得</category>
      </categories>
      <tags>
        <tag>2021鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>ES5/ES6學習筆記-ep1</title>
    <url>/WFX-Maniac/2020/11/26/ES5_ES6%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-ep1/</url>
    <content><![CDATA[<h2 id="搞清楚並且用最簡單的方法解釋js的apply-call-bind"><a href="#搞清楚並且用最簡單的方法解釋js的apply-call-bind" class="headerlink" title="搞清楚並且用最簡單的方法解釋js的apply/call/bind"></a>搞清楚並且用最簡單的方法解釋js的apply/call/bind</h2><ul>
<li>先解釋apply/call<blockquote>
<p>apply/call 最簡單的解釋其實就是“把一個參數丟進去指定的函數裡面當this”</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//假設有一個變數叫做qq, 初始值為&#x27;wow&#x27;</span></span><br><span class="line"><span class="keyword">var</span> qq = <span class="string">&#x27;wow&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">poop</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>,a,b);</span><br><span class="line">&#125;</span><br><span class="line">poop.apply(qq);<span class="comment">//wow undefine undefine</span></span><br><span class="line"><span class="comment">// 這邊其實就是把qq丟進去poop()裡面當作this, 用call 的話亦然</span></span><br></pre></td></tr></table></figure></li>
<li>apply和call的差別<blockquote>
<p>雖然差別都是丟變數進去函數當this用，但是這兩個的差異在於支援參數不同</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//apply的第一個參數傳入之後會變成函數中的this，但是第二個參數（必須要是array）傳入之後會變成函數原始支援的參數群</span></span><br><span class="line">theFunction.apply(valueForThis, arrayOfArgs)</span><br><span class="line"><span class="comment">//apply的第一個參數傳入之後會變成函數中的this，但是第二個以後的參數就是函數原始的所有參數群</span></span><br><span class="line">theFunction.call(valueForThis, arg1, arg2, ...)</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以上面的poop()來看</span></span><br><span class="line">poop().apply(qq,[<span class="number">1</span>,<span class="number">2</span>])<span class="comment">//&#x27;wow&#x27; 1 2</span></span><br><span class="line">poop().call(qq,<span class="number">1</span>,<span class="number">2</span>)<span class="comment">//&#x27;wow&#x27; 1 2</span></span><br></pre></td></tr></table></figure></li>
<li>解釋bind</li>
</ul>
<blockquote>
<p>bind的用途跟apply/call 有點不同，他是會return 一個把指定變數綁進去當this的函數</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aa</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>,a,b)</span><br><span class="line">&#125;</span><br><span class="line">aa(<span class="number">11</span>,<span class="number">22</span>);<span class="comment">//window 11 22 aa函數在沒被綁之前的this 都是window</span></span><br><span class="line"><span class="keyword">var</span> ccc=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> gg = aa.bind(ccc);<span class="comment">// 把ccc綁給aa之後重新包裝成一個gg, aa其實沒有被變動</span></span><br><span class="line">gg(<span class="number">44</span>,<span class="number">44</span>)<span class="comment">//[1,2,3] 44 44 從這邊開始this被綁死了</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>bind 的進階用法<blockquote>
<p>固定上層scope 的this，這個其實就是ES6 arrow function內部的做法</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">    gg:<span class="string">&#x27;wow&#x27;</span>,</span><br><span class="line">    ff:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.gg)</span><br><span class="line">        &#125;.bind(<span class="built_in">this</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a.ff(); <span class="comment">//wow</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<h2 id="變數提升與let"><a href="#變數提升與let" class="headerlink" title="變數提升與let:"></a>變數提升與let:</h2><ul>
<li><p>變數提升最基本的案例:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a)</span><br><span class="line"><span class="comment">//在&quot;var a = 10&quot; 之前去呼叫a, 其實會輸出undefine 而不是 ReferenceError: a is not defined.</span></span><br><span class="line"><span class="comment">//那是因為var 其實是先把a 在最開頭做一個宣告a為變數，然後最後才賦予值。</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>函數中變數提升的狀況:</p>
<ul>
<li>這個狀況:<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(v)</span><br><span class="line">   <span class="keyword">var</span> v = <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line">test(<span class="number">10</span>)</span><br></pre></td></tr></table></figure></li>
<li>其實等於這個狀況<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">v=<span class="number">10</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> v;<span class="comment">// 引入的參數其實也會在開頭被先宣告，而且宣告的優先權會比函數內部的變數宣告來得高</span></span><br><span class="line">  <span class="keyword">var</span> v;</span><br><span class="line">  v = <span class="number">10</span></span><br><span class="line">  <span class="built_in">console</span>.log(v)</span><br><span class="line">  v = <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line">test(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>let/const 與暫時性死區（Temporal Dead Zone）</p>
<ul>
<li>雖然let 可以用來避免用var產生的hoisting狀況，但是這並不代表let沒有hoisting行為</li>
<li>在「提升之後」以及「賦值之前」這段「期間」，如果你存取它就會拋出ReferenceError錯誤，而這段期間就稱做是 TDZ，它是一個為了解釋 let 與 const 的 hoisting 行為所提出的一個名詞。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="string">&#x27;outer value&#x27;</span>;</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 在函數的起始處會產生x的 TDZ起始點 x</span></span><br><span class="line">  <span class="built_in">console</span>.log(x) <span class="comment">// TDZ期間存取，產生ReferenceError錯誤</span></span><br><span class="line">  <span class="keyword">let</span> x = <span class="string">&#x27;inner value&#x27;</span> <span class="comment">// 對x的宣告語句，這裡結束 TDZ for x</span></span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h2 id="let與if的搭配"><a href="#let與if的搭配" class="headerlink" title="let與if的搭配"></a>let與if的搭配</h2><ul>
<li>單行的if宣告不能在判斷boolean 之後let宣告</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一种写法，报错</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) <span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种写法，不报错</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>應該避免在塊級作用域內聲明函數。如果確實需要，也應該寫成函數表達式，而不是函數聲明語句。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 塊級作用域內部的函數聲明語句，建議不要使用</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="string">&#x27;secret&#x27;</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 塊級作用域內部，優先使用函數表達式</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="string">&#x27;secret&#x27;</span>;</span><br><span class="line">  <span class="keyword">let</span> f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="const的重要意義-–-固定傳址"><a href="#const的重要意義-–-固定傳址" class="headerlink" title="const的重要意義 – 固定傳址"></a>const的重要意義 – 固定傳址</h2><blockquote>
<p>大家都知道const 宣告的值就是不變的常數，但是實際上const最重要的應用點其實是在於固定變數儲存位置的地址</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [];</span><br><span class="line">a.push(<span class="string">&#x27;Hello&#x27;</span>); <span class="comment">// 可執行</span></span><br><span class="line">a.length = <span class="number">0</span>;    <span class="comment">// 可執行</span></span><br><span class="line">a = [<span class="string">&#x27;Dave&#x27;</span>];    <span class="comment">// 錯誤，可以藉由這樣的方式避免a被換址</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果真的想將對象凍結，應該使用Object.freeze方法。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="built_in">Object</span>.freeze(&#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 常規模式時，下面一行不起作用；</span></span><br><span class="line"><span class="comment">// 嚴格模式時，該行會報錯</span></span><br><span class="line">foo.prop = <span class="number">123</span>;</span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>前端技術學習心得</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>ES5/ES6學習筆記-ep2</title>
    <url>/WFX-Maniac/2020/11/26/ES5_ES6%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-ep2/</url>
    <content><![CDATA[<h2 id="ES6解構賦值重點整理"><a href="#ES6解構賦值重點整理" class="headerlink" title="ES6解構賦值重點整理"></a>ES6解構賦值重點整理</h2><ol>
<li>模式匹配：<blockquote>
<p>只要等号两边的模式相同，左边的变量就会被赋予对应的值。</p>
</blockquote>
</li>
</ol>
<blockquote>
<ul>
<li>這個<br>  let [a, b, c] = [1, 2, 3];</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>等同於這個<br>  let a = 1;<br>  let b = 2;<br>  let c = 3;</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>這個<br>  let [foo, [[bar], baz]] = [1, [[2], 3]];</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>等同於這個<br>  let foo = 1;<br>  let bar = 2;<br>  let baz = 3;</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>如果解構不成功，變量的值就等於undefined。<br>  let [foo] = [];<br>  let [bar，foo] = [1];<br>  以上兩種情況都屬於解構失敗，foo的值都會等於undefined。</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>解構賦值的等號右邊必須要是一個可以迭代的東西，如果不是的話會報錯<br>  let [qoo]=null //報錯</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>支援預設值，但也只有遇上對應的子項為 undefined才會採用預設值<br>  let [foo = true] = [];<br>  foo // true<br>  let [x, y = ‘b’] = [‘a’]; // x=’a’, y=’b’<br>  let [x, y = ‘b’] = [‘a’, undefined]; // x=’a’, y=’b’<br>  let [x = 1] = [null];x // null 因為子項不等於undefined</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>字串也可以做模式匹配<br>  const [a, b, c, d, e] = ‘hello’;<br>  會變成<br>  const a= ‘h’,<br>  const b= ‘e’<br>  …</li>
</ul>
</blockquote>
<ol start="2">
<li><p>對象匹配</p>
<ul>
<li><p>Basic</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; bar, foo &#125; = &#123; <span class="attr">foo</span>: <span class="string">&#x27;aaa&#x27;</span>, <span class="attr">bar</span>: <span class="string">&#x27;bbb&#x27;</span> &#125;;</span><br><span class="line">foo <span class="comment">// &quot;aaa&quot;</span></span><br><span class="line">bar <span class="comment">// &quot;bbb&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; baz &#125; = &#123; <span class="attr">foo</span>: <span class="string">&#x27;aaa&#x27;</span>, <span class="attr">bar</span>: <span class="string">&#x27;bbb&#x27;</span> &#125;;</span><br><span class="line">baz <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></li>
<li><p>如果變數的名稱與複製目標的屬性名稱不一樣的話可以這樣做</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; <span class="attr">foo</span>: baz &#125; = &#123; <span class="attr">foo</span>: <span class="string">&#x27;aaa&#x27;</span>, <span class="attr">bar</span>: <span class="string">&#x27;bbb&#x27;</span> &#125;;</span><br><span class="line">baz <span class="comment">// &quot;aaa&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">first</span>: <span class="string">&#x27;hello&#x27;</span>, <span class="attr">last</span>: <span class="string">&#x27;world&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">first</span>: f, <span class="attr">last</span>: l &#125; = obj;</span><br><span class="line">f <span class="comment">// &#x27;hello&#x27;</span></span><br><span class="line">l <span class="comment">// &#x27;world&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li><p>對象匹配也可以有預設值，而採用預設值的標準跟模式匹配一樣:undefined</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> &#123;x = <span class="number">3</span>&#125; = &#123;&#125;;</span><br><span class="line">x <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> &#123;x, y = <span class="number">5</span>&#125; = &#123;<span class="attr">x</span>: <span class="number">1</span>&#125;;</span><br><span class="line">x <span class="comment">// 1</span></span><br><span class="line">y <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//這個比較需要記憶</span></span><br><span class="line"><span class="keyword">var</span> &#123;<span class="attr">x</span>: y = <span class="number">3</span>&#125; = &#123;&#125;;</span><br><span class="line">y <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//這個比較需要記憶</span></span><br><span class="line"><span class="keyword">var</span> &#123;<span class="attr">x</span>: y = <span class="number">3</span>&#125; = &#123;<span class="attr">x</span>: <span class="number">5</span>&#125;;</span><br><span class="line">y <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> &#123; <span class="attr">message</span>: msg = <span class="string">&#x27;Something went wrong&#x27;</span> &#125; = &#123;&#125;;</span><br><span class="line">msg <span class="comment">// &quot;Something went wrong&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p>注意不要把大括號寫在行首</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;x&#125; = &#123;<span class="attr">x</span>: <span class="number">1</span>&#125;;<span class="comment">//報錯</span></span><br><span class="line"><span class="comment">//應該改寫成</span></span><br><span class="line"><span class="keyword">let</span> &#123;x&#125; = &#123;<span class="attr">x</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">//或</span></span><br><span class="line"><span class="keyword">let</span> x;<span class="comment">//這行不寫的話x 會變全域</span></span><br><span class="line">(&#123;x&#125; = &#123;<span class="attr">x</span>: <span class="number">1</span>&#125;;)<span class="comment">//這種方式盡量不要用</span></span><br></pre></td></tr></table></figure></li>
<li><p>函數參數的解構</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">[x, y]</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add([<span class="number">1</span>, <span class="number">2</span>]); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>函数参数的解构也可以使用默认值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">&#123;x = <span class="number">0</span>, y = <span class="number">0</span>&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [x, y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">move(&#123;<span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">8</span>&#125;); <span class="comment">// [3, 8]</span></span><br><span class="line">move(&#123;<span class="attr">x</span>: <span class="number">3</span>&#125;); <span class="comment">// [3, 0]</span></span><br><span class="line">move(&#123;&#125;); <span class="comment">// [0, 0]</span></span><br><span class="line">move(); <span class="comment">// [0, 0]</span></span><br></pre></td></tr></table></figure></li>
<li><p>注意下列兩者的不同</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函數參數本身附帶預設值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">&#123;x = <span class="number">0</span>, y = <span class="number">0</span>&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [x, y];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 傳進來的物件會取代掉&#123;&#125;</span></span><br><span class="line">move(&#123;<span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">8</span>&#125;); <span class="comment">// [3, 8]</span></span><br><span class="line">move(&#123;<span class="attr">x</span>: <span class="number">3</span>&#125;); <span class="comment">// [3, 0]</span></span><br><span class="line">move(&#123;&#125;); <span class="comment">// [0, 0]</span></span><br><span class="line">move(); <span class="comment">// [0, 0]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">&#123;x, y&#125; = &#123; x: <span class="number">0</span>, y: <span class="number">0</span> &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [x, y];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 傳進來的物件會取代掉&#123; x: 0, y: 0 &#125;</span></span><br><span class="line">move(&#123;<span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">8</span>&#125;); <span class="comment">// [3, 8]</span></span><br><span class="line">move(&#123;<span class="attr">x</span>: <span class="number">3</span>&#125;); <span class="comment">// [3, undefined]</span></span><br><span class="line">move(&#123;&#125;); <span class="comment">// [undefined, undefined]</span></span><br><span class="line">move(); <span class="comment">// [0, 0]</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>解構賦值的用途</p>
<ul>
<li><p>交換變數值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> y = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">[x, y] = [y, x];</span><br></pre></td></tr></table></figure></li>
<li><p>從物件/陣列 快速宣告多個值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> [a, b, c] = example();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回一个对象</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    foo: <span class="number">1</span>,</span><br><span class="line">    bar: <span class="number">2</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123; foo, bar &#125; = example();</span><br></pre></td></tr></table></figure>
</li>
<li><p>快速指定函數預設參數值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.ajax = <span class="function"><span class="keyword">function</span> (<span class="params">url, &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">async</span> = <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  beforeSend = <span class="keyword">function</span> () &#123;&#125;,</span></span></span><br><span class="line"><span class="function"><span class="params">  cache = <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  complete = <span class="keyword">function</span> () &#123;&#125;,</span></span></span><br><span class="line"><span class="function"><span class="params">  crossDomain = <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="built_in">global</span> = <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="regexp">//</span> ... more config</span></span></span><br><span class="line"><span class="function"><span class="params">&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ... do stuff</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>generator function(生成器函數)是什麼？</p>
<ul>
<li><p>在ES6中定義一個生成器函數很簡單，在函數後跟上「*」即可：</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">foo1</span>(<span class="params"></span>) </span>&#123; &#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">foo2</span>(<span class="params"></span>) </span>&#123; &#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">foo3</span>(<span class="params"></span>) </span>&#123; &#125;;</span><br><span class="line"></span><br><span class="line">foo1.toString(); <span class="comment">// &quot;function* foo1() &#123; &#125;&quot;</span></span><br><span class="line">foo2.toString(); <span class="comment">// &quot;function* foo2() &#123; &#125;&quot;</span></span><br><span class="line">foo3.toString(); <span class="comment">// &quot;function* foo3() &#123; &#125;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>调用生成器函数会产生一个生成器（generator）。生成器拥有的最重要的方法是 next()，用来迭代：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">fibs</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> b = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">yield</span> a;<span class="comment">//碰到yield就會return 一個值</span></span><br><span class="line">    [a, b] = [b, a + b];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>前端技術學習心得</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>ES5/ES6學習筆記-ep3</title>
    <url>/WFX-Maniac/2020/11/26/ES5_ES6%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-ep3/</url>
    <content><![CDATA[<h2 id="ES6-Promise-重點整理"><a href="#ES6-Promise-重點整理" class="headerlink" title="ES6 Promise 重點整理"></a>ES6 Promise 重點整理</h2><ol>
<li>Promise 是什麼</li>
</ol>
<ul>
<li>用來處理callback chain 的一種新JS語法</li>
<li>本身是一個class, 但是他也有自己的靜態方法</li>
<li>建立出來的實例物件具有三種狀態：pending/fulfilled/rejected</li>
<li>狀態只可能是從pending 變成 fulfilled/rejected</li>
</ul>
<ol start="2">
<li>promise.prototype.then()</li>
</ol>
<ul>
<li>then()可以傳入兩個函數作為參數，第一個函數會在promise物件被fulfilled之後馬上發動，第二個函數則會在promise物件被reject的時候馬上發動</li>
<li>會回傳一個新的promise物件</li>
<li><strong>重要</strong> ： 當then與then串接的時候，後面的then 的 <strong>參數function</strong> 會得到前面的then 的 <strong>參數function</strong> return出來的值作為參數</li>
</ul>
<ol start="3">
<li>promise.prototype.catch()</li>
</ol>
<ul>
<li>catch()可以傳入一個函數作為參數，並且這個函數會接收到promise throw出來的error</li>
<li>也會回傳一個新的promise物件</li>
</ul>
<ol start="4">
<li>promise.all()</li>
</ol>
<ul>
<li>也會回傳新的promise</li>
<li>必須要傳入一個陣列，這個陣列本身的內容物都是promise</li>
<li>當這些內容物promise都被fullfill之後，all()本身回傳的promise就會被fullfill</li>
<li>在all() 回傳得到的promise後面去使用then(), 該 then()的參數function會拿到all()的所有內容promise 在resolve 時使用的參數 所組成的陣列。</li>
</ul>
<ol start="5">
<li>promise.race()</li>
</ol>
<ul>
<li>也會回傳新的promise</li>
<li>必須要傳入一個陣列，這個陣列本身的內容物都是promise</li>
<li>當這些內容物promise有其中一個被fullfill之後，race()本身回傳的promise就會被fullfill</li>
<li>在race() 回傳得到的promise後面去使用then(), 該 then()的參數function會拿到race()的最快達成fullfilled 的內容promise 在resolve 時使用的參數。</li>
</ul>
]]></content>
      <categories>
        <category>前端技術學習心得</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6學習筆記-Proxy 用途/介紹/使用情境</title>
    <url>/WFX-Maniac/2020/11/26/ES6%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-Proxy%20%E7%94%A8%E9%80%94_%E4%BB%8B%E7%B4%B9_%E4%BD%BF%E7%94%A8%E6%83%85%E5%A2%83/</url>
    <content><![CDATA[<h2 id="什麼是Proxy"><a href="#什麼是Proxy" class="headerlink" title="什麼是Proxy"></a>什麼是Proxy</h2><blockquote>
<p>字面上的意思就是”代理” [color=red]</p>
</blockquote>
<ul>
<li>Q1: 所以說是要代理些什麼東西啊?</li>
<li>A1: 所謂的代理, 就是在要去代理一個物件內部 的 &lt;屬性的存取&gt;。過程中Proxy的作用方式，<br>有點像是去形成一個攔截屏障，所有要存取目標物件的程序都需要去通過這層屏障才能完成存取，所以說這層屏障的用途就在於偵測屬性的被存取</li>
</ul>
<p><strong>這邊是一個利用Proxy去為一個空物件撰寫getter/setter的範例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">  get: <span class="function"><span class="keyword">function</span> (<span class="params">target, propKey, receiver</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`getting <span class="subst">$&#123;propKey&#125;</span>!`</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(target, propKey, receiver);</span><br><span class="line">  &#125;,</span><br><span class="line">  set: <span class="function"><span class="keyword">function</span> (<span class="params">target, propKey, value, receiver</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`setting <span class="subst">$&#123;propKey&#125;</span>!`</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(target, propKey, value, receiver);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


<h2 id="Proxy-的基本語法"><a href="#Proxy-的基本語法" class="headerlink" title="Proxy 的基本語法"></a>Proxy 的基本語法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>其中 <strong>target</strong> 是一個目標的物件（雖然說是物件，但是它實際上也可以是array/function，甚至是另外一個proxy）</p>
</li>
<li><p><strong>handler</strong> 也是一個物件，但是他裡面的屬性  是proxy攔截(trap)到屬性存取行為時可以使用的函數。</p>
</li>
<li><p>基本上，我們在定義handler的時候並不是直接給一個有很多自訂名稱的方法的物件。</p>
</li>
<li><p>handler裡面可以定義的方法有下面幾種(共13種)：</p>
<ul>
<li>**get(target, propKey, receiver)**：攔截對象屬性的讀取，比如proxy.foo和proxy[‘foo’]。</li>
<li>**set(target, propKey, value, receiver)**：攔截對象屬性的設置，比如proxy.foo = v或proxy[‘foo’] = v，返回一個Boolean。</li>
<li>**has(target, propKey)**：攔截propKey in proxy的操作，返回一個Boolean。</li>
<li>**deleteProperty(target, propKey)**：攔截delete proxy[propKey]的操作，返回一個Boolean。</li>
<li>**ownKeys(target)**：攔截Object.getOwnPropertyNames(proxy)、Object.getOwnPropertySymbols(proxy)、Object.keys(proxy)、for…in循環，返回一個數組。該方法返回目標對象所有自身的屬性的屬性名，而Object.keys()的返回結果僅包括目標對象自身的可遍歷屬性。</li>
<li>**getOwnPropertyDescriptor(target, propKey)**：攔截Object.getOwnPropertyDescriptor(proxy, propKey)，返回屬性的描述對象。</li>
<li>**defineProperty(target, propKey, propDesc)**：攔截Object.defineProperty(proxy, propKey, propDesc）、Object.defineProperties(proxy, propDescs)，返回一個Boolean。</li>
<li>**preventExtensions(target)**：攔截Object.preventExtensions(proxy)，返回一個Boolean。</li>
<li>**getPrototypeOf(target)**：攔截Object.getPrototypeOf(proxy)，返回一個對象。</li>
<li>**isExtensible(target)**：攔截Object.isExtensible(proxy)，返回一個Boolean。</li>
<li>**setPrototypeOf(target, proto)**：攔截Object.setPrototypeOf(proxy, proto)，返回一個Boolean。如果目標對像是函數，那麼還有兩種額外操作可以攔截。</li>
<li>**apply(target, object, args)**：攔截Proxy 實例作為函數調用的操作，比如proxy(…args)、proxy.call(object, …args)、proxy.apply(.. .)。</li>
<li>**construct(target, args)**：攔截 Proxy 實例作為構造函數調用的操作，比如new proxy(…args)。</li>
</ul>
</li>
</ul>
<blockquote>
<p>MDN上面有更完整的說明 [color=red]<br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy#Handler_functions">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy#Handler_functions</a></p>
</blockquote>
<h2 id="先來看個-Proxy-的基本演練"><a href="#先來看個-Proxy-的基本演練" class="headerlink" title="先來看個 Proxy 的基本演練"></a>先來看個 Proxy 的基本演練</h2><blockquote>
<p>source code from MDN [color=red]</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> handler = &#123;</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params">target, name</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name <span class="keyword">in</span> target ?</span><br><span class="line">            target[name] :</span><br><span class="line">            <span class="number">37</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    set: <span class="function"><span class="keyword">function</span>(<span class="params">target, name, value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (name === <span class="string">&#x27;age&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="built_in">Number</span>.isInteger(value)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&#x27;The age is not an integer&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (value &gt; <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">RangeError</span>(<span class="string">&#x27;The age seems invalid&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The default behavior to store the value</span></span><br><span class="line">    target[name] = value;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Indicate success</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, handler);</span><br></pre></td></tr></table></figure>

<p>這樣寫的話，當我們去執行console.log(p.abc),也就是去取用p的屬性值，就會觸發get function<br>而如果我們去執行p.abc = “123”, 就會觸發set function，這就是最基本的handler.get和handler.set的運用</p>
<h2 id="下週繼續-常用的handler方法與他們的使用範例"><a href="#下週繼續-常用的handler方法與他們的使用範例" class="headerlink" title="下週繼續: 常用的handler方法與他們的使用範例"></a>下週繼續: 常用的handler方法與他們的使用範例</h2><h3 id="1-handler-apply"><a href="#1-handler-apply" class="headerlink" title="1. handler.apply"></a>1. handler.apply</h3><p>基本上大家都知道apply就跟call 是類似的東西, 他們是被用來執行一個函數, 並且可以塞特定的變數(或array)進去函式作為 this 使用;<br>而當一個函式被帶入proxy建構式而建立起proxy物件的時候, 因為函式本身也是一種物件(<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions">見ＭＤＮ解說</a>, 所以這樣就會變成只要該函式被以任何一種形式(一般/call/apply)呼叫的時候就會觸發代理的apply</p>
<p>基本的型態是這樣(如下)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">apply: <span class="function"><span class="keyword">function</span>(<span class="params">target, thisArg, argumentsList</span>)</span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure>

<p>這邊target 是被代理的函式, thisArg 則是當這個被代理的函數是被call或者apply所呼叫時填入的this , argumentsList則是這個函數在被呼叫時的參數群</p>
<h3 id="2-handler-new"><a href="#2-handler-new" class="headerlink" title="2. handler.new"></a>2. handler.new</h3><p>這應該也是蠻好理解的, 簡單來說就是當一個能被作為建構子使用的函數, 被以proxy代理, 這樣的話, 他在被new 產生實例的時候, 就會觸發construct;</p>
<p>基本的型態是這樣(如下)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">contruct: <span class="function"><span class="keyword">function</span>(<span class="params">target, args</span>)</span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure>

<h3 id="3-handler-defineProperty"><a href="#3-handler-defineProperty" class="headerlink" title="3. handler.defineProperty"></a>3. handler.defineProperty</h3><p>這個就有點意思了,  handler.defineProperty 是proxy 用來代理 object.defineProperty的對應handler形式, 那什麼是object.defineProperty呢?<br>簡單來講, object.defineProperty就是去賦值給一個物件的prop, 或者是產生並賦值一個prop。<br>這聽起來似乎很像是set 或是 object[‘prop’]=xxx 這樣的操作, 而的確object[‘prop’]=xxx的背後就是用object.defineProperty做成的。</p>
<p>他正確的形式是像這樣寫的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(obj, prop, descriptor) </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>這邊的obj就是 想要去賦值prop的物件,prop就是想要去改變的property, 而descriptor則是一個物件, 裡面預設包含：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  enumerable: <span class="literal">false</span>,</span><br><span class="line">  configurable: <span class="literal">false</span>,</span><br><span class="line">  writable: <span class="literal">false</span>,</span><br><span class="line">  value: <span class="string">&#x27;value&#x27;</span>,</span><br><span class="line">  get:<span class="function">()=&gt;</span>&#123;&#125;</span><br><span class="line">  set:<span class="function">()=&gt;</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我們平常使用obj[‘prop’]=value, 其實等同於是：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(obj, prop, &#123;</span><br><span class="line">enumerable: <span class="literal">true</span>,</span><br><span class="line">  configurable: <span class="literal">true</span>,</span><br><span class="line">  writable: <span class="literal">true</span>,</span><br><span class="line">  value: <span class="string">&#x27;value&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>這邊enumerable的用途是決定是否放行Object.keys() 或 for…in loop 去遍歷到這個屬性<br>configurable代表的是這次操作之後能不能再重新用Object.defineProperty去改寫這個prop的descriptor<br>而writable則是決定這個prop可不可以被覆寫<br>get/set 基本上就是一般理解的get/set 函數。</p>
<p>之後有機會的話再來寫一篇心得探討Object.defineProperty的用途</p>
<p>那讓我們回歸到正題。</p>
<p>我們這邊講到的是用proxy 去代理物件時，利用handler 中的 defineProperty trap 去偵測defineProperty行為, 這應該就不難理解了<br>基本上只要是透過Object.defineProperty所做出來的操作, 全部都會觸發這個trap</p>
<p>所以,</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">obj[<span class="string">&#x27;prop&#x27;</span>]=value <span class="comment">//會觸發</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, prop, &#123;</span><br><span class="line">enumerable: <span class="literal">true</span>,</span><br><span class="line">  configurable: <span class="literal">true</span>, </span><br><span class="line">  writable: <span class="literal">true</span>,</span><br><span class="line">  value: <span class="string">&#x27;value&#x27;</span></span><br><span class="line">&#125;)  <span class="comment">//會觸發</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a  = <span class="built_in">Object</span>.prop <span class="comment">//當然也會觸發</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>handler.defineProperty 的基本形式如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">defineProperty: <span class="function"><span class="keyword">function</span>(<span class="params">target, property, descriptor</span>)</span></span><br></pre></td></tr></table></figure>

<p>唯一一個比較需要注意的點是, handler.defineProperty 必須要return 一個 boolean值（用來確定prop是否被正確define）, 不然會報錯</p>
<h3 id="4-handler-set"><a href="#4-handler-set" class="headerlink" title="4. handler.set"></a>4. handler.set</h3><p>set 基本上就跟一般認知的set 是一樣的東西, 簡單來說就是去設定物件prop的值, 和handler.defineProperty的差別在於, 用set 沒有辦法trap到利用Object.defineProperty 所做的操作</p>
<p>基本的set 形式為：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">set: <span class="function"><span class="keyword">function</span>(<span class="params">target, property, value, receiver</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>這邊的target 就是被代理的物件<br>property則是想要被set 值的prop<br>value 是想要給予prop的值<br>receiver 這個比較 特別, 這個預設都是指向proxy 實例自己, 但是在某些狀況底下也可以是別的東西（這個後面再討論）</p>
<h3 id="4-handler-get"><a href="#4-handler-get" class="headerlink" title="4. handler.get"></a>4. handler.get</h3><p>跟handler.get 同理</p>
<p>get 的形式是</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">get: <span class="function"><span class="keyword">function</span>(<span class="params">target, property, receiver</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>和.set一樣, 最後必須要return true</p>
<h2 id="什麼是Reflect-和-receiver"><a href="#什麼是Reflect-和-receiver" class="headerlink" title="什麼是Reflect 和 receiver?"></a>什麼是Reflect 和 receiver?</h2><h3 id="Reflect"><a href="#Reflect" class="headerlink" title="Reflect"></a>Reflect</h3><p>Reflect 實際上和Proxy 是互相獨立的feature，但是 Reflect 常常跟著 Proxy一起被使用<br>Reflect本身是一種 built-in Object (跟Math一樣), 裡面的method就跟proxy的預設 handler集一樣（名稱一樣, 但是各個函數內容稍微有點差異）</p>
<h4 id="什麼時候會用到Reflect"><a href="#什麼時候會用到Reflect" class="headerlink" title="什麼時候會用到Reflect"></a>什麼時候會用到Reflect</h4><blockquote>
<p>平常沒有用到proxy的時候(讓對物件的操作可以變成用refect的method來處理, 優點在於統一整體code的一致性)</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;_secretDrink&#x27;</span> <span class="keyword">in</span> FooBar;</span><br><span class="line"><span class="keyword">delete</span> FooBar._secretDrink;</span><br></pre></td></tr></table></figure>
<p>有了 Reflect 我們可以這樣做：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Reflect</span>.has(FooBar, <span class="string">&#x27;_secretDrink&#x27;</span>);</span><br><span class="line"><span class="built_in">Reflect</span>.deleteProperty(FooBar, <span class="string">&#x27;_secretDrink&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>當有用到proxy的時候</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="keyword">const</span> target = &#123;</span><br><span class="line">    <span class="keyword">get</span> <span class="title">foo</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.bar;</span><br><span class="line">    &#125;,</span><br><span class="line">    bar: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params">target, propertyKey, receiver</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (propertyKey === <span class="string">&#x27;bar&#x27;</span>) <span class="keyword">return</span> <span class="number">2</span>;<span class="comment">// 這邊透過reflect.get 將可以拿到handler.get 在特定條件下丟出來的值, 但是如果是直接透過target用特定key取值, 則會直接取用原生物件(非代理)的get func, 導致最後的到的值變成3</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Reflect.get &#x27;</span>, <span class="built_in">Reflect</span>.get(target, propertyKey, receiver)); <span class="comment">// this in foo getter references Proxy instance; logs 2</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;target[propertyKey] &#x27;</span>, target[propertyKey]); <span class="comment">// this in foo getter references &quot;target&quot; - logs 3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> obj = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler); <span class="comment">//</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.bar); <span class="comment">// 因為 obj是一個proxy實例, 所以取用.bar會觸發 handler.get</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line">obj.foo;</span><br><span class="line"><span class="comment">// Reflect.get  2</span></span><br><span class="line"><span class="comment">// target[propertyKey]  3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>從這個案例來看, 我們可以發現refect的用意就是要去取得”代理” 這一個目標, 確保可以使用到代理內部handler的get, 而不是去使用原生物件的 getter</p>
<h3 id="receiver"><a href="#receiver" class="headerlink" title="receiver"></a>receiver</h3><h4 id="什麼是receiver"><a href="#什麼是receiver" class="headerlink" title="什麼是receiver?"></a>什麼是receiver?</h4><p>一般狀況下 receiver會去指向代理本身，比方說</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">get: <span class="function"><span class="keyword">function</span>(<span class="params">target, property, receiver</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>通常來講這個receiver 就會是指向使用了這個handler的代理自己, 但是有些狀況下並不是這樣的。</p>
<p>這邊不太好懂, 可以看這篇stackoverflow</p>
<p><a href="https://stackoverflow.com/questions/37563495/what-is-a-receiver-in-javascript">https://stackoverflow.com/questions/37563495/what-is-a-receiver-in-javascript</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> handlers = &#123;</span><br><span class="line">        <span class="function"><span class="title">get</span>(<span class="params">target,key,context</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(greeter === context); <span class="comment">//true, this line added</span></span><br><span class="line">            <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                context.speak(key + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    catchall = <span class="keyword">new</span> <span class="built_in">Proxy</span>( &#123;&#125;, handlers ),</span><br><span class="line">    greeter = &#123;</span><br><span class="line">        <span class="function"><span class="title">speak</span>(<span class="params">who = <span class="string">&quot;someone&quot;</span></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log( <span class="string">&quot;hello&quot;</span>, who );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// setup `greeter` to fall back to `catchall`</span></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf( greeter, catchall );</span><br><span class="line"></span><br><span class="line">greeter.speak();                <span class="comment">// hello someone 發動greeter的speak方法, 很正常的拿到了 預設的 someone</span></span><br><span class="line">greeter.speak( <span class="string">&quot;world&quot;</span> );       <span class="comment">// hello world 給予 world 這個字串參數, 也很正常的拿到了 hello world</span></span><br><span class="line"></span><br><span class="line">greeter.everyone();             <span class="comment">// hello everyone!</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>這邊的greeter.everyone是一個根本不存在的方法, 但是這邊被call了<br>這樣最後會跑去觸發到由setPropertyOf 繼承到的catchall(是一個proxy實例)的handler.get<br>在這種狀況下 get() 的receiver 參數就不會去指向 catchall, 而是指向greeter</p>
<h3 id="Proxy-實用的地方"><a href="#Proxy-實用的地方" class="headerlink" title="Proxy 實用的地方"></a>Proxy 實用的地方</h3><h4 id="1-實作單向-prop-trap綁定"><a href="#1-實作單向-prop-trap綁定" class="headerlink" title="1. 實作單向 prop trap綁定"></a>1. 實作單向 prop trap綁定</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> inputState = &#123;</span><br><span class="line">    id: <span class="string">&#x27;username&#x27;</span>,</span><br><span class="line">    value: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> input = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#username&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">    set: <span class="function"><span class="keyword">function</span>(<span class="params">target, key, value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (target.id &amp;&amp; key === <span class="string">&#x27;username&#x27;</span>) &#123;</span><br><span class="line">            target[key] = value;</span><br><span class="line">            <span class="built_in">document</span>.querySelector(<span class="string">`#<span class="subst">$&#123;target.id&#125;</span>`</span>)</span><br><span class="line">            .value = value;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(inputState, handler)</span><br><span class="line">proxy.value = <span class="string">&#x27;John Doe&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 因為真的很基本, 就不特別解釋了</span></span><br></pre></td></tr></table></figure>

<h4 id="2-trap呼叫無效-不存在方法的行為並throw-error"><a href="#2-trap呼叫無效-不存在方法的行為並throw-error" class="headerlink" title="2. trap呼叫無效/ 不存在方法的行為並throw error"></a>2. trap呼叫無效/ 不存在方法的行為並throw error</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(<span class="built_in">this</span>, &#123;</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span> (<span class="params">object, property</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 用reflect.has 去判斷 object 是不是有那個key 值</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">Reflect</span>.has(object, property)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(object, property);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//如果方法不存在, 那就return 一個攔截用的function</span></span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">methodMissing</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;you called &#x27;</span> + property + <span class="string">&#x27; but it doesn\&#x27;t exist!&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Foo.prototype.bar = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;you called bar. Good job!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo = <span class="keyword">new</span> Foo();</span><br><span class="line">foo.bar();</span><br><span class="line"><span class="comment">//=&gt; you called bar. Good job!</span></span><br><span class="line">foo.this_method_does_not_exist()</span><br><span class="line"><span class="comment">// error 被攔截</span></span><br><span class="line"><span class="comment">//=&gt; you called this_method_does_not_exist but it doesn&#x27;t exist</span></span><br></pre></td></tr></table></figure>

<h4 id="實作-interpolation"><a href="#實作-interpolation" class="headerlink" title="實作 interpolation"></a>實作 interpolation</h4><p>這個比較複雜，預計下週在補完</p>
]]></content>
      <categories>
        <category>前端技術學習心得</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>Proxy 的功用/實用的點</title>
    <url>/WFX-Maniac/2020/11/26/Proxy%20%E7%9A%84%E5%8A%9F%E7%94%A8_%E5%AF%A6%E7%94%A8%E7%9A%84%E9%BB%9E/</url>
    <content><![CDATA[<h2 id="1-實作雙-單向-prop-trap綁定"><a href="#1-實作雙-單向-prop-trap綁定" class="headerlink" title="1. 實作雙/單向 prop trap綁定"></a>1. 實作雙/單向 prop trap綁定</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> input = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#username&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">    set: <span class="function"><span class="keyword">function</span>(<span class="params">target, key, value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (target.id &amp;&amp; key === <span class="string">&#x27;username&#x27;</span>) &#123;</span><br><span class="line">            target[key] = value;</span><br><span class="line">            <span class="built_in">document</span>.querySelector(<span class="string">`#<span class="subst">$&#123;target.id&#125;</span>`</span>)</span><br><span class="line">            .value = value;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(inputState, handler)</span><br><span class="line">proxy.value = <span class="string">&#x27;John Doe&#x27;</span></span><br></pre></td></tr></table></figure>



<h2 id="2-trap呼叫無效-不存在方法的行為並throw-error"><a href="#2-trap呼叫無效-不存在方法的行為並throw-error" class="headerlink" title="2. trap呼叫無效/ 不存在方法的行為並throw error"></a>2. trap呼叫無效/ 不存在方法的行為並throw error</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(<span class="built_in">this</span>, &#123;</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span> (<span class="params">object, property</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">Reflect</span>.has(object, property)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(object, property);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">methodMissing</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;you called &#x27;</span> + property + <span class="string">&#x27; but it doesn\&#x27;t exist!&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Foo.prototype.bar = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;you called bar. Good job!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo = <span class="keyword">new</span> Foo();</span><br><span class="line">foo.bar();</span><br><span class="line"><span class="comment">//=&gt; you called bar. Good job!</span></span><br><span class="line">foo.this_method_does_not_exist()</span><br><span class="line"><span class="comment">//=&gt; you called this_method_does_not_exist but it doesn&#x27;t exist</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端技術學習心得</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>TYPESCRIPT學習筆記-ep1</title>
    <url>/WFX-Maniac/2020/11/26/TYPESCRIPT%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-ep1/</url>
    <content><![CDATA[<h1 id="TYPESCRIPT的基礎常識"><a href="#TYPESCRIPT的基礎常識" class="headerlink" title="TYPESCRIPT的基礎常識"></a>TYPESCRIPT的基礎常識</h1><h2 id="基礎型別上與es5-es6-較有差異的部分"><a href="#基礎型別上與es5-es6-較有差異的部分" class="headerlink" title="基礎型別上與es5/es6 較有差異的部分"></a>基礎型別上與es5/es6 較有差異的部分</h2><ol>
<li><p>數字<br>ts的數字另外有支援兩種格式：2進位＆8進位;除此之外,ts 的number同樣都是浮點數</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> decLiteral: <span class="built_in">number</span> = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">let</span> hexLiteral: <span class="built_in">number</span> = <span class="number">0xf00d</span>;</span><br><span class="line"><span class="keyword">let</span> binaryLiteral: <span class="built_in">number</span> = <span class="number">0b1010</span>;</span><br><span class="line"><span class="keyword">let</span> octalLiteral: <span class="built_in">number</span> = <span class="number">0o744</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>陣列</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//原則上ts的變數都要寫型別，而如果一個變數的型別是array</span></span><br><span class="line"><span class="comment">//且這個array的子項型別都是number，則可寫成如下</span></span><br><span class="line"><span class="keyword">let</span> list: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure>

</li>
</ol>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//承上，或如下利用泛型</span></span><br><span class="line"><span class="keyword">let</span> list: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>元組(陣列型別專用)</li>
</ol>
<ul>
<li><p>最基本的範例：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Declare a tuple type</span></span><br><span class="line"><span class="keyword">let</span> x: [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line"><span class="comment">// Initialize it</span></span><br><span class="line">x = [<span class="string">&#x27;hello&#x27;</span>, <span class="number">10</span>]; <span class="comment">// OK</span></span><br><span class="line"><span class="comment">// Initialize it incorrectly</span></span><br><span class="line">x = [<span class="number">10</span>, <span class="string">&#x27;hello&#x27;</span>]; <span class="comment">// Error</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>為陣列編寫型別的好處</p>
</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x: [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line">x = [<span class="string">&#x27;hello&#x27;</span>, <span class="number">10</span>]; <span class="comment">// OK</span></span><br><span class="line"><span class="built_in">console</span>.log(x[<span class="number">0</span>].substr(<span class="number">1</span>)); <span class="comment">// OK 因為x[0]在元組中定義為字串，可以使用substr方法</span></span><br><span class="line"><span class="built_in">console</span>.log(x[<span class="number">1</span>].substr(<span class="number">1</span>)); <span class="comment">// Error, 因為10屬於在元組中定義為數字，不能使用substr方法，所以會報錯</span></span><br></pre></td></tr></table></figure>

<ul>
<li>當偵測到陣列子項位置在元組定義範圍外的子項時，會用元組定義的型別的聯集來定義之</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">x[<span class="number">3</span>] = <span class="string">&#x27;world&#x27;</span>; <span class="comment">// OK, 字符串可以赋值给(string | number)类型</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(x[<span class="number">5</span>].toString()); <span class="comment">// OK, &#x27;string&#x27; 和 &#x27;number&#x27; 都有 toString</span></span><br><span class="line"></span><br><span class="line">x[<span class="number">6</span>] = <span class="literal">true</span>; <span class="comment">// Error, 布尔不是(string | number)类型</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>列舉（Enumerate）</li>
</ol>
<ul>
<li><p>能夠把變數的範圍限制在某些限制下進行存取並賦予其定義</p>
</li>
<li><p>舉個實用的例子，團隊裡的後端在 Server 處理資料發生錯誤時，定義了一些代碼，來告訴前端說，這個代碼代表什麼錯誤，那個又是什麼：</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> handleWrongStatus = (status: string): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (status) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">      <span class="comment">// Do something...</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span>:</span><br><span class="line">      <span class="comment">// Do something...</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>:</span><br><span class="line">      <span class="comment">// Do something...</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> (<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;No have wrong code!&#x27;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>然而像上面這樣寫的話，缺點會在於各個case之間沒有語意化，你很難去釐清Case A 實際上是什麼, Case B又是什麼，在這種狀況下就可以去使用enumerate</p>
<p>enumerate的寫法跟js的物件接近，如下</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enum</span> requestStatusCodes &#123;</span><br><span class="line">  error,</span><br><span class="line">  success,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>正常來講，如果不幫上述這個requestStatusCodes 的裡面每一個子項去做定義，TS的編譯器會直接把error的編號定為0, success的編號定為1（流水號）</p>
<p>這樣我們就可以透過requestStatusCodes.error拿到0這個列舉值, requestStatusCodes.success拿到1這個列舉值;或者透過requestStatusCodes[0]拿到error 這個列舉子項</p>
<p>這樣的話。上述的case switch就可以這樣改良</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enum</span> requestWrongCodes &#123;</span><br><span class="line">  missingParameter = <span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">  wrongParameterType = <span class="string">&#x27;B&#x27;</span>,</span><br><span class="line">  invalidToken = <span class="string">&#x27;C&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handleWrongStatus = (status: <span class="built_in">string</span>): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//es6解構賦值的寫法</span></span><br><span class="line">  <span class="keyword">const</span> &#123; missingParameter, wrongParameterType, invalidToken, &#125; = requestWrongCodes;</span><br><span class="line">  <span class="keyword">switch</span> (status) &#123;</span><br><span class="line">    <span class="keyword">case</span> missingParameter:</span><br><span class="line">      <span class="comment">// Do something...</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> wrongParameterType:</span><br><span class="line">      <span class="comment">// Do something...</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> invalidToken:</span><br><span class="line">      <span class="comment">// Do something...</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> (<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;No have wrong code!&#x27;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>5.any/void 任意值與虛空值</p>
<p>變數的型別如果不確定的話可以直接帶any，而函數的return type如果為空的話則可以直接帶:void</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> notSure: <span class="built_in">any</span> = <span class="number">4</span>;</span><br><span class="line">notSure = <span class="string">&quot;maybe a string instead&quot;</span>; <span class="comment">//這樣不會報錯</span></span><br><span class="line">notSure = <span class="literal">false</span>; <span class="comment">//這樣也不會報錯</span></span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">warnUser</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;This is my warning message&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>6.undefined/null 未定義與空值</p>
<blockquote>
<p>TypeScript里，undefined和null两者各自有自己的类型分别叫做undefined和null。 和void相似，它们的本身的类型用处不是很大</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Not much else we can assign to these variables!</span><br><span class="line">let u: undefined &#x3D; undefined; </span><br><span class="line">let n: null &#x3D; null;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在默認狀況下 undefined和null 這兩種value也可以被賦予給任何型別作為其值</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> u: <span class="built_in">number</span> = <span class="literal">undefined</span>; </span><br><span class="line"><span class="keyword">let</span> n: syting = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>–strictNullChecks是什麼？<blockquote>
<p>簡單來說就是typescript 的tsconfig.json裡面的一個設定，只要做了這個設定以後，undefined和null 這兩種value就再也不會被默認為任何型別的一種預設值。也許在某處你想嘗試一個字串或空或未定義，可以使用聯合類型 <code>ex: string|number|null</code></p>
</blockquote>
</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;compileOnSave&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">        ...</span><br><span class="line">        &quot;strictNullChecks&quot;: true,</span><br><span class="line">        &quot;skipLibCheck&quot;: true,</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>Never 這個型別是用來幹嘛用的?</li>
</ol>
<p>never類型表示的是那些根本就不會有值的類型，例如一個只會return new Error(‘string’) 的function；<br>要注意值為never型別不接受null作為其值。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> something: <span class="built_in">void</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> nothing: <span class="built_in">never</span> = <span class="literal">null</span>; <span class="comment">// Error: Type &#x27;null&#x27; is not assignable to type &#x27;never&#x27;</span></span><br></pre></td></tr></table></figure>

<ol start="8">
<li>類型斷言</li>
</ol>
<p>類型斷言好比其它語言裡的類型轉換，但是不進行特殊的數據檢查和解構。<br>.jsx檔案裡面只能用as的方式做類型斷言</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> someValue: <span class="built_in">any</span> = <span class="string">&quot;this is a string&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> strLength: <span class="built_in">number</span> = (&lt;<span class="built_in">string</span>&gt;someValue).length;</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> someValue: <span class="built_in">any</span> = <span class="string">&quot;this is a string&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> strLength: <span class="built_in">number</span> = (someValue <span class="keyword">as</span> <span class="built_in">string</span>).length;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端技術學習心得</category>
      </categories>
      <tags>
        <tag>ts</tag>
      </tags>
  </entry>
  <entry>
    <title>TYPESCRIPT學習筆記-ep2.5</title>
    <url>/WFX-Maniac/2020/11/26/TYPESCRIPT%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-ep2.5/</url>
    <content><![CDATA[<h4 id="如何使用interface-為函數定義參數型別與回傳值型別"><a href="#如何使用interface-為函數定義參數型別與回傳值型別" class="headerlink" title="如何使用interface 為函數定義參數型別與回傳值型別"></a>如何使用interface 為函數定義參數型別與回傳值型別</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> SearchFunc &#123;</span><br><span class="line">  (source: <span class="built_in">string</span>, <span class="attr">subString</span>: <span class="built_in">string</span>): <span class="built_in">boolean</span>;</span><br><span class="line">&#125; <span class="comment">// 定義函數參數/return 的方式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> customVariables &#123;</span><br><span class="line">  variableA: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="如何使用interface-定義”可索引類型”"><a href="#如何使用interface-定義”可索引類型”" class="headerlink" title="如何使用interface 定義”可索引類型”"></a>如何使用interface 定義”可索引類型”</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> arrayType &#123;</span><br><span class="line">  [index: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125; <span class="comment">// 意思指的是[]內只能輸入數字, 並且return 值為字串</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> readonlyArrayType &#123;</span><br><span class="line">  <span class="keyword">readonly</span> [index: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125; <span class="comment">// 與readonly屬性的搭配應用方式, 這樣就可以把陣列轉為唯讀陣列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 問題狀況</span></span><br><span class="line"><span class="keyword">interface</span> arrayType &#123;</span><br><span class="line">   [index: <span class="built_in">string</span>]: <span class="built_in">number</span>; <span class="comment">//當索引值的型別是字串時會有一種特殊的問題, 會強制要求內部的變數型別跟這邊定義的一樣</span></span><br><span class="line">  value:<span class="built_in">string</span> <span class="comment">// 所以這樣會報錯 (必須是number)</span></span><br><span class="line">&#125; <span class="comment">// 當已經使用了strinf索引類型的定義時, 會強制要求回傳值是索引類型定義中的那個回傳值型別</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="使用implement-將class與-interface-對接"><a href="#使用implement-將class與-interface-對接" class="headerlink" title="使用implement 將class與 interface 對接"></a>使用implement 將class與 interface 對接</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">interface</span> ClockInterface &#123;</span><br><span class="line">    currentTime: <span class="built_in">Date</span>;</span><br><span class="line">    setTime(d: <span class="built_in">Date</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span> <span class="title">implements</span> <span class="title">ClockInterface</span> </span>&#123;</span><br><span class="line">    currentTime: <span class="built_in">Date</span> = <span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">//如果class裡面沒有寫這個變數就會報錯</span></span><br><span class="line">    <span class="function"><span class="title">setTime</span>(<span class="params">d: <span class="built_in">Date</span></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.currentTime = d;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">h: <span class="built_in">number</span>, m: <span class="built_in">number</span></span>)</span> &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h4 id="如何快速定義一個class的constructor-參數型別與其建立出來的實例型別？"><a href="#如何快速定義一個class的constructor-參數型別與其建立出來的實例型別？" class="headerlink" title="如何快速定義一個class的constructor 參數型別與其建立出來的實例型別？"></a>如何快速定義一個class的constructor 參數型別與其建立出來的實例型別？</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//建議直接使用表達式</span></span><br><span class="line"><span class="keyword">interface</span> ClockConstructor &#123;</span><br><span class="line">  <span class="keyword">new</span> (hour: <span class="built_in">number</span>, <span class="attr">minute</span>: <span class="built_in">number</span>); <span class="comment">//定義ctor 參數內容</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> ClockInterface &#123;</span><br><span class="line">  tick(); <span class="comment">// 定義實例內容</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Clock: ClockConstructor = <span class="class"><span class="keyword">class</span> <span class="title">Clock</span> <span class="title">implements</span> <span class="title">ClockInterface</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">h: <span class="built_in">number</span>, m: <span class="built_in">number</span></span>)</span> &#123;&#125;</span><br><span class="line">  <span class="function"><span class="title">tick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="interface也可以extend"><a href="#interface也可以extend" class="headerlink" title="interface也可以extend"></a>interface也可以extend</h4><blockquote>
<p>實際使用起來就跟class的extend 差不多</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Shape &#123;</span><br><span class="line">    color: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Square <span class="keyword">extends</span> Shape &#123;</span><br><span class="line">    sideLength: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> square = &lt;Square&gt;&#123;&#125;;  </span><br><span class="line"><span class="comment">// 這邊也可以寫成 let square:Square = &#123;color:&#x27;blue&#x27;,sideLength=10&#125;, 但如果不寫預設值就會報錯</span></span><br><span class="line">square.color = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">square.sideLength = <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<h4 id="interface-extend-class？-用意是什麼"><a href="#interface-extend-class？-用意是什麼" class="headerlink" title="interface extend class？ 用意是什麼?"></a>interface extend class？ 用意是什麼?</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Control</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> state: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> SelectableControl <span class="keyword">extends</span> Control &#123;</span><br><span class="line">    select(): <span class="built_in">void</span>; <span class="comment">// 這邊定義了一個extend了 control的接口, 所以意思是說，如果今天有class想要implement 這個接口，他必須要有control 的全內容, 不然就會報錯</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Button</span> <span class="keyword">extends</span> <span class="title">Control</span> <span class="title">implements</span> <span class="title">SelectableControl</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">select</span>(<span class="params"></span>)</span> &#123; &#125; <span class="comment">// 因為button 有 extend Control, 所以他本身就具有private 的state, 所以這樣給過</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TextBox</span> <span class="keyword">extends</span> <span class="title">Control</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">select</span>(<span class="params"></span>)</span> &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Error: Property &#x27;state&#x27; is missing in type &#x27;Image&#x27;.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Image</span> <span class="title">implements</span> <span class="title">SelectableControl</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">select</span>(<span class="params"></span>)</span> &#123; &#125;</span><br><span class="line">    <span class="comment">// 因為Image 本身沒有private 的state, 所以不能implement SelectableControl</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端技術學習心得</category>
      </categories>
      <tags>
        <tag>ts</tag>
      </tags>
  </entry>
  <entry>
    <title>TYPESCRIPT學習筆記-ep2</title>
    <url>/WFX-Maniac/2020/11/26/TYPESCRIPT%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-ep2/</url>
    <content><![CDATA[<h2 id="什麼是Interface-接口"><a href="#什麼是Interface-接口" class="headerlink" title="什麼是Interface(接口)?"></a>什麼是Interface(接口)?</h2><blockquote>
<p>簡單來說就是一個用來定義一個物件內部 必要變數/變數型別的寫法<br>好用的點在於可以去限制一個物件必須要具備什麼樣的property</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> LabeledValue &#123;</span><br><span class="line">  label: <span class="built_in">string</span>;</span><br><span class="line">  name?:<span class="built_in">string</span>; <span class="comment">//後面有問號的property代表是optional的項目</span></span><br><span class="line">  <span class="keyword">readonly</span> color:<span class="string">&#x27;red&#x27;</span></span><br><span class="line">  <span class="comment">//前面有寫readonly的property，</span></span><br><span class="line">  <span class="comment">//代表這個項目只要被interface初始定義之後就沒有辦法再被覆寫</span></span><br><span class="line">  <span class="comment">//注意readonly只能在interface裡面使用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printLabel</span>(<span class="params">labeledObj: LabeledValue</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="comment">//直接把labeledObj 內容的型別定義為labeledValue 接口 </span></span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(labeledObj.label);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myObj = &#123;<span class="attr">size</span>: <span class="number">10</span>, <span class="attr">label</span>: <span class="string">&quot;Size 10 Object&quot;</span>&#125;;</span><br><span class="line">printLabel(myObj);</span><br></pre></td></tr></table></figure>

<h2 id="什麼是ReadonlyArray-唯讀陣列"><a href="#什麼是ReadonlyArray-唯讀陣列" class="headerlink" title="什麼是ReadonlyArray(唯讀陣列)?"></a>什麼是ReadonlyArray(唯讀陣列)?</h2><blockquote>
<p>用途是用來確保陣列被定義為唯獨之後再也不能被修改</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> ro: ReadonlyArray&lt;<span class="built_in">number</span>&gt; = a;</span><br><span class="line">ro[<span class="number">0</span>] = <span class="number">12</span>; <span class="comment">// error!</span></span><br><span class="line">ro.push(<span class="number">5</span>); <span class="comment">// error!</span></span><br><span class="line">ro.length = <span class="number">100</span>; <span class="comment">// error!</span></span><br><span class="line">a = ro; <span class="comment">// error!</span></span><br><span class="line"><span class="comment">//但是可以用類型斷言強行複製</span></span><br><span class="line">a = ro <span class="keyword">as</span> <span class="built_in">number</span>[];</span><br></pre></td></tr></table></figure>

<h2 id="我把函數的參數物件用一個具備optional屬性的interface來定義型別，然後我傳入不存在於該interface的property卻報錯了，為什麼"><a href="#我把函數的參數物件用一個具備optional屬性的interface來定義型別，然後我傳入不存在於該interface的property卻報錯了，為什麼" class="headerlink" title="我把函數的參數物件用一個具備optional屬性的interface來定義型別，然後我傳入不存在於該interface的property卻報錯了，為什麼?"></a>我把函數的參數物件用一個具備optional屬性的interface來定義型別，然後我傳入不存在於該interface的property卻報錯了，為什麼?</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> LabeledValue &#123;</span><br><span class="line">  name?:<span class="built_in">string</span>; <span class="comment">//後面有問號的property代表是optional的項目</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//所以基本上這樣寫是合法的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> qq = <span class="function">(<span class="params">bb:LabeledValue</span>)=&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">qq(&#123;&#125;)<span class="comment">//傳入空物件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 這樣寫也是合法的</span></span><br><span class="line"><span class="keyword">let</span> apple:LabeledValue =&#123;&#125;;</span><br><span class="line">apple.name = <span class="string">&#x27;fuji&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//但是這樣寫就會fail</span></span><br><span class="line">apple.color = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>這說明了optional屬性只能接受”存在”或“不存在”這兩種值，用一個本來就不符合interface的property是不合法的</p>
]]></content>
      <categories>
        <category>前端技術學習心得</category>
      </categories>
      <tags>
        <tag>ts</tag>
      </tags>
  </entry>
  <entry>
    <title>TYPESCRIPT學習筆記-ep3</title>
    <url>/WFX-Maniac/2020/11/26/TYPESCRIPT%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-ep3/</url>
    <content><![CDATA[<h2 id="TS-的class-跟-es6-有什麼差別？"><a href="#TS-的class-跟-es6-有什麼差別？" class="headerlink" title="TS 的class 跟 es6 有什麼差別？"></a>TS 的class 跟 es6 有什麼差別？</h2><h4 id="1-private與-public-宣告的存在"><a href="#1-private與-public-宣告的存在" class="headerlink" title="1. private與 public 宣告的存在:"></a>1. private與 public 宣告的存在:</h4><p>如果一個方法/變數/constructor被宣告為public 則能在聲明它的類的外部被取用<br>反之若宣告為private， 那這個方法/變數/constructor 就只能在自己的class裡面被使用</p>
<p>所以說這樣會錯</p>
<blockquote>
<p>實際上, 當private 方法/變數/constructor 在父類別被繼承出去的時候，<br>他是會進到子類別（或子類別的實例）裡面的，但是就是無法訪問而已</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fruit</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">type</span> =<span class="string">&quot;fruit&quot;</span>;</span><br><span class="line">    <span class="function"><span class="title">method1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.type);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a  = <span class="keyword">new</span> fruit();</span><br><span class="line"><span class="built_in">console</span>.log(a.type);<span class="comment">//報錯, 因為type 只能在fruit裡面被使用，被new 出來的實例沒辦法取得他</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">apple</span> <span class="keyword">extends</span> <span class="title">fruit</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.type = <span class="string">&quot;aa&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">mm</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.type);<span class="comment">//報錯, 因為type 只能在fruit裡面被使用，就算是extend 過來也不行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="2-protect-宣告的存在"><a href="#2-protect-宣告的存在" class="headerlink" title="2. protect 宣告的存在:"></a>2. protect 宣告的存在:</h4><h5 id="如果一個class-的方法-變數-constructor被宣告為protected，-則"><a href="#如果一個class-的方法-變數-constructor被宣告為protected，-則" class="headerlink" title="如果一個class 的方法/變數/constructor被宣告為protected， 則:"></a>如果一個class 的方法/變數/constructor被宣告為protected， 則:</h5><ol>
<li>這個方法/變數/constructor能在class裡面被叫用<br>但是我們不能透過這個class的實例去拿到他被 protect 的東西</li>
<li>但若如果今天這個class被作為一個父類別被繼承下去的話，他的子類別在子類class的實例化前/後,<br>都可以去訪問這個被protected的東西</li>
</ol>
<h4 id="3-readonly-宣告的存在"><a href="#3-readonly-宣告的存在" class="headerlink" title="3. readonly 宣告的存在:"></a>3. readonly 宣告的存在:</h4><h5 id="如果一個class-的變數被宣告為readonly，-則"><a href="#如果一個class-的變數被宣告為readonly，-則" class="headerlink" title="如果一個class 的變數被宣告為readonly， 則:"></a>如果一個class 的變數被宣告為readonly， 則:</h5><ol>
<li>這個方法/變數/constructor只能在class(實例化前後)被讀取，但不能被改變</li>
<li>就算class被作為父類別繼承，他的子類別一樣不能去修改父類別繼承下來的變數</li>
<li>注意 readonly只能用來把變數標注成唯讀，方法跟constructor 是不能設定的</li>
</ol>
<h4 id="4-getter與-setter"><a href="#4-getter與-setter" class="headerlink" title="4. getter與 setter"></a>4. getter與 setter</h4><blockquote>
<p>typescript 的 class 可以把裡面的變數(屬性) 寫成 getter與setter 的形式[color=#36c169]</p>
</blockquote>
<blockquote>
<p>如果是用VSCODE作為IDE的話，可以先把變數(屬性)反白，然後右鍵點左上角的小燈泡，這樣就可以自動產出ts 的get/set snippet 語法<br><img src="https://i.imgur.com/qGgO47X.png"></p>
</blockquote>
<p>以上面圖片這個例子來講, 當這個class的a屬性被改成get/set之後，就會變成下面這樣</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">private</span> _a: <span class="built_in">string</span> = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">get</span> <span class="title">a</span>(): <span class="title">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._a;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">set</span> <span class="title">a</span>(<span class="params">value: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>._a = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然後當這個class被實例化之後就可以透過setter去賦值，也就是</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> example  = <span class="keyword">new</span> test();</span><br><span class="line">test.a = <span class="string">&quot;def&quot;</span>;</span><br><span class="line"><span class="comment">//  這邊&quot;def&quot;會自動作為value 被帶入到set a(value)裡面去</span></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>前端技術學習心得</category>
      </categories>
      <tags>
        <tag>ts</tag>
      </tags>
  </entry>
  <entry>
    <title>rxjs 學習筆記 - ep1</title>
    <url>/WFX-Maniac/2020/12/13/rxjs%20%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98%20-%20ep1/</url>
    <content><![CDATA[<h1 id="Opening"><a href="#Opening" class="headerlink" title="Opening"></a>Opening</h1><p>前陣子講了很久要來學習RxJs, 但是實際上卻是拖到了現在才要認真開始把它學好~<br>事不宜遲，我們這邊就馬上開始基礎的部分</p>
<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>首先，我們先來說說為什麼要學<code>rxjs</code>, 平常寫前端UI真的有常常需要用到這東西嗎?</p>
<p>之前偶爾有聽說<code>RxJs</code>可以用來做高頻率事件的監聽與處理(例如<code>mousemove</code>或<code>touchmove</code>), 但是這跟一般的<code>addEventListener</code> 或 <code>jquery</code> 的<code>.on</code> 方法又差在哪裡? 有必要為了一個高頻事件處理去特地學這麼一個看上去很複雜的東西嗎?</p>
<p>實際上，如果只是要處理高頻事件監聽，確實是沒有需要特地去學習<code>Rxjs</code>。<br>但是<code>Rxjs</code> 其實並不是一個只能用來做高頻事件監聽控管的library。</p>
<p>Rxjs最重要的意義之一就是<code>Reactive Programming</code>，也就是<code>當變數或資源發生變動時，由變數或資源自動告訴我發生變動了</code>。</p>
<p>Rxjs 把很多東西都當成Reactive的對象, 除了前面提到的高頻事件的event object，另外也可以把單純的變數(物件/數值等)作為reavtive對象, 而這個概念也就是所謂的 <code>Observable</code>。</p>
]]></content>
      <categories>
        <category>前端技術學習心得</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>rxjs</tag>
      </tags>
  </entry>
  <entry>
    <title>rxjs 學習筆記 - ep2</title>
    <url>/WFX-Maniac/2020/12/13/rxjs%20%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98%20-%20ep2/</url>
    <content><![CDATA[<h1 id="Observable"><a href="#Observable" class="headerlink" title="Observable"></a>Observable</h1>]]></content>
      <categories>
        <category>前端技術學習心得</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>rxjs</tag>
      </tags>
  </entry>
  <entry>
    <title>Day1 - 序言 - 我要成為Canvas Ninja!</title>
    <url>/WFX-Maniac/2021/09/02/%E5%BA%8F%E8%A8%80%20-%20%E6%88%91%E8%A6%81%E6%88%90%E7%82%BACanvas%20Ninja%EF%BC%81/</url>
    <content><![CDATA[<h2 id="SO-Just-Who-The-Hell-Am-I"><a href="#SO-Just-Who-The-Hell-Am-I" class="headerlink" title="SO Just Who The Hell Am I?"></a>SO Just Who The Hell Am I?</h2><p>大家好! 首先先介紹一下我自己, 我是<strong>Mizok</strong> :D<br>小弟目前人在金融相關產業擔任前端工程師，到今年為止大約有三年左右的資歷。<br>我在就職的這幾年一直有意識到一件事: 不知道是不是因為個人學經歷的關係(過去並不是資訊本科生畢業), 我對前端感興趣的部分也比較奇怪(?)<br>比起鑽研那些最新的前端框架功能/API，我發現我自己更喜歡研究瀏覽器渲染與視覺呈現方面的技術(例如物理模擬程序背後的數學運算)。<br>今年首次挑戰參加鐵人賽，有一部分的目標也是想把自己目前曾經研究過的東西再整理一遍，並且加以深化。<br>那麼話不多說，接下來就開始介紹我的參賽主題 :D</p>
<h2 id="What-Is-Ninja"><a href="#What-Is-Ninja" class="headerlink" title="What Is Ninja?"></a>What Is Ninja?</h2><p>首先必須老實說, 這個標題其實不是我想的ＸＤ, 而是來自於一本<a href="https://www.amazon.com/HTML5-Canvas-Ninja-Kirupa-Chinnathambi/dp/1523978090">外文書</a><br>之所以取這個名字只是因為想要看起來<strong>潮潮的</strong>～然後我在這邊為這次的參賽主題畫了一個LOGO, <strong>我覺得很酷</strong>(自己說)</p>
<p>平常在國外的前端社群中提到Ninja這個詞的時候～指的是一些習慣用很自由奔放(而且又讓人看不懂)的語法，來編寫專案源碼的工程師～<strong>是一個帶有負面意義的詞</strong>。<br>而小弟我對於自己的期許當然也不是成為那樣子的開發者ＸＤ。<br>Ninja這個詞彙對我來說，比較近似於對某種技藝有深度理解的人。<br>我期許自己不只能做到理解框架/套件怎麼使用，而且還要能深入它們背後的邏輯，並且把這部分的理解運用在自己的專案上。<br>這對我來說就是成為一個Ninja的必經過程。</p>
<h2 id="Why-Canvas"><a href="#Why-Canvas" class="headerlink" title="Why Canvas?"></a>Why Canvas?</h2><p>大家都知道，IE近年已經逐漸退出市場，而這個趨勢也漸漸的對前端圈子造成了不小的影響，除了各大前端框架相繼放棄支援IE以外，過去因為IE實作問題而被限制的技術也漸漸的開始浮出水面<br>小弟本身因為是在金融相關的專案公司就職，對於這部分真的是很有感。 </p>
<p>這三年以來，其實不難發現在台灣的業界中，<strong>前端專案視覺部分的複雜程度有一點一點的在逐漸提升</strong>，從過去那種用BS隨便套一套就可以交差的網頁， 到現在隨便一個Campaign Site可能就會要你用動畫引擎去實作一堆有的沒的特效。<br>個人覺得在未來的前端業界中，出現像遊戲公司技術美術(TA)那樣的職位，大概也是極其有可能的。  </p>
<p>前端工程師對於技術的鑽研，其實某種程度上也是對於未來的投資。而我之所以選擇Canvas這項技術，大部分的原因也就是想要探求這門技術，它在未來是否有更多的可能性。</p>
<h2 id="About-The-Road-Map"><a href="#About-The-Road-Map" class="headerlink" title="About The Road Map"></a>About The Road Map</h2><p>整體的賽程規劃是要探討canvas 的兩種環境(2d,webgl)在實務上的各種運用（webgl 的部分會base on Three.js 來作為開發基礎）<br>主題的規劃上，在賽程的前段會先從基本的理論和技術講起，<br>中期開始則是會找一些實務上常見的特效範例/套件效果來作為研究目標。<br>目前預計會提到的技術:</p>
<ol>
<li>web 端粒子系統實作</li>
<li>力學效果模擬（磁力/張力/引力）</li>
<li>布料材質模擬</li>
<li>二維以上的碰撞模擬</li>
<li>像素操作  </li>
</ol>
<h2 id="敬請期待"><a href="#敬請期待" class="headerlink" title="敬請期待!"></a>敬請期待!</h2>]]></content>
      <categories>
        <category>前端技術學習心得</category>
      </categories>
      <tags>
        <tag>2021鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>高見龍為自己學 git 學習筆記-ep1</title>
    <url>/WFX-Maniac/2020/11/26/%E9%AB%98%E8%A6%8B%E9%BE%8D%E7%82%BA%E8%87%AA%E5%B7%B1%E5%AD%B8%20git%20%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-ep1/</url>
    <content><![CDATA[<h2 id="一些簡單的基本：終端機指令"><a href="#一些簡單的基本：終端機指令" class="headerlink" title="一些簡單的基本：終端機指令"></a>一些簡單的基本：終端機指令</h2><ol>
<li>複製檔案<code>cp</code></li>
<li>重新命名檔案 <code>mv &#39;舊檔名&#39; ‘新檔名‘</code></li>
<li>列出目前位置 <code>pwd</code></li>
<li>移除檔案 <code>rm</code></li>
<li>到根資料夾<code>cd ~</code></li>
<li>顯示所有包括隱藏的檔案<code>ls -al</code></li>
</ol>
<h2 id="Vim操作"><a href="#Vim操作" class="headerlink" title="Vim操作"></a>Vim操作</h2><p><img src="https://i.imgur.com/mXktH1C.png"></p>
<h2 id="git-基本操作"><a href="#git-基本操作" class="headerlink" title="git 基本操作"></a>git 基本操作</h2><ol>
<li>使用者基本資料設定(bt device)，設定姓名/電子郵件</li>
</ol>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global user.name <span class="string">&quot;Eddie Kao&quot;</span></span><br><span class="line">git<span class="built_in"> config </span>--global user.email <span class="string">&quot;eddiexxxx@gmail.com&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>這邊拿掉global 的話就會對專案直接做個別設定</li>
<li>存取的global使用者資料會在user根資料夾底下的.gitconfig檔案裡<figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">~/.gitconfig</span><br></pre></td></tr></table></figure>


</li>
</ul>
<ol start="2">
<li><p>列出當前使用者資料設定</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--list</span><br></pre></td></tr></table></figure>
</li>
<li><p>其實可以把git的預設編輯器改成 VSCODE<br><a href="https://stackoverflow.com/questions/30024353/how-to-use-visual-studio-code-as-default-editor-for-git">https://stackoverflow.com/questions/30024353/how-to-use-visual-studio-code-as-default-editor-for-git</a></p>
</li>
<li><p>git 的操作指令其實也可以寫alias(縮寫)</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global alias.co checkout</span><br><span class="line">&#x2F;&#x2F;把checkout指令改成co</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global alias.l &quot;log--oneline--graph&quot;</span><br><span class="line">&#x2F;&#x2F;也可以把一些比較複雜的指令改成alias</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global alias.ls &#39;log --graph --pretty&#x3D;format:&quot;%h &lt;%an&gt; %ar %s&quot;&#39;</span><br><span class="line">&#x2F;&#x2F;or more complicated</span><br><span class="line">&#x2F;&#x2F;把git log的格式簡化用</span><br></pre></td></tr></table></figure>

<h2 id="專案git初始化的流程"><a href="#專案git初始化的流程" class="headerlink" title="專案git初始化的流程"></a>專案git初始化的流程</h2><ol>
<li><code>cd &lt;folder&gt;</code></li>
<li><code>git init</code></li>
<li></li>
</ol>
<p><code>git add --all</code></p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">add</span> -A stages all changes</span><br><span class="line"></span><br><span class="line">git <span class="built_in">add</span> . stages <span class="built_in">new</span> <span class="built_in">files</span> <span class="keyword">and</span> modifications, <span class="keyword">without</span> deletions</span><br><span class="line"></span><br><span class="line">git <span class="built_in">add</span> -u stages modifications <span class="keyword">and</span> deletions, <span class="keyword">without</span> <span class="built_in">new</span> <span class="built_in">files</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li><code>git commit -m &lt;commit log&gt;</code></li>
</ol>
]]></content>
      <categories>
        <category>前端技術學習心得</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>高見龍為自己學 git 學習筆記-ep2</title>
    <url>/WFX-Maniac/2020/11/26/%E9%AB%98%E8%A6%8B%E9%BE%8D%E7%82%BA%E8%87%AA%E5%B7%B1%E5%AD%B8%20git%20%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-ep2/</url>
    <content><![CDATA[<h2 id="關於git-add的一些常識"><a href="#關於git-add的一些常識" class="headerlink" title="關於git add的一些常識"></a>關於git add的一些常識</h2><p>當我git add 一個檔案之後, 我如果再去修改他, 接著再commit。<br>其實在這個commit，git 並不會去紀錄該檔案的改動, 因為這個檔案只是被加到暫存區而已，git沒有辦法去refer到他的歷史改動狀況。</p>
<p>所以建議如果要git add檔案, 一律add完之後commit一次再做改動</p>
<blockquote>
<p>要commit之前一定要先add –all, 或者可以直接使用 git commit -a</p>
</blockquote>
<blockquote>
<p>想要add 一個資料夾, 包括底下的所有child folder, 可以使用git add ., 如果是想要 add 整個專案的內容，則可以用git add –all</p>
</blockquote>
<blockquote>
<p>git commit –allowed-empty -m “” 這樣寫就可以產生一個空的commit點ˊ<br>log</p>
</blockquote>
<blockquote>
<p>git 可以分成 工作目錄/暫存區/儲存區<br>用git add 把檔案從工作目錄記錄到暫存區, 用git commit 把檔案從暫存區記錄到儲存區</p>
</blockquote>
<h2 id="git-log-內容有些什麼"><a href="#git-log-內容有些什麼" class="headerlink" title="git log 內容有些什麼"></a>git log 內容有些什麼</h2><p>可以看到每一個commit點</p>
<ol>
<li>commit 的人是誰?</li>
<li>時間點</li>
<li>commit log</li>
</ol>
<blockquote>
<p>可以搭配 –oneline 或 –graph 來做不同模式的log顯示<br>可以用 –author 查詢特定開發者的commit內容<br>–author=”” 的使用, 如果開發者有兩位以上, 可以使用 userA | userB<br>–grep=”” 的使用, 可以尋找commit log裡面有特定字串的commit點<br>-S”” 的使用, 可以尋找commit 點之中，改動內容含有特定字串的commit 點<br>–since=”” &amp; –until=”” &amp; –after=”2019-01”  可以顯示特定時間點區間的commit點</p>
</blockquote>
<h2 id="git-rm-是幹嘛用的-跟一般的rm-差在哪裡"><a href="#git-rm-是幹嘛用的-跟一般的rm-差在哪裡" class="headerlink" title="git rm 是幹嘛用的? 跟一般的rm 差在哪裡?"></a>git rm 是幹嘛用的? 跟一般的rm 差在哪裡?</h2><p>git rm 等於 先使用一般的rm , 然後再把這個rm 的改動 用add 加到暫存區</p>
<blockquote>
<p>可以使用 –cached ，這樣會變成單純的把檔案與git 斷聯，但是不會實際刪除檔案, 這樣該檔案在做完這個動作之後就會變成 untracked了</p>
</blockquote>
<h2 id="git-mv-改變檔名"><a href="#git-mv-改變檔名" class="headerlink" title="git mv 改變檔名"></a>git mv 改變檔名</h2><p>例如</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">mv</span> <span class="selector-tag">aa</span><span class="selector-class">.html</span> <span class="selector-tag">bb</span><span class="selector-class">.html</span></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>前端技術學習心得</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>高見龍為自己學 git 學習筆記-ep3</title>
    <url>/WFX-Maniac/2020/11/26/%E9%AB%98%E8%A6%8B%E9%BE%8D%E7%82%BA%E8%87%AA%E5%B7%B1%E5%AD%B8%20git%20%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-ep3/</url>
    <content><![CDATA[<h2 id="git-clone專案的方法"><a href="#git-clone專案的方法" class="headerlink" title="git clone專案的方法"></a>git clone專案的方法</h2><p>說到clone專案(這邊以github為例), 一般狀況下有下面幾種比較常見的狀況</p>
<h3 id="作法一-遠端git倉庫直接clone到本地"><a href="#作法一-遠端git倉庫直接clone到本地" class="headerlink" title="作法一(遠端git倉庫直接clone到本地)"></a>作法一(遠端git倉庫直接clone到本地)</h3><ol>
<li>首先第一步當然是直接在遠端倉庫的網頁(例如github的repo頁面)先開一個repo</li>
<li>再來打開自己電腦的command line(或是也可以使用Vscode等IDE自帶的終端), 利用bash指令去把當前資料夾位置移到想要存放本地repo資料夾的地方</li>
<li>然後就直接輸入<code>git clone &lt;遠端repo位址&gt;</code></li>
<li>這樣就可以創建出一個和遠端倉庫關聯的本地倉庫</li>
</ol>
<h3 id="作法二-本地已經有一個裡面有檔案的資料夾-然後在遠端也有一個裡面有東西的git倉庫-上面有master-可能也有master以外的分支-想要把本地的東西推到遠端"><a href="#作法二-本地已經有一個裡面有檔案的資料夾-然後在遠端也有一個裡面有東西的git倉庫-上面有master-可能也有master以外的分支-想要把本地的東西推到遠端" class="headerlink" title="作法二(本地已經有一個裡面有檔案的資料夾, 然後在遠端也有一個裡面有東西的git倉庫,上面有master, 可能也有master以外的分支, 想要把本地的東西推到遠端)"></a>作法二(本地已經有一個裡面有檔案的資料夾, 然後在遠端也有一個裡面有東西的git倉庫,上面有master, 可能也有master以外的分支, 想要把本地的東西推到遠端)</h3><ol>
<li>首先第一步先把本地的資料夾做git的初始化 <code>git init</code></li>
<li>再來 <code>git remote add &lt;遠端資料庫的暱稱, 可以自訂&gt; &lt;遠端資料庫的位址&gt;</code></li>
<li>上面這個動作是去為本地的這個倉庫”標記”, 他有關聯上哪一個遠端倉庫(所以其實一個本地倉庫可以關聯上很多個遠端倉庫，但是暱稱不能重複)</li>
<li>所以說如果我想要去關聯一個新的遠端倉庫(我們這邊取名為apple), 那就是<code>git remote add apple &lt;apple的位址&gt;</code></li>
<li>接下來因為我們這邊的狀況是本地已經有檔案, 想要推到遠端, 但遠端因為也是有東西的，所以這邊我們其實會有兩種做法，我們接著描述</li>
</ol>
<h4 id="作法二其1"><a href="#作法二其1" class="headerlink" title="作法二其1"></a>作法二其1</h4><ol>
<li>直接 <code>git fetch &lt;指定遠端倉庫的暱稱&gt;</code> 這邊以apple為例, 也就是 <code>git fetch apple</code></li>
<li>這麼做之後就可以把遠端倉庫的最新改動、所有分支與檔案下載回來, 而我們這邊因為本地倉庫是新開的，這個狀況叫做 “unborn branch”, 是一個只有HEAD在本地的狀況(這部分以後再討論)。</li>
<li>在這邊講的”unborn branch”的狀況下去做 fetch, 以這邊來講，就會把遠端的master下載回拉本地端，這樣就會在本地端看到一個origin/master分支, 這個就是遠端master在本地的備份, 這時候我們可以直接<code>git checkout master</code>或者直接把本地本來就存在的檔案做<code>git add -A &amp;&amp; git commit -m &#39;initial msg&#39;</code>, 這樣就會發現第4步的狀況。</li>
<li>我們會發現本地出現了本地自己的master(關於 unborn branch的介紹可以看這一篇<a href="https://stackoverflow.com/questions/21252876/git-repository-created-without-a-master-branch">stackoverflow</a> )。</li>
<li>如果我們在4.的時候是透過<code>git checkout master</code>產生本地master的話，會發現本地master是會自動跟遠端的備份(origin/master)同步好的, 而且遠端master也會同時被視為上游分支(上游分支的解釋可以看第7步)，這樣就可以直接跳過第6步進階到第7步。</li>
<li>但是如果我們在4的時候是透過<code>git add -A &amp;&amp; git commit -m &#39;initial msg&#39;</code>去走到第5步，則會發現本地master只有原本就存在本地的檔案，這時候如果用的IDE是 vscode, 如過利用左下角的分支切換功能, 去切到apple/master , 就會發現報錯 “Git: fatal: A branch named ‘master’ already exists.”，這種狀況下我們要去執行 <code>git pull apple master</code>，然後就會發現多出了一個新的分支叫做 FETCHED_HEAD，我們接著可以進階到第7步(FETCHED_HEAD只是暫時的, 第七步結束後,FETCHED_HEAD就會消失, IDE也不會再報一樣的錯)。</li>
<li><code>git push -u &lt;遠端倉庫的暱稱&gt; &lt;想要push過去的遠端倉庫分支&gt;</code> , 以這邊來講就是<code>git push -u apple master</code></li>
<li>這邊的 <strong>-u</strong> 代表的是去把apple master去定為這個分支的上游分支，這樣以後在這個分支上做的git push, 最後都會把改動push到apple master。</li>
<li>做完最後一步之後就會發現遠端repo的網頁上master的內容已經跟本地同步了</li>
</ol>
<h4 id="作法二其2"><a href="#作法二其2" class="headerlink" title="作法二其2"></a>作法二其2</h4><ol>
<li>直接 <code>git pull &lt;指定遠端倉庫的暱稱&gt; &lt;指定想要pull下來的遠端倉庫分支&gt;</code>，這邊以apple上的master分支為例, 也就是 <code>git pull apple master</code></li>
<li>其實這種狀況會跟前面其一的<code>git add -A &amp;&amp; git commit -m &#39;initial msg&#39;</code>狀況類似，接著也是直接<code>git push -u &lt;遠端倉庫的暱稱&gt; &lt;想要push過去的遠端倉庫分支&gt;</code> 就完事了（當然，如果有改動要commit的記得要commit）。</li>
</ol>
]]></content>
      <categories>
        <category>前端技術學習心得</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
</search>
